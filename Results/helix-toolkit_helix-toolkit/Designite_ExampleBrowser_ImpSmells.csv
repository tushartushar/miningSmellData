Implementation smell,Namespace,Class,File,Method,Description
Long Method,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The method has 103 lines of code.
Long Method,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The method has 118 lines of code.
Complex Method,DataTemplateDemo,DataTemplate3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\DataTemplate3D.cs,UpdateBindingSource,Cyclomatic complexity of the method is 12
Complex Method,PointsAndLinesBinding,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLinesBinding\MainWindow.xaml.cs,UpdatePoints,Cyclomatic complexity of the method is 8
Complex Method,ExportDemo,OctaneLauncher,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\OctaneLauncher.cs,Start,Cyclomatic complexity of the method is 8
Complex Method,FractalDemo,MengerSponge,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MengerSponge.cs,SubDivide,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,HalfEdgeMeshVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\HalfEdgeMeshVisual3D.cs,UpdateVisuals,Cyclomatic complexity of the method is 9
Complex Method,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,Cyclomatic complexity of the method is 11
Complex Method,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,Cyclomatic complexity of the method is 13
Complex Method,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,Cyclomatic complexity of the method is 9
Complex Method,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,OnCompositionTargetRendering,Cyclomatic complexity of the method is 14
Complex Method,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,Cyclomatic complexity of the method is 9
Complex Method,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,Cyclomatic complexity of the method is 9
Complex Method,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,Cyclomatic complexity of the method is 13
Complex Method,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,Cyclomatic complexity of the method is 15
Long Parameter List,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,BuildRailing,The method has 5 parameters. Parameters: railingBuilder' bases' height' diameter' railings
Long Parameter List,ExampleBrowser,ScreenCapture,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\ScreenCapture.cs,BitBlt,The method has 9 parameters. Parameters: hdcDest' xDest' yDest' wDest' hDest' hdcSource' xSrc' ySrc' rop
Long Parameter List,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,ExtrudeText,The method has 9 parameters. Parameters: builder' text' font' fontStyle' fontWeight' fontSize' textDirection' p0' p1
Long Parameter List,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,Project,The method has 6 parameters. Parameters: v' p0' x' y' z' h
Long Parameter List,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,GetTextOutlines,The method has 5 parameters. Parameters: text' fontName' fontStyle' fontWeight' fontSize
Long Parameter List,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,FlattenBezier,The method has 5 parameters. Parameters: p1' p2' p3' p4' n
Long Parameter List,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,Group,The method has 5 parameters. Parameters: name' origin' xAngle' yAngle' zAngle
Long Parameter List,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFace,The method has 6 parameters. Parameters: face' center' width' length' height' brush
Long Parameter List,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,CreatePath,The method has 6 parameters. Parameters: min' max' n' fx' fy' fz
Long Parameter List,WiiDemo,MouseHelper,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MouseHelper.cs,mouse_event,The method has 5 parameters. Parameters: dwFlags' dx' dy' dwData' dwExtraInf
Long Identifier,DataTemplateDemo,ItemsVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\ItemsVisual3D.cs,,The length of the parameter RefreshChildrenOnChangeProperty is 31.
Long Statement,BuildingDemo,ChimneyVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\ChimneyVisual3D.cs,AppearanceChanged,The length of the statement  "                builder.AddCone(this.Position + new Vector3D(0' 0' y0)' new Vector3D(0' 0' 1)' d0 / 2' d1 / 2' y1 - y0' i == 0' i == this.Bands - 1' 20); " is 137.
Long Statement,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The length of the statement  "                    wallBuilder.AddBox(new Point3D(0' 0' y0 + this.FloorThickness / 2)' this.Length + 0.2' this.Width + 0.2' this.FloorThickness); " is 126.
Long Statement,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The length of the statement  "            roofBuilder.AddExtrudedSegments(roofSection' new Vector3D(0' -1' 0)' new Point3D(-this.Length / 2' 0' 0)' new Point3D(this.Length / 2' 0' 0)); " is 142.
Long Statement,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The length of the statement  "            wallBuilder.AddPolygon(new[] { p0' p6' p7 }' new Vector3D(0' -1' 0)' new Vector3D(0' 0' 1)' new Point3D(-this.Length / 2' 0' 0)); " is 129.
Long Statement,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The length of the statement  "            wallBuilder.AddPolygon(new[] { p0' p6' p7 }' new Vector3D(0' 1' 0)' new Vector3D(0' 0' 1)' new Point3D(this.Length / 2' 0' 0)); " is 127.
Long Statement,BuildingDemo,FenceVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\FenceVisual3D.cs,PoleTextureChanged,The length of the statement  "            this.postsModel.Material = this.postsModel.BackMaterial = this.PoleTexture != null ? MaterialHelper.CreateMaterial(this.PoleTexture) : null; " is 140.
Long Statement,ExampleBrowser,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\MainWindow.xaml.cs,ListBoxMouseDoubleClick,The length of the statement  "                        MessageBox.Show(window' "Demo image updated. Now add `" + example.ThumbnailFileName + "` as a resource in the Images folder in the ExampleBrowser project."); " is 157.
Long Statement,ExampleBrowser,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\MainWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ListBox)(target)).MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ListBoxMouseDoubleClick); " is 143.
Long Statement,DataTemplateDemo,DataTemplate3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\DataTemplate3D.cs,CreateItem,The length of the statement  "            // clear references from previous runs because they belong to another object (reflection results do not need to be cleared) " is 123.
Long Statement,DataTemplateDemo,DataTemplate3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\DataTemplate3D.cs,ObjectToXaml,The length of the statement  "                var contentNode = xmlDoc.DocumentElement.ChildNodes.Cast<XmlNode>().Where(n => n.LocalName.EndsWith(".Content")).FirstOrDefault(); " is 130.
Long Statement,DataTemplateDemo,DataTemplate3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\DataTemplate3D.cs,ObjectToXaml,The length of the statement  "                if (contentNode != null && (contentNode.ChildNodes.Count != 1 || !new[] { "Binding"' "MultiBinding" }.Contains(contentNode.ChildNodes[0].LocalName))) " is 149.
Long Statement,DataTemplateDemo,DataTemplate3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\DataTemplate3D.cs,UpdateKnownReferencesInTree,The length of the statement  "                    if (curPathSeg.Name == othPathSeg.Name && curPathSeg.IsProperty == othPathSeg.IsProperty && curPathSeg.Position == othPathSeg.Position) " is 135.
Long Statement,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,IsPointInPolygon,The length of the statement  "                if ((polygon[i].Y < testPoint.Y && polygon[j].Y >= testPoint.Y) || (polygon[j].Y < testPoint.Y && polygon[i].Y >= testPoint.Y)) " is 127.
Long Statement,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,IsPointInPolygon,The length of the statement  "                    if (polygon[i].X + ((testPoint.Y - polygon[i].Y) / (polygon[j].Y - polygon[i].Y) * (polygon[j].X - polygon[i].X)) < testPoint.X) " is 128.
Long Statement,MemoryLeakTest,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MemoryLeakTest\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ExampleBrowser;component/examples/memoryleaktest/mainwindow.xaml"' System.UriKind.Relative); " is 138.
Long Statement,MvvmCameraDemo,ShellView,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmCameraDemo\ShellView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ExampleBrowser;component/examples/mvvmcamerademo/shellview.xaml"' System.UriKind.Relative); " is 137.
Long Statement,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The length of the statement  "            return new ModelVisual3D { Content = new GeometryModel3D { Geometry = diceMesh.ToMesh()' Material = Materials.White } }; " is 120.
Long Statement,FlightsDemo,App,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\App.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ExampleBrowser;component/examples/flights/app.xaml"' System.UriKind.Relative); " is 124.
Long Statement,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,LatLonToPoint,The length of the statement  "            return new Point3D(EarthRadius * Math.Cos(latitude) * Math.Cos(longitude)' EarthRadius * Math.Cos(latitude) * Math.Sin(longitude)' EarthRadius * Math.Sin(latitude)); " is 165.
Long Statement,MazeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainWindow.xaml.cs,WindowKeyDown,The length of the statement  "                var d = new SaveFileDialog { Title = "Export maze"' Filter = Exporters.Filter' DefaultExt = Exporters.DefaultExtension }; " is 121.
Long Statement,PenroseTriangleDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PenroseTriangle\MainWindow.xaml.cs,WindowKeyDown,The length of the statement  "                var d = new SaveFileDialog { Title = "Export model"' Filter = Exporters.Filter' DefaultExt = Exporters.DefaultExtension }; " is 122.
Long Statement,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,AddPanel,The length of the statement  "            for (int i = 0; i < coords.Length / 3; i++) points[i] = new Point3D(coords[i * 3]' coords[i * 3 + 1]' coords[i * 3 + 2]); " is 121.
Long Statement,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateCubelets,The length of the statement  "                            cubelet.Children.Add(CreateFace(face' center' size * (1 - spacing)' size * (1 - spacing)' size * (1 - spacing)' color)); " is 120.
Long Statement,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateDrawingBrush,The length of the statement  "            dg.Children.Add(new GeometryDrawing { Geometry = new RectangleGeometry(new Rect(0.25' 0.25' 0.5' 0.5))' Brush = Brushes.Black }); " is 129.
Long Statement,SubdivisionDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Subdivision\MainWindow.xaml.cs,FileOpen_Click,The length of the statement  "            var d = new OpenFileDialog() { Filter = "OFF files (*.off)|*.off"' InitialDirectory = Path.Combine(Directory.GetCurrentDirectory()' @"Examples\Subdivision\Models\") }; " is 167.
Long Statement,SubdivisionDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Subdivision\MainWindow.xaml.cs,UpdateModel,The length of the statement  "            subdivisionStatus.Text = string.Format("Subdivision time: {0} ms' mesh generation time: {1} ms'  triangles: {2} (original mesh: {3})"' subDivisionTime' meshGenerationTime' (mesh3.Faces.Count)' (triangularMesh.TriangleIndices.Count / 3)); " is 237.
Long Statement,TextDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Text\MainWindow.xaml.cs,CreateItems,The length of the statement  "                this.TextItems.Add(new SpatialTextItem { Text = word' Position = new Point3D(x' y' 0)' TextDirection = new Vector3D(1' 0' 0)' UpDirection = new Vector3D(0' 1' 0) }); " is 165.
Long Statement,TextDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Text\MainWindow.xaml.cs,CreateItems,The length of the statement  "            this.TextItems3.Add(new BillboardTextItem { Text = "This is a billboard with a 'pin'."' Position = new Point3D(0.5' 0' 0.5)' DepthOffset = 0' WorldDepthOffset = 0.2 }); " is 168.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,IsPointInPolygon,The conditional expression  "(polygon[i].Y < testPoint.Y && polygon[j].Y >= testPoint.Y) || (polygon[j].Y < testPoint.Y && polygon[i].Y >= testPoint.Y)"  is complex.
Complex Conditional,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CoercePosition,The conditional expression  "i >= 0 && i < m && j >= 0 && j < n && position.Z >= 0 && position.Z < 2"  is complex.
Complex Conditional,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The conditional expression  "j > 0 && j < mx - 1 && i > 0 && i < nvert - 1 && k > 0 && k < mx - 1"  is complex.
Complex Conditional,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateCubelets,The conditional expression  "face == 0 && i == 0 && j == 1 && k == 1"  is complex.
Empty Catch Block,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,OnClosing,The method has an empty catch block.
Magic Number,BuildingDemo,ChimneyVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\ChimneyVisual3D.cs,ChimneyVisual3D,The following statement contains a magic number: this.redbands.Material = MaterialHelper.CreateMaterial(Brushes.Red' ambient: 10);
Magic Number,BuildingDemo,ChimneyVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\ChimneyVisual3D.cs,ChimneyVisual3D,The following statement contains a magic number: this.whitebands.Material = MaterialHelper.CreateMaterial(Brushes.White' ambient: 10);
Magic Number,BuildingDemo,ChimneyVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\ChimneyVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < this.Bands; i++)              {                  var f0 = (double)i / this.Bands;                  var f1 = (double)(i + 1) / this.Bands;                  var y0 = this.Height * f0;                  var y1 = this.Height * f1;                  var d0 = (this.BaseDiameter * (1 - f0)) + (this.TopDiameter * f0);                  var d1 = (this.BaseDiameter * (1 - f1)) + (this.TopDiameter * f1);                  var builder = (this.Bands - i) % 2 == 1 ? redbuilder : whitebuilder;                  builder.AddCone(this.Position + new Vector3D(0' 0' y0)' new Vector3D(0' 0' 1)' d0 / 2' d1 / 2' y1 - y0' i == 0' i == this.Bands - 1' 20);              }
Magic Number,BuildingDemo,ChimneyVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\ChimneyVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < this.Bands; i++)              {                  var f0 = (double)i / this.Bands;                  var f1 = (double)(i + 1) / this.Bands;                  var y0 = this.Height * f0;                  var y1 = this.Height * f1;                  var d0 = (this.BaseDiameter * (1 - f0)) + (this.TopDiameter * f0);                  var d1 = (this.BaseDiameter * (1 - f1)) + (this.TopDiameter * f1);                  var builder = (this.Bands - i) % 2 == 1 ? redbuilder : whitebuilder;                  builder.AddCone(this.Position + new Vector3D(0' 0' y0)' new Vector3D(0' 0' 1)' d0 / 2' d1 / 2' y1 - y0' i == 0' i == this.Bands - 1' 20);              }
Magic Number,BuildingDemo,ChimneyVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\ChimneyVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < this.Bands; i++)              {                  var f0 = (double)i / this.Bands;                  var f1 = (double)(i + 1) / this.Bands;                  var y0 = this.Height * f0;                  var y1 = this.Height * f1;                  var d0 = (this.BaseDiameter * (1 - f0)) + (this.TopDiameter * f0);                  var d1 = (this.BaseDiameter * (1 - f1)) + (this.TopDiameter * f1);                  var builder = (this.Bands - i) % 2 == 1 ? redbuilder : whitebuilder;                  builder.AddCone(this.Position + new Vector3D(0' 0' y0)' new Vector3D(0' 0' 1)' d0 / 2' d1 / 2' y1 - y0' i == 0' i == this.Bands - 1' 20);              }
Magic Number,BuildingDemo,ChimneyVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\ChimneyVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < this.Bands; i++)              {                  var f0 = (double)i / this.Bands;                  var f1 = (double)(i + 1) / this.Bands;                  var y0 = this.Height * f0;                  var y1 = this.Height * f1;                  var d0 = (this.BaseDiameter * (1 - f0)) + (this.TopDiameter * f0);                  var d1 = (this.BaseDiameter * (1 - f1)) + (this.TopDiameter * f1);                  var builder = (this.Bands - i) % 2 == 1 ? redbuilder : whitebuilder;                  builder.AddCone(this.Position + new Vector3D(0' 0' y0)' new Vector3D(0' 0' 1)' d0 / 2' d1 / 2' y1 - y0' i == 0' i == this.Bands - 1' 20);              }
Magic Number,BuildingDemo,KerbVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\KerbVisual3D.cs,AppearanceChanged,The following statement contains a magic number: int m = 41;
Magic Number,BuildingDemo,KerbVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\KerbVisual3D.cs,AppearanceChanged,The following statement contains a magic number: double n = 4;
Magic Number,BuildingDemo,KerbVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\KerbVisual3D.cs,AppearanceChanged,The following statement contains a magic number: double a = this.Width / 2;
Magic Number,BuildingDemo,KerbVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\KerbVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < m; i++)              {                  double t = Math.PI * i / (m - 1);                  section.Add(new Point(                      a * Math.Sign(Math.Cos(t)) * Math.Pow(Math.Abs(Math.Cos(t))' 2 / n)'                      -b * Math.Sign(Math.Sin(t)) * Math.Pow(Math.Abs(Math.Sin(t))' 2 / n)));              }
Magic Number,BuildingDemo,KerbVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\KerbVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < m; i++)              {                  double t = Math.PI * i / (m - 1);                  section.Add(new Point(                      a * Math.Sign(Math.Cos(t)) * Math.Pow(Math.Abs(Math.Cos(t))' 2 / n)'                      -b * Math.Sign(Math.Sin(t)) * Math.Pow(Math.Abs(Math.Sin(t))' 2 / n)));              }
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,HouseVisual3D,The following statement contains a magic number: this.roof.Material = MaterialHelper.CreateMaterial(Brushes.Brown' ambient: 10);
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,HouseVisual3D,The following statement contains a magic number: this.walls.Material = MaterialHelper.CreateMaterial(Brushes.White' ambient: 10);
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < this.Stories; i++)              {                  if (i > 0 && this.FloorThickness > 0)                  {                      wallBuilder.AddBox(new Point3D(0' 0' y0 + this.FloorThickness / 2)' this.Length + 0.2' this.Width + 0.2' this.FloorThickness);                      y0 += this.FloorThickness;                  }                    wallBuilder.AddBox(new Point3D(0' 0' y0 + this.StoryHeight / 2)' this.Length' this.Width' this.StoryHeight);                  y0 += this.StoryHeight;              }
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < this.Stories; i++)              {                  if (i > 0 && this.FloorThickness > 0)                  {                      wallBuilder.AddBox(new Point3D(0' 0' y0 + this.FloorThickness / 2)' this.Length + 0.2' this.Width + 0.2' this.FloorThickness);                      y0 += this.FloorThickness;                  }                    wallBuilder.AddBox(new Point3D(0' 0' y0 + this.StoryHeight / 2)' this.Length' this.Width' this.StoryHeight);                  y0 += this.StoryHeight;              }
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < this.Stories; i++)              {                  if (i > 0 && this.FloorThickness > 0)                  {                      wallBuilder.AddBox(new Point3D(0' 0' y0 + this.FloorThickness / 2)' this.Length + 0.2' this.Width + 0.2' this.FloorThickness);                      y0 += this.FloorThickness;                  }                    wallBuilder.AddBox(new Point3D(0' 0' y0 + this.StoryHeight / 2)' this.Length' this.Width' this.StoryHeight);                  y0 += this.StoryHeight;              }
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < this.Stories; i++)              {                  if (i > 0 && this.FloorThickness > 0)                  {                      wallBuilder.AddBox(new Point3D(0' 0' y0 + this.FloorThickness / 2)' this.Length + 0.2' this.Width + 0.2' this.FloorThickness);                      y0 += this.FloorThickness;                  }                    wallBuilder.AddBox(new Point3D(0' 0' y0 + this.StoryHeight / 2)' this.Length' this.Width' this.StoryHeight);                  y0 += this.StoryHeight;              }
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var theta = Math.PI / 180 * this.RoofAngle;
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var y1 = y0 + Math.Tan(theta) * this.Width / 2;
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var p1 = new Point(this.Width / 2 + 0.2 * Math.Cos(theta)' y0 - 0.2 * Math.Sin(theta));
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var p1 = new Point(this.Width / 2 + 0.2 * Math.Cos(theta)' y0 - 0.2 * Math.Sin(theta));
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var p1 = new Point(this.Width / 2 + 0.2 * Math.Cos(theta)' y0 - 0.2 * Math.Sin(theta));
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: roofBuilder.AddExtrudedSegments(roofSection' new Vector3D(0' -1' 0)' new Point3D(-this.Length / 2' 0' 0)' new Point3D(this.Length / 2' 0' 0));
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: roofBuilder.AddExtrudedSegments(roofSection' new Vector3D(0' -1' 0)' new Point3D(-this.Length / 2' 0' 0)' new Point3D(this.Length / 2' 0' 0));
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: roofBuilder.AddPolygon(cap' new Vector3D(0' -1' 0)' new Vector3D(0' 0' 1)' new Point3D(-this.Length / 2' 0' 0));
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: roofBuilder.AddPolygon(cap' new Vector3D(0' 1' 0)' new Vector3D(0' 0' 1)' new Point3D(this.Length / 2' 0' 0));
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var p6 = new Point(this.Width / 2' y0);
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var p7 = new Point(-this.Width / 2' y0);
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: wallBuilder.AddPolygon(new[] { p0' p6' p7 }' new Vector3D(0' -1' 0)' new Vector3D(0' 0' 1)' new Point3D(-this.Length / 2' 0' 0));
Magic Number,BuildingDemo,HouseVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\HouseVisual3D.cs,AppearanceChanged,The following statement contains a magic number: wallBuilder.AddPolygon(new[] { p0' p6' p7 }' new Vector3D(0' 1' 0)' new Vector3D(0' 0' 1)' new Point3D(this.Length / 2' 0' 0));
Magic Number,BuildingDemo,FenceVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\FenceVisual3D.cs,AppearanceChanged,The following statement contains a magic number: foreach (var p1 in DistributePoles(this.Positions' this.PoleDistance))              {                  var p2 = p1 + new Vector3D(0' 0' this.Height);                  builder.AddCylinder(p1' p2' this.Diameter' 36);              }
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,SiloVisual3D,The following statement contains a magic number: this.walls.Material = MaterialHelper.CreateMaterial(Brushes.White' ambient: 10);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,SiloVisual3D,The following statement contains a magic number: this.railing.Material = MaterialHelper.CreateMaterial(Brushes.Silver' ambient: 10);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,SiloVisual3D,The following statement contains a magic number: this.stairs.Material = MaterialHelper.CreateMaterial(Brushes.Brown' ambient: 10);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var p1 = new Point(this.Diameter / 2' 0);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var p2 = new Point(this.Diameter / 2' this.Height);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var p3 = new Point(this.DomeDiameter / 2' this.Height);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var sectionIndices = new List<int> { 0' 1' 2' 3' 4' 5 };
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var sectionIndices = new List<int> { 0' 1' 2' 3' 4' 5 };
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var sectionIndices = new List<int> { 0' 1' 2' 3' 4' 5 };
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var sectionIndices = new List<int> { 0' 1' 2' 3' 4' 5 };
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: int n = 40;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = n; i >= 0; i--)              {                  double x = (double)i / n;                  double y = x * x;                  if (i < n)                  {                      sectionIndices.Add(section.Count - 1);                      sectionIndices.Add(section.Count);                  }                    section.Add(new Point(x * this.DomeDiameter / 2' this.Height + (this.DomeHeight * (1 - y))));              }
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: builder.AddSurfaceOfRevolution(new Point3D(0' 0' 0)' new Vector3D(0' 0' 1)' section' sectionIndices' 80);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var treadDepth = 0.3;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var riseHeight = 0.15;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var thickness = 0.05;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var r = (this.Diameter * 0.5) + (width * 0.5);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var r = (this.Diameter * 0.5) + (width * 0.5);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var rp = (this.Diameter * 0.5) + (width * 0.95);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var rp = (this.Diameter * 0.5) + (width * 0.95);
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < steps; i++)              {                  var theta = treadDepth * i / r;                  var p = new Point3D(Math.Cos(theta) * r' Math.Sin(theta) * r' (riseHeight * i) + (thickness / 2));                  var x = new Vector3D(Math.Cos(theta)' Math.Sin(theta)' 0);                  var z = new Vector3D(0' 0' 1);                  var y = Vector3D.CrossProduct(z' x);                  stairBuilder.AddBox(p' x' y' width' treadDepth' thickness);                  railBases.Add(new Point3D(Math.Cos(theta) * rp' Math.Sin(theta) * rp' (riseHeight * i) + thickness));              }
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var railingHeight = 0.8;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var railingDiameter = 0.05;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var railings = 3;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var railingPostDistance = 0.5;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: var tr = (this.Diameter / 2) - railingDiameter;
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,AppearanceChanged,The following statement contains a magic number: for (int i = 0; i < topRailingPosts; i++)              {                  var theta = lastTheta + (2 * Math.PI * i / topRailingPosts);                  railBases.Add(new Point3D(Math.Cos(theta) * tr' Math.Sin(theta) * tr' this.Height));              }
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,BuildRailing,The following statement contains a magic number: foreach (var point in bases)              {                  railingBuilder.AddCylinder(point' point + new Vector3D(0' 0' height)' diameter' 10);              }
Magic Number,BuildingDemo,SiloVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\SiloVisual3D.cs,BuildRailing,The following statement contains a magic number: for (int i = 1; i <= railings; i++)              {                  var h = height * i / railings;                  var path = bases.Select(p => p + new Vector3D(0' 0' h)).ToArray();                  railingBuilder.AddTube(path' diameter' 10' false);              }
Magic Number,BuildingDemo,Superellipse,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\Superellipse.cs,ProvideValue,The following statement contains a magic number: int m = 400;
Magic Number,BuildingDemo,Superellipse,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\Superellipse.cs,ProvideValue,The following statement contains a magic number: for (int i = 0; i + 1 < m; i++)              {                  double t = 2 * Math.PI * i / (m - 2);                  c.Add(new Point3D(                      this.a * Math.Sign(Math.Cos(t)) * Math.Pow(Math.Abs(Math.Cos(t))' 2 / this.n)'                      this.b * Math.Sign(Math.Sin(t)) * Math.Pow(Math.Abs(Math.Sin(t))' 2 / this.n)'                      0));              }
Magic Number,BuildingDemo,Superellipse,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\Superellipse.cs,ProvideValue,The following statement contains a magic number: for (int i = 0; i + 1 < m; i++)              {                  double t = 2 * Math.PI * i / (m - 2);                  c.Add(new Point3D(                      this.a * Math.Sign(Math.Cos(t)) * Math.Pow(Math.Abs(Math.Cos(t))' 2 / this.n)'                      this.b * Math.Sign(Math.Sin(t)) * Math.Pow(Math.Abs(Math.Sin(t))' 2 / this.n)'                      0));              }
Magic Number,BuildingDemo,Superellipse,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\Superellipse.cs,ProvideValue,The following statement contains a magic number: for (int i = 0; i + 1 < m; i++)              {                  double t = 2 * Math.PI * i / (m - 2);                  c.Add(new Point3D(                      this.a * Math.Sign(Math.Cos(t)) * Math.Pow(Math.Abs(Math.Cos(t))' 2 / this.n)'                      this.b * Math.Sign(Math.Sin(t)) * Math.Pow(Math.Abs(Math.Sin(t))' 2 / this.n)'                      0));              }
Magic Number,BuildingDemo,Superellipse,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BuildingDemo\Superellipse.cs,ProvideValue,The following statement contains a magic number: for (int i = 0; i + 1 < m; i++)              {                  double t = 2 * Math.PI * i / (m - 2);                  c.Add(new Point3D(                      this.a * Math.Sign(Math.Cos(t)) * Math.Pow(Math.Abs(Math.Cos(t))' 2 / this.n)'                      this.b * Math.Sign(Math.Sin(t)) * Math.Pow(Math.Abs(Math.Sin(t))' 2 / this.n)'                      0));              }
Magic Number,ExampleBrowser,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\MainWindow.xaml.cs,ListBoxMouseDoubleClick,The following statement contains a magic number: if (example != null)              {                  var window = example.Create();                  window.Show();                    window.KeyDown += (s' args) =>                  {                      if (args.Key == Key.F12)                      {                          CreateThumbnail(window' 120' Path.Combine(@"..\..\..\Images\"' example.ThumbnailFileName));                          MessageBox.Show(window' "Demo image updated. Now add `" + example.ThumbnailFileName + "` as a resource in the Images folder in the ExampleBrowser project.");                          e.Handled = true;                      }                  };              }
Magic Number,DataTemplateDemo,GenericUIElement3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\GenericUIElement3D.cs,SetGeometry,The following statement contains a magic number: meshBuilder.AddBox(new Point3D(0' 0' 0)' 0.5' 0.5' 0.5);
Magic Number,DataTemplateDemo,GenericUIElement3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\GenericUIElement3D.cs,SetGeometry,The following statement contains a magic number: meshBuilder.AddBox(new Point3D(0' 0' 0)' 0.5' 0.5' 0.5);
Magic Number,DataTemplateDemo,GenericUIElement3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\GenericUIElement3D.cs,SetGeometry,The following statement contains a magic number: meshBuilder.AddBox(new Point3D(0' 0' 0)' 0.5' 0.5' 0.5);
Magic Number,DataTemplateDemo,DataTemplate3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\DataTemplate3D.cs,UpdateBindingSource,The following statement contains a magic number: if (segmentsToTraverse.Length > 0)              {                  // update object with last known reference                  var index = path.Count - segmentsToTraverse.Length - 1 - 1;                  if (index >= 0)                  {                      nestedObj = path.ElementAt(index)                                      .Reference;                  }                    foreach (var pathSegment in segmentsToTraverse)                  {                      nestedObj = GetValueOf(nestedObj' pathSegment);                      pathSegment.Reference = nestedObj;                        hasNewlyDiscoveredObjects = true;                  }              }              else              {                  // update object with last known reference                  nestedObj = path.ElementAt(path.Count - 2)                                  .Reference;              }
Magic Number,DataTemplateDemo,DataTemplate3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\DataTemplate3D.cs,UpdateBindingSource,The following statement contains a magic number: if (visual != null)              {                  var secondLastSegment = path.ElementAt(path.Count - 2);                  if (secondLastSegment.PublicDependencyProperties == null)                      secondLastSegment.PublicDependencyProperties = type.GetPublicStaticFields().ToArray();                    var lastSegmentName = path.Last().Name;                    foreach (var fi in secondLastSegment.PublicDependencyProperties)                  {                      var dp = fi.GetValue(null) as DependencyProperty;                      if (dp != null && dp.Name == lastSegmentName)                      {                          var binding = BindingOperations.GetBinding(visual' dp);                          if (binding != null && binding.Source == null)                          {                              BindingOperations.ClearBinding(visual' dp);                                var b = binding.Clone();                              b.Source = dataContext;                                BindingOperations.SetBinding(visual' dp' b);                                break;                          }                            var multiBinding = BindingOperations.GetMultiBinding(visual' dp);                          if (multiBinding != null)                          {                              var newMultiBinding = multiBinding.Clone();                                for (int a = 0; a < multiBinding.Bindings.Count; a++)                              {                                  var innerBinding = multiBinding.Bindings[a] as Binding;                                  if (innerBinding != null && innerBinding.Source == null)                                  {                                      var newInnerBinding = innerBinding.Clone();                                      newInnerBinding.Source = dataContext;                                        newMultiBinding.Bindings.Add(newInnerBinding);                                  }                                  else                                  {                                      newMultiBinding.Bindings.Add(multiBinding.Bindings[a]);                                  }                              }                                BindingOperations.ClearBinding(visual' dp);                              BindingOperations.SetBinding(visual' dp' newMultiBinding);                          }                      }                  }              }
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.FixedElements = new List<Element>                               {                                   new Element                                       {                                           Position = new Point3D(0' 0' 0)'                                           Material = Materials.Red'                                           Radius = 1                                       }'                                   new Element                                       {                                           Position = new Point3D(-0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }'                                   new Element                                       {                                           Position = new Point3D(0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }                               };
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.FixedElements = new List<Element>                               {                                   new Element                                       {                                           Position = new Point3D(0' 0' 0)'                                           Material = Materials.Red'                                           Radius = 1                                       }'                                   new Element                                       {                                           Position = new Point3D(-0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }'                                   new Element                                       {                                           Position = new Point3D(0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }                               };
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.FixedElements = new List<Element>                               {                                   new Element                                       {                                           Position = new Point3D(0' 0' 0)'                                           Material = Materials.Red'                                           Radius = 1                                       }'                                   new Element                                       {                                           Position = new Point3D(-0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }'                                   new Element                                       {                                           Position = new Point3D(0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }                               };
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.FixedElements = new List<Element>                               {                                   new Element                                       {                                           Position = new Point3D(0' 0' 0)'                                           Material = Materials.Red'                                           Radius = 1                                       }'                                   new Element                                       {                                           Position = new Point3D(-0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }'                                   new Element                                       {                                           Position = new Point3D(0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }                               };
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.FixedElements = new List<Element>                               {                                   new Element                                       {                                           Position = new Point3D(0' 0' 0)'                                           Material = Materials.Red'                                           Radius = 1                                       }'                                   new Element                                       {                                           Position = new Point3D(-0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }'                                   new Element                                       {                                           Position = new Point3D(0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }                               };
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.FixedElements = new List<Element>                               {                                   new Element                                       {                                           Position = new Point3D(0' 0' 0)'                                           Material = Materials.Red'                                           Radius = 1                                       }'                                   new Element                                       {                                           Position = new Point3D(-0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }'                                   new Element                                       {                                           Position = new Point3D(0.757' 0.586' 0)'                                           Material = Materials.White'                                           Radius = 0.6                                       }                               };
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementCommand = new DelegateCommand(() =>              {                  if (this.ObservableElements.Count % 3 == 1)                  {                      var modelBuilder = new MeshBuilder();                      modelBuilder.AddCylinder(new Point3D(0' 0' 0)' new Point3D(0' 1' 0)' 0.75' 15);                        ModelElement model = new ModelElement1();                      if (this.ObservableElements.Count % 2 == 0)                          model = new ModelElement2();                        model.IsVisible = true;                      model.Model = new GeometryModel3D                      {                          Material = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          BackMaterial = new DiffuseMaterial(System.Windows.Media.Brushes.Orange)'                          Geometry = modelBuilder.ToMesh()                      };                      model.Position = new Point3D(0' -3' this.ObservableElements.Count);                        this.ObservableElements.Add(model);                  }                  else if (this.ObservableElements.Count % 2 == 0)                  {                      this.ObservableElements.Add(new SphereElement                      {                          Position = new Point3D(-2' -3' this.ObservableElements.Count)'                          Material = Materials.Green'                          Radius = 0.4                      });                  }                  else                  {                      this.ObservableElements.Add(new CubeElement                      {                          Position = new Point3D(2' -3' this.ObservableElements.Count)                      });                  }              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddElementsCommand = new DelegateCommand(() =>              {                  for (int a = 0; a < 250; a++)                      AddElementCommand.Execute(null);              });
Magic Number,DataTemplateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\DataTemplate\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddUIElementCommand = new DelegateCommand(() =>              {                  ModelElement model = new ModelElement3                  {                      IsVisible = true'                      Color = Colors.Pink                  };                  model.Position = new Point3D(0' -3' this.ObservableElements.Count);                    this.ObservableElements.Add(model);              });
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,ExtrudeText,The following statement contains a magic number: foreach (var t in mesh.Triangles)              {                  var v0 = t.GetVertex(0);                  var v1 = t.GetVertex(1);                  var v2 = t.GetVertex(2);                    // Add the top triangle.                  // Project the X/Y vertices onto a plane defined by textdirection' p0 and p1.                                  builder.AddTriangle(v0.Project(p0' u' v' z' 1)' v1.Project(p0' u' v' z' 1)' v2.Project(p0' u' v' z' 1));                                    // Add the bottom triangle.                  builder.AddTriangle(v2.Project(p0' u' v' z' 0)' v1.Project(p0' u' v' z' 0)' v0.Project(p0' u' v' z' 0));              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,AreaOfSegment,The following statement contains a magic number: return Math.Abs(segment.Take(segment.Length - 1)                  .Select((p' i) => (segment[i + 1].X - p.X) * (segment[i + 1].Y + p.Y))                  .Sum() / 2);
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,ToPolyLine,The following statement contains a magic number: foreach (var segment in figure.Segments)              {                  var polyline = segment as PolyLineSegment;                  if (polyline != null)                  {                      outline.AddRange(polyline.Points);                      previousPoint = polyline.Points.Last();                      continue;                  }                    var polybezier = segment as PolyBezierSegment;                  if (polybezier != null)                  {                      for (int i = -1; i + 3 < polybezier.Points.Count; i += 3)                      {                          var p1 = i == -1 ? previousPoint : polybezier.Points[i];                          outline.AddRange(FlattenBezier(p1' polybezier.Points[i + 1]' polybezier.Points[i + 2]' polybezier.Points[i + 3]' 10));                      }                        previousPoint = polybezier.Points.Last();                      continue;                  }                    var lineSegment = segment as LineSegment;                  if (lineSegment != null)                  {                      outline.Add(lineSegment.Point);                      previousPoint = lineSegment.Point;                      continue;                  }                    var bezierSegment = segment as BezierSegment;                  if (bezierSegment != null)                  {                      outline.AddRange(FlattenBezier(previousPoint' bezierSegment.Point1' bezierSegment.Point2' bezierSegment.Point3' 10));                      previousPoint = bezierSegment.Point3;                      continue;                  }                    throw new NotImplementedException();              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,ToPolyLine,The following statement contains a magic number: foreach (var segment in figure.Segments)              {                  var polyline = segment as PolyLineSegment;                  if (polyline != null)                  {                      outline.AddRange(polyline.Points);                      previousPoint = polyline.Points.Last();                      continue;                  }                    var polybezier = segment as PolyBezierSegment;                  if (polybezier != null)                  {                      for (int i = -1; i + 3 < polybezier.Points.Count; i += 3)                      {                          var p1 = i == -1 ? previousPoint : polybezier.Points[i];                          outline.AddRange(FlattenBezier(p1' polybezier.Points[i + 1]' polybezier.Points[i + 2]' polybezier.Points[i + 3]' 10));                      }                        previousPoint = polybezier.Points.Last();                      continue;                  }                    var lineSegment = segment as LineSegment;                  if (lineSegment != null)                  {                      outline.Add(lineSegment.Point);                      previousPoint = lineSegment.Point;                      continue;                  }                    var bezierSegment = segment as BezierSegment;                  if (bezierSegment != null)                  {                      outline.AddRange(FlattenBezier(previousPoint' bezierSegment.Point1' bezierSegment.Point2' bezierSegment.Point3' 10));                      previousPoint = bezierSegment.Point3;                      continue;                  }                    throw new NotImplementedException();              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,ToPolyLine,The following statement contains a magic number: foreach (var segment in figure.Segments)              {                  var polyline = segment as PolyLineSegment;                  if (polyline != null)                  {                      outline.AddRange(polyline.Points);                      previousPoint = polyline.Points.Last();                      continue;                  }                    var polybezier = segment as PolyBezierSegment;                  if (polybezier != null)                  {                      for (int i = -1; i + 3 < polybezier.Points.Count; i += 3)                      {                          var p1 = i == -1 ? previousPoint : polybezier.Points[i];                          outline.AddRange(FlattenBezier(p1' polybezier.Points[i + 1]' polybezier.Points[i + 2]' polybezier.Points[i + 3]' 10));                      }                        previousPoint = polybezier.Points.Last();                      continue;                  }                    var lineSegment = segment as LineSegment;                  if (lineSegment != null)                  {                      outline.Add(lineSegment.Point);                      previousPoint = lineSegment.Point;                      continue;                  }                    var bezierSegment = segment as BezierSegment;                  if (bezierSegment != null)                  {                      outline.AddRange(FlattenBezier(previousPoint' bezierSegment.Point1' bezierSegment.Point2' bezierSegment.Point3' 10));                      previousPoint = bezierSegment.Point3;                      continue;                  }                    throw new NotImplementedException();              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,ToPolyLine,The following statement contains a magic number: foreach (var segment in figure.Segments)              {                  var polyline = segment as PolyLineSegment;                  if (polyline != null)                  {                      outline.AddRange(polyline.Points);                      previousPoint = polyline.Points.Last();                      continue;                  }                    var polybezier = segment as PolyBezierSegment;                  if (polybezier != null)                  {                      for (int i = -1; i + 3 < polybezier.Points.Count; i += 3)                      {                          var p1 = i == -1 ? previousPoint : polybezier.Points[i];                          outline.AddRange(FlattenBezier(p1' polybezier.Points[i + 1]' polybezier.Points[i + 2]' polybezier.Points[i + 3]' 10));                      }                        previousPoint = polybezier.Points.Last();                      continue;                  }                    var lineSegment = segment as LineSegment;                  if (lineSegment != null)                  {                      outline.Add(lineSegment.Point);                      previousPoint = lineSegment.Point;                      continue;                  }                    var bezierSegment = segment as BezierSegment;                  if (bezierSegment != null)                  {                      outline.AddRange(FlattenBezier(previousPoint' bezierSegment.Point1' bezierSegment.Point2' bezierSegment.Point3' 10));                      previousPoint = bezierSegment.Point3;                      continue;                  }                    throw new NotImplementedException();              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,ToPolyLine,The following statement contains a magic number: foreach (var segment in figure.Segments)              {                  var polyline = segment as PolyLineSegment;                  if (polyline != null)                  {                      outline.AddRange(polyline.Points);                      previousPoint = polyline.Points.Last();                      continue;                  }                    var polybezier = segment as PolyBezierSegment;                  if (polybezier != null)                  {                      for (int i = -1; i + 3 < polybezier.Points.Count; i += 3)                      {                          var p1 = i == -1 ? previousPoint : polybezier.Points[i];                          outline.AddRange(FlattenBezier(p1' polybezier.Points[i + 1]' polybezier.Points[i + 2]' polybezier.Points[i + 3]' 10));                      }                        previousPoint = polybezier.Points.Last();                      continue;                  }                    var lineSegment = segment as LineSegment;                  if (lineSegment != null)                  {                      outline.Add(lineSegment.Point);                      previousPoint = lineSegment.Point;                      continue;                  }                    var bezierSegment = segment as BezierSegment;                  if (bezierSegment != null)                  {                      outline.AddRange(FlattenBezier(previousPoint' bezierSegment.Point1' bezierSegment.Point2' bezierSegment.Point3' 10));                      previousPoint = bezierSegment.Point3;                      continue;                  }                    throw new NotImplementedException();              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,ToPolyLine,The following statement contains a magic number: foreach (var segment in figure.Segments)              {                  var polyline = segment as PolyLineSegment;                  if (polyline != null)                  {                      outline.AddRange(polyline.Points);                      previousPoint = polyline.Points.Last();                      continue;                  }                    var polybezier = segment as PolyBezierSegment;                  if (polybezier != null)                  {                      for (int i = -1; i + 3 < polybezier.Points.Count; i += 3)                      {                          var p1 = i == -1 ? previousPoint : polybezier.Points[i];                          outline.AddRange(FlattenBezier(p1' polybezier.Points[i + 1]' polybezier.Points[i + 2]' polybezier.Points[i + 3]' 10));                      }                        previousPoint = polybezier.Points.Last();                      continue;                  }                    var lineSegment = segment as LineSegment;                  if (lineSegment != null)                  {                      outline.Add(lineSegment.Point);                      previousPoint = lineSegment.Point;                      continue;                  }                    var bezierSegment = segment as BezierSegment;                  if (bezierSegment != null)                  {                      outline.AddRange(FlattenBezier(previousPoint' bezierSegment.Point1' bezierSegment.Point2' bezierSegment.Point3' 10));                      previousPoint = bezierSegment.Point3;                      continue;                  }                    throw new NotImplementedException();              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,FlattenBezier,The following statement contains a magic number: for (int i = 1; i <= n; i++)              {                  var t = (double)i / n;                  var u = 1 - t;                  yield return new Point(                      (u * u * u * p1.X) + (3 * t * u * u * p2.X) + (3 * t * t * u * p3.X) + (t * t * t * p4.X)'                      (u * u * u * p1.Y) + (3 * t * u * u * p2.Y) + (3 * t * t * u * p3.Y) + (t * t * t * p4.Y));              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,FlattenBezier,The following statement contains a magic number: for (int i = 1; i <= n; i++)              {                  var t = (double)i / n;                  var u = 1 - t;                  yield return new Point(                      (u * u * u * p1.X) + (3 * t * u * u * p2.X) + (3 * t * t * u * p3.X) + (t * t * t * p4.X)'                      (u * u * u * p1.Y) + (3 * t * u * u * p2.Y) + (3 * t * t * u * p3.Y) + (t * t * t * p4.Y));              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,FlattenBezier,The following statement contains a magic number: for (int i = 1; i <= n; i++)              {                  var t = (double)i / n;                  var u = 1 - t;                  yield return new Point(                      (u * u * u * p1.X) + (3 * t * u * u * p2.X) + (3 * t * t * u * p3.X) + (t * t * t * p4.X)'                      (u * u * u * p1.Y) + (3 * t * u * u * p2.Y) + (3 * t * t * u * p3.Y) + (t * t * t * p4.Y));              }
Magic Number,ExtrudedTextDemo,Extensions,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\Extensions.cs,FlattenBezier,The following statement contains a magic number: for (int i = 1; i <= n; i++)              {                  var t = (double)i / n;                  var u = 1 - t;                  yield return new Point(                      (u * u * u * p1.X) + (3 * t * u * u * p2.X) + (3 * t * t * u * p3.X) + (t * t * t * p4.X)'                      (u * u * u * p1.Y) + (3 * t * u * u * p2.Y) + (3 * t * t * u * p3.Y) + (t * t * t * p4.Y));              }
Magic Number,ExtrudedTextDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ExtrudedText\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: builder.ExtrudeText(                  "Helix Toolkit"'                  "Arial"'                  FontStyles.Normal'                  FontWeights.Bold'                  20'                  new Vector3D(1' 0' 0)'                  new Point3D(0' 0' 0)'                  new Point3D(0' 0' 1));
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: double minX = -this.Width / 2;
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: double minY = -this.Length / 2;
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: double maxX = this.Width / 2;
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: double maxY = this.Length / 2;
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: double z = this.MajorDistance * 1e-4;
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: double eps = this.MinorDistance / 10;
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: while (x <= maxX + eps)              {                  var pc = IsMultipleOf(x' this.MajorDistance) ? majorLinePoints : minorLinePoints;                  if (Math.Abs(x) < double.Epsilon)                  {                      this.AddLine(pc' this.GetPoint(x' minY' z)' this.GetPoint(x' 0' z));                      this.AddLine(ylinePoints' this.GetPoint(x' 0' 2 * z)' this.GetPoint(x' maxY' 2 * z));                  }                  else                  {                      this.AddLine(pc' this.GetPoint(x' minY' z)' this.GetPoint(x' maxY' z));                  }                    x += this.MinorDistance;              }
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: while (x <= maxX + eps)              {                  var pc = IsMultipleOf(x' this.MajorDistance) ? majorLinePoints : minorLinePoints;                  if (Math.Abs(x) < double.Epsilon)                  {                      this.AddLine(pc' this.GetPoint(x' minY' z)' this.GetPoint(x' 0' z));                      this.AddLine(ylinePoints' this.GetPoint(x' 0' 2 * z)' this.GetPoint(x' maxY' 2 * z));                  }                  else                  {                      this.AddLine(pc' this.GetPoint(x' minY' z)' this.GetPoint(x' maxY' z));                  }                    x += this.MinorDistance;              }
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: while (y <= maxY + eps)              {                  var pc = IsMultipleOf(y' this.MajorDistance) ? majorLinePoints : minorLinePoints;                  if (Math.Abs(y) < double.Epsilon)                  {                      this.AddLine(pc' this.GetPoint(minX' y)' this.GetPoint(0' y));                      this.AddLine(xlinePoints' this.GetPoint(0' y' 2 * z)' this.GetPoint(maxX' y' 2 * z));                  }                  else                  {                      this.AddLine(pc' this.GetPoint(minX' y)' this.GetPoint(maxY' y));                  }                    y += this.MinorDistance;              }
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,CreateGrid,The following statement contains a magic number: while (y <= maxY + eps)              {                  var pc = IsMultipleOf(y' this.MajorDistance) ? majorLinePoints : minorLinePoints;                  if (Math.Abs(y) < double.Epsilon)                  {                      this.AddLine(pc' this.GetPoint(minX' y)' this.GetPoint(0' y));                      this.AddLine(xlinePoints' this.GetPoint(0' y' 2 * z)' this.GetPoint(maxX' y' 2 * z));                  }                  else                  {                      this.AddLine(pc' this.GetPoint(minX' y)' this.GetPoint(maxY' y));                  }                    y += this.MinorDistance;              }
Magic Number,HippoDemo,GridLines,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\GridLines.cs,IsMultipleOf,The following statement contains a magic number: return Math.Abs(value - y2) < 1e-3;
Magic Number,HippoDemo,ImageExtension,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HippoDemo\ImageExtension.cs,ProvideValue,The following statement contains a magic number: return new Image() { Source = source' Height=24 };
Magic Number,MemoryLeakTest,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MemoryLeakTest\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open1Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open2Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open3Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CollectClick);                            #line default              #line hidden              return;              }
Magic Number,MemoryLeakTest,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MemoryLeakTest\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open1Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open2Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open3Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CollectClick);                            #line default              #line hidden              return;              }
Magic Number,MemoryLeakTest,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MemoryLeakTest\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open1Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open2Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open3Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CollectClick);                            #line default              #line hidden              return;              }
Magic Number,ModelViewer,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ModelViewer\MainViewModel.cs,ViewZoomExtents,The following statement contains a magic number: this.viewport.ZoomExtents(500);
Magic Number,MvvmCameraDemo,ShellViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmCameraDemo\ShellViewModel.cs,ShellViewModel,The following statement contains a magic number: var camera = new PerspectiveCamera()              {                  Position = new Point3D(0' -10' 0)'                  LookDirection = new Vector3D(0' 10' 0)'                  UpDirection = new Vector3D(0' 0' 1)'                  FieldOfView = 60'              };
Magic Number,MvvmCameraDemo,ShellViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmCameraDemo\ShellViewModel.cs,ShellViewModel,The following statement contains a magic number: var camera = new PerspectiveCamera()              {                  Position = new Point3D(0' -10' 0)'                  LookDirection = new Vector3D(0' 10' 0)'                  UpDirection = new Vector3D(0' 0' 1)'                  FieldOfView = 60'              };
Magic Number,MvvmCameraDemo,ShellViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmCameraDemo\ShellViewModel.cs,ShellViewModel,The following statement contains a magic number: var camera = new PerspectiveCamera()              {                  Position = new Point3D(0' -10' 0)'                  LookDirection = new Vector3D(0' 10' 0)'                  UpDirection = new Vector3D(0' 0' 1)'                  FieldOfView = 60'              };
Magic Number,MvvmDemo,ShellViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmDemo\ShellViewModel.cs,CanAdd,The following statement contains a magic number: return this.Objects.Count < 10;
Magic Number,MvvmDemo,ShellViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmDemo\ShellViewModel.cs,GetRandomPoint,The following statement contains a magic number: int d = 10;
Magic Number,MvvmDemo,ShellViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmDemo\ShellViewModel.cs,GetRandomPoint,The following statement contains a magic number: return new Point3D(this.r.Next(d) - d / 2' this.r.Next(d) - d / 2' this.r.Next(d) - d / 2);
Magic Number,MvvmDemo,ShellViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmDemo\ShellViewModel.cs,GetRandomPoint,The following statement contains a magic number: return new Point3D(this.r.Next(d) - d / 2' this.r.Next(d) - d / 2' this.r.Next(d) - d / 2);
Magic Number,MvvmDemo,ShellViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MvvmDemo\ShellViewModel.cs,GetRandomPoint,The following statement contains a magic number: return new Point3D(this.r.Next(d) - d / 2' this.r.Next(d) - d / 2' this.r.Next(d) - d / 2);
Magic Number,PanoramaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PanoramaDemo\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: camera.FieldOfView = 120;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.lifeTime = 5;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.emitRate = 100;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.startSpreading = 10;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.startVelocity = 4;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.startVelocityRandomness = 2;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.startSize = 0.5;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.velocityDamping = 0.999;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.angularVelocity = 10;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.accelerationDirection = new Vector3D(3' 0' -1);
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.acceleration = 4;
Magic Number,ParticleSystemDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ParticleSystemDemo\Window1.xaml.cs,MainViewModel,The following statement contains a magic number: this.accelerationSpreading = 10;
Magic Number,PointsAndLinesBinding,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLinesBinding\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.NumberOfPoints = 100;
Magic Number,PointsAndLinesBinding,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLinesBinding\MainWindow.xaml.cs,SetPoints,The following statement contains a magic number: if (this.ShowLinesVisual3D || this.ShowPointsVisual3D)              {                  var newPoints =                      PointsAndLinesDemo.MainWindow.GeneratePoints(this.NumberOfPoints' this.watch.ElapsedMilliseconds * 0.001)                          .ToArray();                  if (this.ShowPointsVisual3D)                  {                      var pc = new Point3DCollection(newPoints);                      pc.Freeze();                      this.Points = pc;                  }                    if (this.ShowLinesVisual3D)                  {                      var pc = new Point3DCollection(newPoints);                      pc.Freeze();                      this.LinePoints = pc;                  }              }
Magic Number,PointsAndLinesBinding,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLinesBinding\MainWindow.xaml.cs,UpdatePoints,The following statement contains a magic number: if (this.ShowLinesVisual3D || this.ShowPointsVisual3D)              {                  var newPoints =                      PointsAndLinesDemo.MainWindow.GeneratePoints(this.NumberOfPoints' this.watch.ElapsedMilliseconds * 0.001)                          .ToArray();                  if (this.ShowPointsVisual3D)                  {                      if (this.Points.IsFrozen)                      {                          this.Points = new Point3DCollection();                      }                      else                      {                          this.Points.Clear();                      }                        foreach (var p in newPoints)                      {                          this.Points.Add(p);                      }                  }                    if (this.ShowLinesVisual3D)                  {                      if (this.LinePoints.IsFrozen)                      {                          this.LinePoints = new Point3DCollection();                      }                      else                      {                          this.LinePoints.Clear();                      }                        foreach (var p in newPoints)                      {                          this.LinePoints.Add(p);                      }                  }              }
Magic Number,ScatterPlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Data = Enumerable.Range(0' 7 * 7 * 7).Select(i => new Point3D(i % 7' (i % 49) / 7' i / 49)).ToArray();
Magic Number,ScatterPlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Data = Enumerable.Range(0' 7 * 7 * 7).Select(i => new Point3D(i % 7' (i % 49) / 7' i / 49)).ToArray();
Magic Number,ScatterPlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Data = Enumerable.Range(0' 7 * 7 * 7).Select(i => new Point3D(i % 7' (i % 49) / 7' i / 49)).ToArray();
Magic Number,ScatterPlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Data = Enumerable.Range(0' 7 * 7 * 7).Select(i => new Point3D(i % 7' (i % 49) / 7' i / 49)).ToArray();
Magic Number,ScatterPlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Data = Enumerable.Range(0' 7 * 7 * 7).Select(i => new Point3D(i % 7' (i % 49) / 7' i / 49)).ToArray();
Magic Number,ScatterPlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Data = Enumerable.Range(0' 7 * 7 * 7).Select(i => new Point3D(i % 7' (i % 49) / 7' i / 49)).ToArray();
Magic Number,ScatterPlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Data = Enumerable.Range(0' 7 * 7 * 7).Select(i => new Point3D(i % 7' (i % 49) / 7' i / 49)).ToArray();
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,ScatterPlotVisual3D,The following statement contains a magic number: FontSize = 0.06;
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,ScatterPlotVisual3D,The following statement contains a magic number: SphereSize = 0.09;
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,ScatterPlotVisual3D,The following statement contains a magic number: LineThickness = 0.01;
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (var i = 0; i < Points.Length; ++i)              {                  scatterMeshBuilder.AddSphere(Points[i]' SphereSize' 4' 4);                    var u = (Values[i] - minValue) / valueRange;                    var newTCCount = scatterMeshBuilder.TextureCoordinates.Count;                  for (var j = oldTCCount; j < newTCCount; ++j)                  {                      scatterMeshBuilder.TextureCoordinates[j] = new Point(u' u);                  }                  oldTCCount = newTCCount;              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (var i = 0; i < Points.Length; ++i)              {                  scatterMeshBuilder.AddSphere(Points[i]' SphereSize' 4' 4);                    var u = (Values[i] - minValue) / valueRange;                    var newTCCount = scatterMeshBuilder.TextureCoordinates.Count;                  for (var j = oldTCCount; j < newTCCount; ++j)                  {                      scatterMeshBuilder.TextureCoordinates[j] = new Point(u' u);                  }                  oldTCCount = newTCCount;              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (double x = minX; x <= maxX; x += IntervalX)              {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D(x.ToString()' Brushes.Black' true' FontSize'                                                                             new Point3D(x' minY - FontSize*2.5' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("X-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D((minX + maxX)*0.5'                                                                                         minY - FontSize*6' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("X-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D((minX + maxX)*0.5'                                                                                         minY - FontSize*6' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (double y = minY; y <= maxY; y += IntervalY)              {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D(y.ToString()' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*3' y' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("Y-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*10'                                                                                         (minY + maxY)*0.5' minZ)'                                                                             new Vector3D(0' 1' 0)' new Vector3D(-1' 0' 0));                  plotModel.Children.Add(label);              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("Y-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*10'                                                                                         (minY + maxY)*0.5' minZ)'                                                                             new Vector3D(0' 1' 0)' new Vector3D(-1' 0' 0));                  plotModel.Children.Add(label);              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (double z = z0; z <= maxZ + double.Epsilon; z += IntervalZ)              {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D(z.ToString()' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*3' maxY' z)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 0' 1));                  plotModel.Children.Add(label);              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("Z-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*10' maxY'                                                                                         (minZ + maxZ)*0.5)'                                                                             new Vector3D(0' 0' 1)' new Vector3D(1' 0' 0));                  plotModel.Children.Add(label);              }
Magic Number,ScatterPlotDemo,ScatterPlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ScatterPlot\ScatterPlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("Z-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*10' maxY'                                                                                         (minZ + maxZ)*0.5)'                                                                             new Vector3D(0' 0' 1)' new Vector3D(1' 0' 0));                  plotModel.Children.Add(label);              }
Magic Number,TorusDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Torus\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: viewPort.Camera.Position = new Point3D(0' 0' 10);
Magic Number,SolarsystemDemo,Planet3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Planet3D.cs,Planet3D,The following statement contains a magic number: orbit = new TubeVisual3D() {Diameter=0.8' ThetaDiv = 16 };
Magic Number,SolarsystemDemo,Planet3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Planet3D.cs,Planet3D,The following statement contains a magic number: orbit = new TubeVisual3D() {Diameter=0.8' ThetaDiv = 16 };
Magic Number,SolarsystemDemo,Planet3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Planet3D.cs,Planet3D,The following statement contains a magic number: orbit.Material = MaterialHelper.CreateMaterial(null'Brushes.Blue'Brushes.Gray'0.5' 20);
Magic Number,SolarsystemDemo,Planet3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Planet3D.cs,Planet3D,The following statement contains a magic number: orbit.Material = MaterialHelper.CreateMaterial(null'Brushes.Blue'Brushes.Gray'0.5' 20);
Magic Number,SolarsystemDemo,Planet3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Planet3D.cs,UpdateOrbit,The following statement contains a magic number: if (SemiMajorAxis > 0)              {                  int n = 90;                  var path = new Point3DCollection();                  for (int i = 0; i < n; i++)                      path.Add(CalculatePosition((double)i / (n - 1) * Math.PI * 2' SolarSystem.DistanceScale));                    orbit.Path = path;                  orbit.UpdateModel();              }
Magic Number,SolarsystemDemo,Planet3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Planet3D.cs,UpdateOrbit,The following statement contains a magic number: if (SemiMajorAxis > 0)              {                  int n = 90;                  var path = new Point3DCollection();                  for (int i = 0; i < n; i++)                      path.Add(CalculatePosition((double)i / (n - 1) * Math.PI * 2' SolarSystem.DistanceScale));                    orbit.Path = path;                  orbit.UpdateModel();              }
Magic Number,SolarsystemDemo,Planet3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Planet3D.cs,UpdatePosition,The following statement contains a magic number: if (OrbitalPeriod > 0)                  ang = SolarSystem.Days / OrbitalPeriod * Math.PI * 2;
Magic Number,SolarsystemDemo,Planet3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Planet3D.cs,UpdatePosition,The following statement contains a magic number: var rotang = SolarSystem.Days / RotationPeriod * 360;
Magic Number,SolarsystemDemo,Satellite3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Satellite3D.cs,Satellite3D,The following statement contains a magic number: orbit = new TubeVisual3D() { Diameter = 0.3' ThetaDiv = 12 };
Magic Number,SolarsystemDemo,Satellite3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Satellite3D.cs,Satellite3D,The following statement contains a magic number: orbit = new TubeVisual3D() { Diameter = 0.3' ThetaDiv = 12 };
Magic Number,SolarsystemDemo,Satellite3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Satellite3D.cs,Satellite3D,The following statement contains a magic number: orbit.Material = MaterialHelper.CreateMaterial(null' Brushes.Gray' Brushes.White' 0.5' 40);
Magic Number,SolarsystemDemo,Satellite3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Satellite3D.cs,Satellite3D,The following statement contains a magic number: orbit.Material = MaterialHelper.CreateMaterial(null' Brushes.Gray' Brushes.White' 0.5' 40);
Magic Number,SolarsystemDemo,Satellite3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Satellite3D.cs,UpdateOrbit,The following statement contains a magic number: if (SemiMajorAxis > 0)              {                  int n = 90;                  var path = new Point3DCollection();                  for (int i = 0; i < n; i++)                      path.Add(CalculatePosition((double)i / (n - 1) * Math.PI * 2' Planet.DistanceScale));                    orbit.Path = path;                  orbit.UpdateModel();              }
Magic Number,SolarsystemDemo,Satellite3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Satellite3D.cs,UpdateOrbit,The following statement contains a magic number: if (SemiMajorAxis > 0)              {                  int n = 90;                  var path = new Point3DCollection();                  for (int i = 0; i < n; i++)                      path.Add(CalculatePosition((double)i / (n - 1) * Math.PI * 2' Planet.DistanceScale));                    orbit.Path = path;                  orbit.UpdateModel();              }
Magic Number,SolarsystemDemo,Satellite3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Satellite3D.cs,UpdatePosition,The following statement contains a magic number: if (OrbitalPeriod != 0)                  ang = SolarSystem.Days / OrbitalPeriod * Math.PI * 2;
Magic Number,SolarsystemDemo,Satellite3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Satellite3D.cs,UpdatePosition,The following statement contains a magic number: if (RotationPeriod != 0)                  rotang = SolarSystem.Days / RotationPeriod * 360;
Magic Number,SolarsystemDemo,TexturedObject3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\TexturedObject3D.cs,TexturedObject3D,The following statement contains a magic number: Sphere = new SphereVisual3D() { ThetaDiv = 60' PhiDiv = 30 };
Magic Number,SolarsystemDemo,TexturedObject3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\TexturedObject3D.cs,TexturedObject3D,The following statement contains a magic number: Sphere = new SphereVisual3D() { ThetaDiv = 60' PhiDiv = 30 };
Magic Number,SolarsystemDemo,TexturedObject3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\TexturedObject3D.cs,UpdateTexture,The following statement contains a magic number: if (ObjectName == "Sun")                  Sphere.Material = MaterialHelper.CreateMaterial(Brushes.Black' Texture' Brushes.Gray' 1.0' 20);              else                  Sphere.Material = MaterialHelper.CreateMaterial(Texture);
Magic Number,SolarsystemDemo,Window1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Window1.xaml.cs,Window1,The following statement contains a magic number: view1.Camera.Position = new Point3D(0' 400' 500);
Magic Number,SolarsystemDemo,Window1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Window1.xaml.cs,Window1,The following statement contains a magic number: view1.Camera.Position = new Point3D(0' 400' 500);
Magic Number,SolarsystemDemo,Window1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Window1.xaml.cs,Window1,The following statement contains a magic number: view1.Camera.LookDirection = new Vector3D(0' -400' -500);
Magic Number,SolarsystemDemo,Window1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Window1.xaml.cs,Window1,The following statement contains a magic number: view1.Camera.LookDirection = new Vector3D(0' -400' -500);
Magic Number,SolarsystemDemo,Window1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SolarSystemDemo\Window1.xaml.cs,Window1,The following statement contains a magic number: SolarSystem = view1.Children[2] as SolarSystem3D;
Magic Number,Workitem10046,FaceTheCameraBillboard,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Workitems\Workitem10046\FaceTheCameraBillboard.cs,Tessellate,The following statement contains a magic number: Vector3D halfWidthVector = widthVector * Width * 0.5;
Magic Number,Workitem10046,FaceTheCameraBillboard,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Workitems\Workitem10046\FaceTheCameraBillboard.cs,Tessellate,The following statement contains a magic number: Vector3D halfHeightVector = heightVector * Height * 0.5;
Magic Number,AnaglyphDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Anaglyph\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: AddCubes(cubes.Children' Brushes.Green' -4);
Magic Number,AnaglyphDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Anaglyph\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: AddCubes(cubes.Children' Brushes.Green' 4);
Magic Number,AnaglyphDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Anaglyph\MainWindow.xaml.cs,AddCubes,The following statement contains a magic number: for (double y = -5; y <= 5; y += 10)                  c.Add(new CubeVisual3D { Fill = brush' Center = new Point3D(x' y' 0) });
Magic Number,AnaglyphDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Anaglyph\MainWindow.xaml.cs,AddCubes,The following statement contains a magic number: for (double y = -5; y <= 5; y += 10)                  c.Add(new CubeVisual3D { Fill = brush' Center = new Point3D(x' y' 0) });
Magic Number,AnaglyphDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Anaglyph\MainWindow.xaml.cs,AddCubes,The following statement contains a magic number: for (double y = -5; y <= 5; y += 10)                  c.Add(new CubeVisual3D { Fill = brush' Center = new Point3D(x' y' 0) });
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,Update,The following statement contains a magic number: int resultLength = fftResults.Length / 8;
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,Update,The following statement contains a magic number: yScale *= ShowIntensity ? 100 : 0.05;
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,Update,The following statement contains a magic number: yScale *= ShowIntensity ? 100 : 0.05;
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,Update,The following statement contains a magic number: for (int i = 0; i < resultLength; i++)              {                  double intensity = Math.Sqrt(fftResults[i].X * fftResults[i].X + fftResults[i].Y * fftResults[i].Y);                  double decibels = 10 * Math.Log10(fftResults[i].X * fftResults[i].X + fftResults[i].Y * fftResults[i].Y);                  var j = (int)((FrequencyColumns - 1) * (double)i / (resultLength - 1));                  y[j] += ShowIntensity ? intensity : 100 + decibels;              }
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,Update,The following statement contains a magic number: for (int i = 0; i < resultLength; i++)              {                  double intensity = Math.Sqrt(fftResults[i].X * fftResults[i].X + fftResults[i].Y * fftResults[i].Y);                  double decibels = 10 * Math.Log10(fftResults[i].X * fftResults[i].X + fftResults[i].Y * fftResults[i].Y);                  var j = (int)((FrequencyColumns - 1) * (double)i / (resultLength - 1));                  y[j] += ShowIntensity ? intensity : 100 + decibels;              }
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,Update,The following statement contains a magic number: if (updateCount % 20 == 0)              {                  for (int j = TimeColumns - 1; j > 0; j--)                      for (int i = 0; i < FrequencyColumns; i++)                          ScaleTransforms[i' j].ScaleZ = ScaleTransforms[i' j - 1].ScaleZ;              }
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,GetDefaultGeometry,The following statement contains a magic number: mb.AddBox(new Point3D(0' 0' 0.5)' 0.8' 0.8' 1);
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,GetDefaultGeometry,The following statement contains a magic number: mb.AddBox(new Point3D(0' 0' 0.5)' 0.8' 0.8' 1);
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,GetDefaultGeometry,The following statement contains a magic number: mb.AddBox(new Point3D(0' 0' 0.5)' 0.8' 0.8' 1);
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,LoadModel,The following statement contains a magic number: if (transformYup)                  transform.Children.Add(new RotateTransform3D(new AxisAngleRotation3D(new Vector3D(1' 0' 0)' 90)));
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,UpdateModels,The following statement contains a magic number: for (int j = 0; j < TimeColumns; j++)              {                  for (int i = 0; i < FrequencyColumns; i++)                  {                      Material material = MaterialHelper.CreateMaterial(ColorHelper.HsvToColor(0.6 * i / (FrequencyColumns - 1)' 1' 1));                      ScaleTransforms[i' j] = new ScaleTransform3D(1' 1' 1);                        var translation = new TranslateTransform3D((i - (FrequencyColumns - 1) * 0.5) * Distance' -j * Distance' 0);                      var tg = new Transform3DGroup();                      tg.Children.Add(ScaleTransforms[i' j]);                      tg.Children.Add(translation);                      Models[i' j] = new GeometryModel3D(Geometry' material) { Transform = tg };                      group.Children.Add(Models[i' j]);                  }              }
Magic Number,AudioDemo,SpectrumAnalyser,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\SpectrumAnalyser.cs,UpdateModels,The following statement contains a magic number: for (int j = 0; j < TimeColumns; j++)              {                  for (int i = 0; i < FrequencyColumns; i++)                  {                      Material material = MaterialHelper.CreateMaterial(ColorHelper.HsvToColor(0.6 * i / (FrequencyColumns - 1)' 1' 1));                      ScaleTransforms[i' j] = new ScaleTransform3D(1' 1' 1);                        var translation = new TranslateTransform3D((i - (FrequencyColumns - 1) * 0.5) * Distance' -j * Distance' 0);                      var tg = new Transform3DGroup();                      tg.Children.Add(ScaleTransforms[i' j]);                      tg.Children.Add(translation);                      Models[i' j] = new GeometryModel3D(Geometry' material) { Transform = tg };                      group.Children.Add(Models[i' j]);                  }              }
Magic Number,NAudioWpfDemo,AudioCapture,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioCapture.cs,AudioCapture,The following statement contains a magic number: CaptureSeconds = 30;
Magic Number,NAudioWpfDemo,AudioCapture,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioCapture.cs,CreateCaptureStream,The following statement contains a magic number: int maxSeconds = CaptureSeconds == 0 ? 30 : CaptureSeconds;
Magic Number,NAudioWpfDemo,AudioCapture,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioCapture.cs,CreateCaptureStream,The following statement contains a magic number: recordedStream = new MemoryStream(captureBytes + 50);
Magic Number,NAudioWpfDemo,AudioCapture,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioCapture.cs,OnDataAvailable,The following statement contains a magic number: for (int index = 0; index < e.BytesRecorded; index += 2)              {                  short sample = (short)((buffer[index + 1] << 8) | buffer[index + 0]);                  /* short sample2 = BitConverter.ToInt16(buffer' index);                  Debug.Assert(sample == sample2' "Oops"); */                  float sample32 = sample / 32768f;                  if (OnSample != null)                  {                      OnSample(this' new SampleEventArgs(sample32' 0));                  }              }
Magic Number,NAudioWpfDemo,AudioCapture,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioCapture.cs,OnDataAvailable,The following statement contains a magic number: for (int index = 0; index < e.BytesRecorded; index += 2)              {                  short sample = (short)((buffer[index + 1] << 8) | buffer[index + 0]);                  /* short sample2 = BitConverter.ToInt16(buffer' index);                  Debug.Assert(sample == sample2' "Oops"); */                  float sample32 = sample / 32768f;                  if (OnSample != null)                  {                      OnSample(this' new SampleEventArgs(sample32' 0));                  }              }
Magic Number,NAudioWpfDemo,AudioGraph,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioGraph.cs,AudioGraph,The following statement contains a magic number: aggregator = new SampleAggregator(8);
Magic Number,NAudioWpfDemo,AudioGraph,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioGraph.cs,AudioGraph,The following statement contains a magic number: aggregator.NotificationCount = 100;
Magic Number,NAudioWpfDemo,AudioGraph,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioGraph.cs,PlayFile,The following statement contains a magic number: aggregator.NotificationCount = 882;
Magic Number,NAudioWpfDemo,AudioGraph,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioGraph.cs,StartCapture,The following statement contains a magic number: aggregator.NotificationCount = 200;
Magic Number,NAudioWpfDemo,AudioGraph,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioGraph.cs,StartCapture,The following statement contains a magic number: capture.Capture(new WaveFormat(8000' 1));
Magic Number,NAudioWpfDemo,AudioPlayback,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioPlayback.cs,OpenWavStream,The following statement contains a magic number: if (readerStream.WaveFormat.BitsPerSample != 16)              {                  var format = new WaveFormat(readerStream.WaveFormat.SampleRate'                      16' readerStream.WaveFormat.Channels);                  readerStream = new WaveFormatConversionStream(format' readerStream);              }
Magic Number,NAudioWpfDemo,AudioPlayback,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\AudioPlayback.cs,OpenWavStream,The following statement contains a magic number: if (readerStream.WaveFormat.BitsPerSample != 16)              {                  var format = new WaveFormat(readerStream.WaveFormat.SampleRate'                      16' readerStream.WaveFormat.Channels);                  readerStream = new WaveFormatConversionStream(format' readerStream);              }
Magic Number,NAudioWpfDemo,ControlPanelViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\ControlPanelViewModel.cs,ControlPanelViewModel,The following statement contains a magic number: captureSeconds = 10;
Magic Number,NAudioWpfDemo,ControlPanelViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\ControlPanelViewModel.cs,ControlPanelViewModel,The following statement contains a magic number: NotificationsPerSecond = 100;
Magic Number,NAudioWpfDemo,SampleAggregator,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Audio\NAudioWpfDemo\SampleAggregator.cs,SampleAggregator,The following statement contains a magic number: int n = (int) Math.Pow(2' m);
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker1,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddPoints || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n && this.AddPoints; i++)                  {                      for (int j = 1; j <= n && this.AddPoints; j++)                      {                          for (int k = 1; k <= n && this.AddPoints; k++)                          {                              dispatcher.Invoke(new Action<Point3D' ModelVisual3D>(this.Add)' new Point3D(-i' j' k)' this.model1);                          }                      }                  }                    dispatcher.Invoke((Action)(() => this.Count1++));                  dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' this.model1);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker2,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddFrozenGeometry || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(i' j' k)' 0.8' 0.8' 0.8);                          }                      }                        dispatcher.Invoke(new Action<MeshGeometry3D' Material' ModelVisual3D>(this.Add)' b.ToMesh(true)' mat2' model2);                  }                    dispatcher.Invoke((Action)(() => this.Count2++));                    dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' this.model2);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker2,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddFrozenGeometry || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(i' j' k)' 0.8' 0.8' 0.8);                          }                      }                        dispatcher.Invoke(new Action<MeshGeometry3D' Material' ModelVisual3D>(this.Add)' b.ToMesh(true)' mat2' model2);                  }                    dispatcher.Invoke((Action)(() => this.Count2++));                    dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' this.model2);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker2,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddFrozenGeometry || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(i' j' k)' 0.8' 0.8' 0.8);                          }                      }                        dispatcher.Invoke(new Action<MeshGeometry3D' Material' ModelVisual3D>(this.Add)' b.ToMesh(true)' mat2' model2);                  }                    dispatcher.Invoke((Action)(() => this.Count2++));                    dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' this.model2);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker2,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddFrozenGeometry || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(i' j' k)' 0.8' 0.8' 0.8);                          }                      }                        dispatcher.Invoke(new Action<MeshGeometry3D' Material' ModelVisual3D>(this.Add)' b.ToMesh(true)' mat2' model2);                  }                    dispatcher.Invoke((Action)(() => this.Count2++));                    dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' this.model2);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker3,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddFrozenModel || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(i' j' -k)' 0.8' 0.8' 0.8);                          }                      }                        var box = new GeometryModel3D { Geometry = b.ToMesh(false)' Material = m };                      box.Freeze();                        dispatcher.Invoke(new Action<Model3D' ModelVisual3D>(this.Add)' box' this.model3);                  }                    dispatcher.Invoke((Action)(() => this.Count3++));                  dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' model3);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker3,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddFrozenModel || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(i' j' -k)' 0.8' 0.8' 0.8);                          }                      }                        var box = new GeometryModel3D { Geometry = b.ToMesh(false)' Material = m };                      box.Freeze();                        dispatcher.Invoke(new Action<Model3D' ModelVisual3D>(this.Add)' box' this.model3);                  }                    dispatcher.Invoke((Action)(() => this.Count3++));                  dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' model3);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker3,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddFrozenModel || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(i' j' -k)' 0.8' 0.8' 0.8);                          }                      }                        var box = new GeometryModel3D { Geometry = b.ToMesh(false)' Material = m };                      box.Freeze();                        dispatcher.Invoke(new Action<Model3D' ModelVisual3D>(this.Add)' box' this.model3);                  }                    dispatcher.Invoke((Action)(() => this.Count3++));                  dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' model3);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker3,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddFrozenModel || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(i' j' -k)' 0.8' 0.8' 0.8);                          }                      }                        var box = new GeometryModel3D { Geometry = b.ToMesh(false)' Material = m };                      box.Freeze();                        dispatcher.Invoke(new Action<Model3D' ModelVisual3D>(this.Add)' box' this.model3);                  }                    dispatcher.Invoke((Action)(() => this.Count3++));                  dispatcher.Invoke(new Action<ModelVisual3D>(this.Clear)' model3);              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker4,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddToModelGroup || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(-i' j' -k)' 0.8' 0.8' 0.8);                          }                      }                        var box = new GeometryModel3D { Geometry = b.ToMesh(false)' Material = m };                      box.Freeze();                      dispatcher.Invoke(new Action(() => mg.Children.Add(box)));                  }                  dispatcher.Invoke((Action)(() => this.Count4++));                  dispatcher.Invoke((Action)(() => mg.Children.Clear()));              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker4,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddToModelGroup || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(-i' j' -k)' 0.8' 0.8' 0.8);                          }                      }                        var box = new GeometryModel3D { Geometry = b.ToMesh(false)' Material = m };                      box.Freeze();                      dispatcher.Invoke(new Action(() => mg.Children.Add(box)));                  }                  dispatcher.Invoke((Action)(() => this.Count4++));                  dispatcher.Invoke((Action)(() => mg.Children.Clear()));              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker4,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddToModelGroup || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(-i' j' -k)' 0.8' 0.8' 0.8);                          }                      }                        var box = new GeometryModel3D { Geometry = b.ToMesh(false)' Material = m };                      box.Freeze();                      dispatcher.Invoke(new Action(() => mg.Children.Add(box)));                  }                  dispatcher.Invoke((Action)(() => this.Count4++));                  dispatcher.Invoke((Action)(() => mg.Children.Clear()));              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Worker4,The following statement contains a magic number: while (!this.source.IsCancellationRequested)              {                  if (!this.AddToModelGroup || this.runningWorkers < 4)                  {                      Thread.Yield();                      continue;                  }                    for (int i = 1; i <= n; i++)                  {                      var b = new MeshBuilder();                      for (int j = 1; j <= n; j++)                      {                          for (int k = 1; k <= n; k++)                          {                              b.AddBox(new Point3D(-i' j' -k)' 0.8' 0.8' 0.8);                          }                      }                        var box = new GeometryModel3D { Geometry = b.ToMesh(false)' Material = m };                      box.Freeze();                      dispatcher.Invoke(new Action(() => mg.Children.Add(box)));                  }                  dispatcher.Invoke((Action)(() => this.Count4++));                  dispatcher.Invoke((Action)(() => mg.Children.Clear()));              }
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Add,The following statement contains a magic number: var box = new BoxVisual3D { Center = p' Width = 0.8' Height = 0.8' Length = 0.8 };
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Add,The following statement contains a magic number: var box = new BoxVisual3D { Center = p' Width = 0.8' Height = 0.8' Length = 0.8 };
Magic Number,BackgroundUpdateDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\BackgroundUpdate\MainWindow.xaml.cs,Add,The following statement contains a magic number: var box = new BoxVisual3D { Center = p' Width = 0.8' Height = 0.8' Length = 0.8 };
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: dt.Interval = TimeSpan.FromSeconds(0.3);
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  for (int j = 0; j < 2; j++)                      for (int k = 0; k < 2; k++)                      {                          var points = new List<Point3D>();                          diceMesh.ChamferCorner(new Point3D(i - 0.5' j - 0.5' k - 0.5)' 0.1' 1e-6' points);                          //foreach (var p in points)                          //    b.ChamferCorner(p' 0.03);                      }
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  for (int j = 0; j < 2; j++)                      for (int k = 0; k < 2; k++)                      {                          var points = new List<Point3D>();                          diceMesh.ChamferCorner(new Point3D(i - 0.5' j - 0.5' k - 0.5)' 0.1' 1e-6' points);                          //foreach (var p in points)                          //    b.ChamferCorner(p' 0.03);                      }
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  for (int j = 0; j < 2; j++)                      for (int k = 0; k < 2; k++)                      {                          var points = new List<Point3D>();                          diceMesh.ChamferCorner(new Point3D(i - 0.5' j - 0.5' k - 0.5)' 0.1' 1e-6' points);                          //foreach (var p in points)                          //    b.ChamferCorner(p' 0.03);                      }
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  for (int j = 0; j < 2; j++)                      for (int k = 0; k < 2; k++)                      {                          var points = new List<Point3D>();                          diceMesh.ChamferCorner(new Point3D(i - 0.5' j - 0.5' k - 0.5)' 0.1' 1e-6' points);                          //foreach (var p in points)                          //    b.ChamferCorner(p' 0.03);                      }
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  for (int j = 0; j < 2; j++)                      for (int k = 0; k < 2; k++)                      {                          var points = new List<Point3D>();                          diceMesh.ChamferCorner(new Point3D(i - 0.5' j - 0.5' k - 0.5)' 0.1' 1e-6' points);                          //foreach (var p in points)                          //    b.ChamferCorner(p' 0.03);                      }
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  for (int j = 0; j < 2; j++)                      for (int k = 0; k < 2; k++)                      {                          var points = new List<Point3D>();                          diceMesh.ChamferCorner(new Point3D(i - 0.5' j - 0.5' k - 0.5)' 0.1' 1e-6' points);                          //foreach (var p in points)                          //    b.ChamferCorner(p' 0.03);                      }
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  for (int j = 0; j < 2; j++)                      for (int k = 0; k < 2; k++)                      {                          var points = new List<Point3D>();                          diceMesh.ChamferCorner(new Point3D(i - 0.5' j - 0.5' k - 0.5)' 0.1' 1e-6' points);                          //foreach (var p in points)                          //    b.ChamferCorner(p' 0.03);                      }
Magic Number,ChamferDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Chamfer\MainWindow.xaml.cs,CreateDice,The following statement contains a magic number: for (int i = 0; i < 2; i++)                  for (int j = 0; j < 2; j++)                      for (int k = 0; k < 2; k++)                      {                          var points = new List<Point3D>();                          diceMesh.ChamferCorner(new Point3D(i - 0.5' j - 0.5' k - 0.5)' 0.1' 1e-6' points);                          //foreach (var p in points)                          //    b.ChamferCorner(p' 0.03);                      }
Magic Number,ClothDemo,Flag,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Cloth\Flag.cs,Flag,The following statement contains a magic number: Damping = 0.98;
Magic Number,ClothDemo,Flag,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Cloth\Flag.cs,Flag,The following statement contains a magic number: integrator = new VerletIntegrator() { Iterations = 4' Damping = this.Damping };
Magic Number,ClothDemo,Flag,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Cloth\Flag.cs,Flag,The following statement contains a magic number: WindSpeed = 6;
Magic Number,ClothDemo,Flag,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Cloth\Flag.cs,Flag,The following statement contains a magic number: WindDirection = 180;
Magic Number,ClothDemo,Flag,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Cloth\Flag.cs,Flag,The following statement contains a magic number: PoleHeight = 12;
Magic Number,ClothDemo,Flag,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Cloth\Flag.cs,Flag,The following statement contains a magic number: Height = 3;
Magic Number,ClothDemo,Flag,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Cloth\Flag.cs,Flag,The following statement contains a magic number: Length = 4;
Magic Number,ClothDemo,Flag,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Cloth\Flag.cs,Flag,The following statement contains a magic number: Mass = 0.8;
Magic Number,ContourDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Contour\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: AddContours(model1' 8' 8' 8);
Magic Number,ContourDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Contour\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: AddContours(model1' 8' 8' 8);
Magic Number,ContourDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Contour\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: AddContours(model1' 8' 8' 8);
Magic Number,ContourDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Contour\MainWindow.xaml.cs,AddContours,The following statement contains a magic number: foreach (var contour in MeshGeometryHelper.CombineSegments(segments' 1e-6).ToList())              {                  if (contour.Count == 0)                      continue;                  view2.Children.Add(new TubeVisual3D { Diameter = 0.03' Path = new Point3DCollection(contour)' Fill = Brushes.Green });              }
Magic Number,ContourDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Contour\MainWindow.xaml.cs,AddContours,The following statement contains a magic number: foreach (var contour in MeshGeometryHelper.CombineSegments(segments' 1e-6).ToList())              {                  if (contour.Count == 0)                      continue;                  view2.Children.Add(new TubeVisual3D { Diameter = 0.03' Path = new Point3DCollection(contour)' Fill = Brushes.Green });              }
Magic Number,EarthCuttingPlanesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\EarthCuttingPlanes\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Clouds = MaterialHelper.CreateImageMaterial("pack://application:'''/Examples/Earth/clouds.jpg"' 0.5);
Magic Number,ViewMatrixDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ViewMatrix\MainViewModel.cs,MainViewModel,The following statement contains a magic number: gm.AddBox(new Point3D(0' 0' 0.5)' 1' 1' 1);
Magic Number,ViewMatrixDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ViewMatrix\MainViewModel.cs,MainViewModel,The following statement contains a magic number: gm.AddCylinder(new Point3D(5' 0' 0)' new Point3D(5' 0' 5)' 1' 36);
Magic Number,ViewMatrixDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ViewMatrix\MainViewModel.cs,MainViewModel,The following statement contains a magic number: gm.AddCylinder(new Point3D(5' 0' 0)' new Point3D(5' 0' 5)' 1' 36);
Magic Number,ViewMatrixDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ViewMatrix\MainViewModel.cs,MainViewModel,The following statement contains a magic number: gm.AddCylinder(new Point3D(5' 0' 0)' new Point3D(5' 0' 5)' 1' 36);
Magic Number,ViewMatrixDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ViewMatrix\MainViewModel.cs,MainViewModel,The following statement contains a magic number: gm.AddCylinder(new Point3D(5' 0' 0)' new Point3D(5' 0' 5)' 1' 36);
Magic Number,DnaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Dna\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddBases(this.model' 24' 3' 30);
Magic Number,DnaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Dna\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddBases(this.model' 24' 3' 30);
Magic Number,DnaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Dna\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.AddBases(this.model' 24' 3' 30);
Magic Number,DnaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Dna\MainWindow.xaml.cs,AddBases,The following statement contains a magic number: var b = turns * 2 * Math.PI;
Magic Number,DnaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Dna\MainWindow.xaml.cs,AddBases,The following statement contains a magic number: var p2 = 3.14;
Magic Number,DnaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Dna\MainWindow.xaml.cs,AddBases,The following statement contains a magic number: for (int i = 0; i < number; i++)              {                  var u = (double)i / (number - 1);                  var bu = b * u;                  var x1 = Math.Cos(bu + p1) + Math.Cos(bu + p1);                  var y1 = Math.Sin(bu + p1) + Math.Sin(bu + p1);                  var z = u * l;                  var x2 = Math.Cos(bu + p2) + Math.Cos(bu + p2);                  var y2 = Math.Sin(bu + p2) + Math.Sin(bu + p2);                  var pt1 = new Point3D(x1' y1' z);                  var pt2 = new Point3D(x2' y2' z);                  var pt3 = new Point3D(0' 0' z);                    var j = r.Next(4);                  var brush1 = BaseBrush1[j];                  var brush2 = BaseBrush2[j];                    var ts = new PipeVisual3D                               {                                   Point1 = pt1'                                   Point2 = pt3'                                   Diameter = 0.4'                                   Material = MaterialHelper.CreateMaterial(brush1)                               };                  model.Children.Add(ts);                    var ts2 = new PipeVisual3D                                {                                    Point1 = pt3'                                    Point2 = pt2'                                    Diameter = 0.4'                                    Material = MaterialHelper.CreateMaterial(brush2)                                };                  model.Children.Add(ts2);              }
Magic Number,DnaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Dna\MainWindow.xaml.cs,AddBases,The following statement contains a magic number: for (int i = 0; i < number; i++)              {                  var u = (double)i / (number - 1);                  var bu = b * u;                  var x1 = Math.Cos(bu + p1) + Math.Cos(bu + p1);                  var y1 = Math.Sin(bu + p1) + Math.Sin(bu + p1);                  var z = u * l;                  var x2 = Math.Cos(bu + p2) + Math.Cos(bu + p2);                  var y2 = Math.Sin(bu + p2) + Math.Sin(bu + p2);                  var pt1 = new Point3D(x1' y1' z);                  var pt2 = new Point3D(x2' y2' z);                  var pt3 = new Point3D(0' 0' z);                    var j = r.Next(4);                  var brush1 = BaseBrush1[j];                  var brush2 = BaseBrush2[j];                    var ts = new PipeVisual3D                               {                                   Point1 = pt1'                                   Point2 = pt3'                                   Diameter = 0.4'                                   Material = MaterialHelper.CreateMaterial(brush1)                               };                  model.Children.Add(ts);                    var ts2 = new PipeVisual3D                                {                                    Point1 = pt3'                                    Point2 = pt2'                                    Diameter = 0.4'                                    Material = MaterialHelper.CreateMaterial(brush2)                                };                  model.Children.Add(ts2);              }
Magic Number,DnaDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Dna\MainWindow.xaml.cs,AddBases,The following statement contains a magic number: for (int i = 0; i < number; i++)              {                  var u = (double)i / (number - 1);                  var bu = b * u;                  var x1 = Math.Cos(bu + p1) + Math.Cos(bu + p1);                  var y1 = Math.Sin(bu + p1) + Math.Sin(bu + p1);                  var z = u * l;                  var x2 = Math.Cos(bu + p2) + Math.Cos(bu + p2);                  var y2 = Math.Sin(bu + p2) + Math.Sin(bu + p2);                  var pt1 = new Point3D(x1' y1' z);                  var pt2 = new Point3D(x2' y2' z);                  var pt3 = new Point3D(0' 0' z);                    var j = r.Next(4);                  var brush1 = BaseBrush1[j];                  var brush2 = BaseBrush2[j];                    var ts = new PipeVisual3D                               {                                   Point1 = pt1'                                   Point2 = pt3'                                   Diameter = 0.4'                                   Material = MaterialHelper.CreateMaterial(brush1)                               };                  model.Children.Add(ts);                    var ts2 = new PipeVisual3D                                {                                    Point1 = pt3'                                    Point2 = pt2'                                    Diameter = 0.4'                                    Material = MaterialHelper.CreateMaterial(brush2)                                };                  model.Children.Add(ts2);              }
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.Clouds = MaterialHelper.CreateImageMaterial("pack://application:'''/Examples/Earth/clouds.jpg"' 0.5);
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var juneSolstice = new DateTime(now.Year' 6' 22);
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var juneSolstice = new DateTime(now.Year' 6' 22);
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var declination = 23.45 * Math.Cos((now.DayOfYear - juneSolstice.DayOfYear) / 365.25 * 2 * Math.PI);
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var declination = 23.45 * Math.Cos((now.DayOfYear - juneSolstice.DayOfYear) / 365.25 * 2 * Math.PI);
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var declination = 23.45 * Math.Cos((now.DayOfYear - juneSolstice.DayOfYear) / 365.25 * 2 * Math.PI);
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var phi = -now.Hour / 24.0 * Math.PI * 2;
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var phi = -now.Hour / 24.0 * Math.PI * 2;
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var theta = declination / 180 * Math.PI;
Magic Number,EarthDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Earth\MainWindow.xaml.cs,LoadImage,The following statement contains a magic number: client.DownloadDataCompleted += (sender' e) =>                  {                      if (e.Error != null)                      {                          return;                      }                        var image = new BitmapImage();                      image.BeginInit();                      image.StreamSource = new MemoryStream(e.Result);                      image.EndInit();                        setter(MaterialHelper.CreateImageMaterial(image' 0.5));                  };
Magic Number,ExportDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\MainWindow.xaml.cs,ZoomExtents_Click,The following statement contains a magic number: view1.ZoomExtents(500);
Magic Number,ExportDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\MainWindow.xaml.cs,view1_MouseDown,The following statement contains a magic number: if (pt.HasValue)                  view1.Children.Add(new SphereVisual3D() { Center = pt.Value' Radius = 0.03 });
Magic Number,ExportDemo,OctaneLauncher,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\OctaneLauncher.cs,OctaneLauncher,The following statement contains a magic number: this.MaxSamples = 16000;
Magic Number,ExportDemo,OctaneLauncher,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\OctaneLauncher.cs,OctaneLauncher,The following statement contains a magic number: this.FilmWidth = 1000;
Magic Number,ExportDemo,OctaneLauncher,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\OctaneLauncher.cs,OctaneLauncher,The following statement contains a magic number: this.FilmHeight = 600;
Magic Number,ExportDemo,OctaneLauncher,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\OctaneLauncher.cs,OctaneLauncher,The following statement contains a magic number: this.FieldOfView = 45;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double h = 1.85;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double ShoulderWidth = 0.5;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double PelvisWidth = 0.4;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double BodyAngle = 15;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double NeckAngle = -40;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double NeckSideAngle = 9;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double LeftArmOutAngle = -45;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double LeftForeArmAngle = 20;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double LeftHandAngle = -50;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double RightArmOutAngle = -45;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double RightForeArmAngle = 20;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double RightHandAngle = -50;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double LeftThighAngle = 45;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double LeftThighOutAngle = 5;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double LeftLegAngle = 45;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double LeftFootAngle = -10;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double RightThighAngle = -45;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double RightThighOutAngle = 5;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double RightLegAngle = 45;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: double RightFootAngle = 20;
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: body.Children.Add(Box(PelvisWidth' 0.2' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: body.Children.Add(Box(PelvisWidth' 0.2' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup upperBody = Group("upperBody"' new Vector3D(0' 0' h*0.25)' 0' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: upperBody.Children.Add(Box(ShoulderWidth' 0.2' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: upperBody.Children.Add(Box(ShoulderWidth' 0.2' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup neck = Group("neck"' new Vector3D(0' 0' h*0.5)' NeckAngle' NeckSideAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: neck.Children.Add(Box(0.1' 0.1' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: neck.Children.Add(Box(0.1' 0.1' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: neck.Children.Add(Box(0.1' 0.1' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup head = Group("head"' new Vector3D(0' 0' h*0.05)' 0' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: head.Children.Add(Box(0.2' 0.25' 0.35));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: head.Children.Add(Box(0.2' 0.25' 0.35));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: head.Children.Add(Box(0.2' 0.25' 0.35));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup nose = Group("nose"' new Vector3D(0' 0.1' 0.175)' 0' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup nose = Group("nose"' new Vector3D(0' 0.1' 0.175)' 0' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: nose.Children.Add(Box(0.05' 0.05' 0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: nose.Children.Add(Box(0.05' 0.05' 0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: nose.Children.Add(Box(0.05' 0.05' 0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftArm = Group("leftArm"' new Vector3D(-ShoulderWidth/2' 0' h*0.5)' LeftArmAngle'                                           LeftArmOutAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftArm = Group("leftArm"' new Vector3D(-ShoulderWidth/2' 0' h*0.5)' LeftArmAngle'                                           LeftArmOutAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftArm.Children.Add(Box(0.1' 0.1' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftArm.Children.Add(Box(0.1' 0.1' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftArm.Children.Add(Box(0.1' 0.1' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftForeArm = Group("leftForeArm"' new Vector3D(0' 0' h*0.25)' 0' LeftForeArmAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftForeArm.Children.Add(Box(0.08' 0.08' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftForeArm.Children.Add(Box(0.08' 0.08' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftForeArm.Children.Add(Box(0.08' 0.08' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftHand = Group("leftHand"' new Vector3D(0' 0' h*0.2)' LeftHandAngle' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftHand.Children.Add(Box(0.03' 0.08' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftHand.Children.Add(Box(0.03' 0.08' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftHand.Children.Add(Box(0.03' 0.08' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightArm = Group("rightArm"' new Vector3D(ShoulderWidth/2' 0' h*0.5)' RightArmAngle'                                            -RightArmOutAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightArm = Group("rightArm"' new Vector3D(ShoulderWidth/2' 0' h*0.5)' RightArmAngle'                                            -RightArmOutAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightArm.Children.Add(Box(0.1' 0.1' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightArm.Children.Add(Box(0.1' 0.1' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightArm.Children.Add(Box(0.1' 0.1' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightForeArm = Group("rightForeArm"' new Vector3D(0' 0' h*0.25)' 0' -RightForeArmAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightForeArm.Children.Add(Box(0.08' 0.08' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightForeArm.Children.Add(Box(0.08' 0.08' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightForeArm.Children.Add(Box(0.08' 0.08' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightHand = Group("rightHand"' new Vector3D(0' 0' h*0.2)' RightHandAngle' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightHand.Children.Add(Box(0.03' 0.08' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightHand.Children.Add(Box(0.03' 0.08' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightHand.Children.Add(Box(0.03' 0.08' h*0.05));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftThigh = Group("leftThigh"' new Vector3D(-PelvisWidth/2' 0' 0)' 180 - LeftThighAngle'                                             -LeftThighOutAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftThigh = Group("leftThigh"' new Vector3D(-PelvisWidth/2' 0' 0)' 180 - LeftThighAngle'                                             -LeftThighOutAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftThigh.Children.Add(Box(0.18' 0.18' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftThigh.Children.Add(Box(0.18' 0.18' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftThigh.Children.Add(Box(0.18' 0.18' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftLeg = Group("leftLeg"' new Vector3D(0' 0' h*0.25)' LeftLegAngle' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftLeg.Children.Add(Box(0.12' 0.12' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftLeg.Children.Add(Box(0.12' 0.12' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftLeg.Children.Add(Box(0.12' 0.12' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftFoot = Group("leftFoot"' new Vector3D(0' 0' h*0.2)' -90 + LeftFootAngle' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup leftFoot = Group("leftFoot"' new Vector3D(0' 0' h*0.2)' -90 + LeftFootAngle' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftFoot.Children.Add(Box(0.1' 0.1' 0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftFoot.Children.Add(Box(0.1' 0.1' 0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: leftFoot.Children.Add(Box(0.1' 0.1' 0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightThigh = Group("rightThigh"' new Vector3D(PelvisWidth/2' 0' 0)' 180 - RightThighAngle'                                              RightThighOutAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightThigh = Group("rightThigh"' new Vector3D(PelvisWidth/2' 0' 0)' 180 - RightThighAngle'                                              RightThighOutAngle' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightThigh.Children.Add(Box(0.18' 0.18' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightThigh.Children.Add(Box(0.18' 0.18' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightThigh.Children.Add(Box(0.18' 0.18' h*0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightLeg = Group("rightLeg"' new Vector3D(0' 0' h*0.25)' RightLegAngle' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightLeg.Children.Add(Box(0.12' 0.12' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightLeg.Children.Add(Box(0.12' 0.12' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightLeg.Children.Add(Box(0.12' 0.12' h*0.2));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightFoot = Group("rightFoot"' new Vector3D(0' 0' h*0.2)' -90 + RightFootAngle' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: Model3DGroup rightFoot = Group("rightFoot"' new Vector3D(0' 0' h*0.2)' -90 + RightFootAngle' 0' 0);
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightFoot.Children.Add(Box(0.1' 0.1' 0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightFoot.Children.Add(Box(0.1' 0.1' 0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,StickFigure,The following statement contains a magic number: rightFoot.Children.Add(Box(0.1' 0.1' 0.25));
Magic Number,ExportDemo,StickFigure,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Export\StickFigure.cs,Box,The following statement contains a magic number: mb.AddBox(new Point3D(0' 0' height*0.5)' width' length' height);
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: tube.Fill = new SolidColorBrush(Color.FromArgb(80' 255' 255' 255));
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: tube.Fill = new SolidColorBrush(Color.FromArgb(80' 255' 255' 255));
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: tube.Fill = new SolidColorBrush(Color.FromArgb(80' 255' 255' 255));
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: tube.Fill = new SolidColorBrush(Color.FromArgb(80' 255' 255' 255));
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: Children.Add(new SphereVisual3D() { Center = p1' Radius = 100' Material = Materials.Green });
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: Children.Add(new SphereVisual3D() { Center = p2' Radius = 100' Material = Materials.Red });
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: const double tubeDiameter = 60;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: const int n = 100;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,FlightVisual3D,The following statement contains a magic number: tube.ThetaDiv = 16;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,PointToLatLon,The following statement contains a magic number: lon = Math.Atan2(pt.Y' pt.X) * 180 / Math.PI;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,PointToLatLon,The following statement contains a magic number: lon += 180;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,PointToLatLon,The following statement contains a magic number: if (lon > 180) lon -= 360;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,PointToLatLon,The following statement contains a magic number: if (lon > 180) lon -= 360;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,PointToLatLon,The following statement contains a magic number: if (lon < -180) lon += 360;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,PointToLatLon,The following statement contains a magic number: if (lon < -180) lon += 360;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,PointToLatLon,The following statement contains a magic number: lat = Math.Atan2(pt.Z' a) * 180 / Math.PI;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,LatLonToPoint,The following statement contains a magic number: longitude -= 180;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,LatLonToPoint,The following statement contains a magic number: latitude = latitude / 180 * Math.PI;
Magic Number,FlightsDemo,FlightVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\FlightVisual3D.cs,LatLonToPoint,The following statement contains a magic number: longitude = longitude / 180 * Math.PI;
Magic Number,FlightsDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Flights\MainWindow.xaml.cs,FromToChanged,The following statement contains a magic number: if (box != null)              {                  var result = FindAirports(box.Text);                  box.ItemsSource = result.Length < 1000 ? result : null;              }
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(0' 7' 100)' 0));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(0' 7' 100)' 0));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(32' 107' 203)' 0.15));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(32' 107' 203)' 0.15));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(32' 107' 203)' 0.15));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(32' 107' 203)' 0.15));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(237' 255' 255)' 0.42));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(237' 255' 255)' 0.42));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(237' 255' 255)' 0.42));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(237' 255' 255)' 0.42));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(255' 170' 0)' 0.64));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(255' 170' 0)' 0.64));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(255' 170' 0)' 0.64));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromRgb(0' 0' 0)' 0.854));
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: gradientMaterial = MaterialHelper.CreateMaterial(brush'null'Brushes.Gray'1.0'200);
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: MaxIterations = 32;
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,MandelbrotMountain,The following statement contains a magic number: HeightFactor = 0.3;
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,Generate,The following statement contains a magic number: solver.Width = 75 * Level;
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,Generate,The following statement contains a magic number: solver.Height = 70 * Level;
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,CreateMesh,The following statement contains a magic number: for (int i = 0; i < ny; i++)              {                  for (int j = 0; j < nx; j++)                  {                      double z = (double)solver.ImageBuffer[ij] / solver.MaxIterations;                      geometry.Positions.Add(new Point3D(solver.Xvalues[ij]' solver.Yvalues[ij]' z * HeightFactor));                      double u = z * 0.854;                      geometry.TextureCoordinates.Add(new Point(u' 0));                      ij++;                  }              }
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,CreateModel,The following statement contains a magic number: TriangleCount = geometry.TriangleIndices.Count / 3;
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = 0; i < 2; i++)                      for (int j = 0; j < 2; j++)                      {                          newCenters.Add(new Point3D(center.X + (i - 0.5) * L' center.Y + (j - 0.5) * L' center.Z));                      }                  newCenters.Add(new Point3D(center.X' center.Y' center.Z + L));                }
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = 0; i < 2; i++)                      for (int j = 0; j < 2; j++)                      {                          newCenters.Add(new Point3D(center.X + (i - 0.5) * L' center.Y + (j - 0.5) * L' center.Z));                      }                  newCenters.Add(new Point3D(center.X' center.Y' center.Z + L));                }
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = 0; i < 2; i++)                      for (int j = 0; j < 2; j++)                      {                          newCenters.Add(new Point3D(center.X + (i - 0.5) * L' center.Y + (j - 0.5) * L' center.Z));                      }                  newCenters.Add(new Point3D(center.X' center.Y' center.Z + L));                }
Magic Number,FractalDemo,MandelbrotMountain,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotMountain.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = 0; i < 2; i++)                      for (int j = 0; j < 2; j++)                      {                          newCenters.Add(new Point3D(center.X + (i - 0.5) * L' center.Y + (j - 0.5) * L' center.Z));                      }                  newCenters.Add(new Point3D(center.X' center.Y' center.Z + L));                }
Magic Number,FractalDemo,MandelbrotSolver,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotSolver.cs,MandelbrotSolver,The following statement contains a magic number: X0 = -2;
Magic Number,FractalDemo,MandelbrotSolver,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotSolver.cs,MandelbrotSolver,The following statement contains a magic number: Y0 = -1.5;
Magic Number,FractalDemo,MandelbrotSolver,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotSolver.cs,MandelbrotSolver,The following statement contains a magic number: Y1 = 1.5;
Magic Number,FractalDemo,MandelbrotSolver,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotSolver.cs,MandelbrotSolver,The following statement contains a magic number: MaxIterations = 40;
Magic Number,FractalDemo,MandelbrotSolver,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotSolver.cs,Solve,The following statement contains a magic number: while (x * x + y * y <= 4 && iteration < maxIterations)              {                  double xtemp = x * x - y * y + x0;                  y = 2 * x * y + y0;                  x = xtemp;                  iteration++;              }
Magic Number,FractalDemo,MandelbrotSolver,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotSolver.cs,Solve,The following statement contains a magic number: while (x * x + y * y <= 4 && iteration < maxIterations)              {                  double xtemp = x * x - y * y + x0;                  y = 2 * x * y + y0;                  x = xtemp;                  iteration++;              }
Magic Number,FractalDemo,MandelbrotSolver,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MandelbrotSolver.cs,Update,The following statement contains a magic number: return w.ElapsedMilliseconds*0.001;
Magic Number,FractalDemo,MengerSponge,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MengerSponge.cs,Generate,The following statement contains a magic number: for (int i = 0; i < Level; i++)              {                  L /= 3;                  cubeCenters = SubDivide(cubeCenters' L);              }
Magic Number,FractalDemo,MengerSponge,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MengerSponge.cs,AddGeometry,The following statement contains a magic number: TriangleCount = geometry.TriangleIndices.Count / 3;
Magic Number,FractalDemo,MengerSponge,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MengerSponge.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = -1; i < 2; i++)                      for (int j = -1; j < 2; j++)                          for (int k = -1; k < 2; k++)                          {                              int c = 0;                              if (i == 0) c++;                              if (j == 0) c++;                              if (k == 0) c++;                              if (c < 2)                              {                                  newCenters.Add(new Point3D(center.X + i * L' center.Y + j * L' center.Z + k * L));                              }                          }                }
Magic Number,FractalDemo,MengerSponge,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MengerSponge.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = -1; i < 2; i++)                      for (int j = -1; j < 2; j++)                          for (int k = -1; k < 2; k++)                          {                              int c = 0;                              if (i == 0) c++;                              if (j == 0) c++;                              if (k == 0) c++;                              if (c < 2)                              {                                  newCenters.Add(new Point3D(center.X + i * L' center.Y + j * L' center.Z + k * L));                              }                          }                }
Magic Number,FractalDemo,MengerSponge,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MengerSponge.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = -1; i < 2; i++)                      for (int j = -1; j < 2; j++)                          for (int k = -1; k < 2; k++)                          {                              int c = 0;                              if (i == 0) c++;                              if (j == 0) c++;                              if (k == 0) c++;                              if (c < 2)                              {                                  newCenters.Add(new Point3D(center.X + i * L' center.Y + j * L' center.Z + k * L));                              }                          }                }
Magic Number,FractalDemo,MengerSponge,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\MengerSponge.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = -1; i < 2; i++)                      for (int j = -1; j < 2; j++)                          for (int k = -1; k < 2; k++)                          {                              int c = 0;                              if (i == 0) c++;                              if (j == 0) c++;                              if (k == 0) c++;                              if (c < 2)                              {                                  newCenters.Add(new Point3D(center.X + i * L' center.Y + j * L' center.Z + k * L));                              }                          }                }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Generate,The following statement contains a magic number: TriangleCount = mesh.TriangleIndices.Count / 3;
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var r1 = new RotateTransform3D(new AxisAngleRotation3D(x' 80));
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var r2 = new RotateTransform3D(new AxisAngleRotation3D(x' -70));
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var r3 = new RotateTransform3D(new AxisAngleRotation3D(x' -10));
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var t1 = new TranslateTransform3D(0' 0' 0.5);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var t2 = new TranslateTransform3D(0' 0' 0.7);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s1 = new ScaleTransform3D(0.5' 0.5' 0.5);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s1 = new ScaleTransform3D(0.5' 0.5' 0.5);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s1 = new ScaleTransform3D(0.5' 0.5' 0.5);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s2 = new ScaleTransform3D(0.3' 0.3' 0.3);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s2 = new ScaleTransform3D(0.3' 0.3' 0.3);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s2 = new ScaleTransform3D(0.3' 0.3' 0.3);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s3 = new ScaleTransform3D(0.8' 0.8' 0.8);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s3 = new ScaleTransform3D(0.8' 0.8' 0.8);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,Plant,The following statement contains a magic number: var s3 = new ScaleTransform3D(0.8' 0.8' 0.8);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: bool isStem = angle < 10;
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: double h = isStem ? 2.5 : 2;
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: double h = isStem ? 2.5 : 2;
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: double r = (Level+1-p)*0.1;
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: mesh.AddCone(p0' direction' r' r * 0.8' h' false' false' 12);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: mesh.AddCone(p0' direction' r' r * 0.8' h' false' false' 12);
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,AddBranch,The following statement contains a magic number: if (isStem)              {                  var rightVector=direction.FindAnyPerpendicular();                  var t0 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' GetRandom(3)));                  AddBranch(mesh' p1' t0.Transform(direction)' p + 1);                    var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' 95 + GetRandom(5)));                  var d1 = t1.Transform(direction);                  int nBranches = 5+GetRandom(2);                  for (int i = 0; i < nBranches; i++)                  {                      double a = 360.0 * i / nBranches + GetRandom(25);                      var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' a));                      AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  }              } else              {                  var rightVector=Vector3D.CrossProduct(direction' UpVector);                  var t1 = new RotateTransform3D(new AxisAngleRotation3D(rightVector' -5 + GetRandom(5)));                  var t2 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' 45+GetRandom(10)));                  var t3 = new RotateTransform3D(new AxisAngleRotation3D(UpVector' -45 + GetRandom(10)));                  var d1 = t1.Transform(direction);                  AddBranch(mesh' p1' d1' p + 1);                  AddBranch(mesh' p1' t2.Transform(d1)' p + 1);                  AddBranch(mesh' p1' t3.Transform(d1)' p + 1);              }
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,GetRandom,The following statement contains a magic number: return (r.NextDouble()*2 - 1)*plusMinus;
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,GetRandom,The following statement contains a magic number: return r.Next(plusMinus*2+1) - plusMinus;
Magic Number,FractalDemo,Plant,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\Plant.cs,GetAngleBetween,The following statement contains a magic number: return Math.Acos(dp)*180/Math.PI;
Magic Number,FractalDemo,SierpinskiPyramid,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\SierpinskiPyramid.cs,Generate,The following statement contains a magic number: centers.Add(new Point3D(0' 0' -0.5));
Magic Number,FractalDemo,SierpinskiPyramid,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\SierpinskiPyramid.cs,Generate,The following statement contains a magic number: for (int i = 0; i < Level; i++)              {                  l /= 2;                  centers = SubDivide(centers' l);              }
Magic Number,FractalDemo,SierpinskiPyramid,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\SierpinskiPyramid.cs,AddGeometry,The following statement contains a magic number: TriangleCount = builder.TriangleIndices.Count / 3;
Magic Number,FractalDemo,SierpinskiPyramid,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\SierpinskiPyramid.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = 0; i < 2; i++)                      for (int j = 0; j < 2; j++)                      {                          newCenters.Add(new Point3D(center.X + (i - 0.5) * l' center.Y + (j - 0.5) * l' center.Z));                      }                  newCenters.Add(new Point3D(center.X' center.Y' center.Z + l));                }
Magic Number,FractalDemo,SierpinskiPyramid,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\SierpinskiPyramid.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = 0; i < 2; i++)                      for (int j = 0; j < 2; j++)                      {                          newCenters.Add(new Point3D(center.X + (i - 0.5) * l' center.Y + (j - 0.5) * l' center.Z));                      }                  newCenters.Add(new Point3D(center.X' center.Y' center.Z + l));                }
Magic Number,FractalDemo,SierpinskiPyramid,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\SierpinskiPyramid.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = 0; i < 2; i++)                      for (int j = 0; j < 2; j++)                      {                          newCenters.Add(new Point3D(center.X + (i - 0.5) * l' center.Y + (j - 0.5) * l' center.Z));                      }                  newCenters.Add(new Point3D(center.X' center.Y' center.Z + l));                }
Magic Number,FractalDemo,SierpinskiPyramid,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\Fractals\SierpinskiPyramid.cs,SubDivide,The following statement contains a magic number: foreach (var center in centers)              {                  for (int i = 0; i < 2; i++)                      for (int j = 0; j < 2; j++)                      {                          newCenters.Add(new Point3D(center.X + (i - 0.5) * l' center.Y + (j - 0.5) * l' center.Z));                      }                  newCenters.Add(new Point3D(center.X' center.Y' center.Z + l));                }
Magic Number,FractalDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Level = 2;
Magic Number,FractalDemo,MultiValueToBoolConverter,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\MainViewModel.cs,ConvertBack,The following statement contains a magic number: if ((bool)value)              {                  return new object[] { 2 };              }
Magic Number,FractalDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Fractal\MainWindow.xaml.cs,ZoomExtents_Click,The following statement contains a magic number: view1.ZoomExtents(400);
Magic Number,HelixToolkit.Wpf,HalfEdgeMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\HalfEdgeMesh.cs,HalfEdgeMesh,The following statement contains a magic number: if (triangleIndices != null)              {                  // Add each triangle face and update the halfedge structures                  for (int i = 0; i < triangleIndices.Count; i += 3)                  {                      this.AddFace(triangleIndices[i]' triangleIndices[i + 1]' triangleIndices[i + 2]);                  }              }
Magic Number,HelixToolkit.Wpf,HalfEdgeMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\HalfEdgeMesh.cs,HalfEdgeMesh,The following statement contains a magic number: if (triangleIndices != null)              {                  // Add each triangle face and update the halfedge structures                  for (int i = 0; i < triangleIndices.Count; i += 3)                  {                      this.AddFace(triangleIndices[i]' triangleIndices[i + 1]' triangleIndices[i + 2]);                  }              }
Magic Number,HelixToolkit.Wpf,HalfEdgeMeshVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\HalfEdgeMeshVisual3D.cs,UpdateVisuals,The following statement contains a magic number: if (this.VertexRadius > 0)              {                  // Add the vertices                  foreach (var vertex in this.Mesh.Vertices)                  {                      var gm = new MeshBuilder(false' false);                      gm.AddSubdivisionSphere(vertex.Position' this.VertexRadius' 4);                      var vertexElement = new ModelUIElement3D                          {                             Model = new GeometryModel3D(gm.ToMesh()' this.VertexMaterial)                          };                      var currentVertex = vertex;                      vertexElement.MouseLeftButtonDown += (s' e) => this.HighlightVertex(currentVertex);                      this.vertexVisuals.Add(vertex' vertexElement);                      this.Add(vertexElement);                  }              }
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: double width = Columns*grid - margin*2;
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: double length = Rows*grid - margin*2;
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < Columns; i++)                  for (int j = 0; j < Rows; j++)                  {                      var o = new Point3D((i + 0.5)*grid' (j + 0.5)*grid' height);                      builder.AddCone(o' new Vector3D(0' 0' 1)' knobDiameter/2' knobDiameter/2' knobHeight' false' true'                                      Divisions);                      builder.AddPipe(new Point3D(o.X' o.Y' o.Z - wallThickness)' new Point3D(o.X' o.Y' wallThickness)'                                      knobDiameter' outerDiameter' Divisions);                  }
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < Columns; i++)                  for (int j = 0; j < Rows; j++)                  {                      var o = new Point3D((i + 0.5)*grid' (j + 0.5)*grid' height);                      builder.AddCone(o' new Vector3D(0' 0' 1)' knobDiameter/2' knobDiameter/2' knobHeight' false' true'                                      Divisions);                      builder.AddPipe(new Point3D(o.X' o.Y' o.Z - wallThickness)' new Point3D(o.X' o.Y' wallThickness)'                                      knobDiameter' outerDiameter' Divisions);                  }
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < Columns; i++)                  for (int j = 0; j < Rows; j++)                  {                      var o = new Point3D((i + 0.5)*grid' (j + 0.5)*grid' height);                      builder.AddCone(o' new Vector3D(0' 0' 1)' knobDiameter/2' knobDiameter/2' knobHeight' false' true'                                      Divisions);                      builder.AddPipe(new Point3D(o.X' o.Y' o.Z - wallThickness)' new Point3D(o.X' o.Y' wallThickness)'                                      knobDiameter' outerDiameter' Divisions);                  }
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: for (int i = 0; i < Columns; i++)                  for (int j = 0; j < Rows; j++)                  {                      var o = new Point3D((i + 0.5)*grid' (j + 0.5)*grid' height);                      builder.AddCone(o' new Vector3D(0' 0' 1)' knobDiameter/2' knobDiameter/2' knobHeight' false' true'                                      Divisions);                      builder.AddPipe(new Point3D(o.X' o.Y' o.Z - wallThickness)' new Point3D(o.X' o.Y' wallThickness)'                                      knobDiameter' outerDiameter' Divisions);                  }
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(Columns * 0.5 * grid' Rows * 0.5 * grid' height - wallThickness / 2)' width' length'                            wallThickness'                            BoxFaces.All);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(Columns * 0.5 * grid' Rows * 0.5 * grid' height - wallThickness / 2)' width' length'                            wallThickness'                            BoxFaces.All);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(Columns * 0.5 * grid' Rows * 0.5 * grid' height - wallThickness / 2)' width' length'                            wallThickness'                            BoxFaces.All);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(margin + wallThickness / 2' Rows * 0.5 * grid' height / 2 - wallThickness / 2)'                             wallThickness' length' height - wallThickness'                             BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(margin + wallThickness / 2' Rows * 0.5 * grid' height / 2 - wallThickness / 2)'                             wallThickness' length' height - wallThickness'                             BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(margin + wallThickness / 2' Rows * 0.5 * grid' height / 2 - wallThickness / 2)'                             wallThickness' length' height - wallThickness'                             BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(margin + wallThickness / 2' Rows * 0.5 * grid' height / 2 - wallThickness / 2)'                             wallThickness' length' height - wallThickness'                             BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(                  new Point3D(Columns * grid - margin - wallThickness / 2' Rows * 0.5 * grid' height / 2 - wallThickness / 2)'                  wallThickness' length' height - wallThickness'                  BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(                  new Point3D(Columns * grid - margin - wallThickness / 2' Rows * 0.5 * grid' height / 2 - wallThickness / 2)'                  wallThickness' length' height - wallThickness'                  BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(                  new Point3D(Columns * grid - margin - wallThickness / 2' Rows * 0.5 * grid' height / 2 - wallThickness / 2)'                  wallThickness' length' height - wallThickness'                  BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(                  new Point3D(Columns * grid - margin - wallThickness / 2' Rows * 0.5 * grid' height / 2 - wallThickness / 2)'                  wallThickness' length' height - wallThickness'                  BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(Columns * 0.5 * grid' margin + wallThickness / 2' height / 2 - wallThickness / 2)'                             width' wallThickness' height - wallThickness'                             BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(Columns * 0.5 * grid' margin + wallThickness / 2' height / 2 - wallThickness / 2)'                             width' wallThickness' height - wallThickness'                             BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(Columns * 0.5 * grid' margin + wallThickness / 2' height / 2 - wallThickness / 2)'                             width' wallThickness' height - wallThickness'                             BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(new Point3D(Columns * 0.5 * grid' margin + wallThickness / 2' height / 2 - wallThickness / 2)'                             width' wallThickness' height - wallThickness'                             BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(                  new Point3D(Columns * 0.5 * grid' Rows * grid - margin - wallThickness / 2' height / 2 - wallThickness / 2)'                  width' wallThickness' height - wallThickness'                  BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(                  new Point3D(Columns * 0.5 * grid' Rows * grid - margin - wallThickness / 2' height / 2 - wallThickness / 2)'                  width' wallThickness' height - wallThickness'                  BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(                  new Point3D(Columns * 0.5 * grid' Rows * grid - margin - wallThickness / 2' height / 2 - wallThickness / 2)'                  width' wallThickness' height - wallThickness'                  BoxFaces.All ^ BoxFaces.Top);
Magic Number,HelixToolkit.Wpf,LegoVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\LegoVisual3D.cs,Tessellate,The following statement contains a magic number: builder.AddBox(                  new Point3D(Columns * 0.5 * grid' Rows * grid - margin - wallThickness / 2' height / 2 - wallThickness / 2)'                  width' wallThickness' height - wallThickness'                  BoxFaces.All ^ BoxFaces.Top);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(3' 2' 1' 0);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(3' 2' 1' 0);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(4' 5' 6' 7);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(4' 5' 6' 7);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(4' 5' 6' 7);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(4' 5' 6' 7);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(0' 1' 5' 4);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(0' 1' 5' 4);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(1' 2' 6' 5);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(1' 2' 6' 5);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(1' 2' 6' 5);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(2' 3' 7' 6);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(2' 3' 7' 6);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(2' 3' 7' 6);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(2' 3' 7' 6);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(3' 0' 4' 7);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(3' 0' 4' 7);
Magic Number,HalfEdgeMeshDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\HalfEdgeMesh\MainWindow.xaml.cs,CreateUnitCubeMesh,The following statement contains a magic number: mesh.AddFace(3' 0' 4' 7);
Magic Number,LegoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Lego\MainWindow.xaml.cs,MainWindow_Loaded,The following statement contains a magic number: view1.Camera.FarPlaneDistance = 10;
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,MainViewModel,The following statement contains a magic number: rho = 28;
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,MainViewModel,The following statement contains a magic number: sigma = 10;
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,MainViewModel,The following statement contains a magic number: beta = 8.0 / 3;
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,MainViewModel,The following statement contains a magic number: beta = 8.0 / 3;
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Func<double[]' double[]> lorenzAttractor = x =>                                                             {                                                                 var dx = new double[3];                                                                 dx[0] = sigma * (x[1] - x[0]);                                                                 dx[1] = x[0] * (rho - x[2]) - x[1];                                                                 dx[2] = x[0] * x[1] - beta * x[2];                                                                 return dx;                                                             };
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Func<double[]' double[]> lorenzAttractor = x =>                                                             {                                                                 var dx = new double[3];                                                                 dx[0] = sigma * (x[1] - x[0]);                                                                 dx[1] = x[0] * (rho - x[2]) - x[1];                                                                 dx[2] = x[0] * x[1] - beta * x[2];                                                                 return dx;                                                             };
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Func<double[]' double[]> lorenzAttractor = x =>                                                             {                                                                 var dx = new double[3];                                                                 dx[0] = sigma * (x[1] - x[0]);                                                                 dx[1] = x[0] * (rho - x[2]) - x[1];                                                                 dx[2] = x[0] * x[1] - beta * x[2];                                                                 return dx;                                                             };
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: Func<double[]' double[]> lorenzAttractor = x =>                                                             {                                                                 var dx = new double[3];                                                                 dx[0] = sigma * (x[1] - x[0]);                                                                 dx[1] = x[0] * (rho - x[2]) - x[1];                                                                 dx[2] = x[0] * x[1] - beta * x[2];                                                                 return dx;                                                             };
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: var x0 = new[] { 0' 1' 1.05 };
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: IEnumerable<double[]> solution = EulerSolver(lorenzAttractor' x0' 25);
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: List<Point3D> path = solution.Select(x => new Point3D(x[0]' x[1]' x[2])).ToList();
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: gm.AddTube(path' 0.8' 10' false);
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: gm.AddTube(path' 0.8' 10' false);
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: if (directionArrows)              {                  // sphere at the initial point                  gm.AddSphere(path[0]' 1);                  // arrow heads every 100 point                  for (int i = 100; i + 1 < path.Count; i += 100)                  {                      gm.AddArrow(path[i]' path[i + 1]' 0.8);                  }                  // arrow head at the end                  Point3D p0 = path[path.Count - 2];                  Point3D p1 = path[path.Count - 1];                  var d = new Vector3D(p1.X - p0.X' p1.Y - p0.Y' p1.Z - p0.Z);                  d.Normalize();                  Point3D p2 = p1 + d * 2;                  gm.AddArrow(p1' p2' 0.8);              }
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: if (directionArrows)              {                  // sphere at the initial point                  gm.AddSphere(path[0]' 1);                  // arrow heads every 100 point                  for (int i = 100; i + 1 < path.Count; i += 100)                  {                      gm.AddArrow(path[i]' path[i + 1]' 0.8);                  }                  // arrow head at the end                  Point3D p0 = path[path.Count - 2];                  Point3D p1 = path[path.Count - 1];                  var d = new Vector3D(p1.X - p0.X' p1.Y - p0.Y' p1.Z - p0.Z);                  d.Normalize();                  Point3D p2 = p1 + d * 2;                  gm.AddArrow(p1' p2' 0.8);              }
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: if (directionArrows)              {                  // sphere at the initial point                  gm.AddSphere(path[0]' 1);                  // arrow heads every 100 point                  for (int i = 100; i + 1 < path.Count; i += 100)                  {                      gm.AddArrow(path[i]' path[i + 1]' 0.8);                  }                  // arrow head at the end                  Point3D p0 = path[path.Count - 2];                  Point3D p1 = path[path.Count - 1];                  var d = new Vector3D(p1.X - p0.X' p1.Y - p0.Y' p1.Z - p0.Z);                  d.Normalize();                  Point3D p2 = p1 + d * 2;                  gm.AddArrow(p1' p2' 0.8);              }
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: if (directionArrows)              {                  // sphere at the initial point                  gm.AddSphere(path[0]' 1);                  // arrow heads every 100 point                  for (int i = 100; i + 1 < path.Count; i += 100)                  {                      gm.AddArrow(path[i]' path[i + 1]' 0.8);                  }                  // arrow head at the end                  Point3D p0 = path[path.Count - 2];                  Point3D p1 = path[path.Count - 1];                  var d = new Vector3D(p1.X - p0.X' p1.Y - p0.Y' p1.Z - p0.Z);                  d.Normalize();                  Point3D p2 = p1 + d * 2;                  gm.AddArrow(p1' p2' 0.8);              }
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: if (directionArrows)              {                  // sphere at the initial point                  gm.AddSphere(path[0]' 1);                  // arrow heads every 100 point                  for (int i = 100; i + 1 < path.Count; i += 100)                  {                      gm.AddArrow(path[i]' path[i + 1]' 0.8);                  }                  // arrow head at the end                  Point3D p0 = path[path.Count - 2];                  Point3D p1 = path[path.Count - 1];                  var d = new Vector3D(p1.X - p0.X' p1.Y - p0.Y' p1.Z - p0.Z);                  d.Normalize();                  Point3D p2 = p1 + d * 2;                  gm.AddArrow(p1' p2' 0.8);              }
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,UpdateModel,The following statement contains a magic number: if (directionArrows)              {                  // sphere at the initial point                  gm.AddSphere(path[0]' 1);                  // arrow heads every 100 point                  for (int i = 100; i + 1 < path.Count; i += 100)                  {                      gm.AddArrow(path[i]' path[i + 1]' 0.8);                  }                  // arrow head at the end                  Point3D p0 = path[path.Count - 2];                  Point3D p1 = path[path.Count - 1];                  var d = new Vector3D(p1.X - p0.X' p1.Y - p0.Y' p1.Z - p0.Z);                  d.Normalize();                  Point3D p2 = p1 + d * 2;                  gm.AddArrow(p1' p2' 0.8);              }
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,EulerSolver,The following statement contains a magic number: const double h = 0.008;
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,EulerSolver,The following statement contains a magic number: while (t < tSpan)              {                  t += h;                  double[] xprime = dx(results[j]);                  var x = new double[3];                  for (int i = 0; i < 3; i++)                      x[i] = results[j][i] + xprime[i] * h;                  j++;                  results.Add(x);              }
Magic Number,LorenzAttractorDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\LorenzAttractor\MainViewModel.cs,EulerSolver,The following statement contains a magic number: while (t < tSpan)              {                  t += h;                  double[] xprime = dx(results[j]);                  var x = new double[3];                  for (int i = 0; i < 3; i++)                      x[i] = results[j][i] + xprime[i] * h;                  j++;                  results.Add(x);              }
Magic Number,MazeDemo,Cell,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\Cell.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (this.i * 397) ^ this.j;              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: if (width % 2 == 0)              {                  throw new InvalidOperationException("Width must be an odd number");              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: if (height % 2 == 0)              {                  throw new InvalidOperationException("Height must be an odd number");              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: for (int i = 0; i < height; i++)              {                  for (int j = 0; j < width; j++)                  {                      maze[i' j] = i % 2 == 0 || j % 2 == 0;                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: for (int i = 0; i < height; i++)              {                  for (int j = 0; j < width; j++)                  {                      maze[i' j] = i % 2 == 0 || j % 2 == 0;                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MazeGenerator2,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator2.cs,Generate,The following statement contains a magic number: while (stack.Count > 0)              {                  var neighbours = new List<Cell>();                  int i = current.I;                  int j = current.J;                    // Find unvisited neighbours                  if (i > 1 && isVisited(i - 2' j))                  {                      neighbours.Add(new Cell(i - 2' j));                  }                    if (j > 1 && isVisited(i' j - 2))                  {                      neighbours.Add(new Cell(i' j - 2));                  }                    if (i + 2 < height && isVisited(i + 2' j))                  {                      neighbours.Add(new Cell(i + 2' j));                  }                    if (j + 2 < width && isVisited(i' j + 2))                  {                      neighbours.Add(new Cell(i' j + 2));                  }                    if (neighbours.Count > 0)                  {                      var next = neighbours[random.Next(neighbours.Count)];                        // break the wall between current and next cell                      int ii = (next.I + current.I) / 2;                      int jj = (next.J + current.J) / 2;                      maze[ii' jj] = false;                        stack.Push(current);                      current = next;                  }                  else                  {                      current = stack.Pop();                  }              }
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CoercePosition,The following statement contains a magic number: var i = (int)(position.X + m * 0.5 + 0.5);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CoercePosition,The following statement contains a magic number: var i = (int)(position.X + m * 0.5 + 0.5);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CoercePosition,The following statement contains a magic number: var j = (int)(position.Y + n * 0.5 + 0.5);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CoercePosition,The following statement contains a magic number: var j = (int)(position.Y + n * 0.5 + 0.5);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CoercePosition,The following statement contains a magic number: if (i >= 0 && i < m && j >= 0 && j < n && position.Z >= 0 && position.Z < 2)              {                  insideWall = this.maze[i' j];              }
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CoercePosition,The following statement contains a magic number: if (insideWall)              {                  var delta = position - this.previousPoint;                  return this.previousPoint - delta * 2;              }
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateMaze,The following statement contains a magic number: var mazeGenerator = new MazeGenerator2 { Width = 21' Height = 31 };
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateMaze,The following statement contains a magic number: var mazeGenerator = new MazeGenerator2 { Width = 21' Height = 31 };
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateMaze,The following statement contains a magic number: var end = new Cell(this.maze.GetLength(0) - 2' this.maze.GetLength(1) - 2);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateMaze,The following statement contains a magic number: var end = new Cell(this.maze.GetLength(0) - 2' this.maze.GetLength(1) - 2);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateMaze,The following statement contains a magic number: this.offsetX = -m * 0.5;
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateMaze,The following statement contains a magic number: this.offsetY = -n * 0.5;
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateMaze,The following statement contains a magic number: this.GroundGeometry = this.CreateGroundGeometry(this.maze' 1' -0.005);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateMazeGeometry,The following statement contains a magic number: for (int i = 0; i < m; i++)              {                  for (int j = 0; j < n; j++)                  {                      if (themaze[i' j])                      {                          builder.AddBox(this.GetPosition(i' j' height * 0.5)' size' size' height);                      }                  }              }
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateSolutionGeometry,The following statement contains a magic number: var spline = CanonicalSplineHelper.CreateSpline(path' 0.7' null' false' 0.05);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateSolutionGeometry,The following statement contains a magic number: var spline = CanonicalSplineHelper.CreateSpline(path' 0.7' null' false' 0.05);
Magic Number,MazeDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainViewModel.cs,CreateSolutionGeometry,The following statement contains a magic number: builder.AddTube(spline' diameter' 13' false);
Magic Number,MazeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: view.Camera.NearPlaneDistance = 0.001;
Magic Number,MazeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: view.Camera.FarPlaneDistance = 1000;
Magic Number,MazeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (pc != null)              {                  pc.FieldOfView = 90;              }
Magic Number,MazeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainWindow.xaml.cs,MainWindow_Loaded,The following statement contains a magic number: overview.SetView(new Point3D(0' 0' 60)' new Vector3D(0' 0' -60)' new Vector3D(0' 1' 0)' 0);
Magic Number,MazeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MainWindow.xaml.cs,MainWindow_Loaded,The following statement contains a magic number: overview.SetView(new Point3D(0' 0' 60)' new Vector3D(0' 0' -60)' new Vector3D(0' 1' 0)' 0);
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,MazeGenerator1,The following statement contains a magic number: this.Width = 31;
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,MazeGenerator1,The following statement contains a magic number: this.Height = 21;
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,MazeGenerator1,The following statement contains a magic number: this.Density = 0.75;
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,MazeGenerator1,The following statement contains a magic number: this.Complexity = 0.75;
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: if (width % 2 == 0)              {                  throw new InvalidOperationException("Width must be an odd number");              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: if (height % 2 == 0)              {                  throw new InvalidOperationException("Height must be an odd number");              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: int complexityLevel = (int)(complexity * (5 * (height + width)));
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: int densityLevel = (int)(density * ((height / 2) * (width / 2)));
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: int densityLevel = (int)(density * ((height / 2) * (width / 2)));
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeGenerator1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeGenerator1.cs,Generate,The following statement contains a magic number: for (int i = 0; i < densityLevel; i++)              {                  int x = random.Next(width / 2 + 1) * 2;                  int y = random.Next(height / 2 + 1) * 2;                  maze[y' x] = true;                  for (int j = 0; j < complexityLevel; j++)                  {                      var neighbours = new List<int[]>();                      if (x > 1)                      {                          neighbours.Add(new[] { y' x - 2 });                      }                        if (x < width - 2)                      {                          neighbours.Add(new[] { y' x + 2 });                      }                        if (y > 1)                      {                          neighbours.Add(new[] { y - 2' x });                      }                        if (y < height - 2)                      {                          neighbours.Add(new[] { y + 2' x });                      }                        if (neighbours.Count > 0)                      {                          var yx = neighbours[random.Next(neighbours.Count)];                          int y2 = yx[0];                          int x2 = yx[1];                          if (!maze[y2' x2])                          {                              maze[y2' x2] = true;                              maze[y2 + (y - y2) / 2' x2 + (x - x2) / 2] = true;                              x = x2;                              y = y2;                          }                      }                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,MazeDemo,MazeSolver1,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Maze\MazeSolver1.cs,Solve,The following statement contains a magic number: while (stack.Count > 0)              {                  var temp = stack.Pop();                    if (temp.Equals(end))                  {                      var foundPath = new List<Cell>();                      while (true)                      {                          foundPath.Add(temp);                          if (temp.Equals(start))                          {                              break;                          }                            temp = previousCell[temp.I' temp.J];                      }                        foundPath.Reverse();                      return foundPath;                  }                    visited[temp.I' temp.J] = true;                    if (!hasLeftWall(temp) && !visited[temp.I' temp.J - 2])                  {                      stack.Push(new Cell(temp.I' temp.J - 2));                      previousCell[temp.I' temp.J - 2] = temp;                  }                    if (!hasRightWall(temp) && !visited[temp.I' temp.J + 2])                  {                      stack.Push(new Cell(temp.I' temp.J + 2));                      previousCell[temp.I' temp.J + 2] = temp;                  }                    if (!hasTopWall(temp) && !visited[temp.I - 2' temp.J])                  {                      stack.Push(new Cell(temp.I - 2' temp.J));                      previousCell[temp.I - 2' temp.J] = temp;                  }                    if (!hasBottomWall(temp) && !visited[temp.I + 2' temp.J])                  {                      stack.Push(new Cell(temp.I + 2' temp.J));                      previousCell[temp.I + 2' temp.J] = temp;                  }              }
Magic Number,OverlayDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Overlay\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: const int N = 9;
Magic Number,OverlayDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Overlay\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = -N; i <= N; i++)              {                  for (int j = -N; j <= N; j++)                  {                      var circle = new Ellipse { Width = 4' Height = 4' Fill = Brushes.Tomato };                      var text = new TextBlock { Text = "(" + i + "'" + j + ")" };                      Overlay.SetPosition3D(circle' new Point3D(i' j' 0));                      Overlay.SetPosition3D(text' new Point3D(i' j' 0));                      this.overlay1.Children.Add(circle);                      this.overlay1.Children.Add(text);                  }              }
Magic Number,OverlayDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Overlay\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = -N; i <= N; i++)              {                  for (int j = -N; j <= N; j++)                  {                      var circle = new Ellipse { Width = 4' Height = 4' Fill = Brushes.Tomato };                      var text = new TextBlock { Text = "(" + i + "'" + j + ")" };                      Overlay.SetPosition3D(circle' new Point3D(i' j' 0));                      Overlay.SetPosition3D(text' new Point3D(i' j' 0));                      this.overlay1.Children.Add(circle);                      this.overlay1.Children.Add(text);                  }              }
Magic Number,OverlayDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Overlay\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var text1 = new TextBlock                  {                      Text = "Hello world!"'                      FontWeight = FontWeights.Bold'                      FontSize = 16'                      Foreground = Brushes.YellowGreen'                      Background = Brushes.Gray'                      Padding = new Thickness(4)                  };
Magic Number,OverlayDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Overlay\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var text1 = new TextBlock                  {                      Text = "Hello world!"'                      FontWeight = FontWeights.Bold'                      FontSize = 16'                      Foreground = Brushes.YellowGreen'                      Background = Brushes.Gray'                      Padding = new Thickness(4)                  };
Magic Number,OverlayDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Overlay\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Overlay.SetPosition3D(text1' new Point3D(0' 0' 10));
Magic Number,OverlayDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Overlay\MainWindow.xaml.cs,CompositionTargetRendering,The following statement contains a magic number: foreach (FrameworkElement element in this.overlay1.Children)              {                  var position = Overlay.GetPosition3D(element);                  var position2D = matrix.Transform(position);                  Canvas.SetLeft(element' position2D.X - element.ActualWidth / 2);                  Canvas.SetTop(element' position2D.Y - element.ActualHeight / 2);              }
Magic Number,OverlayDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Overlay\MainWindow.xaml.cs,CompositionTargetRendering,The following statement contains a magic number: foreach (FrameworkElement element in this.overlay1.Children)              {                  var position = Overlay.GetPosition3D(element);                  var position2D = matrix.Transform(position);                  Canvas.SetLeft(element' position2D.X - element.ActualWidth / 2);                  Canvas.SetTop(element' position2D.Y - element.ActualHeight / 2);              }
Magic Number,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.NumberOfPoints = 100;
Magic Number,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,GeneratePoints,The following statement contains a magic number: const double R = 2;
Magic Number,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,GeneratePoints,The following statement contains a magic number: const double Q = 0.5;
Magic Number,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,GeneratePoints,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  double t = Math.PI * 2 * i / (n - 1);                  double u = (t * 24) + (time * 5);                  var pt = new Point3D(Math.Cos(t) * (R + (Q * Math.Cos(u)))' Math.Sin(t) * (R + (Q * Math.Cos(u)))' Q * Math.Sin(u));                  yield return pt;                  if (i > 0 && i < n - 1)                  {                      yield return pt;                  }              }
Magic Number,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,GeneratePoints,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  double t = Math.PI * 2 * i / (n - 1);                  double u = (t * 24) + (time * 5);                  var pt = new Point3D(Math.Cos(t) * (R + (Q * Math.Cos(u)))' Math.Sin(t) * (R + (Q * Math.Cos(u)))' Q * Math.Sin(u));                  yield return pt;                  if (i > 0 && i < n - 1)                  {                      yield return pt;                  }              }
Magic Number,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,GeneratePoints,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  double t = Math.PI * 2 * i / (n - 1);                  double u = (t * 24) + (time * 5);                  var pt = new Point3D(Math.Cos(t) * (R + (Q * Math.Cos(u)))' Math.Sin(t) * (R + (Q * Math.Cos(u)))' Q * Math.Sin(u));                  yield return pt;                  if (i > 0 && i < n - 1)                  {                      yield return pt;                  }              }
Magic Number,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,OnCompositionTargetRendering,The following statement contains a magic number: if (this.ShowPointsVisual3D && this.pointsVisual == null)              {                  this.pointsVisual = new PointsVisual3D { Color = Colors.Red' Size = 6 };                  View1.Children.Add(this.pointsVisual);              }
Magic Number,PointsAndLinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\PointsAndLines\MainWindow.xaml.cs,OnCompositionTargetRendering,The following statement contains a magic number: if (this.Points == null || this.Points.Count != this.NumberOfPoints)              {                  this.Points = new Point3DCollection(GeneratePoints(this.NumberOfPoints' this.watch.ElapsedMilliseconds * 0.001));              }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following statement contains a magic number: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,AddPanel,The following statement contains a magic number: Point3D[] points = new Point3D[coords.Length / 3];
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,AddPanel,The following statement contains a magic number: for (int i = 0; i < coords.Length / 3; i++) points[i] = new Point3D(coords[i * 3]' coords[i * 3 + 1]' coords[i * 3 + 2]);
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,AddPanel,The following statement contains a magic number: for (int i = 0; i < coords.Length / 3; i++) points[i] = new Point3D(coords[i * 3]' coords[i * 3 + 1]' coords[i * 3 + 2]);
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,AddPanel,The following statement contains a magic number: for (int i = 0; i < coords.Length / 3; i++) points[i] = new Point3D(coords[i * 3]' coords[i * 3 + 1]' coords[i * 3 + 2]);
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,AddPanel,The following statement contains a magic number: for (int i = 0; i < coords.Length / 3; i++) points[i] = new Point3D(coords[i * 3]' coords[i * 3 + 1]' coords[i * 3 + 2]);
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,AddPanel,The following statement contains a magic number: for (int i = 0; i < coords.Length / 3; i++) points[i] = new Point3D(coords[i * 3]' coords[i * 3 + 1]' coords[i * 3 + 2]);
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,ToModel3D,The following statement contains a magic number: foreach (var p in Panels)              {                  p.TriangleIndex = tm.Positions.Count;                  tm.AddTriangleFan(p.Points);                  for (int i = 0; i < p.Points.Length - 2; i++) TriangleIndexToPanelIndex.Add(panelIndex);                  panelIndex++;              }
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,ToModel3D,The following statement contains a magic number: foreach (var p in panelsGeometry.Positions)              {                  gm.AddSphere(p' 0.05);              }
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,ToModel3D,The following statement contains a magic number: foreach (var p in Panels)              {                  for (int i = 0; i < p.Points.Length; i += 1)                  {                      em.AddCylinder(p.Points[i]' p.Points[(i + 1) % p.Points.Length]' 0.05' 10);                  }              }
Magic Number,PolyhedronDemo,PanelModelBuilder,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\PanelModelBuilder.cs,ToModel3D,The following statement contains a magic number: foreach (var p in Panels)              {                  for (int i = 0; i < p.Points.Length; i += 1)                  {                      em.AddCylinder(p.Points[i]' p.Points[(i + 1) % p.Points.Length]' 0.05' 10);                  }              }
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: for (int i = 0; i < nvert; i++)              {                  double m = nside - i * (double)nside / nvert;                  var mx = (int)m;                  Debug.WriteLine(i + ": " + mx);                  for (int j = 0; j <= mx; j++)                  {                      for (int k = 0; k <= mx; k++)                      {                          countAll++;                            // only adding blocks on the outside...                          if (j > 0 && j < mx - 1 && i > 0 && i < nvert - 1 && k > 0 && k < mx - 1)                              continue;                            countModelled++;                            var center = new Point3D(a * (j - (double)mx / 2)' a * (k - (double)mx / 2)' (i + 0.5) * a);                            if (allInOneGeometry)                              builder.AddBox(center' a * b' a * b' a * b);                          else                          {                              // add a new visual for each cubit' but reuse the geometry                              var transform = new TranslateTransform3D(center.ToVector3D());                              var c = new ModelVisual3D                                          {                                              Content =                                                  new GeometryModel3D                                                      {                                                          Geometry = cuboidGeometry'                                                          Material = cubit.Material'                                                          Transform = transform                                                      }                                          };                              vis.Children.Add(c);                          }                      }                  }              }
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: for (int i = 0; i < nvert; i++)              {                  double m = nside - i * (double)nside / nvert;                  var mx = (int)m;                  Debug.WriteLine(i + ": " + mx);                  for (int j = 0; j <= mx; j++)                  {                      for (int k = 0; k <= mx; k++)                      {                          countAll++;                            // only adding blocks on the outside...                          if (j > 0 && j < mx - 1 && i > 0 && i < nvert - 1 && k > 0 && k < mx - 1)                              continue;                            countModelled++;                            var center = new Point3D(a * (j - (double)mx / 2)' a * (k - (double)mx / 2)' (i + 0.5) * a);                            if (allInOneGeometry)                              builder.AddBox(center' a * b' a * b' a * b);                          else                          {                              // add a new visual for each cubit' but reuse the geometry                              var transform = new TranslateTransform3D(center.ToVector3D());                              var c = new ModelVisual3D                                          {                                              Content =                                                  new GeometryModel3D                                                      {                                                          Geometry = cuboidGeometry'                                                          Material = cubit.Material'                                                          Transform = transform                                                      }                                          };                              vis.Children.Add(c);                          }                      }                  }              }
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: for (int i = 0; i < nvert; i++)              {                  double m = nside - i * (double)nside / nvert;                  var mx = (int)m;                  Debug.WriteLine(i + ": " + mx);                  for (int j = 0; j <= mx; j++)                  {                      for (int k = 0; k <= mx; k++)                      {                          countAll++;                            // only adding blocks on the outside...                          if (j > 0 && j < mx - 1 && i > 0 && i < nvert - 1 && k > 0 && k < mx - 1)                              continue;                            countModelled++;                            var center = new Point3D(a * (j - (double)mx / 2)' a * (k - (double)mx / 2)' (i + 0.5) * a);                            if (allInOneGeometry)                              builder.AddBox(center' a * b' a * b' a * b);                          else                          {                              // add a new visual for each cubit' but reuse the geometry                              var transform = new TranslateTransform3D(center.ToVector3D());                              var c = new ModelVisual3D                                          {                                              Content =                                                  new GeometryModel3D                                                      {                                                          Geometry = cuboidGeometry'                                                          Material = cubit.Material'                                                          Transform = transform                                                      }                                          };                              vis.Children.Add(c);                          }                      }                  }              }
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: int ntri = mg.TriangleIndices.Count / 3;
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: if (allInOneGeometry)                  ntriTotal = builder.TriangleIndices.Count / 3;
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: view1.LookAt(new Point3D(0' 0' a * nvert / 2)' new Vector3D(-70' -60' -100)' 0);
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: view1.LookAt(new Point3D(0' 0' a * nvert / 2)' new Vector3D(-70' -60' -100)' 0);
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: view1.LookAt(new Point3D(0' 0' a * nvert / 2)' new Vector3D(-70' -60' -100)' 0);
Magic Number,PyramidDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Pyramid\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: view1.LookAt(new Point3D(0' 0' a * nvert / 2)' new Vector3D(-70' -60' -100)' 0);
Magic Number,RubikDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\MainWindow.xaml.cs,HandleKeyDown,The following statement contains a magic number: if (e.Key == Key.Subtract && cube1.Size > 2)              {                  cube1.Size--;                  e.Handled = true;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing                                  {                                      Geometry = new RectangleGeometry(new Rect(0.05' 0.05' 0.9' 0.9)) { RadiusX = 0.05' RadiusY = 0.05 }'                                      Brush = new SolidColorBrush(c)                                  });
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing                                  {                                      Geometry = new RectangleGeometry(new Rect(0.05' 0.05' 0.9' 0.9)) { RadiusX = 0.05' RadiusY = 0.05 }'                                      Brush = new SolidColorBrush(c)                                  });
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing                                  {                                      Geometry = new RectangleGeometry(new Rect(0.05' 0.05' 0.9' 0.9)) { RadiusX = 0.05' RadiusY = 0.05 }'                                      Brush = new SolidColorBrush(c)                                  });
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing                                  {                                      Geometry = new RectangleGeometry(new Rect(0.05' 0.05' 0.9' 0.9)) { RadiusX = 0.05' RadiusY = 0.05 }'                                      Brush = new SolidColorBrush(c)                                  });
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing                                  {                                      Geometry = new RectangleGeometry(new Rect(0.05' 0.05' 0.9' 0.9)) { RadiusX = 0.05' RadiusY = 0.05 }'                                      Brush = new SolidColorBrush(c)                                  });
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing                                  {                                      Geometry = new RectangleGeometry(new Rect(0.05' 0.05' 0.9' 0.9)) { RadiusX = 0.05' RadiusY = 0.05 }'                                      Brush = new SolidColorBrush(c)                                  });
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: if (text != null)              {                  var ft = new FormattedText(text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight'                                             new Typeface("Segoe UI")' 0.3' Brushes.Black);                  ft.TextAlignment = TextAlignment.Center;                  var geometry = ft.BuildGeometry(new Point(0' -0.2));                  var tg = new TransformGroup();                  tg.Children.Add(new RotateTransform(45));                  tg.Children.Add(new TranslateTransform(0.5' 0.5));                  geometry.Transform = tg;                  dg.Children.Add(new GeometryDrawing                                      {                                          Geometry = geometry'                                          Brush = Brushes.Black                                        });              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: if (text != null)              {                  var ft = new FormattedText(text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight'                                             new Typeface("Segoe UI")' 0.3' Brushes.Black);                  ft.TextAlignment = TextAlignment.Center;                  var geometry = ft.BuildGeometry(new Point(0' -0.2));                  var tg = new TransformGroup();                  tg.Children.Add(new RotateTransform(45));                  tg.Children.Add(new TranslateTransform(0.5' 0.5));                  geometry.Transform = tg;                  dg.Children.Add(new GeometryDrawing                                      {                                          Geometry = geometry'                                          Brush = Brushes.Black                                        });              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: if (text != null)              {                  var ft = new FormattedText(text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight'                                             new Typeface("Segoe UI")' 0.3' Brushes.Black);                  ft.TextAlignment = TextAlignment.Center;                  var geometry = ft.BuildGeometry(new Point(0' -0.2));                  var tg = new TransformGroup();                  tg.Children.Add(new RotateTransform(45));                  tg.Children.Add(new TranslateTransform(0.5' 0.5));                  geometry.Transform = tg;                  dg.Children.Add(new GeometryDrawing                                      {                                          Geometry = geometry'                                          Brush = Brushes.Black                                        });              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: if (text != null)              {                  var ft = new FormattedText(text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight'                                             new Typeface("Segoe UI")' 0.3' Brushes.Black);                  ft.TextAlignment = TextAlignment.Center;                  var geometry = ft.BuildGeometry(new Point(0' -0.2));                  var tg = new TransformGroup();                  tg.Children.Add(new RotateTransform(45));                  tg.Children.Add(new TranslateTransform(0.5' 0.5));                  geometry.Transform = tg;                  dg.Children.Add(new GeometryDrawing                                      {                                          Geometry = geometry'                                          Brush = Brushes.Black                                        });              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFaceBrush,The following statement contains a magic number: if (text != null)              {                  var ft = new FormattedText(text' CultureInfo.CurrentCulture' FlowDirection.LeftToRight'                                             new Typeface("Segoe UI")' 0.3' Brushes.Black);                  ft.TextAlignment = TextAlignment.Center;                  var geometry = ft.BuildGeometry(new Point(0' -0.2));                  var tg = new TransformGroup();                  tg.Children.Add(new RotateTransform(45));                  tg.Children.Add(new TranslateTransform(0.5' 0.5));                  geometry.Transform = tg;                  dg.Children.Add(new GeometryDrawing                                      {                                          Geometry = geometry'                                          Brush = Brushes.Black                                        });              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateCubelets,The following statement contains a magic number: double o = -(Size - 1) * 0.5 * size;
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateCubelets,The following statement contains a magic number: for (int i = 0; i < Size; i++)              {                  for (int j = 0; j < Size; j++)                  {                      for (int k = 0; k < Size; k++)                      {                          // the center of the cubelet                          var center = new Point3D(o + i * size' o + j * size' o + k * size);                            // add the 6 faces of a cubelet                          var cubelet = new Model3DGroup();                          for (int face = 0; face < 6; face++)                          {                              // find the color of the face                              var color = IsOutsideFace(face' i' j' k) ? faceBrushes[face] : Brushes.Black;                              if (face == 0 && i == 0 && j == 1 && k == 1)                                  color = brush011;                              // and add a cube face                              cubelet.Children.Add(CreateFace(face' center' size * (1 - spacing)' size * (1 - spacing)' size * (1 - spacing)' color));                          }                          cubelets[i' j' k] = cubelet;                          Children.Add(new ModelVisual3D { Content = cubelet });                      }                  }              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,IsOutsideFace,The following statement contains a magic number: switch (face)              {                  case 0:                      return i == 0;                  case 1:                      return i == Size - 1;                  case 2:                      return j == 0;                  case 3:                      return j == Size - 1;                  case 4:                      return k == 0;                  case 5:                      return k == Size - 1;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,IsOutsideFace,The following statement contains a magic number: switch (face)              {                  case 0:                      return i == 0;                  case 1:                      return i == Size - 1;                  case 2:                      return j == 0;                  case 3:                      return j == Size - 1;                  case 4:                      return k == 0;                  case 5:                      return k == Size - 1;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,IsOutsideFace,The following statement contains a magic number: switch (face)              {                  case 0:                      return i == 0;                  case 1:                      return i == Size - 1;                  case 2:                      return j == 0;                  case 3:                      return j == Size - 1;                  case 4:                      return k == 0;                  case 5:                      return k == Size - 1;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,IsOutsideFace,The following statement contains a magic number: switch (face)              {                  case 0:                      return i == 0;                  case 1:                      return i == Size - 1;                  case 2:                      return j == 0;                  case 3:                      return j == Size - 1;                  case 4:                      return k == 0;                  case 5:                      return k == Size - 1;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFace,The following statement contains a magic number: switch (face)              {                  case 0:                      b.AddCubeFace(center' new Vector3D(-1' 0' 0)' new Vector3D(0' 0' 1)' length' width' height);                      break;                  case 1:                      b.AddCubeFace(center' new Vector3D(1' 0' 0)' new Vector3D(0' 0' -1)' length' width' height);                      break;                  case 2:                      b.AddCubeFace(center' new Vector3D(0' -1' 0)' new Vector3D(0' 0' 1)' width' length' height);                      break;                  case 3:                      b.AddCubeFace(center' new Vector3D(0' 1' 0)' new Vector3D(0' 0' -1)' width' length' height);                      break;                  case 4:                      b.AddCubeFace(center' new Vector3D(0' 0' -1)' new Vector3D(0' 1' 0)' height' length' width);                      break;                  case 5:                      b.AddCubeFace(center' new Vector3D(0' 0' 1)' new Vector3D(0' -1' 0)' height' length' width);                      break;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFace,The following statement contains a magic number: switch (face)              {                  case 0:                      b.AddCubeFace(center' new Vector3D(-1' 0' 0)' new Vector3D(0' 0' 1)' length' width' height);                      break;                  case 1:                      b.AddCubeFace(center' new Vector3D(1' 0' 0)' new Vector3D(0' 0' -1)' length' width' height);                      break;                  case 2:                      b.AddCubeFace(center' new Vector3D(0' -1' 0)' new Vector3D(0' 0' 1)' width' length' height);                      break;                  case 3:                      b.AddCubeFace(center' new Vector3D(0' 1' 0)' new Vector3D(0' 0' -1)' width' length' height);                      break;                  case 4:                      b.AddCubeFace(center' new Vector3D(0' 0' -1)' new Vector3D(0' 1' 0)' height' length' width);                      break;                  case 5:                      b.AddCubeFace(center' new Vector3D(0' 0' 1)' new Vector3D(0' -1' 0)' height' length' width);                      break;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFace,The following statement contains a magic number: switch (face)              {                  case 0:                      b.AddCubeFace(center' new Vector3D(-1' 0' 0)' new Vector3D(0' 0' 1)' length' width' height);                      break;                  case 1:                      b.AddCubeFace(center' new Vector3D(1' 0' 0)' new Vector3D(0' 0' -1)' length' width' height);                      break;                  case 2:                      b.AddCubeFace(center' new Vector3D(0' -1' 0)' new Vector3D(0' 0' 1)' width' length' height);                      break;                  case 3:                      b.AddCubeFace(center' new Vector3D(0' 1' 0)' new Vector3D(0' 0' -1)' width' length' height);                      break;                  case 4:                      b.AddCubeFace(center' new Vector3D(0' 0' -1)' new Vector3D(0' 1' 0)' height' length' width);                      break;                  case 5:                      b.AddCubeFace(center' new Vector3D(0' 0' 1)' new Vector3D(0' -1' 0)' height' length' width);                      break;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFace,The following statement contains a magic number: switch (face)              {                  case 0:                      b.AddCubeFace(center' new Vector3D(-1' 0' 0)' new Vector3D(0' 0' 1)' length' width' height);                      break;                  case 1:                      b.AddCubeFace(center' new Vector3D(1' 0' 0)' new Vector3D(0' 0' -1)' length' width' height);                      break;                  case 2:                      b.AddCubeFace(center' new Vector3D(0' -1' 0)' new Vector3D(0' 0' 1)' width' length' height);                      break;                  case 3:                      b.AddCubeFace(center' new Vector3D(0' 1' 0)' new Vector3D(0' 0' -1)' width' length' height);                      break;                  case 4:                      b.AddCubeFace(center' new Vector3D(0' 0' -1)' new Vector3D(0' 1' 0)' height' length' width);                      break;                  case 5:                      b.AddCubeFace(center' new Vector3D(0' 0' 1)' new Vector3D(0' -1' 0)' height' length' width);                      break;              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Scramble,The following statement contains a magic number: int face = random.Next(6);
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Scramble,The following statement contains a magic number: int rotation = 90;
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Scramble,The following statement contains a magic number: if (random.Next(2) == 0)                  rotation = -90;
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Scramble,The following statement contains a magic number: if (random.Next(2) == 0)                  rotation = -90;
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: double angle = 90;
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: if (shift) angle = -90;
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: if (control) angle *= 2;
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: for (int a = 0; a < Size; a++)              {                  for (int b = 0; b < Size; b++)                  {                      int at = b;                      int bt = n - a;                      if (angle < 0)                      {                          at = n - b;                          bt = a;                      }                        Model3DGroup group = null;                      switch (face)                      {                          case 0:                              group = rotatedCubelets[0' at' bt] = cubelets[0' a' b];                              break;                          case 1:                              group = rotatedCubelets[n' bt' at] = cubelets[n' b' a];                              break;                          case 2:                              group = rotatedCubelets[bt' 0' at] = cubelets[b' 0' a];                              break;                          case 3:                              group = rotatedCubelets[at' n' bt] = cubelets[a' n' b];                              break;                          case 4:                              group = rotatedCubelets[at' bt' 0] = cubelets[a' b' 0];                              break;                          case 5:                              group = rotatedCubelets[bt' at' n] = cubelets[b' a' n];                              break;                          default:                              continue;                      }                        var rot = new AxisAngleRotation3D { Axis = axis };                      var anim = new DoubleAnimation(angle' new Duration(TimeSpan.FromMilliseconds(animationTime)))                                     {                                         AccelerationRatio = 0.3'                                         DecelerationRatio = 0.5                                     };                        rot.BeginAnimation(AxisAngleRotation3D.AngleProperty' anim);                      if (result == null)                          result = anim;                        var rott = new RotateTransform3D(rot);                      var gt = new Transform3DGroup();                      gt.Children.Add(group.Transform);                      gt.Children.Add(rott);                      group.Transform = gt;                  }              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: for (int a = 0; a < Size; a++)              {                  for (int b = 0; b < Size; b++)                  {                      int at = b;                      int bt = n - a;                      if (angle < 0)                      {                          at = n - b;                          bt = a;                      }                        Model3DGroup group = null;                      switch (face)                      {                          case 0:                              group = rotatedCubelets[0' at' bt] = cubelets[0' a' b];                              break;                          case 1:                              group = rotatedCubelets[n' bt' at] = cubelets[n' b' a];                              break;                          case 2:                              group = rotatedCubelets[bt' 0' at] = cubelets[b' 0' a];                              break;                          case 3:                              group = rotatedCubelets[at' n' bt] = cubelets[a' n' b];                              break;                          case 4:                              group = rotatedCubelets[at' bt' 0] = cubelets[a' b' 0];                              break;                          case 5:                              group = rotatedCubelets[bt' at' n] = cubelets[b' a' n];                              break;                          default:                              continue;                      }                        var rot = new AxisAngleRotation3D { Axis = axis };                      var anim = new DoubleAnimation(angle' new Duration(TimeSpan.FromMilliseconds(animationTime)))                                     {                                         AccelerationRatio = 0.3'                                         DecelerationRatio = 0.5                                     };                        rot.BeginAnimation(AxisAngleRotation3D.AngleProperty' anim);                      if (result == null)                          result = anim;                        var rott = new RotateTransform3D(rot);                      var gt = new Transform3DGroup();                      gt.Children.Add(group.Transform);                      gt.Children.Add(rott);                      group.Transform = gt;                  }              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: for (int a = 0; a < Size; a++)              {                  for (int b = 0; b < Size; b++)                  {                      int at = b;                      int bt = n - a;                      if (angle < 0)                      {                          at = n - b;                          bt = a;                      }                        Model3DGroup group = null;                      switch (face)                      {                          case 0:                              group = rotatedCubelets[0' at' bt] = cubelets[0' a' b];                              break;                          case 1:                              group = rotatedCubelets[n' bt' at] = cubelets[n' b' a];                              break;                          case 2:                              group = rotatedCubelets[bt' 0' at] = cubelets[b' 0' a];                              break;                          case 3:                              group = rotatedCubelets[at' n' bt] = cubelets[a' n' b];                              break;                          case 4:                              group = rotatedCubelets[at' bt' 0] = cubelets[a' b' 0];                              break;                          case 5:                              group = rotatedCubelets[bt' at' n] = cubelets[b' a' n];                              break;                          default:                              continue;                      }                        var rot = new AxisAngleRotation3D { Axis = axis };                      var anim = new DoubleAnimation(angle' new Duration(TimeSpan.FromMilliseconds(animationTime)))                                     {                                         AccelerationRatio = 0.3'                                         DecelerationRatio = 0.5                                     };                        rot.BeginAnimation(AxisAngleRotation3D.AngleProperty' anim);                      if (result == null)                          result = anim;                        var rott = new RotateTransform3D(rot);                      var gt = new Transform3DGroup();                      gt.Children.Add(group.Transform);                      gt.Children.Add(rott);                      group.Transform = gt;                  }              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: for (int a = 0; a < Size; a++)              {                  for (int b = 0; b < Size; b++)                  {                      int at = b;                      int bt = n - a;                      if (angle < 0)                      {                          at = n - b;                          bt = a;                      }                        Model3DGroup group = null;                      switch (face)                      {                          case 0:                              group = rotatedCubelets[0' at' bt] = cubelets[0' a' b];                              break;                          case 1:                              group = rotatedCubelets[n' bt' at] = cubelets[n' b' a];                              break;                          case 2:                              group = rotatedCubelets[bt' 0' at] = cubelets[b' 0' a];                              break;                          case 3:                              group = rotatedCubelets[at' n' bt] = cubelets[a' n' b];                              break;                          case 4:                              group = rotatedCubelets[at' bt' 0] = cubelets[a' b' 0];                              break;                          case 5:                              group = rotatedCubelets[bt' at' n] = cubelets[b' a' n];                              break;                          default:                              continue;                      }                        var rot = new AxisAngleRotation3D { Axis = axis };                      var anim = new DoubleAnimation(angle' new Duration(TimeSpan.FromMilliseconds(animationTime)))                                     {                                         AccelerationRatio = 0.3'                                         DecelerationRatio = 0.5                                     };                        rot.BeginAnimation(AxisAngleRotation3D.AngleProperty' anim);                      if (result == null)                          result = anim;                        var rott = new RotateTransform3D(rot);                      var gt = new Transform3DGroup();                      gt.Children.Add(group.Transform);                      gt.Children.Add(rott);                      group.Transform = gt;                  }              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: for (int a = 0; a < Size; a++)              {                  for (int b = 0; b < Size; b++)                  {                      int at = b;                      int bt = n - a;                      if (angle < 0)                      {                          at = n - b;                          bt = a;                      }                        Model3DGroup group = null;                      switch (face)                      {                          case 0:                              group = rotatedCubelets[0' at' bt] = cubelets[0' a' b];                              break;                          case 1:                              group = rotatedCubelets[n' bt' at] = cubelets[n' b' a];                              break;                          case 2:                              group = rotatedCubelets[bt' 0' at] = cubelets[b' 0' a];                              break;                          case 3:                              group = rotatedCubelets[at' n' bt] = cubelets[a' n' b];                              break;                          case 4:                              group = rotatedCubelets[at' bt' 0] = cubelets[a' b' 0];                              break;                          case 5:                              group = rotatedCubelets[bt' at' n] = cubelets[b' a' n];                              break;                          default:                              continue;                      }                        var rot = new AxisAngleRotation3D { Axis = axis };                      var anim = new DoubleAnimation(angle' new Duration(TimeSpan.FromMilliseconds(animationTime)))                                     {                                         AccelerationRatio = 0.3'                                         DecelerationRatio = 0.5                                     };                        rot.BeginAnimation(AxisAngleRotation3D.AngleProperty' anim);                      if (result == null)                          result = anim;                        var rott = new RotateTransform3D(rot);                      var gt = new Transform3DGroup();                      gt.Children.Add(group.Transform);                      gt.Children.Add(rott);                      group.Transform = gt;                  }              }
Magic Number,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,Rotate,The following statement contains a magic number: for (int a = 0; a < Size; a++)              {                  for (int b = 0; b < Size; b++)                  {                      int at = b;                      int bt = n - a;                      if (angle < 0)                      {                          at = n - b;                          bt = a;                      }                        Model3DGroup group = null;                      switch (face)                      {                          case 0:                              group = rotatedCubelets[0' at' bt] = cubelets[0' a' b];                              break;                          case 1:                              group = rotatedCubelets[n' bt' at] = cubelets[n' b' a];                              break;                          case 2:                              group = rotatedCubelets[bt' 0' at] = cubelets[b' 0' a];                              break;                          case 3:                              group = rotatedCubelets[at' n' bt] = cubelets[a' n' b];                              break;                          case 4:                              group = rotatedCubelets[at' bt' 0] = cubelets[a' b' 0];                              break;                          case 5:                              group = rotatedCubelets[bt' at' n] = cubelets[b' a' n];                              break;                          default:                              continue;                      }                        var rot = new AxisAngleRotation3D { Axis = axis };                      var anim = new DoubleAnimation(angle' new Duration(TimeSpan.FromMilliseconds(animationTime)))                                     {                                         AccelerationRatio = 0.3'                                         DecelerationRatio = 0.5                                     };                        rot.BeginAnimation(AxisAngleRotation3D.AngleProperty' anim);                      if (result == null)                          result = anim;                        var rott = new RotateTransform3D(rot);                      var gt = new Transform3DGroup();                      gt.Children.Add(group.Transform);                      gt.Children.Add(rott);                      group.Transform = gt;                  }              }
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,AddCube,The following statement contains a magic number: for (int i = -5; i < 2; i++)                  coll.Add(new CubeVisual3D { Fill = brush' Center = new Point3D(0' i * 4' 0) });
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,AddCube,The following statement contains a magic number: for (int i = -5; i < 2; i++)                  coll.Add(new CubeVisual3D { Fill = brush' Center = new Point3D(0' i * 4' 0) });
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,AddCube,The following statement contains a magic number: for (int i = -5; i < 2; i++)                  coll.Add(new CubeVisual3D { Fill = brush' Center = new Point3D(0' i * 4' 0) });
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateDrawingBrush,The following statement contains a magic number: var db = new DrawingBrush              {                  TileMode = TileMode.Tile'                  ViewportUnits = BrushMappingMode.Absolute'                  Viewport = new Rect(0' 0' 0.1' 0.1)'                  Viewbox = new Rect(0' 0' 1' 1)'                  ViewboxUnits = BrushMappingMode.Absolute              };
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateDrawingBrush,The following statement contains a magic number: var db = new DrawingBrush              {                  TileMode = TileMode.Tile'                  ViewportUnits = BrushMappingMode.Absolute'                  Viewport = new Rect(0' 0' 0.1' 0.1)'                  Viewbox = new Rect(0' 0' 1' 1)'                  ViewboxUnits = BrushMappingMode.Absolute              };
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateDrawingBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing { Geometry = new RectangleGeometry(new Rect(0.25' 0.25' 0.5' 0.5))' Brush = Brushes.Black });
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateDrawingBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing { Geometry = new RectangleGeometry(new Rect(0.25' 0.25' 0.5' 0.5))' Brush = Brushes.Black });
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateDrawingBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing { Geometry = new RectangleGeometry(new Rect(0.25' 0.25' 0.5' 0.5))' Brush = Brushes.Black });
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateDrawingBrush,The following statement contains a magic number: dg.Children.Add(new GeometryDrawing { Geometry = new RectangleGeometry(new Rect(0.25' 0.25' 0.5' 0.5))' Brush = Brushes.Black });
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateVisualBrush,The following statement contains a magic number: var vb = new VisualBrush              {                  TileMode = TileMode.Tile'                  ViewportUnits = BrushMappingMode.Absolute'                  Viewport = new Rect(0' 0' 0.1' 0.1)'                  Viewbox = new Rect(0' 0' 1' 1)'                  ViewboxUnits = BrushMappingMode.Absolute              };
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateVisualBrush,The following statement contains a magic number: var vb = new VisualBrush              {                  TileMode = TileMode.Tile'                  ViewportUnits = BrushMappingMode.Absolute'                  Viewport = new Rect(0' 0' 0.1' 0.1)'                  Viewbox = new Rect(0' 0' 1' 1)'                  ViewboxUnits = BrushMappingMode.Absolute              };
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateVisualBrush,The following statement contains a magic number: var r = new Rectangle { Fill = Brushes.Black' Width = 0.5' Height = 0.5 };
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateVisualBrush,The following statement contains a magic number: var r = new Rectangle { Fill = Brushes.Black' Width = 0.5' Height = 0.5 };
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateVisualBrush,The following statement contains a magic number: Canvas.SetLeft(r' 0.25);
Magic Number,StereoDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Stereo\MainWindow.xaml.cs,CreateVisualBrush,The following statement contains a magic number: Canvas.SetTop(r' 0.25);
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.U = 0.5;
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: const double dt = 0.1;
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: const int nSteps = 100;
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: for (double y0 = -5; y0 <= 5; y0 += 0.25)              {                  var p0 = new Point(-3' y0);                  Point[] pts = Solve(Velocity' p0' dt' nSteps);                  var vel = new double[pts.Length];                  var diam = new double[pts.Length];                  int i = 0;                  var pts3d = new Point3D[pts.Length];                  double vmax = 0;                  foreach (Point pt in pts)                  {                      pts3d[i] = new Point3D(pt.X' pt.Y' 0);                      double v = Velocity(pt.X' pt.Y).Length;                      if (v > vmax) vmax = v;                      vel[i++] = v;                  }                  for (int j = 0; j < vel.Length; j++)                      vel[j] /= vmax;                  for (int j = 0; j < vel.Length; j++)                      diam[j] = 0.075;                    mb.AddTube(pts3d' vel' diam' 12' false);              }
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: for (double y0 = -5; y0 <= 5; y0 += 0.25)              {                  var p0 = new Point(-3' y0);                  Point[] pts = Solve(Velocity' p0' dt' nSteps);                  var vel = new double[pts.Length];                  var diam = new double[pts.Length];                  int i = 0;                  var pts3d = new Point3D[pts.Length];                  double vmax = 0;                  foreach (Point pt in pts)                  {                      pts3d[i] = new Point3D(pt.X' pt.Y' 0);                      double v = Velocity(pt.X' pt.Y).Length;                      if (v > vmax) vmax = v;                      vel[i++] = v;                  }                  for (int j = 0; j < vel.Length; j++)                      vel[j] /= vmax;                  for (int j = 0; j < vel.Length; j++)                      diam[j] = 0.075;                    mb.AddTube(pts3d' vel' diam' 12' false);              }
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: for (double y0 = -5; y0 <= 5; y0 += 0.25)              {                  var p0 = new Point(-3' y0);                  Point[] pts = Solve(Velocity' p0' dt' nSteps);                  var vel = new double[pts.Length];                  var diam = new double[pts.Length];                  int i = 0;                  var pts3d = new Point3D[pts.Length];                  double vmax = 0;                  foreach (Point pt in pts)                  {                      pts3d[i] = new Point3D(pt.X' pt.Y' 0);                      double v = Velocity(pt.X' pt.Y).Length;                      if (v > vmax) vmax = v;                      vel[i++] = v;                  }                  for (int j = 0; j < vel.Length; j++)                      vel[j] /= vmax;                  for (int j = 0; j < vel.Length; j++)                      diam[j] = 0.075;                    mb.AddTube(pts3d' vel' diam' 12' false);              }
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: for (double y0 = -5; y0 <= 5; y0 += 0.25)              {                  var p0 = new Point(-3' y0);                  Point[] pts = Solve(Velocity' p0' dt' nSteps);                  var vel = new double[pts.Length];                  var diam = new double[pts.Length];                  int i = 0;                  var pts3d = new Point3D[pts.Length];                  double vmax = 0;                  foreach (Point pt in pts)                  {                      pts3d[i] = new Point3D(pt.X' pt.Y' 0);                      double v = Velocity(pt.X' pt.Y).Length;                      if (v > vmax) vmax = v;                      vel[i++] = v;                  }                  for (int j = 0; j < vel.Length; j++)                      vel[j] /= vmax;                  for (int j = 0; j < vel.Length; j++)                      diam[j] = 0.075;                    mb.AddTube(pts3d' vel' diam' 12' false);              }
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: for (double y0 = -5; y0 <= 5; y0 += 0.25)              {                  var p0 = new Point(-3' y0);                  Point[] pts = Solve(Velocity' p0' dt' nSteps);                  var vel = new double[pts.Length];                  var diam = new double[pts.Length];                  int i = 0;                  var pts3d = new Point3D[pts.Length];                  double vmax = 0;                  foreach (Point pt in pts)                  {                      pts3d[i] = new Point3D(pt.X' pt.Y' 0);                      double v = Velocity(pt.X' pt.Y).Length;                      if (v > vmax) vmax = v;                      vel[i++] = v;                  }                  for (int j = 0; j < vel.Length; j++)                      vel[j] /= vmax;                  for (int j = 0; j < vel.Length; j++)                      diam[j] = 0.075;                    mb.AddTube(pts3d' vel' diam' 12' false);              }
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,CreateModel,The following statement contains a magic number: for (double y0 = -5; y0 <= 5; y0 += 0.25)              {                  var p0 = new Point(-3' y0);                  Point[] pts = Solve(Velocity' p0' dt' nSteps);                  var vel = new double[pts.Length];                  var diam = new double[pts.Length];                  int i = 0;                  var pts3d = new Point3D[pts.Length];                  double vmax = 0;                  foreach (Point pt in pts)                  {                      pts3d[i] = new Point3D(pt.X' pt.Y' 0);                      double v = Velocity(pt.X' pt.Y).Length;                      if (v > vmax) vmax = v;                      vel[i++] = v;                  }                  for (int j = 0; j < vel.Length; j++)                      vel[j] /= vmax;                  for (int j = 0; j < vel.Length; j++)                      diam[j] = 0.075;                    mb.AddTube(pts3d' vel' diam' 12' false);              }
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,Velocity,The following statement contains a magic number: double x2y22 = x2y2*2;
Magic Number,StreamlinesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Streamlines\MainWindow.xaml.cs,Velocity,The following statement contains a magic number: double v = -R*R*2*x*y/x2y22;
Magic Number,SubdivisionDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Subdivision\MainWindow.xaml.cs,UpdateModel,The following statement contains a magic number: double edge = 0.004;
Magic Number,SubdivisionDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Subdivision\MainWindow.xaml.cs,UpdateModel,The following statement contains a magic number: double vertex = 0.006;
Magic Number,SubdivisionDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Subdivision\MainWindow.xaml.cs,UpdateModel,The following statement contains a magic number: model2.Transform = new TranslateTransform3D(bounds.SizeX * 1.2' 0' 0);
Magic Number,SubdivisionDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Subdivision\MainWindow.xaml.cs,UpdateModel,The following statement contains a magic number: model3.Transform = new TranslateTransform3D(bounds.SizeX * 2.4' 0' 0);
Magic Number,SubdivisionDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Subdivision\MainWindow.xaml.cs,UpdateModel,The following statement contains a magic number: subdivisionStatus.Text = string.Format("Subdivision time: {0} ms' mesh generation time: {1} ms'  triangles: {2} (original mesh: {3})"' subDivisionTime' meshGenerationTime' (mesh3.Faces.Count)' (triangularMesh.TriangleIndices.Count / 3));
Magic Number,SurfacePlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\MainViewModel.cs,MainViewModel,The following statement contains a magic number: MaxX = 3;
Magic Number,SurfacePlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\MainViewModel.cs,MainViewModel,The following statement contains a magic number: MaxY = 3;
Magic Number,SurfacePlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Rows = 91;
Magic Number,SurfacePlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Columns = 91;
Magic Number,SurfacePlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Function = (x' y) => Math.Sin(x * y) * 0.5;
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,SurfacePlotVisual3D,The following statement contains a magic number: IntervalZ = 0.25;
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,SurfacePlotVisual3D,The following statement contains a magic number: FontSize = 0.06;
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,SurfacePlotVisual3D,The following statement contains a magic number: LineThickness = 0.01;
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (double x = minX; x <= maxX; x += IntervalX)              {                  double j = (x - minX)/(maxX - minX)*(columns - 1);                  var path = new List<Point3D> {new Point3D(x' minY' minZ)};                  for (int i = 0; i < rows; i++)                  {                      path.Add(BilinearInterpolation(Points' i' j));                  }                  path.Add(new Point3D(x' maxY' minZ));                    axesMeshBuilder.AddTube(path' LineThickness' 9' false);                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D(x.ToString()' Brushes.Black' true' FontSize'                                                                             new Point3D(x' minY - FontSize*2.5' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (double x = minX; x <= maxX; x += IntervalX)              {                  double j = (x - minX)/(maxX - minX)*(columns - 1);                  var path = new List<Point3D> {new Point3D(x' minY' minZ)};                  for (int i = 0; i < rows; i++)                  {                      path.Add(BilinearInterpolation(Points' i' j));                  }                  path.Add(new Point3D(x' maxY' minZ));                    axesMeshBuilder.AddTube(path' LineThickness' 9' false);                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D(x.ToString()' Brushes.Black' true' FontSize'                                                                             new Point3D(x' minY - FontSize*2.5' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("X-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D((minX + maxX)*0.5'                                                                                         minY - FontSize*6' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("X-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D((minX + maxX)*0.5'                                                                                         minY - FontSize*6' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (double y = minY; y <= maxY; y += IntervalY)              {                  double i = (y - minY)/(maxY - minY)*(rows - 1);                  var path = new List<Point3D> {new Point3D(minX' y' minZ)};                  for (int j = 0; j < columns; j++)                  {                      path.Add(BilinearInterpolation(Points' i' j));                  }                  path.Add(new Point3D(maxX' y' minZ));                    axesMeshBuilder.AddTube(path' LineThickness' 9' false);                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D(y.ToString()' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*3' y' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (double y = minY; y <= maxY; y += IntervalY)              {                  double i = (y - minY)/(maxY - minY)*(rows - 1);                  var path = new List<Point3D> {new Point3D(minX' y' minZ)};                  for (int j = 0; j < columns; j++)                  {                      path.Add(BilinearInterpolation(Points' i' j));                  }                  path.Add(new Point3D(maxX' y' minZ));                    axesMeshBuilder.AddTube(path' LineThickness' 9' false);                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D(y.ToString()' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*3' y' minZ)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 1' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("Y-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*10'                                                                                         (minY + maxY)*0.5' minZ)'                                                                             new Vector3D(0' 1' 0)' new Vector3D(-1' 0' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("Y-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*10'                                                                                         (minY + maxY)*0.5' minZ)'                                                                             new Vector3D(0' 1' 0)' new Vector3D(-1' 0' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: for (double z = z0; z <= maxZ + double.Epsilon; z += IntervalZ)              {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D(z.ToString()' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*3' maxY' z)'                                                                             new Vector3D(1' 0' 0)' new Vector3D(0' 0' 1));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("Z-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*10' maxY'                                                                                         (minZ + maxZ)*0.5)'                                                                             new Vector3D(0' 0' 1)' new Vector3D(1' 0' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,CreateModel,The following statement contains a magic number: {                  GeometryModel3D label = TextCreator.CreateTextLabelModel3D("Z-axis"' Brushes.Black' true' FontSize'                                                                             new Point3D(minX - FontSize*10' maxY'                                                                                         (minZ + maxZ)*0.5)'                                                                             new Vector3D(0' 0' 1)' new Vector3D(1' 0' 0));                  plotModel.Children.Add(label);              }
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,BilinearInterpolation,The following statement contains a magic number: if (i0 + 1 >= n) i0 = n - 2;
Magic Number,SurfacePlotDemo,SurfacePlotVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\SurfacePlotVisual3D.cs,BilinearInterpolation,The following statement contains a magic number: if (j0 + 1 >= m) j0 = m - 2;
Magic Number,TextDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Text\MainWindow.xaml.cs,CreateItems,The following statement contains a magic number: double x = 10;
Magic Number,TextDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Text\MainWindow.xaml.cs,CreateItems,The following statement contains a magic number: foreach (var word in lorem.Split(' '))              {                  this.TextItems.Add(new SpatialTextItem { Text = word' Position = new Point3D(x' y' 0)' TextDirection = new Vector3D(1' 0' 0)' UpDirection = new Vector3D(0' 1' 0) });                  this.TextItems2.Add(new BillboardTextItem { Text = word' Position = new Point3D(x' y' 1)' DepthOffset = 1e-6 });                  y += 1;              }
Magic Number,TextDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Text\MainWindow.xaml.cs,CreateItems,The following statement contains a magic number: this.TextItems3.Add(new BillboardTextItem { Text = "This is a billboard with a 'pin'."' Position = new Point3D(0.5' 0' 0.5)' DepthOffset = 0' WorldDepthOffset = 0.2 });
Magic Number,TextDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Text\MainWindow.xaml.cs,CreateItems,The following statement contains a magic number: this.TextItems3.Add(new BillboardTextItem { Text = "This is a billboard with a 'pin'."' Position = new Point3D(0.5' 0' 0.5)' DepthOffset = 0' WorldDepthOffset = 0.2 });
Magic Number,TextDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Text\MainWindow.xaml.cs,CreateItems,The following statement contains a magic number: this.TextItems3.Add(new BillboardTextItem { Text = "This is a billboard with a 'pin'."' Position = new Point3D(0.5' 0' 0.5)' DepthOffset = 0' WorldDepthOffset = 0.2 });
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: int n = 180;
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: double r = Math.Sqrt(3) / 3;
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: double r = Math.Sqrt(3) / 3;
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring1 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u)' u => Math.Sin(u) + r' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring1 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u)' u => Math.Sin(u) + r' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring1 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u)' u => Math.Sin(u) + r' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring2 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) + 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring2 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) + 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring2 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) + 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring2 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) + 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring2 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) + 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring3 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) - 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring3 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) - 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring3 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) - 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring3 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) - 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,TubeDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Tube\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: Ring3 = this.CreatePath(0' Math.PI * 2' n' u => Math.Cos(u) - 0.5' u => Math.Sin(u) - r / 2' u => Math.Cos(3 * u) / 3);
Magic Number,UIElementDemo,DemoElement3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\UIElement\DemoElement3D.cs,DemoElement3D,The following statement contains a magic number: mb.AddSphere(new Point3D(0' 0' 0)' 2' 100' 50);
Magic Number,UIElementDemo,DemoElement3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\UIElement\DemoElement3D.cs,DemoElement3D,The following statement contains a magic number: mb.AddSphere(new Point3D(0' 0' 0)' 2' 100' 50);
Magic Number,UIElementDemo,DemoElement3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\UIElement\DemoElement3D.cs,DemoElement3D,The following statement contains a magic number: mb.AddSphere(new Point3D(0' 0' 0)' 2' 100' 50);
Magic Number,UIElementDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\UIElement\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: meshBuilder.AddSphere(new Point3D(0' 0' 0)' 2' 100' 50);
Magic Number,UIElementDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\UIElement\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: meshBuilder.AddSphere(new Point3D(0' 0' 0)' 2' 100' 50);
Magic Number,UIElementDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\UIElement\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: meshBuilder.AddSphere(new Point3D(0' 0' 0)' 2' 100' 50);
Magic Number,UIElementDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\UIElement\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: element.Transform = new TranslateTransform3D(5' 0' 0);
Magic Number,UIElementDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\UIElement\MainWindow.xaml.cs,ZoomExtents_Click,The following statement contains a magic number: view1.ZoomExtents(500);
Magic Number,ViewportFeaturesDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\ViewportFeatures\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: this.ResetCommand = new DelegateCommand(() => this.view8.FitView(new Vector3D(1' -1' -1)' new Vector3D(0' 0' 1)' 500));
Magic Number,VoxelDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Voxels\MainViewModel.cs,CreateVoxelModel3D,The following statement contains a magic number: const double size = 0.98;
Magic Number,VoxelDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Voxels\MainWindow.xaml.cs,MainWindowLoaded,The following statement contains a magic number: view1.ZoomExtents(500);
Magic Number,VoxelDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Voxels\MainWindow.xaml.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.Space:                      vm.PaletteIndex++;                      vm.CurrentColor = vm.GetPaletteColor();                      break;                  case Key.A:                      view1.ZoomExtents(500);                      break;                  case Key.C:                      vm.Clear();                      break;              }
Magic Number,VoxelDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Voxels\MainWindow.xaml.cs,view1_MouseDown,The following statement contains a magic number: if (source != null)              {                  if (shift)                      vm.Remove(source);                  else                      vm.Add(source' n);              }              else              {                  var ray = Viewport3DHelper.Point2DtoRay3D(view1.Viewport' p);                  if (ray != null)                  {                      var pi = ray.PlaneIntersection(new Point3D(0' 0' 0.5)' new Vector3D(0' 0' 1));                      if (pi.HasValue)                      {                          var pRound = new Point3D(Math.Round(pi.Value.X)' Math.Round(pi.Value.Y)'0);                      //    var pRound = new Point3D(Math.Floor(pi.Value.X)' Math.Floor(pi.Value.Y)' Math.Floor(pi.Value.Z));                          //var pRound = new Point3D((int)pi.Value.X' (int)pi.Value.Y' (int)pi.Value.Z);                          vm.AddVoxel(pRound);                      }                  }              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,MainViewModel,The following statement contains a magic number: Length = 200;
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,WiimoteChanged,The following statement contains a magic number: if (enableModelPositioning)              {                  if (e.WiimoteState.ButtonState.Home)                  {                      // changing UI properties must be invoked on the UI thread                      dispatcher.BeginInvoke(new Action(() => view.ZoomExtents()));                  }                    //dispatcher.BeginInvoke(new Action(() => HullBrush = new SolidColorBrush(colors[r.Next(colors.Length)])));                    if (e.WiimoteState.ButtonState.Plus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(-0.01)));                  }                  if (e.WiimoteState.ButtonState.Minus)                  {                      dispatcher.BeginInvoke(new Action(() => view.CameraController.Zoom(0.01)));                  }                    double deltaTime = timer.ElapsedMilliseconds*0.001;                  timer.Restart();                    double newHeel = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.X - 94)/(143 - 94);                  double newTrim = -90 + 180.0*(e.WiimoteState.AccelState.RawValues.Y - 94)/(143 - 94);                  Heel = Heel + (newHeel - Heel)*damping;                  Trim = Trim + (newTrim - Trim)*damping;                    double verticalAcceleration = 100.0*(e.WiimoteState.AccelState.RawValues.Z - 143);                  vspeed += verticalAcceleration*deltaTime;                  vspeed *= vspeedDamping;                  Heave = (Heave + vspeed*deltaTime)*0.95;                    // Console.WriteLine(e.WiimoteState.AccelState.Values.Z + " -> " + verticalAcceleration + " => " + vspeed);              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,ValidateTrimHeel,The following statement contains a magic number: if (wm != null)              {                  Rumble = Math.Abs(Heel) > 60 || Math.Abs(Trim) > 60;                  Led1 = Math.Abs(Heel) > 30;                  Led2 = Math.Abs(Trim) > 30;              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,ValidateTrimHeel,The following statement contains a magic number: if (wm != null)              {                  Rumble = Math.Abs(Heel) > 60 || Math.Abs(Trim) > 60;                  Led1 = Math.Abs(Heel) > 30;                  Led2 = Math.Abs(Trim) > 30;              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,ValidateTrimHeel,The following statement contains a magic number: if (wm != null)              {                  Rumble = Math.Abs(Heel) > 60 || Math.Abs(Trim) > 60;                  Led1 = Math.Abs(Heel) > 30;                  Led2 = Math.Abs(Trim) > 30;              }
Magic Number,WiiDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainViewModel.cs,ValidateTrimHeel,The following statement contains a magic number: if (wm != null)              {                  Rumble = Math.Abs(Heel) > 60 || Math.Abs(Trim) > 60;                  Led1 = Math.Abs(Heel) > 30;                  Led2 = Math.Abs(Trim) > 30;              }
Magic Number,WiiDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,view1_MouseLeftButtonDown,The following statement contains a magic number: if (e.ClickCount==2)                  Explode();
Magic Number,WiiDemo,ExplodingMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,ExplodingMesh,The following statement contains a magic number: for (int i = 0; i < mesh.Positions.Count; i++)              {                  var delta = mesh.Positions[i] - center;                  delta.Normalize();                  integrator.Positions[i] = mesh.Positions[i] + delta * (1 + r.NextDouble() * 2);                  integrator.Positions0[i] = mesh.Positions[i];                  integrator.Accelerations[i] = new Vector3D(0' 0' -1000);                  integrator.InverseMass[i] = 0.01;              }
Magic Number,WiiDemo,ExplodingMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,ExplodingMesh,The following statement contains a magic number: for (int i = 0; i < mesh.Positions.Count; i++)              {                  var delta = mesh.Positions[i] - center;                  delta.Normalize();                  integrator.Positions[i] = mesh.Positions[i] + delta * (1 + r.NextDouble() * 2);                  integrator.Positions0[i] = mesh.Positions[i];                  integrator.Accelerations[i] = new Vector3D(0' 0' -1000);                  integrator.InverseMass[i] = 0.01;              }
Magic Number,WiiDemo,ExplodingMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,ExplodingMesh,The following statement contains a magic number: for (int i = 0; i < mesh.Positions.Count; i++)              {                  var delta = mesh.Positions[i] - center;                  delta.Normalize();                  integrator.Positions[i] = mesh.Positions[i] + delta * (1 + r.NextDouble() * 2);                  integrator.Positions0[i] = mesh.Positions[i];                  integrator.Accelerations[i] = new Vector3D(0' 0' -1000);                  integrator.InverseMass[i] = 0.01;              }
Magic Number,WiiDemo,ExplodingMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,ExplodingMesh,The following statement contains a magic number: integrator.CreateConstraintsByMesh(mesh' 0.7);
Magic Number,WiiDemo,ExplodingMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,ExplodingMesh,The following statement contains a magic number: integrator.AddFloor(0.3);
Magic Number,WiiDemo,ExplodingMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,Integrate,The following statement contains a magic number: var dt = watch.ElapsedMilliseconds*0.001;
Magic Number,WiiDemo,ExplodingMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,Integrate,The following statement contains a magic number: if (dt == 0)                  dt = 0.01;
Magic Number,WiiDemo,ExplodingMesh,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MainWindow.xaml.cs,IsMoving,The following statement contains a magic number: return totalTime < 3;
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: const int rows = 5;
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: const int columns = 4;
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: const double distance = 120;
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = 0; i < rows; i++)              {                  double y = i * distance;                  for (int j = 0; j + (i % 2) * 0.5 <= columns - 1; j++)                  {                      double x = (j + (i % 2) * 0.5) * distance;                      var visual = new WindTurbineVisual3D                                       {                                           RotationAngle = r.Next(360)'                                           RotationSpeed = 20'                                           WindTurbine = turbine'                                           Transform = new TranslateTransform3D(x' y' 0)                                       };                      model.Children.Add(visual);                  }              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = 0; i < rows; i++)              {                  double y = i * distance;                  for (int j = 0; j + (i % 2) * 0.5 <= columns - 1; j++)                  {                      double x = (j + (i % 2) * 0.5) * distance;                      var visual = new WindTurbineVisual3D                                       {                                           RotationAngle = r.Next(360)'                                           RotationSpeed = 20'                                           WindTurbine = turbine'                                           Transform = new TranslateTransform3D(x' y' 0)                                       };                      model.Children.Add(visual);                  }              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = 0; i < rows; i++)              {                  double y = i * distance;                  for (int j = 0; j + (i % 2) * 0.5 <= columns - 1; j++)                  {                      double x = (j + (i % 2) * 0.5) * distance;                      var visual = new WindTurbineVisual3D                                       {                                           RotationAngle = r.Next(360)'                                           RotationSpeed = 20'                                           WindTurbine = turbine'                                           Transform = new TranslateTransform3D(x' y' 0)                                       };                      model.Children.Add(visual);                  }              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = 0; i < rows; i++)              {                  double y = i * distance;                  for (int j = 0; j + (i % 2) * 0.5 <= columns - 1; j++)                  {                      double x = (j + (i % 2) * 0.5) * distance;                      var visual = new WindTurbineVisual3D                                       {                                           RotationAngle = r.Next(360)'                                           RotationSpeed = 20'                                           WindTurbine = turbine'                                           Transform = new TranslateTransform3D(x' y' 0)                                       };                      model.Children.Add(visual);                  }              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = 0; i < rows; i++)              {                  double y = i * distance;                  for (int j = 0; j + (i % 2) * 0.5 <= columns - 1; j++)                  {                      double x = (j + (i % 2) * 0.5) * distance;                      var visual = new WindTurbineVisual3D                                       {                                           RotationAngle = r.Next(360)'                                           RotationSpeed = 20'                                           WindTurbine = turbine'                                           Transform = new TranslateTransform3D(x' y' 0)                                       };                      model.Children.Add(visual);                  }              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: for (int i = 0; i < rows; i++)              {                  double y = i * distance;                  for (int j = 0; j + (i % 2) * 0.5 <= columns - 1; j++)                  {                      double x = (j + (i % 2) * 0.5) * distance;                      var visual = new WindTurbineVisual3D                                       {                                           RotationAngle = r.Next(360)'                                           RotationSpeed = 20'                                           WindTurbine = turbine'                                           Transform = new TranslateTransform3D(x' y' 0)                                       };                      model.Children.Add(visual);                  }              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var seasurface = new RectangleVisual3D                                   {                                       DivWidth = 100'                                       DivLength = 100'                                       Origin = new Point3D((rows - 2) * distance * 0.5' (columns) * distance * 0.5' 0)'                                       Width = rows * distance * 2'                                       Length = columns * distance * 2                                   };
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var seasurface = new RectangleVisual3D                                   {                                       DivWidth = 100'                                       DivLength = 100'                                       Origin = new Point3D((rows - 2) * distance * 0.5' (columns) * distance * 0.5' 0)'                                       Width = rows * distance * 2'                                       Length = columns * distance * 2                                   };
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var seasurface = new RectangleVisual3D                                   {                                       DivWidth = 100'                                       DivLength = 100'                                       Origin = new Point3D((rows - 2) * distance * 0.5' (columns) * distance * 0.5' 0)'                                       Width = rows * distance * 2'                                       Length = columns * distance * 2                                   };
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var seasurface = new RectangleVisual3D                                   {                                       DivWidth = 100'                                       DivLength = 100'                                       Origin = new Point3D((rows - 2) * distance * 0.5' (columns) * distance * 0.5' 0)'                                       Width = rows * distance * 2'                                       Length = columns * distance * 2                                   };
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var seasurface = new RectangleVisual3D                                   {                                       DivWidth = 100'                                       DivLength = 100'                                       Origin = new Point3D((rows - 2) * distance * 0.5' (columns) * distance * 0.5' 0)'                                       Width = rows * distance * 2'                                       Length = columns * distance * 2                                   };
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var seasurface = new RectangleVisual3D                                   {                                       DivWidth = 100'                                       DivLength = 100'                                       Origin = new Point3D((rows - 2) * distance * 0.5' (columns) * distance * 0.5' 0)'                                       Width = rows * distance * 2'                                       Length = columns * distance * 2                                   };
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: var seasurface = new RectangleVisual3D                                   {                                       DivWidth = 100'                                       DivLength = 100'                                       Origin = new Point3D((rows - 2) * distance * 0.5' (columns) * distance * 0.5' 0)'                                       Width = rows * distance * 2'                                       Length = columns * distance * 2                                   };
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: seasurface.Material = seasurface.BackMaterial = MaterialHelper.CreateMaterial(Colors.SeaGreen' 0.8);
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\MainWindow.xaml.cs,HeadTracking,The following statement contains a magic number: if (irState.IRSensors[0].Found)              {                  var p0 = irState.IRSensors[0].RawPosition;                  double mx = p0.X;                  double my = p0.Y;                  double scale = 1;                    if (irState.IRSensors[1].Found)                  {                      var p1 = irState.IRSensors[1].RawPosition;                      double dx = p0.X - p1.X;                      double dy = p0.Y - p1.Y;                      double d = Math.Sqrt(dx * dx + dy * dy);                      mx = (p0.X + p1.X) * 0.5;                      my = (p0.Y + p1.Y) * 0.5;                      scale = d / 200.0;                  }                  double theta = 20.0 * (mx - 512) / 512;                  double phi = 20.0 * (my - 384) / 384;                  Dispatcher.BeginInvoke(new Action(() => SetTransform(scale' theta' phi)));              }
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: BladeLength = 40;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: Height = 70;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: BaseHeight = 20;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: HubDiameter = 3;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: Diameter = 4;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: Overhang = 5;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: NacelleLength = 8;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: NacelleDiameter = 2;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: BladeTipChord = 0.2;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: Blades = 3;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: ShaftAngle = 0.5;
Magic Number,WindDemo,WindTurbine,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbine.cs,WindTurbine,The following statement contains a magic number: Pre = -2.5;
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,OnCompositionTargetRendering,The following statement contains a magic number: double delta = watch.ElapsedMilliseconds * 0.001;
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,OnCompositionTargetRendering,The following statement contains a magic number: RotationAngle += 360 * RotationSpeed / 60 * delta;
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,OnCompositionTargetRendering,The following statement contains a magic number: RotationAngle += 360 * RotationSpeed / 60 * delta;
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,UpdateVisuals,The following statement contains a magic number: baseTower.Height = -baseTower.Origin.Z + 2;
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,UpdateVisuals,The following statement contains a magic number: var tower = new TruncatedConeVisual3D                              {                                  Fill = Brushes.White'                                  Origin = new Point3D(0' 0' 2)'                                  Height = WindTurbine.Height'                                  BaseRadius = WindTurbine.Diameter                              };
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,UpdateVisuals,The following statement contains a magic number: tower.TopRadius = tower.BaseRadius * (1 - WindTurbine.Height * Math.Sin(WindTurbine.ShaftAngle / 180.0 * Math.PI));
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,UpdateVisuals,The following statement contains a magic number: nacelle.BaseRadius = nacelle.TopRadius * 0.7;
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,UpdateVisuals,The following statement contains a magic number: for (int i = 0; i < WindTurbine.Blades; i++)              {                  double angle = (double)i / WindTurbine.Blades * Math.PI * 2;                    // todo: the blade is simplified to a cone... it should be a real profile...                  var blade = new TruncatedConeVisual3D                                  {                                      Origin = nacelle.Origin'                                      Normal = new Vector3D(0' Math.Cos(angle)' Math.Sin(angle))'                                      Height = WindTurbine.BladeLength'                                      BaseRadius = WindTurbine.BladeRootChord'                                      TopRadius = WindTurbine.BladeTipChord'                                      Fill = Brushes.White                                  };                  rotor.Children.Add(blade);              }
Magic Number,WindDemo,WindTurbineVisual3D,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wind\WindTurbineVisual3D.cs,UpdateVisuals,The following statement contains a magic number: var hub = new SphereVisual3D                            {                                Fill = Brushes.White'                                Center = nacelle.Origin'                                Radius = WindTurbine.HubDiameter / 2                            };
Missing Default,ExampleBrowser,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 13 "..\..\..\MainWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.ListBoxMouseDoubleClick);                            #line default              #line hidden              return;              }
Missing Default,MemoryLeakTest,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\MemoryLeakTest\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 6 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open1Click);                            #line default              #line hidden              return;              case 2:                            #line 7 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open2Click);                            #line default              #line hidden              return;              case 3:                            #line 8 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Open3Click);                            #line default              #line hidden              return;              case 4:                            #line 9 "..\..\..\..\..\Examples\MemoryLeakTest\MainWindow.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.CollectClick);                            #line default              #line hidden              return;              }
Missing Default,PolyhedronDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Polyhedron\MainViewModel.cs,CreateModel,The following switch statement is missing a default case: switch (CurrentModelType)              {                  case ModelTypes.Tetrahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          break;                      }                    case ModelTypes.Octahedron:                      {                          double a = 1.0 / (2 * Math.Sqrt(2));                          double b = 0.5;                          pmb.AddPanel(-a' 0' a' -a' 0' -a' 0' b' 0);                          pmb.AddPanel(-a' 0' -a' a' 0' -a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' a' -a' 0' a' 0' b' 0);                          pmb.AddPanel(a' 0' -a' -a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' -a' -a' 0' a' 0' -b' 0);                          pmb.AddPanel(a' 0' a' a' 0' -a' 0' -b' 0);                          pmb.AddPanel(-a' 0' a' a' 0' a' 0' -b' 0);                          break;                      }                  case ModelTypes.Hexahedron:                      {                          double a = 0.5;                          pmb.AddPanel(-a' -a' a' a' -a' a' a' -a' -a' -a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' a' a' -a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' a' a' a' a' -a' a' -a' -a' a);                          pmb.AddPanel(a' a' -a' a' a' a' -a' a' a' -a' a' -a);                          pmb.AddPanel(a' -a' a' a' a' a' a' a' -a' a' -a' -a);                          pmb.AddPanel(a' -a' -a' a' a' -a' -a' a' -a' -a' -a' -a);                          break;                      }                  case ModelTypes.Icosahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 1.0 / (2 * phi);                          pmb.AddPanel(0' b' -a' b' a' 0' -b' a' 0);                          pmb.AddPanel(0' b' a' -b' a' 0' b' a' 0);                          pmb.AddPanel(0' b' a' 0' -b' a' -a' 0' b);                          pmb.AddPanel(0' b' a' a' 0' b' 0' -b' a);                          pmb.AddPanel(0' b' -a' 0' -b' -a' a' 0' -b);                          pmb.AddPanel(0' b' -a' -a' 0' -b' 0' -b' -a);                          pmb.AddPanel(0' -b' a' b' -a' 0' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' -b' -a' 0' b' -a' 0);                          pmb.AddPanel(-b' a' 0' -a' 0' b' -a' 0' -b);                          pmb.AddPanel(-b' -a' 0' -a' 0' -b' -a' 0' b);                          pmb.AddPanel(b' a' 0' a' 0' -b' a' 0' b);                          pmb.AddPanel(b' -a' 0' a' 0' b' a' 0' -b);                          pmb.AddPanel(0' b' a' -a' 0' b' -b' a' 0);                          pmb.AddPanel(0' b' a' b' a' 0' a' 0' b);                          pmb.AddPanel(0' b' -a' -b' a' 0' -a' 0' -b);                          pmb.AddPanel(0' b' -a' a' 0' -b' b' a' 0);                          pmb.AddPanel(0' -b' -a' -a' 0' -b' -b' -a' 0);                          pmb.AddPanel(0' -b' -a' b' -a' 0' a' 0' -b);                          pmb.AddPanel(0' -b' a' -b' -a' 0' -a' 0' b);                          pmb.AddPanel(0' -b' a' a' 0' b' b' -a' 0);                          break;                      }                  case ModelTypes.Dodecahedron:                      {                          double phi = (1 + Math.Sqrt(5)) / 2;                          double a = 0.5;                          double b = 0.5 / phi;                          double c = 0.5 * (2 - phi);                          pmb.AddPanel(c' 0' a' -c' 0' a' -b' b' b' 0' a' c' b' b' b);                          pmb.AddPanel(-c' 0' a' c' 0' a' b' -b' b' 0' -a' c' -b' -b' b);                          pmb.AddPanel(c' 0' -a' -c' 0' -a' -b' -b' -b' 0' -a' -c' b' -b' -b);                          pmb.AddPanel(-c' 0' -a' c' 0' -a' b' b' -b' 0' a' -c' -b' b' -b);                          pmb.AddPanel(b' b' -b' a' c' 0' b' b' b' 0' a' c' 0' a' -c);                            pmb.AddPanel(-b' b' b' -a' c' 0' -b' b' -b' 0' a' -c' 0' a' c);                          pmb.AddPanel(-b' -b' -b' -a' -c' 0' -b' -b' b' 0' -a' c' 0' -a' -c);                            pmb.AddPanel(b' -b' b' a' -c' 0' b' -b' -b' 0' -a' -c' 0' -a' c);                          pmb.AddPanel(a' c' 0' a' -c' 0' b' -b' b' c' 0' a' b' b' b);                          pmb.AddPanel(a' -c' 0' a' c' 0' b' b' -b' c' 0' -a' b' -b' -b);                          pmb.AddPanel(-a' c' 0' -a' -c' 0' -b' -b' -b' -c' 0' -a' -b' b' -b);                          pmb.AddPanel(-a' -c' 0' -a' c' 0' -b' b' b' -c' 0' a' -b' -b' b);                          break;                      }                  case ModelTypes.StellatedOctahedron:                      {                          double a = 0.5;                          pmb.AddPanel(a' a' a' -a' a' -a' a' -a' -a);                          pmb.AddPanel(-a' a' -a' -a' -a' a' a' -a' -a);                          pmb.AddPanel(a' a' a' a' -a' -a' -a' -a' a);                          pmb.AddPanel(a' a' a' -a' -a' a' -a' a' -a);                          pmb.AddPanel(-a' a' a' a' a' -a' -a' -a' -a);                          pmb.AddPanel(a' a' -a' a' -a' a' -a' -a' -a);                          pmb.AddPanel(-a' a' a' -a' -a' -a' a' -a' a);                          pmb.AddPanel(-a' a' a' a' -a' a' a' a' -a);                          break;                      }                }
Missing Default,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,IsOutsideFace,The following switch statement is missing a default case: switch (face)              {                  case 0:                      return i == 0;                  case 1:                      return i == Size - 1;                  case 2:                      return j == 0;                  case 3:                      return j == Size - 1;                  case 4:                      return k == 0;                  case 5:                      return k == Size - 1;              }
Missing Default,RubikDemo,RubikCube,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Rubik\RubikCube.cs,CreateFace,The following switch statement is missing a default case: switch (face)              {                  case 0:                      b.AddCubeFace(center' new Vector3D(-1' 0' 0)' new Vector3D(0' 0' 1)' length' width' height);                      break;                  case 1:                      b.AddCubeFace(center' new Vector3D(1' 0' 0)' new Vector3D(0' 0' -1)' length' width' height);                      break;                  case 2:                      b.AddCubeFace(center' new Vector3D(0' -1' 0)' new Vector3D(0' 0' 1)' width' length' height);                      break;                  case 3:                      b.AddCubeFace(center' new Vector3D(0' 1' 0)' new Vector3D(0' 0' -1)' width' length' height);                      break;                  case 4:                      b.AddCubeFace(center' new Vector3D(0' 0' -1)' new Vector3D(0' 1' 0)' height' length' width);                      break;                  case 5:                      b.AddCubeFace(center' new Vector3D(0' 0' 1)' new Vector3D(0' -1' 0)' height' length' width);                      break;              }
Missing Default,SurfacePlotDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\SurfacePlot\MainViewModel.cs,UpdateModel,The following switch statement is missing a default case: switch (ColorCoding)              {                  case ColorCoding.ByGradientY:                      ColorValues = FindGradientY(Data);                      break;                  case ColorCoding.ByLights:                      ColorValues = null;                      break;              }
Missing Default,VoxelDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Voxels\MainWindow.xaml.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Space:                      vm.PaletteIndex++;                      vm.CurrentColor = vm.GetPaletteColor();                      break;                  case Key.A:                      view1.ZoomExtents(500);                      break;                  case Key.C:                      vm.Clear();                      break;              }
Missing Default,WiiDemo,MouseHelper,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF\ExampleBrowser\Examples\Wii\MouseHelper.cs,SimulateMouseEvent,The following switch statement is missing a default case: switch (button)              {                  case MouseButton.Left:                      if (state == MouseButtonState.Pressed)                          mouse_event(MOUSEEVENTF_LEFTDOWN' x' y' 0' 0);                      else                          mouse_event(MOUSEEVENTF_LEFTUP' x' y' 0' 0);                      break;                  case MouseButton.Middle:                      if (state == MouseButtonState.Pressed)                          mouse_event(MOUSEEVENTF_MIDDLEDOWN' x' y' 0' 0);                      else                          mouse_event(MOUSEEVENTF_MIDDLEUP' x' y' 0' 0);                      break;                  case MouseButton.Right:                      if (state == MouseButtonState.Pressed)                          mouse_event(MOUSEEVENTF_RIGHTDOWN' x' y' 0' 0);                      else                          mouse_event(MOUSEEVENTF_RIGHTUP' x' y' 0' 0);                      break;              }
