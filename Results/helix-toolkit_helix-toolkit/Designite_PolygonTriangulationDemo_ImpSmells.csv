Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PolygonTriangulationDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainWindow.xaml.cs,generatePolygonButton_Click,The length of the statement  "            infoLabel.Content = String.Format("Last triangulation of {0} Points took {1:0.##} Milliseconds!"' triangulatedPolygon.Geometry.Positions.Count' timeNeeded); " is 156.
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new PerspectiveCamera { Position = new Point3D(0' 5' 9)' LookDirection = new Vector3D(0' -5' -4)' UpDirection = new Vector3D(0' 1' 0) };
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new PerspectiveCamera { Position = new Point3D(0' 5' 9)' LookDirection = new Vector3D(0' -5' -4)' UpDirection = new Vector3D(0' 1' 0) };
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new PerspectiveCamera { Position = new Point3D(0' 5' 9)' LookDirection = new Vector3D(0' -5' -4)' UpDirection = new Vector3D(0' 1' 0) };
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Camera = new PerspectiveCamera { Position = new Point3D(0' 5' 9)' LookDirection = new Vector3D(0' -5' -4)' UpDirection = new Vector3D(0' 1' 0) };
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.TriangulationThickness = .5;
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.PointCount = 1000;
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.ModelLineTransform = new TranslateTransform3D(0' 0.001' 0);
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Grid = LineBuilder.GenerateGrid(Vector3.UnitY' -5' 5' 0' 10);
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Grid = LineBuilder.GenerateGrid(Vector3.UnitY' -5' 5' 0' 10);
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.Grid = LineBuilder.GenerateGrid(Vector3.UnitY' -5' 5' 0' 10);
Magic Number,PolygonTriangulationDemo,MainViewModel,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainViewModel.cs,MainViewModel,The following statement contains a magic number: this.GridTransform = new TranslateTransform3D(0' -0.01' 0);
Magic Number,PolygonTriangulationDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainWindow.xaml.cs,generatePolygonButton_Click,The following statement contains a magic number: var holeAngle = random.NextFloat(0' (float)Math.PI * 2);
Magic Number,PolygonTriangulationDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainWindow.xaml.cs,generatePolygonButton_Click,The following statement contains a magic number: foreach (var point in mPolygonPoints.Union(holes.SelectMany(h => h)))              {                  geometry.Positions.Add(new Vector3(point.X' 0' point.Y + 5));                  geometry.Normals.Add(new Vector3(0' 1' 0));              }
Magic Number,PolygonTriangulationDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainWindow.xaml.cs,generatePolygonButton_Click,The following statement contains a magic number: for (int i = 0; i < sLTI.Count; i += 3)              {                  lb.AddLine(geometry.Positions[sLTI[i]]' geometry.Positions[sLTI[i + 1]]);                  lb.AddLine(geometry.Positions[sLTI[i + 1]]' geometry.Positions[sLTI[i + 2]]);                  lb.AddLine(geometry.Positions[sLTI[i + 2]]' geometry.Positions[sLTI[i]]);              }
Magic Number,PolygonTriangulationDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainWindow.xaml.cs,generatePolygonButton_Click,The following statement contains a magic number: for (int i = 0; i < sLTI.Count; i += 3)              {                  lb.AddLine(geometry.Positions[sLTI[i]]' geometry.Positions[sLTI[i + 1]]);                  lb.AddLine(geometry.Positions[sLTI[i + 1]]' geometry.Positions[sLTI[i + 2]]);                  lb.AddLine(geometry.Positions[sLTI[i + 2]]' geometry.Positions[sLTI[i]]);              }
Magic Number,PolygonTriangulationDemo,MainWindow,C:\repos\helix-toolkit_helix-toolkit\Source\Examples\WPF.SharpDX\PolygonTriangulationDemo\MainWindow.xaml.cs,generatePolygonButton_Click,The following statement contains a magic number: for (int i = 0; i < sLTI.Count; i += 3)              {                  lb.AddLine(geometry.Positions[sLTI[i]]' geometry.Positions[sLTI[i + 1]]);                  lb.AddLine(geometry.Positions[sLTI[i + 1]]' geometry.Positions[sLTI[i + 2]]);                  lb.AddLine(geometry.Positions[sLTI[i + 2]]' geometry.Positions[sLTI[i]]);              }
