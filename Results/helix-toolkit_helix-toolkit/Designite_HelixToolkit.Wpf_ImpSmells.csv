Implementation smell,Namespace,Class,File,Method,Description
Long Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The method has 110 lines of code.
Long Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTorus,The method has 202 lines of code.
Long Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The method has 109 lines of code.
Long Method,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The method has 108 lines of code.
Long Method,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The method has 131 lines of code.
Long Method,HelixToolkit.Wpf,SweepLinePolygonTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,TriangulateMonotone,The method has 125 lines of code.
Long Method,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The method has 108 lines of code.
Long Method,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The method has 109 lines of code.
Long Method,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreatePositions,The method has 103 lines of code.
Long Method,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,Read,The method has 109 lines of code.
Long Method,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,AddFace,The method has 132 lines of code.
Long Method,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,LoadMaterialLib,The method has 116 lines of code.
Long Method,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,The method has 114 lines of code.
Long Method,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The method has 113 lines of code.
Long Method,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The method has 123 lines of code.
Long Method,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The method has 124 lines of code.
Complex Method,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,Triangulate,Cyclomatic complexity of the method is 12
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddLoftedGeometry,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuads,Cyclomatic complexity of the method is 12
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRectangularMesh,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRectangularMesh,Cyclomatic complexity of the method is 8
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddSurfaceOfRevolution,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTorus,Cyclomatic complexity of the method is 27
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleFan,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangles,Cyclomatic complexity of the method is 13
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleStrip,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,Cyclomatic complexity of the method is 14
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,Cyclomatic complexity of the method is 15
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Append,Cyclomatic complexity of the method is 12
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ChamferCorner,Cyclomatic complexity of the method is 10
Complex Method,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ToMesh,Cyclomatic complexity of the method is 8
Complex Method,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,Simplify,Cyclomatic complexity of the method is 8
Complex Method,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,Cut,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CombineSegments,Cyclomatic complexity of the method is 10
Complex Method,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,RemoveIsolatedVertices,Cyclomatic complexity of the method is 13
Complex Method,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,Cyclomatic complexity of the method is 21
Complex Method,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,Cyclomatic complexity of the method is 26
Complex Method,HelixToolkit.Wpf,SweepLinePolygonTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,Triangulate,Cyclomatic complexity of the method is 12
Complex Method,HelixToolkit.Wpf,SweepLinePolygonTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,TriangulateMonotone,Cyclomatic complexity of the method is 17
Complex Method,HelixToolkit.Wpf,SweepLinePolygonTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,CalculateDiagonals,Cyclomatic complexity of the method is 10
Complex Method,HelixToolkit.Wpf,PolygonPoint,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,PointClass,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,ContourFacet,Cyclomatic complexity of the method is 10
Complex Method,HelixToolkit.Wpf,DoubleKeyDictionary<K;T;V>,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\DoubleKeyDictionary.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationDelta,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,Cyclomatic complexity of the method is 16
Complex Method,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,Started,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,OnApplyTemplate,Cyclomatic complexity of the method is 13
Complex Method,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,OnCameraChanged,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,Exporters,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\Exporters.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportLight,Cyclomatic complexity of the method is 10
Complex Method,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMaterial,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMesh,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,Cyclomatic complexity of the method is 10
Complex Method,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportModel,Cyclomatic complexity of the method is 8
Complex Method,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,ToMeshGeometry3D,Cyclomatic complexity of the method is 14
Complex Method,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Triangulate,Cyclomatic complexity of the method is 8
Complex Method,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,CreateSpline,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,Cyclomatic complexity of the method is 8
Complex Method,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,Cyclomatic complexity of the method is 8
Complex Method,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,Cyclomatic complexity of the method is 15
Complex Method,HelixToolkit.Wpf,CohenSutherlandClipping,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\CohenSutherlandClipping.cs,ClipLine,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,Export,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,ModelImporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ModelImporter.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,AddFace,Cyclomatic complexity of the method is 22
Complex Method,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,LoadMaterialLib,Cyclomatic complexity of the method is 31
Complex Method,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,Cyclomatic complexity of the method is 20
Complex Method,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,CreateMesh,Cyclomatic complexity of the method is 8
Complex Method,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,LoadPlyFile,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,Cyclomatic complexity of the method is 18
Complex Method,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ConvertPropValueASCII,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ConvertPropValueBinary,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,DumpAsASCII,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadMaterial,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadTriangularMesh,Cyclomatic complexity of the method is 10
Complex Method,HelixToolkit.Wpf,FloorConstraint,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Physics\VerletIntegrator.cs,Satisfy,Cyclomatic complexity of the method is 9
Complex Method,HelixToolkit.Wpf,CuttingPlaneGroup,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\CuttingPlaneGroup.cs,ApplyCuttingPlanesToModel,Cyclomatic complexity of the method is 12
Complex Method,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,SortChildren,Cyclomatic complexity of the method is 12
Complex Method,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,VisualChanged,Cyclomatic complexity of the method is 12
Complex Method,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,Cyclomatic complexity of the method is 12
Long Parameter List,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,InsideTriangle,The method has 8 parameters. Parameters: Ax' Ay' Bx' By' Cx' Cy' Px' Py
Long Parameter List,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,Snip,The method has 6 parameters. Parameters: contour' u' v' w' n' V
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ComputeTangents,The method has 6 parameters. Parameters: positions' normals' textureCoordinates' triangleIndices' tangents' bitangents
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ComputeTangentsQuads,The method has 6 parameters. Parameters: positions' normals' textureCoordinates' indices' tangents' bitangents
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddArrow,The method has 5 parameters. Parameters: point1' point2' diameter' headLength' thetaDiv
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBox,The method has 5 parameters. Parameters: center' xlength' ylength' zlength' faces
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBox,The method has 7 parameters. Parameters: center' x' y' xlength' ylength' zlength' faces
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCone,The method has 8 parameters. Parameters: origin' direction' baseRadius' topRadius' height' baseCap' topCap' thetaDiv
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCone,The method has 5 parameters. Parameters: origin' apex' baseRadius' baseCap' thetaDiv
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCubeFace,The method has 6 parameters. Parameters: center' normal' up' dist' width' height
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCylinder,The method has 6 parameters. Parameters: p1' p2' radius' thetaDiv' cap1' cap2
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddEllipsoid,The method has 6 parameters. Parameters: center' radiusx' radiusy' radiusz' thetaDiv' phiDiv
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddOctahedron,The method has 5 parameters. Parameters: center' forward' up' sideLength' height
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPipe,The method has 5 parameters. Parameters: point1' point2' innerDiameter' diameter' thetaDiv
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPyramid,The method has 6 parameters. Parameters: center' forward' up' sideLength' height' closeBase
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuad,The method has 8 parameters. Parameters: p0' p1' p2' p3' uv0' uv1' uv2' uv3
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRectangularMesh,The method has 8 parameters. Parameters: plane' columns' rows' width' height' flipTriangles' flipTexCoordsUAxis' flipTexCoordsVAxis
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRectangularMeshTriangleIndices,The method has 5 parameters. Parameters: index0' rows' columns' rowsClosed' columnsClosed
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRevolvedGeometry,The method has 5 parameters. Parameters: points' textureValues' origin' direction' thetaDiv
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddSurfaceOfRevolution,The method has 6 parameters. Parameters: origin' axis' section' sectionIndices' thetaDiv' textureValues
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangle,The method has 6 parameters. Parameters: p0' p1' p2' uv0' uv1' uv2
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The method has 7 parameters. Parameters: path' values' diameters' thetaDiv' isTubeClosed' frontCap' backCap
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The method has 6 parameters. Parameters: path' diameter' thetaDiv' isTubeClosed' frontCap' backCap
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The method has 8 parameters. Parameters: path' values' diameters' section' isTubeClosed' isSectionClosed' frontCap' backCap
Long Parameter List,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The method has 10 parameters. Parameters: path' angles' values' diameters' section' sectionXAxis' isTubeClosed' isSectionClosed' frontCap' backCap
Long Parameter List,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,RemoveIsolatedVertices,The method has 8 parameters. Parameters: vertices' triangles' texture' normals' verticesOut' trianglesOut' textureOut' normalOut
Long Parameter List,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Flipped,The method has 6 parameters. Parameters: p' i0' i1' v0' v1' deleted
Long Parameter List,HelixToolkit.Wpf,SymmetricMatrix,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,SymmetricMatrix,The method has 10 parameters. Parameters: m11' m12' m13' m14' m22' m23' m24' m33' m34' m44
Long Parameter List,HelixToolkit.Wpf,SymmetricMatrix,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,det,The method has 9 parameters. Parameters: a11' a12' a13' a21' a22' a23' a31' a32' a33
Long Parameter List,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,ContourFacet,The method has 7 parameters. Parameters: index0' index1' index2' newPositions' newNormals' newTextureCoordinates' triangleIndices
Long Parameter List,HelixToolkit.Wpf,DrawingContextExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\DrawingContextExtensions.cs,DrawArc,The method has 8 parameters. Parameters: dc' brush' pen' start' end' direction' radiusX' radiusY
Long Parameter List,HelixToolkit.Wpf,DrawingContextExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\DrawingContextExtensions.cs,DrawArc,The method has 9 parameters. Parameters: dc' brush' pen' position' startAngle' endAngle' direction' radiusX' radiusY
Long Parameter List,HelixToolkit.Wpf,DrawingContextExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\DrawingContextExtensions.cs,DrawArc,The method has 8 parameters. Parameters: dc' brush' pen' position' startAngle' endAngle' radiusX' radiusY
Long Parameter List,HelixToolkit.Wpf,RectangleAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\RectangleAdorner.cs,RectangleAdorner,The method has 7 parameters. Parameters: adornedElement' rectangle' color1' color2' thickness1' thickness2' crossHairSize
Long Parameter List,HelixToolkit.Wpf,RectangleAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\RectangleAdorner.cs,RectangleAdorner,The method has 8 parameters. Parameters: adornedElement' rectangle' color1' color2' thickness1' thickness2' crossHairSize' dashStyle2
Long Parameter List,HelixToolkit.Wpf,ClosestVertexResult,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ClosestVertexResult.cs,ClosestVertexResult,The method has 5 parameters. Parameters: model' geometry' closestPoint' closestPointIn2D' distanceToPoint2D
Long Parameter List,HelixToolkit.Wpf,Exporter<T>,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\Exporter.cs,RenderBrush,The method has 5 parameters. Parameters: stm' brush' w' h' qualityLevel
Long Parameter List,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteAshikhminMaterial,The method has 12 parameters. Parameters: writer' identifier' diffuse' specular' shininessXMap' shininessYMap' rotationMap' shininessX' shininessY' rotation' indexOfRefraction' nkfile
Long Parameter List,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteDielectricMaterial,The method has 7 parameters. Parameters: writer' identifier' reflection' refraction' indexOfRefraction' dispersion' nkfile
Long Parameter List,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteWhittedMaterial,The method has 8 parameters. Parameters: writer' identifier' texture' diffuse' specular' refraction' shininess' indexOfRefraction
Long Parameter List,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToString,The method has 6 parameters. Parameters: matrix' format' columnSeparator' lineSeparator' columnWidth' provider
Long Parameter List,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ConvertToString,The method has 6 parameters. Parameters: matrix' format' columnSeparator' lineSeparator' columnWidth' provider
Long Parameter List,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateTo,The method has 5 parameters. Parameters: camera' newPosition' newDirection' newUpDirection' animationTime
Long Parameter List,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,LookAt,The method has 5 parameters. Parameters: camera' target' newLookDirection' newUpDirection' animationTime
Long Parameter List,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The method has 5 parameters. Parameters: camera' viewport' lookDirection' upDirection' animationTime
Long Parameter List,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The method has 6 parameters. Parameters: camera' viewport' bounds' lookDirection' upDirection' animationTime
Long Parameter List,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,ZoomExtents,The method has 5 parameters. Parameters: camera' viewport' center' radius' animationTime
Long Parameter List,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The method has 7 parameters. Parameters: camera' viewport' center' radius' lookDirection' upDirection' animationTime
Long Parameter List,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,CreateSpline,The method has 5 parameters. Parameters: points' tension' tensions' isClosed' tolerance
Long Parameter List,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The method has 8 parameters. Parameters: points' pt0' pt1' pt2' pt3' t1' t2' tolerance
Long Parameter List,HelixToolkit.Wpf,MaterialHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\MaterialHelper.cs,CreateMaterial,The method has 5 parameters. Parameters: brush' specularBrightness' specularPower' ambient' freeze
Long Parameter List,HelixToolkit.Wpf,MaterialHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\MaterialHelper.cs,CreateMaterial,The method has 6 parameters. Parameters: diffuse' emissive' specular' opacity' specularPower' freeze
Long Parameter List,HelixToolkit.Wpf,Billboard,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\Billboard.cs,Billboard,The method has 7 parameters. Parameters: position' width' height' horizontalAlignment' verticalAlignment' depthOffset' worldDepthOffset
Long Parameter List,HelixToolkit.Wpf,StereoHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\StereoHelper.cs,CalculateStereoBase,The method has 5 parameters. Parameters: L' N' screenWidth' depthRatio' hfov
Long Parameter List,HelixToolkit.Wpf,StereoHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\StereoHelper.cs,UpdateStereoCameras,The method has 7 parameters. Parameters: centerCamera' leftCamera' rightCamera' stereoBase' crossViewing' sameUpDirection' sameDirection
Long Parameter List,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabel3D,The method has 7 parameters. Parameters: text' textColor' isDoubleSided' height' center' textDirection' updirection
Long Parameter List,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The method has 7 parameters. Parameters: text' textColor' isDoubleSided' height' center' textDirection' updirection
Long Parameter List,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,Copy,The method has 5 parameters. Parameters: view' width' height' background' m
Long Parameter List,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,FindNearest,The method has 5 parameters. Parameters: viewport' position' point' normal' visual
Long Parameter List,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The method has 5 parameters. Parameters: view' width' height' background' m
Long Parameter List,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,SaveBitmap,The method has 5 parameters. Parameters: view' fileName' background' m' format
Long Parameter List,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,SaveStereoBitmap,The method has 5 parameters. Parameters: view' fileName' stereoBase' background' m
Long Parameter List,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,SaveBitmap,The method has 5 parameters. Parameters: view' stream' background' m' format
Long Parameter List,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,ExportKerkythea,The method has 5 parameters. Parameters: view' fileName' background' width' height
Long Parameter List,HelixToolkit.Wpf,PlyProperty,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,PlyProperty,The method has 6 parameters. Parameters: name' type' value' isList' listContentType' listContentValues
Long Parameter List,HelixToolkit.Wpf,PlyHeader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,PlyHeader,The method has 5 parameters. Parameters: plyFormatType' version' elements' objInfos' comments
Long Parameter List,HelixToolkit.Wpf,PerspectiveCameraExtension,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\MarkupExtensions\PerspectiveCameraExtension.cs,PerspectiveCameraExtension,The method has 6 parameters. Parameters: x' y' z' dx' dy' dz
Long Parameter List,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddEdge,The method has 6 parameters. Parameters: element' center' x' y' z' faceNormal
Long Parameter List,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddCubeFace,The method has 5 parameters. Parameters: element' normal' up' b' text
Long Parameter List,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineX,The method has 5 parameters. Parameters: mesh' x' minY' maxY' thickness
Long Parameter List,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineY,The method has 5 parameters. Parameters: mesh' y' minX' maxX' thickness
Long Parameter List,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,CreateTextMaterial,The method has 5 parameters. Parameters: items' createElement' background' elementMap' elementPositions
Long Identifier,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,,The length of the parameter AllCurvesShouldHaveTheSameNumberOfPoints is 40.
Long Identifier,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,,The length of the parameter SourceMeshNormalsShouldNotBeNull is 32.
Long Identifier,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,,The length of the parameter SourceMeshTextureCoordinatesShouldNotBeNull is 43.
Long Identifier,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,,The length of the parameter WrongNumberOfTextureCoordinates is 31.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter ChangeFieldOfViewCursorProperty is 31.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter IsChangeFieldOfViewEnabledProperty is 34.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter LeftRightPanSensitivityProperty is 31.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter LeftRightRotationSensitivityProperty is 36.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter PageUpDownZoomSensitivityProperty is 33.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter RotateAroundMouseDownPointProperty is 34.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter FixedRotationPointEnabledProperty is 33.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter UpDownRotationSensitivityProperty is 33.
Long Identifier,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,,The length of the parameter ZoomAroundMouseDownPointProperty is 32.
Long Identifier,HelixToolkit.Wpf,RangeColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\RangeColorAxis.cs,,The length of the parameter MaximumTextureCoordinateProperty is 32.
Long Identifier,HelixToolkit.Wpf,RangeColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\RangeColorAxis.cs,,The length of the parameter MinimumTextureCoordinateProperty is 32.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter ChangeFieldOfViewCursorProperty is 31.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter ChangeFieldOfViewGestureProperty is 32.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CoordinateSystemHeightProperty is 30.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CoordinateSystemHorizontalPositionProperty is 42.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CoordinateSystemLabelForegroundProperty is 39.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CoordinateSystemLabelXProperty is 30.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CoordinateSystemLabelYProperty is 30.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CoordinateSystemLabelZProperty is 30.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CoordinateSystemVerticalPositionProperty is 40.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CalculateCursorPositionProperty is 31.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CursorOnElementPositionProperty is 31.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter CursorOnConstructionPlanePositionProperty is 41.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter IsChangeFieldOfViewEnabledProperty is 34.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter IsTopBottomViewOrientedToFrontBackProperty is 42.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter IsViewCubeEdgeClicksEnabledProperty is 35.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter LeftRightPanSensitivityProperty is 31.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter LeftRightRotationSensitivityProperty is 36.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter OrthographicToggleGestureProperty is 33.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter PageUpDownZoomSensitivityProperty is 33.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter RotateAroundMouseDownPointProperty is 34.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter FixedRotationPointEnabledProperty is 33.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter UpDownRotationSensitivityProperty is 33.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter ViewCubeHorizontalPositionProperty is 34.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter ViewCubeVerticalPositionProperty is 32.
Long Identifier,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,,The length of the parameter ZoomAroundMouseDownPointProperty is 32.
Long Identifier,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,The length of the parameter containsHomogeneousCoordinates is 30.
Long Identifier,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,The length of the parameter nextLineContainsVertexDimension is 31.
Long Identifier,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,The length of the parameter nextLineContainsNumberOfVertices is 32.
Long Identifier,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadBinary,The length of the parameter currentElementInstanceProperties is 32.
Long Identifier,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,,The length of the parameter IsTopBottomViewOrientedToFrontBackProperty is 42.
Long Identifier,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,,The length of the parameter StartVelocityRandomnessProperty is 31.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ComputeNormals,The length of the statement  "            //Cannot use normals[i].normalize() if using Media3D.Vector3DCollection. Does not change the internal value in Vector3DCollection. " is 130.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ComputeTangents,The length of the statement  "            ComputeTangents(meshGeometry.Positions' meshGeometry.Normals' meshGeometry.TextureCoordinates' meshGeometry.TriangleIndices' out t1' out t2); " is 141.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBoundingBox,The length of the statement  "            var p1 = new Point3D((DoubleOrSingle)boundingBox.X' (DoubleOrSingle)boundingBox.Y + (DoubleOrSingle)boundingBox.SizeY' (DoubleOrSingle)boundingBox.Z); " is 150.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBoundingBox,The length of the statement  "            var p2 = new Point3D((DoubleOrSingle)boundingBox.X + (DoubleOrSingle)boundingBox.SizeX' (DoubleOrSingle)boundingBox.Y + (DoubleOrSingle)boundingBox.SizeY' (DoubleOrSingle)boundingBox.Z); " is 186.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBoundingBox,The length of the statement  "            var p3 = new Point3D((DoubleOrSingle)boundingBox.X + (DoubleOrSingle)boundingBox.SizeX' (DoubleOrSingle)boundingBox.Y' (DoubleOrSingle)boundingBox.Z); " is 150.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBoundingBox,The length of the statement  "            var p4 = new Point3D((DoubleOrSingle)boundingBox.X' (DoubleOrSingle)boundingBox.Y' (DoubleOrSingle)boundingBox.Z + (DoubleOrSingle)boundingBox.SizeZ); " is 150.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBoundingBox,The length of the statement  "            var p5 = new Point3D((DoubleOrSingle)boundingBox.X' (DoubleOrSingle)boundingBox.Y + (DoubleOrSingle)boundingBox.SizeY' (DoubleOrSingle)boundingBox.Z + (DoubleOrSingle)boundingBox.SizeZ); " is 186.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBoundingBox,The length of the statement  "            var p6 = new Point3D((DoubleOrSingle)boundingBox.X + (DoubleOrSingle)boundingBox.SizeX' (DoubleOrSingle)boundingBox.Y + (DoubleOrSingle)boundingBox.SizeY' (DoubleOrSingle)boundingBox.Z + (DoubleOrSingle)boundingBox.SizeZ); " is 222.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBoundingBox,The length of the statement  "            var p7 = new Point3D((DoubleOrSingle)boundingBox.X + (DoubleOrSingle)boundingBox.SizeX' (DoubleOrSingle)boundingBox.Y' (DoubleOrSingle)boundingBox.Z + (DoubleOrSingle)boundingBox.SizeZ); " is 186.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBox,The length of the statement  "                new Point3D((DoubleOrSingle)(rectangle.X + (rectangle.SizeX * 0.5f))' (DoubleOrSingle)(rectangle.Y + (rectangle.SizeY * 0.5f))' (DoubleOrSingle)(rectangle.Z + (rectangle.SizeZ * 0.5f)))' " is 186.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The length of the statement  "            var radiusSphere = 0.25f * (DoubleOrSingle)Math.Sqrt(3) * (1 + (DoubleOrSingle)Math.Sqrt(5)) * (DoubleOrSingle)sideLength; " is 122.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The length of the statement  "                var newPoint = new Point3D(radiusSphere * (DoubleOrSingle)Math.Cos(gamma)' 0' radiusSphere * (DoubleOrSingle)Math.Sin(gamma)); " is 126.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The length of the statement  "                var newPoint = new Point3D(radiusSphere * (DoubleOrSingle)Math.Cos(gamma)' 0' radiusSphere * (DoubleOrSingle)Math.Sin(gamma)); " is 126.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The length of the statement  "                    var u = (DoubleOrSingle)Math.Atan2(SharedFunctions.DotProduct(ref planeCTP' ref forward)' SharedFunctions.DotProduct(ref planeCTP' ref right)); " is 143.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddEllipsoid,The length of the statement  "                    var p = new Point3D(center.X + (DoubleOrSingle)(radiusx * x)' center.Y + (DoubleOrSingle)(radiusy * y)' center.Z + (DoubleOrSingle)(radiusz * z)); " is 146.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRevolvedGeometry,The length of the statement  "                        this.textureCoordinates.Add(new Point((DoubleOrSingle)i / (thetaDiv - 1)' textureValues == null ? (DoubleOrSingle)j / (n - 1) : (DoubleOrSingle)textureValues[j])); " is 163.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRevolvedGeometry,The length of the statement  "                        this.textureCoordinates.Add(new Point((DoubleOrSingle)i / (thetaDiv - 1)' textureValues == null ? (DoubleOrSingle)(j + 1) / (n - 1) : (DoubleOrSingle)textureValues[j + 1])); " is 173.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddSurfaceOfRevolution,The length of the statement  "                        this.textureCoordinates.Add(new Point((DoubleOrSingle)i / (thetaDiv - 1)' textureValues == null ? (DoubleOrSingle)j / (n - 1) : (DoubleOrSingle)textureValues[j])); " is 163.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTorus,The length of the statement  "                    var angleIcoTriangle = (DoubleOrSingle)Math.Acos(1 - ((torusDiameter * torusDiameter) / (2 * (tubeDiameter * tubeDiameter * .25)))); " is 132.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTorus,The length of the statement  "                crossSectionPoints = crossSectionPoints.Select(p => new Point((DoubleOrSingle)p.X * (DoubleOrSingle)tubeDiameter * .5f' (DoubleOrSingle)p.Y * (DoubleOrSingle)tubeDiameter * .5f)).ToList(); " is 188.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTorus,The length of the statement  "                    var rotatedPoints = crossSection3DPoints.Select(p3D => new Point3D((DoubleOrSingle)Math.Cos(angle) * (DoubleOrSingle)(p3D.X + torusDiameter * .5f)' (DoubleOrSingle)Math.Sin(angle) * (DoubleOrSingle)(p3D.X + torusDiameter * .5f)' p3D.Z)).ToList(); " is 246.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTorus,The length of the statement  "                        var rotatedPoints = crossSection3DPoints.Select(p3D => new Point3D((DoubleOrSingle)Math.Cos(angle) * (DoubleOrSingle)(p3D.X + torusDiameter * .5f)' (DoubleOrSingle)Math.Sin(angle) * (DoubleOrSingle)(p3D.X + torusDiameter * .5f)' p3D.Z)).ToList(); " is 246.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTorus,The length of the statement  "                        var rotatedOrigin = new Point3D((DoubleOrSingle)Math.Cos(angle) * (DoubleOrSingle)torusDiameter * .5f' (DoubleOrSingle)Math.Sin(angle) * (DoubleOrSingle)torusDiameter * .5f' 0); " is 177.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Append,The length of the statement  "            this.Append(mesh.Positions' mesh.TriangleIndices' this.normals != null ? mesh.Normals : null' this.textureCoordinates != null ? mesh.TextureCoordinates : null); " is 160.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Scale,The length of the statement  "                    this.Positions[i].X * (DoubleOrSingle)scaleX' this.Positions[i].Y * (DoubleOrSingle)scaleY' this.Positions[i].Z * (DoubleOrSingle)scaleZ); " is 138.
Long Statement,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Scale,The length of the statement  "                        this.Normals[i].X * (DoubleOrSingle)scaleX' this.Normals[i].Y * (DoubleOrSingle)scaleY' this.Normals[i].Z * (DoubleOrSingle)scaleZ); " is 132.
Long Statement,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,NoSharedVertices,The length of the statement  "            return new MeshGeometry3D { Positions = p' TriangleIndices = new IntCollection(ti)' Normals = n' TextureCoordinates = tc }; " is 123.
Long Statement,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,Cut,The length of the statement  "                contourHelper.ContourFacet(index0' index1' index2' out positions' out normals' out textureCoordinates' out triangleIndices); " is 124.
Long Statement,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,RemoveIsolatedVertices,The length of the statement  "            RemoveIsolatedVertices(mesh.Positions' mesh.TriangleIndices' mesh.TextureCoordinates' mesh.Normals' out vertNew' out triNew' out textureNew' out normalNew); " is 156.
Long Statement,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,RemoveIsolatedVertices,The length of the statement  "            var newMesh = new MeshGeometry3D() { Positions = vertNew' TriangleIndices = triNew' TextureCoordinates = textureNew' Normals = normalNew }; " is 139.
Long Statement,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,IsPointInside,The length of the statement  "            var s = (this.p1.Y * this.p3.X) - (this.p1.X * this.p3.Y) + ((this.p3.Y - this.p1.Y) * p.X) + ((this.p1.X - this.p3.X) * p.Y); " is 126.
Long Statement,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,IsPointInside,The length of the statement  "            var t = (this.p1.X * this.p2.Y) - (this.p1.Y * this.p2.X) + ((this.p1.Y - this.p2.Y) * p.X) + ((this.p2.X - this.p1.X) * p.Y); " is 126.
Long Statement,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,IsPointInside,The length of the statement  "            var a = (-this.p2.Y * this.p3.X) + (this.p1.Y * (this.p3.X - this.p2.X)) + (this.p1.X * (this.p2.Y - this.p3.Y)) + (this.p2.X * this.p3.Y); " is 139.
Long Statement,HelixToolkit.Wpf,Polygon3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\Polygon3D.cs,Flatten,The length of the statement  "            var m = new Matrix3D(backward.X' right.X' up.X' 0' backward.Y' right.Y' up.Y' 0' backward.Z' right.Z' up.Z' 0' 0' 0' 0' 1); " is 123.
Long Statement,HelixToolkit.Wpf,SweepLinePolygonTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,TriangulateMonotone,The length of the statement  "                //if (!(leftChain.Contains(top) && leftChain.Contains(newPoint) || rightChain.Contains(top) && rightChain.Contains(newPoint))) " is 126.
Long Statement,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationDelta,The length of the statement  "            //// System.Diagnostics.Debug.WriteLine("OnManipulationDelta: T={0}' S={1}' R={2}' O={3}"' e.DeltaManipulation.Translation' e.DeltaManipulation.Scale' e.DeltaManipulation.Rotation' e.ManipulationOrigin); " is 203.
Long Statement,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationDelta,The length of the statement  "            //// System.Diagnostics.Debug.WriteLine(n + " Delta:" + e.DeltaManipulation.Translation + " Origin:" + e.ManipulationOrigin + " pos:" + position); " is 146.
Long Statement,HelixToolkit.Wpf,Closest3DPointHitTester,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\Closest3DPointHitTester.cs,GetBoundaryPointsBoundingBox,The length of the statement  "            yield return new Point3D(boundingBox.X + boundingBox.SizeX' boundingBox.Y + boundingBox.SizeY' boundingBox.Z + boundingBox.SizeZ); " is 130.
Long Statement,HelixToolkit.Wpf,MouseGestureHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\MouseGestureHandler.cs,SetMouseDownPoint,The length of the statement  "            NearestPointInCamera nearestPoint = new Closest3DPointHitTester(this.Controller.Viewport' this.Controller.RotataAroundClosestVertexComplexity) " is 142.
Long Statement,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/HelixToolkit.Wpf;component/controls/stereo/anaglyphview3d.xaml"' System.UriKind.Relative); " is 136.
Long Statement,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/HelixToolkit.Wpf;component/controls/stereo/interlacedview3d.xaml"' System.UriKind.Relative); " is 138.
Long Statement,HelixToolkit.Wpf,StereoView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\StereoView3D.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/HelixToolkit.Wpf;component/controls/stereo/stereoview3d.xaml"' System.UriKind.Relative); " is 134.
Long Statement,HelixToolkit.Wpf,WiggleView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\WiggleView3D.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/HelixToolkit.Wpf;component/controls/stereo/wiggleview3d.xaml"' System.UriKind.Relative); " is 134.
Long Statement,HelixToolkit.Wpf,ColladaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ColladaExporter.cs,WriteColor,The length of the statement  "            writer.WriteElementString("color"' string.Format(CultureInfo.InvariantCulture' "{0} {1} {2} {3}"' color.R / 255.0' color.G / 255.0' color.B / 255.0' color.A / 255.0)); " is 167.
Long Statement,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteThreadedRaytracer,The length of the statement  "            writer.WriteStartObject("./Ray Tracers/Threaded Ray Tracer"' "Threaded Ray Tracer"' "Threaded Ray Tracer"' "Ray Tracer"); " is 121.
Long Statement,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportHeader,The length of the statement  "            writer.WriteStartObject("./Image Handlers/Free Image Support"' "Free Image Support"' "Free Image Support"' "Image Handler"); " is 124.
Long Statement,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportHeader,The length of the statement  "            writer.WriteStartObject("./Direct Light Estimators/Refraction Enhanced"' "Refraction Enhanced"' "Refraction Enhanced"' "Direct Light Estimator"); " is 145.
Long Statement,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportHeader,The length of the statement  "            writer.WriteStartObject("./Environments/Octree Environment"' "Octree Environment"' "Octree Environment"' "Environment"); " is 120.
Long Statement,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMaterial,The length of the statement  "                // color = Color.FromArgb((byte)(color.A * factor)' (byte)(color.R * factor)' (byte)(color.G * factor)' (byte)(color.B * factor)); " is 130.
Long Statement,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMaterial,The length of the statement  "                this.WriteWhittedMaterial(writer' string.Format("#{0}"' weights.Count)' null' null' color' null' s.SpecularPower * 0.5); " is 120.
Long Statement,HelixToolkit.Wpf,KerkytheaWriter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteTransform,The length of the statement  "                    "{0:0.######} {1:0.######} {2:0.######} {3:0.######} {4:0.######} {5:0.######} {6:0.######} {7:0.######} {8:0.######} {9:0.######} {10:0.######} {11:0.######}"' " is 160.
Long Statement,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMesh,The length of the statement  "                        string.Format(CultureInfo.InvariantCulture' "vn {0} {1} {2}"' vn.X' this.SwitchYZ ? vn.Z : vn.Y' this.SwitchYZ ? -vn.Y : vn.Z)); " is 128.
Long Statement,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The length of the statement  "                // "exponent" is the value for the specular exponent.  A high exponent results in a tight' concentrated highlight.  Ns values normally range from 0 to 1000. " is 156.
Long Statement,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ToColorString,The length of the statement  "            return string.Format(CultureInfo.InvariantCulture' "{0:F4} {1:F4} {2:F4}"' color.R / 255.0' color.G / 255.0' color.B / 255.0); " is 126.
Long Statement,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,Export,The length of the statement  "            viewport.Children.Traverse<GeometryModel3D>((m' t) => triangleIndicesCount += ((MeshGeometry3D)m.Geometry).TriangleIndices.Count); " is 130.
Long Statement,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The length of the statement  "            double c = (x1 * x1) + (y1 * y1) + (z1 * z1) + (cx * cx) + (cz * cz) + (cy * cy) - (2 * ((cy * y1) + (cz * z1) + (cx * x1))) - (r * r); " is 135.
Long Statement,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateGradientBrush,The length of the statement  "            var brush = new LinearGradientBrush { StartPoint = new Point(0' 0)' EndPoint = horizontal ? new Point(1' 0) : new Point(0' 1) }; " is 128.
Long Statement,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateHsvBrush,The length of the statement  "            var brush = new LinearGradientBrush { StartPoint = new Point(0' 0)' EndPoint = horizontal ? new Point(1' 0) : new Point(0' 1) }; " is 128.
Long Statement,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateRainbowBrush,The length of the statement  "            var brush = new LinearGradientBrush { StartPoint = new Point(0' 0)' EndPoint = horizontal ? new Point(1' 0) : new Point(0' 1) }; " is 128.
Long Statement,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateSteppedGradientBrush,The length of the statement  "            var brush = new LinearGradientBrush { StartPoint = new Point(0' 0)' EndPoint = horizontal ? new Point(1' 0) : new Point(0' 1) }; " is 128.
Long Statement,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,ZoomExtents,The length of the statement  "                FitView(camera' viewport' center' radius' perspectiveCamera.LookDirection' perspectiveCamera.UpDirection' animationTime); " is 121.
Long Statement,HelixToolkit.Wpf,DependencyPropertyEx,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\DependencyPropertyEx.cs,Register,The length of the statement  "            return DependencyProperty.Register(name' typeof(TProperty)' typeof(TOwner)' new FrameworkPropertyMetadata(defaultValue)); " is 121.
Long Statement,HelixToolkit.Wpf,DependencyPropertyEx,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\DependencyPropertyEx.cs,Register,The length of the statement  "            return DependencyProperty.Register(name' typeof(TProperty)' typeof(TOwner)' new FrameworkPropertyMetadata(defaultValue' (s' e) => callback((TOwner)s' e))); " is 155.
Long Statement,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPositions,The length of the statement  "                    screenPoint = new Point4D(viewPoint.X' viewPoint.Y' viewPoint.Z + bb.WorldDepthOffset' viewPoint.W) * this.projectionToScreen; " is 126.
Long Statement,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPositions,The length of the statement  "                var p = new Point4D(spx + ((bb.Left + offset.X) * spw)' spy + ((bb.Bottom + offset.Y) * spw)' spz' spw) * this.screenToVisual; " is 126.
Long Statement,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPositions,The length of the statement  "                p = new Point4D(spx + ((bb.Right + offset.X) * spw)' spy + ((bb.Bottom + offset.Y) * spw)' spz' spw) * this.screenToVisual; " is 123.
Long Statement,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPositions,The length of the statement  "                p = new Point4D(spx + ((bb.Right + offset.X) * spw)' spy + ((bb.Top + offset.Y) * spw)' spz' spw) * this.screenToVisual; " is 120.
Long Statement,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The length of the statement  "                    screenPoint = new Point4D(viewPoint.X' viewPoint.Y' viewPoint.Z + bb.WorldDepthOffset' viewPoint.W) * this.projectionToScreen; " is 126.
Long Statement,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetCameraTransform,The length of the statement  "            return viewport3DVisual.Camera.GetTotalTransform(viewport3DVisual.Viewport.Size.Width / viewport3DVisual.Viewport.Size.Height); " is 127.
Long Statement,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The length of the statement  "            var target = new WriteableBitmap((int)view.ActualWidth * m' (int)view.ActualHeight * m' 96' 96' PixelFormats.Pbgra32' null); " is 124.
Long Statement,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The length of the statement  "                    var partialBitmap = new RenderTargetBitmap((int)view.ActualWidth' (int)view.ActualHeight' 96' 96' PixelFormats.Pbgra32); " is 120.
Long Statement,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The length of the statement  "                    var backgroundRectangle = new Rectangle { Width = partialBitmap.Width' Height = partialBitmap.Height' Fill = background }; " is 122.
Long Statement,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,Read,The length of the statement  "                        case "cstype": // rational or non-rational forms of curve or surface type: basis matrix' Bezier' B-spline' Cardinal' Taylor " is 123.
Long Statement,HelixToolkit.Wpf,MaterialDefinition,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,CreateTextureBrush,The length of the statement  "                var textureBrush = new ImageBrush(img) { Opacity = this.Dissolved' ViewportUnits = BrushMappingMode.Absolute' TileMode = TileMode.Tile }; " is 137.
Long Statement,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,CreateMesh,The length of the statement  "                    var vertexIndicesProperties = (from item in faceProp where item.IsList && item.Name == "vertex_indices" || item.Name == "vertex_index" select item).ToArray(); " is 158.
Long Statement,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The length of the statement  "                && (PlyHeaderItems)Enum.Parse(typeof(PlyHeaderItems)' headerLines[headerLines.Length - 1]) == PlyHeaderItems.end_header) " is 120.
Long Statement,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The length of the statement  "                                                if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType)) " is 140.
Long Statement,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The length of the statement  "                                            objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1))); " is 121.
Long Statement,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadASCII,The length of the statement  "                                        ConvertPropValueASCII(currentPlyHeadProp.Type' lineDataArr[idxOffset])' currentPlyHeadProp.IsList' currentPlyHeadProp.ListContentType' null); " is 141.
Long Statement,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadASCII,The length of the statement  "                var lastPlyBodyElement = new PlyElement(currentHeadElement.Name' currentHeadElement.Count' currentPlyElementProperties); " is 120.
Long Statement,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadBinary,The length of the statement  "                                    ConvertPropValueBinary(currentHeadProp.Type' reader' bigEndian)' currentHeadProp.IsList' currentHeadProp.ListContentType' currentHeadProp.ListContentValues); " is 157.
Long Statement,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,DumpAsASCII,The length of the statement  "                                sw.WriteLine($"property list {propertyTemplate.Type.ToString().Substring(1)} {propertyTemplate.ListContentType.ToString().Substring(1)} {propertyTemplate.Name}"); " is 162.
Long Statement,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadTriangularMesh,The length of the statement  "                this.meshes.Add(new Mesh { Positions = positions' TriangleIndices = triangleIndices' TextureCoordinates = textureCoordinates' Material = mat' BackMaterial = mat }); " is 164.
Long Statement,HelixToolkit.Wpf,RectangleSelectionCommand,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\SelectionCommands\RectangleSelectionCommand.cs,ShowRectangle,The length of the statement  "            this.rectangleAdorner = new RectangleAdorner(this.Viewport' this.selectionRect' Colors.LightGray' Colors.Black' 1' 1' 0' DashStyles.Dash); " is 138.
Long Statement,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,SortChildren,The length of the statement  "            // Now that opaqueChildren and sortedTransparentChildren describe our desired ordering' we need sort the current children in the new order.  " is 139.
Long Statement,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,SortChildren,The length of the statement  "            // Unfortunatally the Visual3DCollection does not have a swap method and we always need to remove an item before we can add it again as " is 135.
Long Statement,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,SortChildren,The length of the statement  "            // Due to this set of considerations we use selection sort to sort the current Children. (if we could swap without removal' cycle sort might be a small improvement) " is 164.
Long Statement,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,SortChildren,The length of the statement  "            for (int desiredIndex = opaqueChildren.Count; desiredIndex < opaqueChildren.Count + sortedTransparentChildren.Count; desiredIndex++) " is 132.
Long Statement,HelixToolkit.Wpf,MeshElement3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\MeshElement3D.cs,OnGeometryChanged,The length of the statement  "                // flag the geometry as changed' the geometry will be updated when the <see cref="M:System.ComponentModel.IEditableObject.EndEdit"/> is called. " is 143.
Long Statement,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The length of the statement  "                var a = accelerationSpreading > 0 ? CreateRandomVector(accelerationDirection' accelerationSpreading) : accelerationDirection; " is 125.
Long Statement,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The length of the statement  "            var sortedParticles = this.particles.OrderBy(p => -Vector3D.DotProduct(p.Position - cameraPosition' this.camera.LookDirection)); " is 128.
Long Statement,HelixToolkit.Wpf,TerrainVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainVisual3D.cs,UpdateModel,The length of the statement  "            // r.Texture = new MapTexture(@"D:\tmp\CraterLake.png") { Left = r.Left' Right = r.Right' Top = r.Top' Bottom = r.Bottom }; " is 123.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,GetCircle,The conditional expression  "(!closed && !CircleCache.Value.TryGetValue(thetaDiv' out circle)) ||                  (closed && !ClosedCircleCache.Value.TryGetValue(thetaDiv' out circle))"  is complex.
Complex Conditional,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTorus,The conditional expression  "selfIntersecting && i > 0 && (j == 0 || j == (phiDiv - 1))"  is complex.
Complex Conditional,HelixToolkit.Wpf,Closest3DPointHitTester,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\Closest3DPointHitTester.cs,FindClosestHits,The conditional expression  "!(model.Geometry is MeshGeometry3D geometry) || geometry.Positions == null || geometry.TriangleIndices == null                      || geometry.Positions.Count == 0 || geometry.TriangleIndices.Count == 0"  is complex.
Complex Conditional,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The conditional expression  "(v < vTmp && this.GetEdgeVertice(v' vTmp' 0) != 0)                          || (v > vTmp && this.GetEdgeVertice(vTmp' v' 0) != 0)"  is complex.
Complex Conditional,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The conditional expression  "(vi > v) && (this.GetEdgeVertice(v' vi' 2) == 0)                          || (vi < v) && (this.GetEdgeVertice(vi' v' 2) == 0)"  is complex.
Complex Conditional,HelixToolkit.Wpf,PathHelpers,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,GetFullPath,The conditional expression  "path.Length > 1                      && (path[0] == Path.DirectorySeparatorChar || path[0] == Path.AltDirectorySeparatorChar)                      && (path[1] != Path.DirectorySeparatorChar && path[1] != Path.AltDirectorySeparatorChar)"  is complex.
Complex Conditional,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,TryReadAscii,The conditional expression  "line.Length == 0 || line.StartsWith("\0") || line.StartsWith("#") || line.StartsWith("!")                      || line.StartsWith("$")"  is complex.
Virtual Method Call from Constructor,HelixToolkit.Wpf,CoordinateSystemVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\CoordinateSystemVisual3D.cs,CoordinateSystemVisual3D,The constructor "CoordinateSystemVisual3D" calls a virtual method "OnGeometryChanged".
Empty Catch Block,HelixToolkit.Wpf,EnumToBooleanConverter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Converters\EnumToBooleanConverter.cs,ConvertBack,The method has an empty catch block.
Empty Catch Block,HelixToolkit.Wpf,EnumToBooleanConverter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Converters\EnumToBooleanConverter.cs,ConvertBack,The method has an empty catch block.
Magic Number,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,Triangulate,The following statement contains a magic number: n < 3
Magic Number,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,Triangulate,The following statement contains a magic number: int count = 2 * nv;
Magic Number,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,Triangulate,The following statement contains a magic number: count = 2 * nv;
Magic Number,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,Triangulate,The following statement contains a magic number: nv > 2
Magic Number,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,Area,The following statement contains a magic number: return area * 0.5f;
Magic Number,HelixToolkit.Wpf,CuttingEarsTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\CuttingEarsTriangulator.cs,InsideTriangle,The following statement contains a magic number: const double EPSILON = -1e-10;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,GetCircle,The following statement contains a magic number: var theta = (DoubleOrSingle)Math.PI * 2 * ((DoubleOrSingle)i / num);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ComputeNormals,The following statement contains a magic number: var i3 = triangleIndices[t + 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ComputeTangents,The following statement contains a magic number: var i3 = triangleIndices[t + 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ComputeTangentsQuads,The following statement contains a magic number: var i3 = indices[t + 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ComputeTangentsQuads,The following statement contains a magic number: var i4 = indices[t + 3];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddArrow,The following statement contains a magic number: var r = (DoubleOrSingle)diameter / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddArrow,The following statement contains a magic number: var pc = new PointCollection                  {                      new Point(0' 0)'                      new Point(0' r)'                      new Point(length - (DoubleOrSingle)(diameter * headLength)' r)'                      new Point(length - (DoubleOrSingle)(diameter * headLength)' r * 2)'                      new Point(length' 0)                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBoundingBox,The following statement contains a magic number: Action<Point3D' Point3D> addEdge = (c1' c2) => this.AddCylinder(c1' c2' diameter' 10);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBox,The following statement contains a magic number: this.AddBox(                  new Point3D((DoubleOrSingle)(rectangle.X + (rectangle.SizeX * 0.5f))' (DoubleOrSingle)(rectangle.Y + (rectangle.SizeY * 0.5f))' (DoubleOrSingle)(rectangle.Z + (rectangle.SizeZ * 0.5f)))'                  (DoubleOrSingle)rectangle.SizeX' (DoubleOrSingle)rectangle.SizeY' (DoubleOrSingle)rectangle.SizeZ' faces);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBox,The following statement contains a magic number: this.AddBox(                  new Point3D((DoubleOrSingle)(rectangle.X + (rectangle.SizeX * 0.5f))' (DoubleOrSingle)(rectangle.Y + (rectangle.SizeY * 0.5f))' (DoubleOrSingle)(rectangle.Z + (rectangle.SizeZ * 0.5f)))'                  (DoubleOrSingle)rectangle.SizeX' (DoubleOrSingle)rectangle.SizeY' (DoubleOrSingle)rectangle.SizeZ' faces);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddBox,The following statement contains a magic number: this.AddBox(                  new Point3D((DoubleOrSingle)(rectangle.X + (rectangle.SizeX * 0.5f))' (DoubleOrSingle)(rectangle.Y + (rectangle.SizeY * 0.5f))' (DoubleOrSingle)(rectangle.Z + (rectangle.SizeZ * 0.5f)))'                  (DoubleOrSingle)rectangle.SizeX' (DoubleOrSingle)rectangle.SizeY' (DoubleOrSingle)rectangle.SizeZ' faces);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCubeFace,The following statement contains a magic number: var n = normal * (DoubleOrSingle)dist / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCubeFace,The following statement contains a magic number: up *= (DoubleOrSingle)height / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCubeFace,The following statement contains a magic number: right *= (DoubleOrSingle)width / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCubeFace,The following statement contains a magic number: this.triangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCubeFace,The following statement contains a magic number: this.triangleIndices.Add(i0 + 3);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCubeFace,The following statement contains a magic number: this.triangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCylinder,The following statement contains a magic number: this.AddCone(p1' n' diameter / 2' diameter / 2' l' false' false' thetaDiv);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddCylinder,The following statement contains a magic number: this.AddCone(p1' n' diameter / 2' diameter / 2' l' false' false' thetaDiv);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var radiusSphere = 0.25f * (DoubleOrSingle)Math.Sqrt(3) * (1 + (DoubleOrSingle)Math.Sqrt(5)) * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var radiusSphere = 0.25f * (DoubleOrSingle)Math.Sqrt(3) * (1 + (DoubleOrSingle)Math.Sqrt(5)) * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var radiusSphere = 0.25f * (DoubleOrSingle)Math.Sqrt(3) * (1 + (DoubleOrSingle)Math.Sqrt(5)) * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var radiusFace = 0.1f * (DoubleOrSingle)Math.Sqrt(50 + 10 * (DoubleOrSingle)Math.Sqrt(5)) * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var radiusFace = 0.1f * (DoubleOrSingle)Math.Sqrt(50 + 10 * (DoubleOrSingle)Math.Sqrt(5)) * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var radiusFace = 0.1f * (DoubleOrSingle)Math.Sqrt(50 + 10 * (DoubleOrSingle)Math.Sqrt(5)) * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var radiusFace = 0.1f * (DoubleOrSingle)Math.Sqrt(50 + 10 * (DoubleOrSingle)Math.Sqrt(5)) * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pentagonPoints = GetCircle(5' true);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var gamma = (DoubleOrSingle)Math.Acos(1 - (sideLength * sideLength / (2 * radiusSphere * radiusSphere)));
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var v = cTPUpValue * 0.5f + 0.5f;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var v = cTPUpValue * 0.5f + 0.5f;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: this.AddPolygonByTriangulation(this.positions.Skip(positionsCount).Take(5).Select((p' i) => i).ToList());
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: this.AddPolygonByTriangulation(this.positions.Skip(positionsCount + 15).Select((p' i) => 15 + i).ToList());
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: this.AddPolygonByTriangulation(this.positions.Skip(positionsCount + 15).Select((p' i) => 15 + i).ToList());
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pIndices = new List<int>() {                      (i + 1) % 5 + positionsCount'                      i' i + 5 + positionsCount'                      (5 - i + 2) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 5 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pIndices = new List<int>() {                      (i + 1) % 5 + positionsCount'                      i' i + 5 + positionsCount'                      (5 - i + 2) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 5 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pIndices = new List<int>() {                      (i + 1) % 5 + positionsCount'                      i' i + 5 + positionsCount'                      (5 - i + 2) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 5 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pIndices = new List<int>() {                      (i + 1) % 5 + positionsCount'                      i' i + 5 + positionsCount'                      (5 - i + 2) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 5 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pIndices = new List<int>() {                      (i + 1) % 5 + positionsCount'                      i' i + 5 + positionsCount'                      (5 - i + 2) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 5 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pIndices = new List<int>() {                      (i + 1) % 5 + positionsCount'                      i' i + 5 + positionsCount'                      (5 - i + 2) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 5 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pIndices = new List<int>() {                      (i + 1) % 5 + positionsCount'                      i' i + 5 + positionsCount'                      (5 - i + 2) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 5 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: var pIndices = new List<int>() {                      (i + 1) % 5 + positionsCount'                      i' i + 5 + positionsCount'                      (5 - i + 2) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 5 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: pIndices = new List<int>() {                      i + 15 + positionsCount'                      i + 10 + positionsCount'                      (5 - i + 2) % 5 + 5 + positionsCount'                      (i + 1) % 5 + 10 + positionsCount'                      (i + 1) % 5 + 15 + positionsCount                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddDodecahedron,The following statement contains a magic number: i < 5
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddEllipsoid,The following statement contains a magic number: var dt = 2 * (DoubleOrSingle)Math.PI / thetaDiv;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddEllipsoid,The following statement contains a magic number: var uv = new Point(theta / (2 * (DoubleOrSingle)Math.PI)' phi / (DoubleOrSingle)Math.PI);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddExtrudedGeometry,The following statement contains a magic number: int np = 2 * points.Count;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddExtrudedGeometry,The following statement contains a magic number: int i2 = (index0 + 2) % np;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddExtrudedGeometry,The following statement contains a magic number: int i3 = ((index0 + 2) % np) + 1;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePZ,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePZ,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePZ,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNZ,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNZ,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNZ,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePX,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePX,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePX,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNX,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNX,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNX,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePY,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePY,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFacePY,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNY,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNY,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddFaceNY,The following statement contains a magic number: var indices = new int[]              {                  i0+0'i0+3'i0+2'                  i0+0'i0+2'i0+1'              };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddExtrudedSegments,The following statement contains a magic number: points.Count % 2 != 0
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddExtrudedSegments,The following statement contains a magic number: int i0 = index0 + (i * 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddExtrudedSegments,The following statement contains a magic number: int i2 = i0 + 3;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddExtrudedSegments,The following statement contains a magic number: int i3 = i0 + 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddOctahedron,The following statement contains a magic number: var n = forward * (DoubleOrSingle)sideLength / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddOctahedron,The following statement contains a magic number: up *= (DoubleOrSingle)height / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddOctahedron,The following statement contains a magic number: right *= (DoubleOrSingle)sideLength / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPipe,The following statement contains a magic number: var pc = new PointCollection                  {                      new Point(0' (DoubleOrSingle)innerDiameter / 2)'                      new Point(0' (DoubleOrSingle)diameter / 2)'                      new Point(height' (DoubleOrSingle)diameter / 2)'                      new Point(height' (DoubleOrSingle)innerDiameter / 2)                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPipe,The following statement contains a magic number: var pc = new PointCollection                  {                      new Point(0' (DoubleOrSingle)innerDiameter / 2)'                      new Point(0' (DoubleOrSingle)diameter / 2)'                      new Point(height' (DoubleOrSingle)diameter / 2)'                      new Point(height' (DoubleOrSingle)innerDiameter / 2)                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPipe,The following statement contains a magic number: var pc = new PointCollection                  {                      new Point(0' (DoubleOrSingle)innerDiameter / 2)'                      new Point(0' (DoubleOrSingle)diameter / 2)'                      new Point(height' (DoubleOrSingle)diameter / 2)'                      new Point(height' (DoubleOrSingle)innerDiameter / 2)                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPipe,The following statement contains a magic number: var pc = new PointCollection                  {                      new Point(0' (DoubleOrSingle)innerDiameter / 2)'                      new Point(0' (DoubleOrSingle)diameter / 2)'                      new Point(height' (DoubleOrSingle)diameter / 2)'                      new Point(height' (DoubleOrSingle)innerDiameter / 2)                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPipe,The following statement contains a magic number: pc.Add(new Point(0' (DoubleOrSingle)innerDiameter / 2));
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPolygon,The following statement contains a magic number: switch (points.Count)              {                  case 3:                      this.AddTriangle(points[0]' points[1]' points[2]);                      break;                  case 4:                      this.AddQuad(points[0]' points[1]' points[2]' points[3]);                      break;                  default:                      this.AddTriangleFan(points);                      break;              }
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPolygon,The following statement contains a magic number: switch (points.Count)              {                  case 3:                      this.AddTriangle(points[0]' points[1]' points[2]);                      break;                  case 4:                      this.AddQuad(points[0]' points[1]' points[2]' points[3]);                      break;                  default:                      this.AddTriangleFan(points);                      break;              }
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPolygon,The following statement contains a magic number: switch (points.Count)              {                  case 3:                      this.AddTriangle(points[0]' points[1]' points[2]);                      break;                  case 4:                      this.AddQuad(points[0]' points[1]' points[2]' points[3]);                      break;                  default:                      this.AddTriangleFan(points);                      break;              }
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPolygon,The following statement contains a magic number: switch (points.Count)              {                  case 3:                      this.AddTriangle(points[0]' points[1]' points[2]);                      break;                  case 4:                      this.AddQuad(points[0]' points[1]' points[2]' points[3]);                      break;                  default:                      this.AddTriangleFan(points);                      break;              }
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPolygon,The following statement contains a magic number: switch (points.Count)              {                  case 3:                      this.AddTriangle(points[0]' points[1]' points[2]);                      break;                  case 4:                      this.AddQuad(points[0]' points[1]' points[2]' points[3]);                      break;                  default:                      this.AddTriangleFan(points);                      break;              }
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPolygon,The following statement contains a magic number: this.triangleIndices.Add(vertexIndices[i + 2]);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPolygon,The following statement contains a magic number: i + 2 < n
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPyramid,The following statement contains a magic number: var n = forward * (DoubleOrSingle)sideLength / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPyramid,The following statement contains a magic number: right *= (DoubleOrSingle)sideLength / 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPyramid,The following statement contains a magic number: var down = -up * 1f / 3;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPyramid,The following statement contains a magic number: var realup = up * 2f / 3;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddPyramid,The following statement contains a magic number: var realup = up * 2f / 3;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuad,The following statement contains a magic number: i < 4
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuad,The following statement contains a magic number: this.triangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuad,The following statement contains a magic number: this.triangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuad,The following statement contains a magic number: this.triangleIndices.Add(i0 + 3);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuads,The following statement contains a magic number: Debug.Assert(quadPositions.Count > 0 && quadPositions.Count % 4 == 0' "Wrong number of positions.");
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuads,The following statement contains a magic number: this.triangleIndices.Add(i + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuads,The following statement contains a magic number: this.triangleIndices.Add(i + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuads,The following statement contains a magic number: this.triangleIndices.Add(i + 3);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddQuads,The following statement contains a magic number: i + 3 < indexEnd
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRectangularMesh,The following statement contains a magic number: columns < 2 || rows < 2
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRectangularMesh,The following statement contains a magic number: columns < 2 || rows < 2
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRectangularMeshTriangleIndices,The following statement contains a magic number: !isSpherical || i < rows - 2
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRectangularMeshTriangleIndicesFlipped,The following statement contains a magic number: !isSpherical || i < rows - 2
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var a = (DoubleOrSingle)Math.Sqrt(2.0 / (5.0 + Math.Sqrt(5.0)));
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var a = (DoubleOrSingle)Math.Sqrt(2.0 / (5.0 + Math.Sqrt(5.0)));
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var a = (DoubleOrSingle)Math.Sqrt(2.0 / (5.0 + Math.Sqrt(5.0)));
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var b = (DoubleOrSingle)Math.Sqrt(2.0 / (5.0 - Math.Sqrt(5.0)));
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var b = (DoubleOrSingle)Math.Sqrt(2.0 / (5.0 - Math.Sqrt(5.0)));
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var b = (DoubleOrSingle)Math.Sqrt(2.0 / (5.0 - Math.Sqrt(5.0)));
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRegularIcosahedron,The following statement contains a magic number: var icosahedronIndices = new[]                  {                      1' 4' 0' 4' 9' 0' 4' 5' 9' 8' 5' 4' 1' 8' 4' 1' 10' 8' 10' 3' 8' 8' 3' 5' 3' 2' 5' 3' 7' 2' 3' 10' 7'                      10' 6' 7' 6' 11' 7' 6' 0' 11' 6' 1' 0' 10' 1' 6' 11' 0' 9' 2' 11' 9' 5' 2' 9' 11' 2' 7                  };
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRevolvedGeometry,The following statement contains a magic number: int totalNodes = (points.Count - 1) * 2 * thetaDiv;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRevolvedGeometry,The following statement contains a magic number: int rowNodes = (points.Count - 1) * 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRevolvedGeometry,The following statement contains a magic number: int i0 = index0 + (i * rowNodes) + (j * 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddRevolvedGeometry,The following statement contains a magic number: int i2 = index0 + ((((i + 1) * rowNodes) + (j * 2)) % totalNodes);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var heightSphere = (DoubleOrSingle)Math.Sqrt(6) / 3 * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var heightSphere = (DoubleOrSingle)Math.Sqrt(6) / 3 * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var radiusSphere = (DoubleOrSingle)Math.Sqrt(6) / 4 * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var radiusSphere = (DoubleOrSingle)Math.Sqrt(6) / 4 * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var heightFace = (DoubleOrSingle)Math.Sqrt(3) / 2 * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var heightFace = (DoubleOrSingle)Math.Sqrt(3) / 2 * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var radiusFace = (DoubleOrSingle)Math.Sqrt(3) / 3 * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var radiusFace = (DoubleOrSingle)Math.Sqrt(3) / 3 * (DoubleOrSingle)sideLength;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTetrahedron,The following statement contains a magic number: var halfLength = (DoubleOrSingle)sideLength * 0.5f;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangle,The following statement contains a magic number: i < 3
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangle,The following statement contains a magic number: this.triangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleFan,The following statement contains a magic number: this.triangleIndices.Add(vertices[i + 2]);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleFan,The following statement contains a magic number: i + 2 < vertices.Count
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleFan,The following statement contains a magic number: fanPositions.Count < 3
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleFan,The following statement contains a magic number: this.triangleIndices.Add(i + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleFan,The following statement contains a magic number: i + 2 < indexEnd
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangles,The following statement contains a magic number: trianglePositions.Count % 3 != 0
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleStrip,The following statement contains a magic number: this.triangleIndices.Add(i + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleStrip,The following statement contains a magic number: this.triangleIndices.Add(i + 3);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleStrip,The following statement contains a magic number: this.triangleIndices.Add(i + 2);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleStrip,The following statement contains a magic number: i + 3 < indexEnd
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTriangleStrip,The following statement contains a magic number: i + 2 < indexEnd
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: pathLength < 2 || sectionLength < 2
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: pathLength < 2 || sectionLength < 2
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: var r = diameters != null ? (DoubleOrSingle)diameters[i % diametersCount] / 2 : 1;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: var normal = path[count - 1] - path[count - 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: pathLength < 2 || sectionLength < 2
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: pathLength < 2 || sectionLength < 2
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: var radius = diameters != null ? (DoubleOrSingle)diameters[i % diametersCount] / 2 : 1;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: SharedFunctions.LengthSquared(ref right) > 1e-6f
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,AddTube,The following statement contains a magic number: var normal = path[count - 1] - path[count - 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ChamferCorner,The following statement contains a magic number: int i2 = i + 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ChamferCorner,The following statement contains a magic number: i1 = i + 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,ChamferCorner,The following statement contains a magic number: i0 = i + 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,CheckPerformanceLimits,The following statement contains a magic number: this.positions.Count > 20000
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,CheckPerformanceLimits,The following statement contains a magic number: this.triangleIndices.Count > 60002
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,FindCornerNormal,The following statement contains a magic number: int i2 = i + 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,NoSharedVertices,The following statement contains a magic number: int i2 = i + 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: int i2 = this.TriangleIndices[i + 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: var p01 = p0 + (v01 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: var p12 = p1 + (v12 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: var p20 = p2 + (v20 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: var uv2 = this.TextureCoordinates[i0 + 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: var u01 = uv0 + (t01 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: var u12 = uv1 + (t12 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: var u20 = uv2 + (t20 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,Subdivide4,The following statement contains a magic number: this.TriangleIndices[i + 2] = i20;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: int i2 = this.TriangleIndices[i + 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var p01 = p0 + (v01 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var p12 = p1 + (v12 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var p20 = p2 + (v20 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var m = new Point3D((p0.X + p1.X + p2.X) / 3' (p0.Y + p1.Y + p2.Y) / 3' (p0.Z + p1.Z + p2.Z) / 3);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var m = new Point3D((p0.X + p1.X + p2.X) / 3' (p0.Y + p1.Y + p2.Y) / 3' (p0.Z + p1.Z + p2.Z) / 3);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var m = new Point3D((p0.X + p1.X + p2.X) / 3' (p0.Y + p1.Y + p2.Y) / 3' (p0.Z + p1.Z + p2.Z) / 3);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: int i12 = im + 2;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: int i20 = im + 3;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var uv2 = this.TextureCoordinates[i0 + 2];
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var u01 = uv0 + (t01 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var u12 = uv1 + (t12 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var u20 = uv2 + (t20 * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var uvm = new Point((uv0.X + uv1.X) * 0.5f' (uv0.Y + uv1.Y) * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: var uvm = new Point((uv0.X + uv1.X) * 0.5f' (uv0.Y + uv1.Y) * 0.5f);
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: this.TriangleIndices[i + 2] = im;
Magic Number,HelixToolkit.Wpf,MeshBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshBuilder.cs,SubdivideBarycentric,The following statement contains a magic number: im += 4;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CalculateNormals,The following statement contains a magic number: int index2 = triangleIndices[i + 2];
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindBorderEdges,The following statement contains a magic number: int i0 = i * 3;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindBorderEdges,The following statement contains a magic number: int index1 = mesh.TriangleIndices[i0 + ((j + 1) % 3)];
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindBorderEdges,The following statement contains a magic number: j < 3
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindBorderEdges,The following statement contains a magic number: i < mesh.TriangleIndices.Count / 3
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindEdges,The following statement contains a magic number: int i0 = i * 3;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindEdges,The following statement contains a magic number: int index1 = mesh.TriangleIndices[i0 + ((j + 1) % 3)];
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindEdges,The following statement contains a magic number: j < 3
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindEdges,The following statement contains a magic number: i < mesh.TriangleIndices.Count / 3
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindSharpEdges,The following statement contains a magic number: int i0 = i * 3;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindSharpEdges,The following statement contains a magic number: var p2 = mesh.Positions[mesh.TriangleIndices[i0 + 2]];
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindSharpEdges,The following statement contains a magic number: int index1 = mesh.TriangleIndices[i0 + ((j + 1) % 3)];
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindSharpEdges,The following statement contains a magic number: var angle = 180 / (DoubleOrSingle)Math.PI * (DoubleOrSingle)Math.Acos(SharedFunctions.DotProduct(ref n' ref n2));
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindSharpEdges,The following statement contains a magic number: j < 3
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,FindSharpEdges,The following statement contains a magic number: i < mesh.TriangleIndices.Count / 3
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,NoSharedVertices,The following statement contains a magic number: int i2 = i + 2;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,Validate,The following statement contains a magic number: mesh.TriangleIndices.Count % 3 != 0
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,Validate,The following statement contains a magic number: sb.AppendFormat("Wrong index {0} in triangle {1} vertex {2}"' index' i / 3' i % 3);
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,Validate,The following statement contains a magic number: sb.AppendFormat("Wrong index {0} in triangle {1} vertex {2}"' index' i / 3' i % 3);
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,Cut,The following statement contains a magic number: var index2 = mesh.TriangleIndices[i + 2];
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,GetContourSegments,The following statement contains a magic number: contourHelper.ContourFacet(                      mesh.TriangleIndices[i]'                      mesh.TriangleIndices[i + 1]'                      mesh.TriangleIndices[i + 2]'                      out positions'                      out normals'                      out textureCoordinates'                      out triangleIndices);
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CombineSegments,The following statement contains a magic number: segment1 % 2 == 1
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CombineSegments,The following statement contains a magic number: segmentCount -= 2;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CombineSegments,The following statement contains a magic number: segment2 % 2 == 1
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CombineSegments,The following statement contains a magic number: segmentCount -= 2;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CombineSegments,The following statement contains a magic number: curveCount += 2;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CombineSegments,The following statement contains a magic number: segmentCount -= 2;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,CreateKey,The following statement contains a magic number: return ((ulong)i0 << 32) + i1;
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,ReverseKey,The following statement contains a magic number: i0 = (uint)(key >> 32);
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,ReverseKey,The following statement contains a magic number: i1 = (uint)((key << 32) >> 32);
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,ReverseKey,The following statement contains a magic number: i1 = (uint)((key << 32) >> 32);
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,RemoveOutOfRangeTriangles,The following statement contains a magic number: triangles[i] >= numVerts || triangles[i + 1] >= numVerts || triangles[i + 2] >= numVerts
Magic Number,HelixToolkit.Wpf,MeshGeometryHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshGeometryHelper.cs,RemoveOutOfRangeTriangles,The following statement contains a magic number: removeOutOfRangeTriangles.RemoveRange(idx' 3);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,MeshSimplification,The following statement contains a magic number: triangles = new List<Triangle>(Enumerable.Range(0' model.TriangleIndices.Count / 3).Select(x=>new Triangle()));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,MeshSimplification,The following statement contains a magic number: tri.v[2] = model.TriangleIndices[i++];
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: return Simplify(int.MaxValue' 7' verbose' true);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: int maxIteration = 9999;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: maxIteration = 100;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: lossless || iteration % 5 == 0
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: double threshold = 0.001;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: threshold = 0.000000001 * Math.Pow(iteration + 3.0' aggressive);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: threshold = 0.000000001 * Math.Pow(iteration + 3.0' aggressive);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: tri.err[3] > threshold || tri.deleted || tri.dirty
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: int i1 = tri.v[(j + 1) % 3];
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Simplify,The following statement contains a magic number: j < 3
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,GetMesh,The following statement contains a magic number: var tris = new Int32Collection(triangles.Count*3);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,GetMesh,The following statement contains a magic number: tris.Add(tri.v[2]);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Flipped,The following statement contains a magic number: int id1 = t.v[(s + 1) % 3];
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Flipped,The following statement contains a magic number: int id2 = t.v[(s + 2) % 3];
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Flipped,The following statement contains a magic number: int id2 = t.v[(s + 2) % 3];
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Flipped,The following statement contains a magic number: SharedFunctions.DotProduct(ref d1' ref d2) > 0.999
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Flipped,The following statement contains a magic number: SharedFunctions.DotProduct(ref n' ref t.normal) < 0.2
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateTriangles,The following statement contains a magic number: t.err[1] = CalculateError(t.v[1]' t.v[2]' out p);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateTriangles,The following statement contains a magic number: t.err[2] = CalculateError(t.v[2]' t.v[0]' out p);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateTriangles,The following statement contains a magic number: t.err[2] = CalculateError(t.v[2]' t.v[0]' out p);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateTriangles,The following statement contains a magic number: t.err[3] = Math.Min(t.err[0]' Math.Min(t.err[1]' t.err[2]));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateTriangles,The following statement contains a magic number: t.err[3] = Math.Min(t.err[0]' Math.Min(t.err[1]' t.err[2]));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: double det = q.det(0' 1' 2' 1' 4' 5' 2' 5' 7);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: double det = q.det(0' 1' 2' 1' 4' 5' 2' 5' 7);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: double det = q.det(0' 1' 2' 1' 4' 5' 2' 5' 7);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: double det = q.det(0' 1' 2' 1' 4' 5' 2' 5' 7);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: double det = q.det(0' 1' 2' 1' 4' 5' 2' 5' 7);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: double det = q.det(0' 1' 2' 1' 4' 5' 2' 5' 7);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.X = (float)(-1 / det * (q.det(1' 2' 3' 4' 5' 6' 5' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.X = (float)(-1 / det * (q.det(1' 2' 3' 4' 5' 6' 5' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.X = (float)(-1 / det * (q.det(1' 2' 3' 4' 5' 6' 5' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.X = (float)(-1 / det * (q.det(1' 2' 3' 4' 5' 6' 5' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.X = (float)(-1 / det * (q.det(1' 2' 3' 4' 5' 6' 5' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.X = (float)(-1 / det * (q.det(1' 2' 3' 4' 5' 6' 5' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.X = (float)(-1 / det * (q.det(1' 2' 3' 4' 5' 6' 5' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.X = (float)(-1 / det * (q.det(1' 2' 3' 4' 5' 6' 5' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Y = (float)(1 / det * (q.det(0' 2' 3' 1' 5' 6' 2' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Y = (float)(1 / det * (q.det(0' 2' 3' 1' 5' 6' 2' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Y = (float)(1 / det * (q.det(0' 2' 3' 1' 5' 6' 2' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Y = (float)(1 / det * (q.det(0' 2' 3' 1' 5' 6' 2' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Y = (float)(1 / det * (q.det(0' 2' 3' 1' 5' 6' 2' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Y = (float)(1 / det * (q.det(0' 2' 3' 1' 5' 6' 2' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Y = (float)(1 / det * (q.det(0' 2' 3' 1' 5' 6' 2' 7' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Z = (float)(-1 / det * (q.det(0' 1' 3' 1' 4' 6' 2' 5' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Z = (float)(-1 / det * (q.det(0' 1' 3' 1' 4' 6' 2' 5' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Z = (float)(-1 / det * (q.det(0' 1' 3' 1' 4' 6' 2' 5' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Z = (float)(-1 / det * (q.det(0' 1' 3' 1' 4' 6' 2' 5' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Z = (float)(-1 / det * (q.det(0' 1' 3' 1' 4' 6' 2' 5' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CalculateError,The following statement contains a magic number: p_result.Z = (float)(-1 / det * (q.det(0' 1' 3' 1' 4' 6' 2' 5' 8)));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,VertexError,The following statement contains a magic number: return q.M11 * x * x + 2 * q.M12 * x * y + 2 * q.M13 * x * z + 2 * q.M14 * x + q.M22 * y * y                   + 2 * q.M23 * y * z + 2 * q.M24 * y + q.M33 * z * z + 2 * q.M34 * z + q.M44;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,VertexError,The following statement contains a magic number: return q.M11 * x * x + 2 * q.M12 * x * y + 2 * q.M13 * x * z + 2 * q.M14 * x + q.M22 * y * y                   + 2 * q.M23 * y * z + 2 * q.M24 * y + q.M33 * z * z + 2 * q.M34 * z + q.M44;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,VertexError,The following statement contains a magic number: return q.M11 * x * x + 2 * q.M12 * x * y + 2 * q.M13 * x * z + 2 * q.M14 * x + q.M22 * y * y                   + 2 * q.M23 * y * z + 2 * q.M24 * y + q.M33 * z * z + 2 * q.M34 * z + q.M44;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,VertexError,The following statement contains a magic number: return q.M11 * x * x + 2 * q.M12 * x * y + 2 * q.M13 * x * z + 2 * q.M14 * x + q.M22 * y * y                   + 2 * q.M23 * y * z + 2 * q.M24 * y + q.M33 * z * z + 2 * q.M34 * z + q.M44;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,VertexError,The following statement contains a magic number: return q.M11 * x * x + 2 * q.M12 * x * y + 2 * q.M13 * x * z + 2 * q.M14 * x + q.M22 * y * y                   + 2 * q.M23 * y * z + 2 * q.M24 * y + q.M33 * z * z + 2 * q.M34 * z + q.M44;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,VertexError,The following statement contains a magic number: return q.M11 * x * x + 2 * q.M12 * x * y + 2 * q.M13 * x * z + 2 * q.M14 * x + q.M22 * y * y                   + 2 * q.M23 * y * z + 2 * q.M24 * y + q.M33 * z * z + 2 * q.M34 * z + q.M44;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: var p2 = vertices[tri.v[2]].p;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: j < 3
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: tri.err[i] = CalculateError(tri.v[i]' tri.v[(i + 1) % 3]' out p);
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: i < 3
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: tri.err[3] = Math.Min(tri.err[0]' Math.Min(tri.err[1]' tri.err[2]));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: tri.err[3] = Math.Min(tri.err[0]' Math.Min(tri.err[1]' tri.err[2]));
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: vertices[tri.v[2]].tCount++;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: int totalTris = triangles.Count * 3;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: j < 3
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,UpdateMesh,The following statement contains a magic number: k < 3
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CompactMesh,The following statement contains a magic number: vertices[triangles[i].v[2]].tCount = 1;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CompactMesh,The following statement contains a magic number: tri.v[2] = vertices[tri.v[2]].tStart;
Magic Number,HelixToolkit.Wpf,MeshSimplification,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,CompactMesh,The following statement contains a magic number: tri.v[2] = vertices[tri.v[2]].tStart;
Magic Number,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Clone,The following statement contains a magic number: t.v[2] = this.v[2];
Magic Number,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Clone,The following statement contains a magic number: t.v[2] = this.v[2];
Magic Number,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Clone,The following statement contains a magic number: t.err[2] = this.err[2];
Magic Number,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Clone,The following statement contains a magic number: t.err[2] = this.err[2];
Magic Number,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Clone,The following statement contains a magic number: t.err[3] = this.err[3];
Magic Number,HelixToolkit.Wpf,Triangle,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\MeshSimplification.cs,Clone,The following statement contains a magic number: t.err[3] = this.err[3];
Magic Number,HelixToolkit.Wpf,Polygon3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\Polygon3D.cs,GetNormal,The following statement contains a magic number: this.Points.Count < 3
Magic Number,HelixToolkit.Wpf,Polygon3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\Polygon3D.cs,GetNormal,The following statement contains a magic number: n.LengthSquared > 1e-10
Magic Number,HelixToolkit.Wpf,Polygon3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\Polygon3D.cs,GetNormal,The following statement contains a magic number: Vector3D result = Vector3D.CrossProduct(v1' this.Points[2] - this.Points[0]);
Magic Number,HelixToolkit.Wpf,Polygon3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\Polygon3D.cs,IsPlanar,The following statement contains a magic number: i == 2
Magic Number,HelixToolkit.Wpf,SweepLinePolygonTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,Triangulate,The following statement contains a magic number: count < 3
Magic Number,HelixToolkit.Wpf,SweepLinePolygonTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,BestEdge,The following statement contains a magic number: var bestAngle = (float)Math.PI * 2;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,ContourHelper,The following statement contains a magic number: this.normals = hasNormals ? new Vector3D[3] : null;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,ContourHelper,The following statement contains a magic number: this.textures = hasTextureCoordinates ? new Point[3] : null;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,GetContourFacet,The following statement contains a magic number: return this.sides[2] > 0 ? ContourFacetResult.TwoOnly : ContourFacetResult.ZeroAndOne;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,GetContourFacet,The following statement contains a magic number: this.IsSideAlone(2)
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,SetData,The following statement contains a magic number: this.indices[2] = index2;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,SetData,The following statement contains a magic number: this.points[2] = this.meshPositions[index2];
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,SetData,The following statement contains a magic number: this.normals[2] = this.meshNormals[index2];
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,SetData,The following statement contains a magic number: this.textures[2] = this.meshTextureCoordinates[index2];
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,SetData,The following statement contains a magic number: this.sides[2] = (this.a * this.points[2].X) + (this.b * this.points[2].Y) + (this.c * this.points[2].Z) + this.d;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,SetData,The following statement contains a magic number: this.sides[2] = (this.a * this.points[2].X) + (this.b * this.points[2].Y) + (this.c * this.points[2].Z) + this.d;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,SetData,The following statement contains a magic number: this.sides[2] = (this.a * this.points[2].X) + (this.b * this.points[2].Y) + (this.c * this.points[2].Z) + this.d;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,SetData,The following statement contains a magic number: this.sides[2] = (this.a * this.points[2].X) + (this.b * this.points[2].Y) + (this.c * this.points[2].Z) + this.d;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,IsSideAlone,The following statement contains a magic number: Func<int' int> getNext = i => i + 1 > 2 ? 0 : i + 1;
Magic Number,HelixToolkit.Wpf,ContourHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\ContourHelper.cs,AllSidesBelowContour,The following statement contains a magic number: return this.sides[0] >= 0                  && this.sides[1] >= 0                  && this.sides[2] >= 0;
Magic Number,HelixToolkit.Wpf,MathHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,GenerateNoiseMap,The following statement contains a magic number: var frequency = 0.5f;
Magic Number,HelixToolkit.Wpf,MathHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,GenerateNoiseMap,The following statement contains a magic number: frequency *= 2;
Magic Number,HelixToolkit.Wpf,MathHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,GenerateNoiseMap,The following statement contains a magic number: amplitude /= 2;
Magic Number,HelixToolkit.Wpf,Noise2d,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,CalculatePermutation,The following statement contains a magic number: p = Enumerable.Range(0' 256).ToArray();
Magic Number,HelixToolkit.Wpf,Noise2d,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,CalculateGradients,The following statement contains a magic number: grad = new Vector2[256];
Magic Number,HelixToolkit.Wpf,Noise2d,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,CalculateGradients,The following statement contains a magic number: gradient = new Vector2((float)(_random.NextDouble() * 2 - 1)' (float)(_random.NextDouble() * 2 - 1));
Magic Number,HelixToolkit.Wpf,Noise2d,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,CalculateGradients,The following statement contains a magic number: gradient = new Vector2((float)(_random.NextDouble() * 2 - 1)' (float)(_random.NextDouble() * 2 - 1));
Magic Number,HelixToolkit.Wpf,Noise2d,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,Drop,The following statement contains a magic number: return 1f - t * t * t * (t * (t * 6 - 15) + 10);
Magic Number,HelixToolkit.Wpf,Noise2d,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,Drop,The following statement contains a magic number: return 1f - t * t * t * (t * (t * 6 - 15) + 10);
Magic Number,HelixToolkit.Wpf,Noise2d,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Helper\MathHelper.cs,Drop,The following statement contains a magic number: return 1f - t * t * t * (t * (t * 6 - 15) + 10);
Magic Number,HelixToolkit.Wpf,DrawingContextExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\DrawingContextExtensions.cs,DrawArc,The following statement contains a magic number: double startRadians = startAngle / 180 * Math.PI;
Magic Number,HelixToolkit.Wpf,DrawingContextExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\DrawingContextExtensions.cs,DrawArc,The following statement contains a magic number: double endRadians = endAngle / 180 * Math.PI;
Magic Number,HelixToolkit.Wpf,RectangleAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\RectangleAdorner.cs,OnRender,The following statement contains a magic number: double halfPenWidth = this.pen.Thickness / 2;
Magic Number,HelixToolkit.Wpf,RectangleAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\RectangleAdorner.cs,OnRender,The following statement contains a magic number: double mx = (this.Rectangle.Left + this.Rectangle.Right) / 2;
Magic Number,HelixToolkit.Wpf,RectangleAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\RectangleAdorner.cs,OnRender,The following statement contains a magic number: double my = (this.Rectangle.Top + this.Rectangle.Bottom) / 2;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: lightBrush.Opacity = 0.4;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: darkBrush.Opacity = 0.1;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: double t1 = 6;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: double t2 = 2;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: double l = 10;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: double r = 20.0;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: var r1 = r - (t1 + t2) / 2;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: double r3 = r + t2 / 2 + d;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: double r4 = (r + r2) / 2;
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: dc.DrawArc(null' lightPen' this.Position' 10' 80' r4' r4);
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: dc.DrawArc(null' lightPen' this.Position' 10' 80' r4' r4);
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: dc.DrawArc(null' lightPen' this.Position' 100' 170' r4' r4);
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: dc.DrawArc(null' lightPen' this.Position' 100' 170' r4' r4);
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: dc.DrawArc(null' lightPen' this.Position' 190' 260' r4' r4);
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: dc.DrawArc(null' lightPen' this.Position' 190' 260' r4' r4);
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: dc.DrawArc(null' lightPen' this.Position' 280' 350' r4' r4);
Magic Number,HelixToolkit.Wpf,TargetSymbolAdorner,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Adorners\TargetSymbolAdorner.cs,OnRender,The following statement contains a magic number: dc.DrawArc(null' lightPen' this.Position' 280' 350' r4' r4);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,CameraController,The following statement contains a magic number: this.RotataAroundClosestVertexComplexity = 5000;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,AddMoveForce,The following statement contains a magic number: this.moveSpeed += delta * 40;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,AddPanForce,The following statement contains a magic number: this.panSpeed += pan * 40;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,AddRotateForce,The following statement contains a magic number: this.rotationPosition = new Point(this.ActualWidth / 2' this.ActualHeight / 2);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,AddRotateForce,The following statement contains a magic number: this.rotationPosition = new Point(this.ActualWidth / 2' this.ActualHeight / 2);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,AddRotateForce,The following statement contains a magic number: this.rotationSpeed.X += dx * 40;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,AddRotateForce,The following statement contains a magic number: this.rotationSpeed.Y += dy * 40;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,AddZoomForce,The following statement contains a magic number: this.zoomSpeed += delta * 8;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,PushCameraSetting,The following statement contains a magic number: this.cameraHistory.Count > 100
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,ShowRectangle,The following statement contains a magic number: this.rectangleAdorner = new RectangleAdorner(                  this.Viewport' rect' color1' color2' 3' 1' 10' DashStyles.Solid);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,ShowRectangle,The following statement contains a magic number: this.rectangleAdorner = new RectangleAdorner(                  this.Viewport' rect' color1' color2' 3' 1' 10' DashStyles.Solid);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationCompleted,The following statement contains a magic number: this.manipulatorCount == 2
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationDelta,The following statement contains a magic number: this.manipulatorCount == 2
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationDelta,The following statement contains a magic number: n == 2
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationDelta,The following statement contains a magic number: n == 2
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationDelta,The following statement contains a magic number: this.zoomHandler.Zoom(1 - (e.DeltaManipulation.Scale.Length / Math.Sqrt(2))' zoomAroundPoint.Value);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnManipulationDelta,The following statement contains a magic number: this.IsTouchZoomEnabled && n == 2
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,FindPanVector,The following statement contains a magic number: var f = l * 0.001;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnCompositionTargetRendering,The following statement contains a magic number: var time = 100e-9 * (ticks - this.lastTick);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: var f = control ? 0.25 : 1;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.PageUp:                      this.AddZoomForce(-0.1 * f * this.PageUpDownZoomSensitivity);                      e.Handled = true;                      break;                  case Key.PageDown:                      this.AddZoomForce(0.1 * f * this.PageUpDownZoomSensitivity);                      e.Handled = true;                      break;                  case Key.Back:                      if (this.RestoreCameraSetting())                      {                          e.Handled = true;                      }                        break;              }
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.PageUp:                      this.AddZoomForce(-0.1 * f * this.PageUpDownZoomSensitivity);                      e.Handled = true;                      break;                  case Key.PageDown:                      this.AddZoomForce(0.1 * f * this.PageUpDownZoomSensitivity);                      e.Handled = true;                      break;                  case Key.Back:                      if (this.RestoreCameraSetting())                      {                          e.Handled = true;                      }                        break;              }
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.W:                      this.AddMoveForce(0' 0' 0.1 * f * this.MoveSensitivity);                      break;                  case Key.A:                      this.AddMoveForce(-0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.S:                      this.AddMoveForce(0' 0' -0.1 * f * this.MoveSensitivity);                      break;                  case Key.D:                      this.AddMoveForce(0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.Z:                      this.AddMoveForce(0' -0.1 * f * this.LeftRightPanSensitivity' 0);                      break;                  case Key.Q:                      this.AddMoveForce(0' 0.1 * f * this.LeftRightPanSensitivity' 0);                      break;              }
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.W:                      this.AddMoveForce(0' 0' 0.1 * f * this.MoveSensitivity);                      break;                  case Key.A:                      this.AddMoveForce(-0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.S:                      this.AddMoveForce(0' 0' -0.1 * f * this.MoveSensitivity);                      break;                  case Key.D:                      this.AddMoveForce(0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.Z:                      this.AddMoveForce(0' -0.1 * f * this.LeftRightPanSensitivity' 0);                      break;                  case Key.Q:                      this.AddMoveForce(0' 0.1 * f * this.LeftRightPanSensitivity' 0);                      break;              }
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.W:                      this.AddMoveForce(0' 0' 0.1 * f * this.MoveSensitivity);                      break;                  case Key.A:                      this.AddMoveForce(-0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.S:                      this.AddMoveForce(0' 0' -0.1 * f * this.MoveSensitivity);                      break;                  case Key.D:                      this.AddMoveForce(0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.Z:                      this.AddMoveForce(0' -0.1 * f * this.LeftRightPanSensitivity' 0);                      break;                  case Key.Q:                      this.AddMoveForce(0' 0.1 * f * this.LeftRightPanSensitivity' 0);                      break;              }
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.W:                      this.AddMoveForce(0' 0' 0.1 * f * this.MoveSensitivity);                      break;                  case Key.A:                      this.AddMoveForce(-0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.S:                      this.AddMoveForce(0' 0' -0.1 * f * this.MoveSensitivity);                      break;                  case Key.D:                      this.AddMoveForce(0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.Z:                      this.AddMoveForce(0' -0.1 * f * this.LeftRightPanSensitivity' 0);                      break;                  case Key.Q:                      this.AddMoveForce(0' 0.1 * f * this.LeftRightPanSensitivity' 0);                      break;              }
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.W:                      this.AddMoveForce(0' 0' 0.1 * f * this.MoveSensitivity);                      break;                  case Key.A:                      this.AddMoveForce(-0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.S:                      this.AddMoveForce(0' 0' -0.1 * f * this.MoveSensitivity);                      break;                  case Key.D:                      this.AddMoveForce(0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.Z:                      this.AddMoveForce(0' -0.1 * f * this.LeftRightPanSensitivity' 0);                      break;                  case Key.Q:                      this.AddMoveForce(0' 0.1 * f * this.LeftRightPanSensitivity' 0);                      break;              }
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.W:                      this.AddMoveForce(0' 0' 0.1 * f * this.MoveSensitivity);                      break;                  case Key.A:                      this.AddMoveForce(-0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.S:                      this.AddMoveForce(0' 0' -0.1 * f * this.MoveSensitivity);                      break;                  case Key.D:                      this.AddMoveForce(0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.Z:                      this.AddMoveForce(0' -0.1 * f * this.LeftRightPanSensitivity' 0);                      break;                  case Key.Q:                      this.AddMoveForce(0' 0.1 * f * this.LeftRightPanSensitivity' 0);                      break;              }
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnMouseWheel,The following statement contains a magic number: this.AddZoomForce(-e.Delta * 0.001' nearestPoint.Value);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnMouseWheel,The following statement contains a magic number: this.AddZoomForce(-e.Delta * 0.001);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnTimeStep,The following statement contains a magic number: var factor = this.IsInertiaEnabled ? Math.Pow(this.InertiaFactor' time / 0.012) : 0;
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnTimeStep,The following statement contains a magic number: factor = this.Clamp(factor' 0.2' 1);
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnTimeStep,The following statement contains a magic number: this.rotationSpeed.LengthSquared > 0.1
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnTimeStep,The following statement contains a magic number: Math.Abs(this.panSpeed.LengthSquared) > 0.0001
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnTimeStep,The following statement contains a magic number: Math.Abs(this.moveSpeed.LengthSquared) > 0.0001
Magic Number,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnTimeStep,The following statement contains a magic number: Math.Abs(this.zoomSpeed) > 0.1
Magic Number,HelixToolkit.Wpf,PanHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\PanHandler.cs,OnInertiaStarting,The following statement contains a magic number: var speed = (this.LastPoint - this.MouseDownPoint) * (40.0 / elapsedTime);
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,Rotate,The following statement contains a magic number: Math.Abs(this.Controller.CameraUpDirection.Length - 1) > 1e-8
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,RotateTurnball,The following statement contains a magic number: d = 0.2;
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,RotateTurnball,The following statement contains a magic number: (newUpDirection - modUpDir).Length > 1e-8
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,RotateTurntable,The following statement contains a magic number: double d = -0.5;
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,RotateTurntable,The following statement contains a magic number: d *= -0.2;
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,Started,The following statement contains a magic number: this.rotationPoint = new Point(                  this.Controller.Viewport.ActualWidth / 2' this.Controller.Viewport.ActualHeight / 2);
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,Started,The following statement contains a magic number: this.rotationPoint = new Point(                  this.Controller.Viewport.ActualWidth / 2' this.Controller.Viewport.ActualHeight / 2);
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,OnInertiaStarting,The following statement contains a magic number: this.Controller.StartSpin(                  4 * delta * ((double)this.Controller.SpinReleaseTime / elapsedTime)'                  this.MouseDownPoint'                  this.rotationPoint3D);
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,ProjectToTrackball,The following statement contains a magic number: double r = Math.Sqrt(w * w + h * h) / 2;
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,ProjectToTrackball,The following statement contains a magic number: double x = (point.X - w / 2) / r;
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,ProjectToTrackball,The following statement contains a magic number: double y = (h / 2 - point.Y) / r;
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,InitTurnballRotationAxes,The following statement contains a magic number: fy > 0.8 || fy < 0.2
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,InitTurnballRotationAxes,The following statement contains a magic number: fy > 0.8 || fy < 0.2
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,InitTurnballRotationAxes,The following statement contains a magic number: fx > 0.8
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,InitTurnballRotationAxes,The following statement contains a magic number: fx < 0.2
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,RotateTrackball,The following statement contains a magic number: axis.LengthSquared < 1e-8
Magic Number,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,RotateTrackball,The following statement contains a magic number: var delta = new Quaternion(axis' -angle * this.RotationSensitivity * 5);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingCameraPosition,The following statement contains a magic number: delta = -0.5;
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingCameraPosition,The following statement contains a magic number: delta < -0.5
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingCameraWidth,The following statement contains a magic number: delta = -0.5;
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingCameraWidth,The following statement contains a magic number: delta < -0.5
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingCameraWidth,The following statement contains a magic number: switch (this.CameraMode)              {                  case CameraMode.WalkAround:                  case CameraMode.Inspect:                  case CameraMode.FixedPosition:                      this.ChangeCameraDistance(delta' zoomAround);                        // Modify the camera width                      var ocamera = this.Camera as OrthographicCamera;                      if (ocamera != null)                      {                          ocamera.Width *= Math.Pow(2.5' delta);                      }                        break;              }
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingFieldOfView,The following statement contains a magic number: double r = d * Math.Tan(0.5 * fov / 180 * Math.PI);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingFieldOfView,The following statement contains a magic number: double r = d * Math.Tan(0.5 * fov / 180 * Math.PI);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingFieldOfView,The following statement contains a magic number: fov *= 1 + (delta * 0.5);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingFieldOfView,The following statement contains a magic number: double d2 = r / Math.Tan(0.5 * fov / 180 * Math.PI);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingFieldOfView,The following statement contains a magic number: double d2 = r / Math.Tan(0.5 * fov / 180 * Math.PI);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,Delta,The following statement contains a magic number: this.Zoom(delta.Y * 0.01' this.zoomPoint3D);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,Started,The following statement contains a magic number: this.zoomPoint = new Point(                  this.Controller.Viewport.ActualWidth / 2' this.Controller.Viewport.ActualHeight / 2);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,Started,The following statement contains a magic number: this.zoomPoint = new Point(                  this.Controller.Viewport.ActualWidth / 2' this.Controller.Viewport.ActualHeight / 2);
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ChangeCameraDistance,The following statement contains a magic number: relativePosition /= 10;
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ChangeCameraDistance,The following statement contains a magic number: relativePosition.LengthSquared < 1e-5
Magic Number,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ChangeCameraDistance,The following statement contains a magic number: var f = Math.Pow(2.5' delta);
Magic Number,HelixToolkit.Wpf,ZoomRectangleHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomRectangleHandler.cs,ZoomRectangle,The following statement contains a magic number: rectangle.Width < 10 || rectangle.Height < 10
Magic Number,HelixToolkit.Wpf,ZoomRectangleHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomRectangleHandler.cs,ZoomRectangle,The following statement contains a magic number: rectangle.Width < 10 || rectangle.Height < 10
Magic Number,HelixToolkit.Wpf,CategorizedColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\CategorizedColorAxis.cs,AddVisuals,The following statement contains a magic number: double y1 = this.ColorArea.Top + (((i + 0.5) / this.Categories.Count) * this.ColorArea.Height);
Magic Number,HelixToolkit.Wpf,CategorizedColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\CategorizedColorAxis.cs,AddVisuals,The following statement contains a magic number: switch (this.Position)                  {                      case ColorAxisPosition.Right:                          p0 = new Point(this.ColorArea.Right' y);                          p1 = new Point(this.ColorArea.Left - this.TickLength' y);                          p2 = new Point(                              this.ColorArea.Left - this.TickLength - this.TextMargin - tb.DesiredSize.Width'                              y1 - (tb.DesiredSize.Height / 2));                          p3 = new Point(this.ColorArea.Right' y2);                          p4 = new Point(this.ColorArea.Left - this.TickLength' y2);                          break;                      default:                          p0 = new Point(this.ColorArea.Left' y);                          p1 = new Point(this.ColorArea.Right + this.TickLength' y);                          p2 = new Point(                              this.ColorArea.Right + this.TickLength + this.TextMargin' y1 - (tb.DesiredSize.Height / 2));                          p3 = new Point(this.ColorArea.Left' y2);                          p4 = new Point(this.ColorArea.Right + this.TickLength' y2);                          break;                  }
Magic Number,HelixToolkit.Wpf,CategorizedColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\CategorizedColorAxis.cs,AddVisuals,The following statement contains a magic number: switch (this.Position)                  {                      case ColorAxisPosition.Right:                          p0 = new Point(this.ColorArea.Right' y);                          p1 = new Point(this.ColorArea.Left - this.TickLength' y);                          p2 = new Point(                              this.ColorArea.Left - this.TickLength - this.TextMargin - tb.DesiredSize.Width'                              y1 - (tb.DesiredSize.Height / 2));                          p3 = new Point(this.ColorArea.Right' y2);                          p4 = new Point(this.ColorArea.Left - this.TickLength' y2);                          break;                      default:                          p0 = new Point(this.ColorArea.Left' y);                          p1 = new Point(this.ColorArea.Right + this.TickLength' y);                          p2 = new Point(                              this.ColorArea.Right + this.TickLength + this.TextMargin' y1 - (tb.DesiredSize.Height / 2));                          p3 = new Point(this.ColorArea.Left' y2);                          p4 = new Point(this.ColorArea.Right + this.TickLength' y2);                          break;                  }
Magic Number,HelixToolkit.Wpf,ColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\ColorAxis.cs,AddVisuals,The following statement contains a magic number: r.LayoutTransform = new RotateTransform(180);
Magic Number,HelixToolkit.Wpf,RangeColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\RangeColorAxis.cs,AddVisuals,The following statement contains a magic number: switch (this.Position)                  {                      case ColorAxisPosition.Right:                          p0 = new Point(this.ColorArea.Right' y);                          p1 = new Point(this.ColorArea.Left - this.TickLength' y);                          p2 = new Point(                              this.ColorArea.Left - this.TickLength - this.TextMargin - tb.DesiredSize.Width'                              y - (tb.DesiredSize.Height / 2));                          break;                      default:                          p0 = new Point(this.ColorArea.Left' y);                          p1 = new Point(this.ColorArea.Right + this.TickLength' y);                          p2 = new Point(                              this.ColorArea.Right + this.TickLength + this.TextMargin' y - (tb.DesiredSize.Height / 2));                          break;                  }
Magic Number,HelixToolkit.Wpf,RangeColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\RangeColorAxis.cs,AddVisuals,The following statement contains a magic number: switch (this.Position)                  {                      case ColorAxisPosition.Right:                          p0 = new Point(this.ColorArea.Right' y);                          p1 = new Point(this.ColorArea.Left - this.TickLength' y);                          p2 = new Point(                              this.ColorArea.Left - this.TickLength - this.TextMargin - tb.DesiredSize.Width'                              y - (tb.DesiredSize.Height / 2));                          break;                      default:                          p0 = new Point(this.ColorArea.Left' y);                          p1 = new Point(this.ColorArea.Right + this.TickLength' y);                          p2 = new Point(                              this.ColorArea.Right + this.TickLength + this.TextMargin' y - (tb.DesiredSize.Height / 2));                          break;                  }
Magic Number,HelixToolkit.Wpf,RangeColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\RangeColorAxis.cs,AddVisuals,The following statement contains a magic number: double h = tb.DesiredSize.Height * 0.7;
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,Copy,The following statement contains a magic number: this.Viewport.Copy(this.Viewport.ActualWidth * 2' this.Viewport.ActualHeight * 2' Brushes.White' 2);
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,Copy,The following statement contains a magic number: this.Viewport.Copy(this.Viewport.ActualWidth * 2' this.Viewport.ActualHeight * 2' Brushes.White' 2);
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,Copy,The following statement contains a magic number: this.Viewport.Copy(this.Viewport.ActualWidth * 2' this.Viewport.ActualHeight * 2' Brushes.White' 2);
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,OnCameraChanged,The following statement contains a magic number: this.Camera.CopyDirectionOnly(this.coordinateView.Camera as PerspectiveCamera' 30);
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,OnCameraChanged,The following statement contains a magic number: this.Camera.CopyDirectionOnly(this.viewCubeViewport.Camera as PerspectiveCamera' 20);
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,CompositionTargetRendering,The following statement contains a magic number: this.FrameRate = (int)(this.frameCounter / (0.001 * this.fpsWatch.ElapsedMilliseconds));
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,CompositionTargetRendering,The following statement contains a magic number: this.ShowFrameRate && this.fpsWatch.ElapsedMilliseconds > 500
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,CompositionTargetRendering,The following statement contains a magic number: this.ShowTriangleCountInfo && this.infoFrameCounter > 100
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,ViewCubeViewportMouseEnter,The following statement contains a magic number: this.viewCubeViewport.AnimateOpacity(1.0' 200);
Magic Number,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,ViewCubeViewportMouseLeave,The following statement contains a magic number: this.viewCubeViewport.AnimateOpacity(this.ViewCubeOpacity' 200);
Magic Number,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.Left:                      this.HorizontalOffset -= 0.001f;                      break;                  case Key.Right:                      this.HorizontalOffset += 0.001f;                      break;              }
Magic Number,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.Left:                      this.HorizontalOffset -= 0.001f;                      break;                  case Key.Right:                      this.HorizontalOffset += 0.001f;                      break;              }
Magic Number,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.AnaglyphView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.AnaglyphEffect1 = ((HelixToolkit.Wpf.AnaglyphEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.AnaglyphView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.AnaglyphEffect1 = ((HelixToolkit.Wpf.AnaglyphEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.AnaglyphView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.AnaglyphEffect1 = ((HelixToolkit.Wpf.AnaglyphEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.AnaglyphView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.AnaglyphEffect1 = ((HelixToolkit.Wpf.AnaglyphEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.AnaglyphView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.AnaglyphEffect1 = ((HelixToolkit.Wpf.AnaglyphEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.AnaglyphView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.AnaglyphEffect1 = ((HelixToolkit.Wpf.AnaglyphEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,UpdateEvenLeft,The following statement contains a magic number: this.EvenLeft = y % 2 == 0;
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.Left:                      this.HorizontalOffset -= 0.001f;                      break;                  case Key.Right:                      this.HorizontalOffset += 0.001f;                      break;              }
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,OnKeyDown,The following statement contains a magic number: switch (e.Key)              {                  case Key.Left:                      this.HorizontalOffset -= 0.001f;                      break;                  case Key.Right:                      this.HorizontalOffset += 0.001f;                      break;              }
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.InterlacedView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.InterlacedEffect1 = ((HelixToolkit.Wpf.InterlacedEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.InterlacedView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.InterlacedEffect1 = ((HelixToolkit.Wpf.InterlacedEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.InterlacedView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.InterlacedEffect1 = ((HelixToolkit.Wpf.InterlacedEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.InterlacedView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.InterlacedEffect1 = ((HelixToolkit.Wpf.InterlacedEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.InterlacedView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.InterlacedEffect1 = ((HelixToolkit.Wpf.InterlacedEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.InterlacedView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.InterlacedEffect1 = ((HelixToolkit.Wpf.InterlacedEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,StereoView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\StereoView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.StereoView3D)(target));              return;              case 2:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 3:              this.LeftCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              case 4:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 5:              this.RightCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,StereoView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\StereoView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.StereoView3D)(target));              return;              case 2:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 3:              this.LeftCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              case 4:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 5:              this.RightCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,StereoView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\StereoView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.StereoView3D)(target));              return;              case 2:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 3:              this.LeftCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              case 4:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 5:              this.RightCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,StereoView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\StereoView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.StereoView3D)(target));              return;              case 2:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 3:              this.LeftCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              case 4:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 5:              this.RightCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,WiggleView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\WiggleView3D.xaml.cs,OnCompositionTargetRendering,The following statement contains a magic number: this.watch.ElapsedMilliseconds > 1000 / this.WiggleRate
Magic Number,HelixToolkit.Wpf,WiggleView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\WiggleView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.WiggleView3D)(target));              return;              case 2:              this.View1 = ((System.Windows.Controls.Viewport3D)(target));              return;              case 3:              this.CameraControl1 = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,WiggleView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\WiggleView3D.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.WiggleView3D)(target));              return;              case 2:              this.View1 = ((System.Windows.Controls.Viewport3D)(target));              return;              case 3:              this.CameraControl1 = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Magic Number,HelixToolkit.Wpf,BitmapExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\BitmapExporter.cs,BitmapExporter,The following statement contains a magic number: this.OversamplingMultiplier = 2;
Magic Number,HelixToolkit.Wpf,ColladaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ColladaExporter.cs,WriteAssets,The following statement contains a magic number: var authoringTool = string.Format("{0} {1}"' assemblyName.Name' assemblyName.Version.ToString(3));
Magic Number,HelixToolkit.Wpf,ColladaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ColladaExporter.cs,ExportGeometry,The following statement contains a magic number: writer.WriteAttributeString("count"' (mg.Positions.Count * 3).ToString(CultureInfo.InvariantCulture));
Magic Number,HelixToolkit.Wpf,ColladaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ColladaExporter.cs,WriteColor,The following statement contains a magic number: writer.WriteElementString("color"' string.Format(CultureInfo.InvariantCulture' "{0} {1} {2} {3}"' color.R / 255.0' color.G / 255.0' color.B / 255.0' color.A / 255.0));
Magic Number,HelixToolkit.Wpf,ColladaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ColladaExporter.cs,WriteColor,The following statement contains a magic number: writer.WriteElementString("color"' string.Format(CultureInfo.InvariantCulture' "{0} {1} {2} {3}"' color.R / 255.0' color.G / 255.0' color.B / 255.0' color.A / 255.0));
Magic Number,HelixToolkit.Wpf,ColladaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ColladaExporter.cs,WriteColor,The following statement contains a magic number: writer.WriteElementString("color"' string.Format(CultureInfo.InvariantCulture' "{0} {1} {2} {3}"' color.R / 255.0' color.G / 255.0' color.B / 255.0' color.A / 255.0));
Magic Number,HelixToolkit.Wpf,ColladaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ColladaExporter.cs,WriteColor,The following statement contains a magic number: writer.WriteElementString("color"' string.Format(CultureInfo.InvariantCulture' "{0} {1} {2} {3}"' color.R / 255.0' color.G / 255.0' color.B / 255.0' color.A / 255.0));
Magic Number,HelixToolkit.Wpf,Exporter<T>,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\Exporter.cs,RenderBrush,The following statement contains a magic number: var bmp = new RenderTargetBitmap(w' h' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,Exporter<T>,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\Exporter.cs,RenderBrush,The following statement contains a magic number: var bmp = new RenderTargetBitmap(w' h' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.LightMultiplier = 3.0;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.Threads = 2;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.ShadowColor = Color.FromArgb(255' 100' 100' 100);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.ShadowColor = Color.FromArgb(255' 100' 100' 100);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.ShadowColor = Color.FromArgb(255' 100' 100' 100);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.ShadowColor = Color.FromArgb(255' 100' 100' 100);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.LensSamples = 3;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.Width = 500;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.Height = 500;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.TextureWidth = 1024;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,KerkytheaExporter,The following statement contains a magic number: this.TextureHeight = 1024;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMesh,The following statement contains a magic number: int triangles = m.TriangleIndices.Count / 3;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMesh,The following statement contains a magic number: int a3 = a * 3;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMesh,The following statement contains a magic number: int k = m.TriangleIndices[a3 + 2];
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMesh,The following statement contains a magic number: writer.WriteParameter("AA Tolerance"' 15.0);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteMetropolisLightTransport,The following statement contains a magic number: writer.WriteParameter("Max Ray Tracing Depth"' 100);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteMetropolisLightTransport,The following statement contains a magic number: writer.WriteParameter("Max Iterations"' 10000);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteMetropolisLightTransport,The following statement contains a magic number: writer.WriteParameter("Seed Paths"' 50000);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteMetropolisLightTransport,The following statement contains a magic number: writer.WriteParameter("Large Step Probability"' 0.2);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteMetropolisLightTransport,The following statement contains a magic number: writer.WriteParameter("Max Mutation Distance"' 0.02);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteMetropolisLightTransport,The following statement contains a magic number: writer.WriteParameter("Live Probability"' 0.7);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteMetropolisLightTransport,The following statement contains a magic number: writer.WriteParameter("Max Consecutive Rejections"' 200);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("Antialiasing Threshold"' 0.3);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("Brightness Threshold"' 0.002);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("Max Ray Tracing Depth"' 5);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("Max Scatter Bounces"' 5);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("Max Dirac Bounces"' 5);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("Irradiance Precomputation"' 4);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("Max Iterations"' 5);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("./Sampling Criteria/Diffuse Samples"' 1024);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteStandardRayTracer,The following statement contains a magic number: writer.WriteParameter("./Sampling Criteria/Specular Samples"' 32);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteThreadedRaytracer,The following statement contains a magic number: writer.WriteParameter("Listening Port"' 6200);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportCamera,The following statement contains a magic number: const double x = 40;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportCamera,The following statement contains a magic number: double f = 0.5 * ratio * x / Math.Tan(0.5 * pc.FieldOfView / 180.0 * Math.PI);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportCamera,The following statement contains a magic number: double f = 0.5 * ratio * x / Math.Tan(0.5 * pc.FieldOfView / 180.0 * Math.PI);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportCamera,The following statement contains a magic number: double f = 0.5 * ratio * x / Math.Tan(0.5 * pc.FieldOfView / 180.0 * Math.PI);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportCamera,The following statement contains a magic number: writer.WriteParameter("Blades"' 6);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportHeader,The following statement contains a magic number: writer.WriteParameter("Max Objects per Cell"' 20);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportHeader,The following statement contains a magic number: writer.WriteParameter("Instancing Switch"' 1000000);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportHeader,The following statement contains a magic number: writer.WriteParameter("Caching Switch"' 6000000);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportHeader,The following statement contains a magic number: writer.WriteParameter("Reverse Gamma"' 2.2);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportLight,The following statement contains a magic number: writer.WriteParameter("Width"' 2.0);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportLight,The following statement contains a magic number: writer.WriteParameter("Height"' 2.0);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportLight,The following statement contains a magic number: var origin = new Point3D(-1000 * d.Direction.X' -1000 * d.Direction.Y' -1000 * d.Direction.Z);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportLight,The following statement contains a magic number: var origin = new Point3D(-1000 * d.Direction.X' -1000 * d.Direction.Y' -1000 * d.Direction.Z);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportLight,The following statement contains a magic number: var origin = new Point3D(-1000 * d.Direction.X' -1000 * d.Direction.Y' -1000 * d.Direction.Z);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportLight,The following statement contains a magic number: writer.WriteParameter("Focus Distance"' 4.0);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportLight,The following statement contains a magic number: writer.WriteParameter("Radius"' 0.2);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportViewport,The following statement contains a magic number: writer.WriteParameter("Sky Turbidity"' 2.0);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportViewport,The following statement contains a magic number: writer.WriteParameter("Sky Luminance Gamma"' 1.2);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportViewport,The following statement contains a magic number: writer.WriteParameter("Sky Chromaticity Gamma"' 1.8);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportViewport,The following statement contains a magic number: writer.WriteParameter("Scatter Density"' 0.1);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ToKerkytheaString,The following statement contains a magic number: return string.Format(                  CultureInfo.InvariantCulture'                  "{0:0.######} {1:0.######} {2:0.######}"'                  c.R / 255.0'                  c.G / 255.0'                  c.B / 255.0);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ToKerkytheaString,The following statement contains a magic number: return string.Format(                  CultureInfo.InvariantCulture'                  "{0:0.######} {1:0.######} {2:0.######}"'                  c.R / 255.0'                  c.G / 255.0'                  c.B / 255.0);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ToKerkytheaString,The following statement contains a magic number: return string.Format(                  CultureInfo.InvariantCulture'                  "{0:0.######} {1:0.######} {2:0.######}"'                  c.R / 255.0'                  c.G / 255.0'                  c.B / 255.0);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMaterial,The following statement contains a magic number: alpha = color.Value.A / 255.0;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMaterial,The following statement contains a magic number: this.WriteWhittedMaterial(writer' string.Format("#{0}"' weights.Count)' null' null' color' null' s.SpecularPower * 0.5);
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMaterial,The following statement contains a magic number: double weight = color.A / 255.0;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,ExportMaterial,The following statement contains a magic number: weight *= 0.01;
Magic Number,HelixToolkit.Wpf,KerkytheaExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\KerkytheaExporter.cs,WriteWhittedMaterial,The following statement contains a magic number: writer.WriteParameter("Transmitted Shininess"' 128.0);
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ObjExporter,The following statement contains a magic number: this.TextureSize = 1024;
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ObjExporter,The following statement contains a magic number: this.TextureQualityLevel = 90;
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMesh,The following statement contains a magic number: int i2 = m.TriangleIndices[i + 2];
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMesh,The following statement contains a magic number: writer.WriteLine(string.Format("# {0} faces"' m.TriangleIndices.Count / 3));
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The following statement contains a magic number: var adjustedAmbientColor = dm.AmbientColor.ChangeIntensity(0.2);
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The following statement contains a magic number: materialWriter.WriteLine(                              string.Format(CultureInfo.InvariantCulture' "d {0:F4}"' scb.Color.A / 255.0));
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The following statement contains a magic number: materialWriter.WriteLine(                      string.Format(                          "Ks {0}"' this.ToColorString(scb != null ? scb.Color : Color.FromScRgb(1.0f' 0.2f' 0.2f' 0.2f))));
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The following statement contains a magic number: materialWriter.WriteLine(                      string.Format(                          "Ks {0}"' this.ToColorString(scb != null ? scb.Color : Color.FromScRgb(1.0f' 0.2f' 0.2f' 0.2f))));
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The following statement contains a magic number: materialWriter.WriteLine(                      string.Format(                          "Ks {0}"' this.ToColorString(scb != null ? scb.Color : Color.FromScRgb(1.0f' 0.2f' 0.2f' 0.2f))));
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The following statement contains a magic number: illum = 2;
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ExportMaterial,The following statement contains a magic number: materialWriter.WriteLine(string.Format("Ns {0}"' 2));
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ToColorString,The following statement contains a magic number: return string.Format(CultureInfo.InvariantCulture' "{0:F4} {1:F4} {2:F4}"' color.R / 255.0' color.G / 255.0' color.B / 255.0);
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ToColorString,The following statement contains a magic number: return string.Format(CultureInfo.InvariantCulture' "{0:F4} {1:F4} {2:F4}"' color.R / 255.0' color.G / 255.0' color.B / 255.0);
Magic Number,HelixToolkit.Wpf,ObjExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\ObjExporter.cs,ToColorString,The following statement contains a magic number: return string.Format(CultureInfo.InvariantCulture' "{0:F4} {1:F4} {2:F4}"' color.R / 255.0' color.G / 255.0' color.B / 255.0);
Magic Number,HelixToolkit.Wpf,PovRayExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\PovRayExporter.cs,ExportModel,The following statement contains a magic number: writer.WriteLine("    " + (mesh.TriangleIndices.Count / 3) + "'");
Magic Number,HelixToolkit.Wpf,PovRayExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\PovRayExporter.cs,ExportModel,The following statement contains a magic number: writer.WriteLine(                      string.Format(                          CultureInfo.InvariantCulture'                          "    {0} {1} {2}'"'                          mesh.TriangleIndices[i]'                          mesh.TriangleIndices[i + 1]'                          mesh.TriangleIndices[i + 2]));
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,Export,The following statement contains a magic number: ExportHeader(writer' triangleIndicesCount / 3);
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,Export,The following statement contains a magic number: ExportHeader(writer' triangleIndicesCount / 3);
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,Export,The following statement contains a magic number: ExportHeader(writer' triangleIndicesCount / 3);
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportHeader,The following statement contains a magic number: writer.Write(new byte[80]);
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportModel,The following statement contains a magic number: attribute = (ushort)((1 << 15) | ((r >> 3) << 10) | ((g >> 3) << 5) | (b >> 3));
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportModel,The following statement contains a magic number: attribute = (ushort)((1 << 15) | ((r >> 3) << 10) | ((g >> 3) << 5) | (b >> 3));
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportModel,The following statement contains a magic number: attribute = (ushort)((1 << 15) | ((r >> 3) << 10) | ((g >> 3) << 5) | (b >> 3));
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportModel,The following statement contains a magic number: attribute = (ushort)((1 << 15) | ((r >> 3) << 10) | ((g >> 3) << 5) | (b >> 3));
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportModel,The following statement contains a magic number: attribute = (ushort)((1 << 15) | ((r >> 3) << 10) | ((g >> 3) << 5) | (b >> 3));
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportModel,The following statement contains a magic number: attribute = (ushort)((1 << 15) | ((r >> 3) << 10) | ((g >> 3) << 5) | (b >> 3));
Magic Number,HelixToolkit.Wpf,StlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\StlExporter.cs,ExportModel,The following statement contains a magic number: int i2 = mesh.TriangleIndices[i + 2];
Magic Number,HelixToolkit.Wpf,VrmlExporter,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Exporters\VrmlExporter.cs,ExportModel,The following statement contains a magic number: writer.WriteLine(                      string.Format(                          CultureInfo.InvariantCulture'                          "{0} {1} {2}'"'                          mesh.TriangleIndices[i]'                          mesh.TriangleIndices[i + 1]'                          mesh.TriangleIndices[i + 2]));
Magic Number,HelixToolkit.Wpf,AnimationExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\AnimationExtensions.cs,AnimateOpacity,The following statement contains a magic number: var animation = new DoubleAnimation(targetOpacity' new Duration(TimeSpan.FromMilliseconds(animationTime)))                                  {                                      AccelerationRatio = 0.3'                                      DecelerationRatio = 0.5                                  };
Magic Number,HelixToolkit.Wpf,AnimationExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\AnimationExtensions.cs,AnimateOpacity,The following statement contains a magic number: var animation = new DoubleAnimation(targetOpacity' new Duration(TimeSpan.FromMilliseconds(animationTime)))                                  {                                      AccelerationRatio = 0.3'                                      DecelerationRatio = 0.5                                  };
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: var m = new double[4' 4];
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: var m = new double[4' 4];
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[0' 2] = matrix.M13;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[0' 3] = matrix.M14;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[1' 2] = matrix.M23;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[1' 3] = matrix.M24;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[2' 0] = matrix.M31;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[2' 1] = matrix.M32;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[2' 2] = matrix.M33;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[2' 2] = matrix.M33;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[2' 3] = matrix.M34;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[2' 3] = matrix.M34;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[3' 0] = matrix.OffsetX;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[3' 1] = matrix.OffsetY;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[3' 2] = matrix.OffsetZ;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[3' 2] = matrix.OffsetZ;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[3' 3] = matrix.M44;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToArray,The following statement contains a magic number: m[3' 3] = matrix.M44;
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ToString,The following statement contains a magic number: return matrix.ConvertToString("N" + columnWidth' 20);
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ConvertToString,The following statement contains a magic number: j < 3
Magic Number,HelixToolkit.Wpf,Matrix3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Matrix3DExtensions.cs,ConvertToString,The following statement contains a magic number: i < 3
Magic Number,HelixToolkit.Wpf,Vector3DExtensions,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\ExtensionMethods\Vector3DExtensions.cs,FindAnyPerpendicular,The following statement contains a magic number: u.LengthSquared < 1e-3
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,BoundingSphere,The following statement contains a magic number: this.radius = diameter / 2;
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,CreateFromRect3D,The following statement contains a magic number: return new BoundingSphere                  {                      Center = new Point3D(rect.X + (rect.SizeX * 0.5)' rect.Y + (rect.SizeY * 0.5)' rect.Z + (rect.SizeZ * 0.5))'                      Radius = 0.5 * Math.Sqrt((rect.SizeX * rect.SizeX) + (rect.SizeY * rect.SizeY) + (rect.SizeZ * rect.SizeZ))                  };
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,CreateFromRect3D,The following statement contains a magic number: return new BoundingSphere                  {                      Center = new Point3D(rect.X + (rect.SizeX * 0.5)' rect.Y + (rect.SizeY * 0.5)' rect.Z + (rect.SizeZ * 0.5))'                      Radius = 0.5 * Math.Sqrt((rect.SizeX * rect.SizeX) + (rect.SizeY * rect.SizeY) + (rect.SizeZ * rect.SizeZ))                  };
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,CreateFromRect3D,The following statement contains a magic number: return new BoundingSphere                  {                      Center = new Point3D(rect.X + (rect.SizeX * 0.5)' rect.Y + (rect.SizeY * 0.5)' rect.Z + (rect.SizeZ * 0.5))'                      Radius = 0.5 * Math.Sqrt((rect.SizeX * rect.SizeX) + (rect.SizeY * rect.SizeY) + (rect.SizeZ * rect.SizeZ))                  };
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,CreateFromRect3D,The following statement contains a magic number: return new BoundingSphere                  {                      Center = new Point3D(rect.X + (rect.SizeX * 0.5)' rect.Y + (rect.SizeY * 0.5)' rect.Z + (rect.SizeZ * 0.5))'                      Radius = 0.5 * Math.Sqrt((rect.SizeX * rect.SizeX) + (rect.SizeY * rect.SizeY) + (rect.SizeZ * rect.SizeZ))                  };
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,CreateMerged,The following statement contains a magic number: var r2 = (Math.Max(original.radius' distance + additional.radius) - r1) * 0.5;
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,Intersects,The following statement contains a magic number: return (this.radius * this.radius) + (2.0 * this.radius * sphere.radius) + (sphere.radius * sphere.radius) > d2;
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The following statement contains a magic number: double b = (2 * dx * (x1 - cx)) + (2 * dy * (y1 - cy)) + (2 * dz * (z1 - cz));
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The following statement contains a magic number: double b = (2 * dx * (x1 - cx)) + (2 * dy * (y1 - cy)) + (2 * dz * (z1 - cz));
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The following statement contains a magic number: double b = (2 * dx * (x1 - cx)) + (2 * dy * (y1 - cy)) + (2 * dz * (z1 - cz));
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The following statement contains a magic number: double c = (x1 * x1) + (y1 * y1) + (z1 * z1) + (cx * cx) + (cz * cz) + (cy * cy) - (2 * ((cy * y1) + (cz * z1) + (cx * x1))) - (r * r);
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The following statement contains a magic number: double q = (b * b) - (4 * a * c);
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The following statement contains a magic number: double q2 = Math.Sqrt((b * b) - (4 * a * c));
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The following statement contains a magic number: double t1 = (-b + q2) / (2 * a);
Magic Number,HelixToolkit.Wpf,BoundingSphere,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\BoundingSphere.cs,RayIntersection,The following statement contains a magic number: double t2 = (-b - q2) / (2 * a);
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Mesh3D,The following statement contains a magic number: var tri = new int[3];
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Mesh3D,The following statement contains a magic number: tri = new int[3];
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Mesh3D,The following statement contains a magic number: i == 3
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,GetFaceNormal,The following statement contains a magic number: var v2 = this.Vertices[this.Faces[faceIndex][(i + 2) % m]];
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,GetFaceNormal,The following statement contains a magic number: i + 2 < m
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,IsQuadrilateralMesh,The following statement contains a magic number: f.Length != 4
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,IsTriangularMesh,The following statement contains a magic number: f.Length != 3
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Quadrangulate,The following statement contains a magic number: this.Faces[i].Length == 4
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Quadrangulate,The following statement contains a magic number: var quad = new int[4];
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Quadrangulate,The following statement contains a magic number: quad[2] = ci + 1 + ((j + 1) % m);
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Quadrangulate,The following statement contains a magic number: quad[3] = ci;
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,ToMeshGeometry3D,The following statement contains a magic number: int numberOfTriangles = vertices.Length - 2;
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Triangulate,The following statement contains a magic number: this.Faces[i].Length == 3
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Triangulate,The following statement contains a magic number: var tri = new int[3];
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,Triangulate,The following statement contains a magic number: tri[2] = ci;
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,UpdateEdges,The following statement contains a magic number: edges.Add(new List<int>(5));
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,FindMidpoint,The following statement contains a magic number: return new Point3D(                  (this.Vertices[v0].X + this.Vertices[v1].X) * 0.5'                  (this.Vertices[v0].Y + this.Vertices[v1].Y) * 0.5'                  (this.Vertices[v0].Z + this.Vertices[v1].Z) * 0.5);
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,FindMidpoint,The following statement contains a magic number: return new Point3D(                  (this.Vertices[v0].X + this.Vertices[v1].X) * 0.5'                  (this.Vertices[v0].Y + this.Vertices[v1].Y) * 0.5'                  (this.Vertices[v0].Z + this.Vertices[v1].Z) * 0.5);
Magic Number,HelixToolkit.Wpf,Mesh3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Geometry\Mesh3D.cs,FindMidpoint,The following statement contains a magic number: return new Point3D(                  (this.Vertices[v0].X + this.Vertices[v1].X) * 0.5'                  (this.Vertices[v0].Y + this.Vertices[v1].Y) * 0.5'                  (this.Vertices[v0].Z + this.Vertices[v1].Z) * 0.5);
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateGrayBrush,The following statement contains a magic number: var b = (byte)(255 * intensity);
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateGrayBrush,The following statement contains a magic number: return new SolidColorBrush(Color.FromArgb(255' b' b' b));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateHsvBrush,The following statement contains a magic number: var a = (byte)(alpha * 255);
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateHsvBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromArgb(a' 0xff' 0xff' 0x00)' 0.17));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateHsvBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromArgb(a' 0x00' 0xff' 0x00)' 0.33));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateHsvBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromArgb(a' 0x00' 0xff' 0xff)' 0.50));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateHsvBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromArgb(a' 0x00' 0x00' 0xff)' 0.67));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateHsvBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Color.FromArgb(a' 0xff' 0x00' 0xff)' 0.84));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateRainbowBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Colors.Orange' 0.17));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateRainbowBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Colors.Yellow' 0.33));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateRainbowBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Colors.Green' 0.50));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateRainbowBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Colors.Blue' 0.67));
Magic Number,HelixToolkit.Wpf,BrushHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\BrushHelper.cs,CreateRainbowBrush,The following statement contains a magic number: brush.GradientStops.Add(new GradientStop(Colors.Indigo' 0.84));
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateTo,The following statement contains a magic number: var a1 = new Point3DAnimation(                      fromPosition' newPosition' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                      AccelerationRatio = 0.3'                      DecelerationRatio = 0.5'                      FillBehavior = FillBehavior.Stop                  };
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateTo,The following statement contains a magic number: var a1 = new Point3DAnimation(                      fromPosition' newPosition' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                      AccelerationRatio = 0.3'                      DecelerationRatio = 0.5'                      FillBehavior = FillBehavior.Stop                  };
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateTo,The following statement contains a magic number: var a2 = new Vector3DAnimation(                      fromDirection' newDirection' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                      AccelerationRatio = 0.3'                      DecelerationRatio = 0.5'                      FillBehavior = FillBehavior.Stop                  };
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateTo,The following statement contains a magic number: var a2 = new Vector3DAnimation(                      fromDirection' newDirection' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                      AccelerationRatio = 0.3'                      DecelerationRatio = 0.5'                      FillBehavior = FillBehavior.Stop                  };
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateTo,The following statement contains a magic number: var a3 = new Vector3DAnimation(                      fromUpDirection' newUpDirection' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                      AccelerationRatio = 0.3'                      DecelerationRatio = 0.5'                      FillBehavior = FillBehavior.Stop                  };
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateTo,The following statement contains a magic number: var a3 = new Vector3DAnimation(                      fromUpDirection' newUpDirection' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                      AccelerationRatio = 0.3'                      DecelerationRatio = 0.5'                      FillBehavior = FillBehavior.Stop                  };
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateWidth,The following statement contains a magic number: var a1 = new DoubleAnimation(                      fromWidth' newWidth' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                      AccelerationRatio = 0.3'                      DecelerationRatio = 0.5'                      FillBehavior = FillBehavior.Stop                  };
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,AnimateWidth,The following statement contains a magic number: var a1 = new DoubleAnimation(                      fromWidth' newWidth' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                      AccelerationRatio = 0.3'                      DecelerationRatio = 0.5'                      FillBehavior = FillBehavior.Stop                  };
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,The following statement contains a magic number: double fov = 45;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,The following statement contains a magic number: fov = Math.Atan(osrc.Width / 2 / dist) * 180 / Math.PI * 2;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,The following statement contains a magic number: fov = Math.Atan(osrc.Width / 2 / dist) * 180 / Math.PI * 2;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,The following statement contains a magic number: fov = Math.Atan(osrc.Width / 2 / dist) * 180 / Math.PI * 2;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,The following statement contains a magic number: double width = 100;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,The following statement contains a magic number: width = Math.Tan(psrc.FieldOfView / 180 * Math.PI / 2) * dist * 2;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,The following statement contains a magic number: width = Math.Tan(psrc.FieldOfView / 180 * Math.PI / 2) * dist * 2;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Copy,The following statement contains a magic number: width = Math.Tan(psrc.FieldOfView / 180 * Math.PI / 2) * dist * 2;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.Position = new Point3D(2' 16' 20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.Position = new Point3D(2' 16' 20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.Position = new Point3D(2' 16' 20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.LookDirection = new Vector3D(-2' -16' -20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.LookDirection = new Vector3D(-2' -16' -20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.LookDirection = new Vector3D(-2' -16' -20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.FieldOfView = 45;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.NearPlaneDistance = 0.1;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.Position = new Point3D(2' 16' 20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.Position = new Point3D(2' 16' 20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.Position = new Point3D(2' 16' 20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.LookDirection = new Vector3D(-2' -16' -20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.LookDirection = new Vector3D(-2' -16' -20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.LookDirection = new Vector3D(-2' -16' -20);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.Width = 40;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,Reset,The following statement contains a magic number: camera.NearPlaneDistance = 0.1;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,GetProjectionMatrix,The following statement contains a magic number: double xscale = 1 / Math.Tan(Math.PI * perspectiveCamera.FieldOfView / 360);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,GetProjectionMatrix,The following statement contains a magic number: double xscale = 2.0 / orthographicCamera.Width;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,GetProjectionMatrix,The following statement contains a magic number: zfar = znear * 1e5;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The following statement contains a magic number: var center = bounds.Location + (diagonal * 0.5);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The following statement contains a magic number: double radius = diagonal.Length * 0.5;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The following statement contains a magic number: double disth = radius / Math.Tan(0.5 * pcam.FieldOfView * Math.PI / 180);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The following statement contains a magic number: double disth = radius / Math.Tan(0.5 * pcam.FieldOfView * Math.PI / 180);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The following statement contains a magic number: double distv = radius / Math.Tan(0.5 * vfov * Math.PI / 180);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The following statement contains a magic number: double distv = radius / Math.Tan(0.5 * vfov * Math.PI / 180);
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The following statement contains a magic number: double newWidth = radius * 2;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,FitView,The following statement contains a magic number: newWidth = radius * 2 * viewport.ActualWidth / viewport.ActualHeight;
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,ZoomToRectangle,The following statement contains a magic number: var centerRay = Viewport3DHelper.Point2DtoRay3D(                  viewport'                  new Point(                      (zoomRectangle.Left + zoomRectangle.Right) * 0.5' (zoomRectangle.Top + zoomRectangle.Bottom) * 0.5));
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,ZoomToRectangle,The following statement contains a magic number: var centerRay = Viewport3DHelper.Point2DtoRay3D(                  viewport'                  new Point(                      (zoomRectangle.Left + zoomRectangle.Right) * 0.5' (zoomRectangle.Top + zoomRectangle.Bottom) * 0.5));
Magic Number,HelixToolkit.Wpf,CameraHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CameraHelper.cs,ZoomToRectangle,The following statement contains a magic number: LookAt(camera' newTarget' newLookDirection' 200);
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,CreateSpline,The following statement contains a magic number: n < 2
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,CreateSpline,The following statement contains a magic number: n == 2
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double ax = sx1 + sx2 + 2 * pt1.X - 2 * pt2.X;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double ax = sx1 + sx2 + 2 * pt1.X - 2 * pt2.X;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double ay = sy1 + sy2 + 2 * pt1.Y - 2 * pt2.Y;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double ay = sy1 + sy2 + 2 * pt1.Y - 2 * pt2.Y;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double az = sz1 + sz2 + 2 * pt1.Z - 2 * pt2.Z;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double az = sz1 + sz2 + 2 * pt1.Z - 2 * pt2.Z;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double bx = -2 * sx1 - sx2 - 3 * pt1.X + 3 * pt2.X;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double bx = -2 * sx1 - sx2 - 3 * pt1.X + 3 * pt2.X;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double bx = -2 * sx1 - sx2 - 3 * pt1.X + 3 * pt2.X;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double by = -2 * sy1 - sy2 - 3 * pt1.Y + 3 * pt2.Y;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double by = -2 * sy1 - sy2 - 3 * pt1.Y + 3 * pt2.Y;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double by = -2 * sy1 - sy2 - 3 * pt1.Y + 3 * pt2.Y;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double bz = -2 * sz1 - sz2 - 3 * pt1.Z + 3 * pt2.Z;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double bz = -2 * sz1 - sz2 - 3 * pt1.Z + 3 * pt2.Z;
Magic Number,HelixToolkit.Wpf,CanonicalSplineHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\CanonicalSplineHelper.cs,Segment,The following statement contains a magic number: double bz = -2 * sz1 - sz2 - 3 * pt1.Z + 3 * pt2.Z;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ChangeIntensity,The following statement contains a magic number: hsv[2] *= factor;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ChangeIntensity,The following statement contains a magic number: hsv[2] = 1.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ChangeIntensity,The following statement contains a magic number: hsv[2] > 1.0
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorDifference,The following statement contains a magic number: double dr = (c1.R - c2.R) / 255.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorDifference,The following statement contains a magic number: double dg = (c1.G - c2.G) / 255.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorDifference,The following statement contains a magic number: double db = (c1.B - c2.B) / 255.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorDifference,The following statement contains a magic number: double da = (c1.A - c2.A) / 255.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: var hsv = new double[3];
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: hsv[0] = h / 360.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: hsv[2] = v / 255.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsv,The following statement contains a magic number: hsv[2] = v / 255.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: var hsv2 = new byte[3];
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[0] = (byte)(hsv1[0] * 255);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[1] = (byte)(hsv1[1] * 255);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[2] = (byte)(hsv1[2] * 255);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[2] = (byte)(hsv1[2] * 255);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToHsvBytes,The following statement contains a magic number: hsv2[2] = (byte)(hsv1[2] * 255);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToUint,The following statement contains a magic number: uint u = (UInt32)c.A << 24;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToUint,The following statement contains a magic number: u += (UInt32)c.R << 16;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,ColorToUint,The following statement contains a magic number: u += (UInt32)c.G << 8;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,Complementary,The following statement contains a magic number: double newHue = hsv[0] - 0.5;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,Complementary,The following statement contains a magic number: return HsvToColor(newHue' hsv[1]' hsv[2]);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HexToColor,The following statement contains a magic number: value = "FF" + value.PadLeft(6' '0');
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HexToColor,The following statement contains a magic number: value.Length <= 6
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: double h = hue * 360.0 / 255;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: double h = hue * 360.0 / 255;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: double s = saturation / 255.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: double v = value / 255.0;
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb(255' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb(255' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb(255' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromArgb(255' (byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: hsv.Length != 3
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return HsvToColor(hsv[0]' hsv[1]' hsv[2]);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromRgb((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromRgb((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following statement contains a magic number: return Color.FromRgb((byte)(r * 255)' (byte)(g * 255)' (byte)(b * 255));
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HueDifference,The following statement contains a magic number: dh > 0.5
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HueDifference,The following statement contains a magic number: dh < -0.5
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,UIntToColor,The following statement contains a magic number: var a = (byte)(color >> 24);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,UIntToColor,The following statement contains a magic number: var r = (byte)(color >> 16);
Magic Number,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,UIntToColor,The following statement contains a magic number: var g = (byte)(color >> 8);
Magic Number,HelixToolkit.Wpf,ElementSortingHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ElementSortingHelper.cs,IsTransparent,The following statement contains a magic number: dm.Color.A < 255
Magic Number,HelixToolkit.Wpf,ElementSortingHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ElementSortingHelper.cs,IsTransparent,The following statement contains a magic number: return scb.Color.A < 255;
Magic Number,HelixToolkit.Wpf,ElementSortingHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ElementSortingHelper.cs,IsTransparent,The following statement contains a magic number: return gb.GradientStops.Any(gs => gs.Color.A < 255);
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,SetEdgeVertice,The following statement contains a magic number: this.edgeVertice[v0][v1] = new int[3];
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: int nFaces = this.triangleIndices.Count / 3;
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: int vaIndex = this.triangleIndices[i * 3];
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: int vbIndex = this.triangleIndices[i * 3 + 1];
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: int vcIndex = this.triangleIndices[i * 3 + 2];
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: int vcIndex = this.triangleIndices[i * 3 + 2];
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: int vNOpposite2Index = this.GetEdgeVertice(v1' v2' 2);
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: this.newVertices[vNIndex] = 0.5 * (this.vertices[v1] + this.vertices[v2]);
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: (vi > v) && (this.GetEdgeVertice(v' vi' 2) == 0)                          || (vi < v) && (this.GetEdgeVertice(vi' v' 2) == 0)
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: (vi > v) && (this.GetEdgeVertice(v' vi' 2) == 0)                          || (vi < v) && (this.GetEdgeVertice(vi' v' 2) == 0)
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: this.newVertices[v] = 6.0 / 8 * this.vertices[v] + 1.0 / 8 * this.Sum(adjBoundaryVertices);
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: this.newVertices[v] = 6.0 / 8 * this.vertices[v] + 1.0 / 8 * this.Sum(adjBoundaryVertices);
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: this.newVertices[v] = 6.0 / 8 * this.vertices[v] + 1.0 / 8 * this.Sum(adjBoundaryVertices);
Magic Number,HelixToolkit.Wpf,LoopSubdivision,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\LoopSubdivision.cs,Subdivide,The following statement contains a magic number: adjBoundaryVertices.Count == 2
Magic Number,HelixToolkit.Wpf,MaterialHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\MaterialHelper.cs,CreateMaterial,The following statement contains a magic number: return CreateMaterial(Color.FromArgb((byte)(opacity * 255)' color.R' color.G' color.B));
Magic Number,HelixToolkit.Wpf,MaterialHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\MaterialHelper.cs,CreateMaterial,The following statement contains a magic number: var b = (byte)(255 * specularBrightness);
Magic Number,HelixToolkit.Wpf,Billboard,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\Billboard.cs,Billboard,The following statement contains a magic number: double halfSize = size / 2.0;
Magic Number,HelixToolkit.Wpf,Billboard,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\Billboard.cs,Billboard,The following statement contains a magic number: var xa = -0.5;
Magic Number,HelixToolkit.Wpf,Billboard,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\Billboard.cs,Billboard,The following statement contains a magic number: var ya = -0.5;
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: var indices = new Int32Collection(n * 6);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 0);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 1);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 2);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 2);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 2);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 2);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 3);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 3);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add((i * 4) + 0);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPositions,The following statement contains a magic number: var positions = new Point3DCollection(billboards.Count * 4);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: var pinEnd = pinStart + (offset * (1 + (2 * pinWidth / offset.Length)));
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: pinNormal *= pinWidth * 0.5;
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: var pinPoints = new Point[4];
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: pinPoints[0] = new Point(0' 0) + (pinNormal * 0.5);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: pinPoints[1] = new Point(0' 0) - (pinNormal * 0.5);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: pinPoints[2] = pinEnd - pinNormal;
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: pinPoints[3] = pinEnd + pinNormal;
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: var positions = new Point3DCollection(billboards.Count * 4);
Magic Number,HelixToolkit.Wpf,BillboardGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\BillboardGeometryBuilder.cs,GetPinPositions,The following statement contains a magic number: double spz = screenPoint.Z - ((bb.DepthOffset - 1e-5) * spw);
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: var indices = new Int32Collection(n * 3);
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: var i4 = i * 4;
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i4 + 2);
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i4 + 2);
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i4 + 3);
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: i < n / 2
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreatePositions,The following statement contains a magic number: var halfThickness = thickness * 0.5;
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreatePositions,The following statement contains a magic number: var segmentCount = points.Count / 2;
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreatePositions,The following statement contains a magic number: var positions = new Point3DCollection(segmentCount * 4);
Magic Number,HelixToolkit.Wpf,LineGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\LineGeometryBuilder.cs,CreatePositions,The following statement contains a magic number: int startIndex = i * 2;
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: var indices = new Int32Collection(n * 6);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 2);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 2);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 1);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 0);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 2);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 2);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 3);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 3);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreateIndices,The following statement contains a magic number: indices.Add(i * 4 + 1);
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreatePositions,The following statement contains a magic number: double halfSize = size / 2.0;
Magic Number,HelixToolkit.Wpf,PointGeometryBuilder,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ScreenSpace\PointGeometryBuilder.cs,CreatePositions,The following statement contains a magic number: var positions = new Point3DCollection(numPoints * 4);
Magic Number,HelixToolkit.Wpf,StereoHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\StereoHelper.cs,CalculateStereoBase,The following statement contains a magic number: return P * (L * N / (L - N)) * (1 / F - (L + N) / (2 * L * N));
Magic Number,HelixToolkit.Wpf,StereoHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\StereoHelper.cs,FindFocalLength,The following statement contains a magic number: return format / 2 / Math.Tan(fov / 2 * Math.PI / 180);
Magic Number,HelixToolkit.Wpf,StereoHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\StereoHelper.cs,FindFocalLength,The following statement contains a magic number: return format / 2 / Math.Tan(fov / 2 * Math.PI / 180);
Magic Number,HelixToolkit.Wpf,StereoHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\StereoHelper.cs,FindFocalLength,The following statement contains a magic number: return format / 2 / Math.Tan(fov / 2 * Math.PI / 180);
Magic Number,HelixToolkit.Wpf,StereoHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\StereoHelper.cs,UpdateStereoCameras,The following statement contains a magic number: leftCamera.Position = centerCamera.Position - (right * stereoBase / 2);
Magic Number,HelixToolkit.Wpf,StereoHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\StereoHelper.cs,UpdateStereoCameras,The following statement contains a magic number: rightCamera.Position = centerCamera.Position + (right * stereoBase / 2);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: var p0 = center - width / 2 * textDirection - height / 2 * updirection;
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: var p0 = center - width / 2 * textDirection - height / 2 * updirection;
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(3);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(2);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(3);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(4);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(5);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(7);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(4);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(7);
Magic Number,HelixToolkit.Wpf,TextCreator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\TextCreator.cs,CreateTextLabelModel3D,The following statement contains a magic number: mg.TriangleIndices.Add(6);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,Export,The following statement contains a magic number: switch (ext)              {                  case ".jpg":                  case ".png":                      SaveBitmap(viewport' fileName' background' 2);                      break;                  case ".xaml":                      ExportXaml(viewport' fileName);                      break;                  case ".xml":                      ExportKerkythea(viewport' fileName' background);                      break;                  case ".obj":                      ExportObj(viewport' fileName);                      break;                  case ".x3d":                      ExportX3D(viewport' fileName);                      break;                  case ".dae":                      ExportCollada(viewport' fileName);                      break;                  case ".stl":                      ExportStl(viewport' fileName);                      break;                  default:                      throw new HelixToolkitException("Not supported file format.");              }
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,ExportStereo,The following statement contains a magic number: switch (ext)              {                  case ".jpg":                  case ".png":                      SaveStereoBitmap(viewport' fileName' stereoBase' background' 2);                      break;                  case ".mpo":                      throw new HelixToolkitException("MPO is not yet supported.");                  default:                      throw new HelixToolkitException("Not supported file format.");              }
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,FindHits,The following statement contains a magic number: const double Tolerance = 1e-10;
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,FindHits,The following statement contains a magic number: viewport.Children.Traverse<GeometryModel3D>(                  (model' visual' transform) =>                  {                      var geometry = model.Geometry as MeshGeometry3D;                      if (geometry == null || geometry.Positions == null || geometry.TriangleIndices == null)                      {                          return;                      }                        var status = mode == SelectionHitMode.Inside;                        // transform the positions of the mesh to screen coordinates                      var point2Ds = geometry.Positions.Select(transform.Transform).Select(viewport.Point3DtoPoint2D).ToArray();                        // evaluate each triangle                      for (var i = 0; i < geometry.TriangleIndices.Count / 3; i++)                      {                          var triangle = new Triangle(                              point2Ds[geometry.TriangleIndices[i * 3]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 1]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 2]]);                          switch (mode)                          {                              case SelectionHitMode.Inside:                                  status = status && triangle.IsCompletelyInside(rectangle);                                  break;                              case SelectionHitMode.Touch:                                  status = status                                           || triangle.IsCompletelyInside(rectangle)                                           || triangle.IntersectsWith(rectangle)                                           || triangle.IsRectCompletelyInside(rectangle);                                  break;                          }                            if (mode == SelectionHitMode.Touch && status)                          {                              break;                          }                      }                        if (status)                      {                          results.Add(new RectangleHitResult(model' visual));                      }                  });
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,FindHits,The following statement contains a magic number: viewport.Children.Traverse<GeometryModel3D>(                  (model' visual' transform) =>                  {                      var geometry = model.Geometry as MeshGeometry3D;                      if (geometry == null || geometry.Positions == null || geometry.TriangleIndices == null)                      {                          return;                      }                        var status = mode == SelectionHitMode.Inside;                        // transform the positions of the mesh to screen coordinates                      var point2Ds = geometry.Positions.Select(transform.Transform).Select(viewport.Point3DtoPoint2D).ToArray();                        // evaluate each triangle                      for (var i = 0; i < geometry.TriangleIndices.Count / 3; i++)                      {                          var triangle = new Triangle(                              point2Ds[geometry.TriangleIndices[i * 3]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 1]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 2]]);                          switch (mode)                          {                              case SelectionHitMode.Inside:                                  status = status && triangle.IsCompletelyInside(rectangle);                                  break;                              case SelectionHitMode.Touch:                                  status = status                                           || triangle.IsCompletelyInside(rectangle)                                           || triangle.IntersectsWith(rectangle)                                           || triangle.IsRectCompletelyInside(rectangle);                                  break;                          }                            if (mode == SelectionHitMode.Touch && status)                          {                              break;                          }                      }                        if (status)                      {                          results.Add(new RectangleHitResult(model' visual));                      }                  });
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,FindHits,The following statement contains a magic number: viewport.Children.Traverse<GeometryModel3D>(                  (model' visual' transform) =>                  {                      var geometry = model.Geometry as MeshGeometry3D;                      if (geometry == null || geometry.Positions == null || geometry.TriangleIndices == null)                      {                          return;                      }                        var status = mode == SelectionHitMode.Inside;                        // transform the positions of the mesh to screen coordinates                      var point2Ds = geometry.Positions.Select(transform.Transform).Select(viewport.Point3DtoPoint2D).ToArray();                        // evaluate each triangle                      for (var i = 0; i < geometry.TriangleIndices.Count / 3; i++)                      {                          var triangle = new Triangle(                              point2Ds[geometry.TriangleIndices[i * 3]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 1]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 2]]);                          switch (mode)                          {                              case SelectionHitMode.Inside:                                  status = status && triangle.IsCompletelyInside(rectangle);                                  break;                              case SelectionHitMode.Touch:                                  status = status                                           || triangle.IsCompletelyInside(rectangle)                                           || triangle.IntersectsWith(rectangle)                                           || triangle.IsRectCompletelyInside(rectangle);                                  break;                          }                            if (mode == SelectionHitMode.Touch && status)                          {                              break;                          }                      }                        if (status)                      {                          results.Add(new RectangleHitResult(model' visual));                      }                  });
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,FindHits,The following statement contains a magic number: viewport.Children.Traverse<GeometryModel3D>(                  (model' visual' transform) =>                  {                      var geometry = model.Geometry as MeshGeometry3D;                      if (geometry == null || geometry.Positions == null || geometry.TriangleIndices == null)                      {                          return;                      }                        var status = mode == SelectionHitMode.Inside;                        // transform the positions of the mesh to screen coordinates                      var point2Ds = geometry.Positions.Select(transform.Transform).Select(viewport.Point3DtoPoint2D).ToArray();                        // evaluate each triangle                      for (var i = 0; i < geometry.TriangleIndices.Count / 3; i++)                      {                          var triangle = new Triangle(                              point2Ds[geometry.TriangleIndices[i * 3]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 1]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 2]]);                          switch (mode)                          {                              case SelectionHitMode.Inside:                                  status = status && triangle.IsCompletelyInside(rectangle);                                  break;                              case SelectionHitMode.Touch:                                  status = status                                           || triangle.IsCompletelyInside(rectangle)                                           || triangle.IntersectsWith(rectangle)                                           || triangle.IsRectCompletelyInside(rectangle);                                  break;                          }                            if (mode == SelectionHitMode.Touch && status)                          {                              break;                          }                      }                        if (status)                      {                          results.Add(new RectangleHitResult(model' visual));                      }                  });
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,FindHits,The following statement contains a magic number: viewport.Children.Traverse<GeometryModel3D>(                  (model' visual' transform) =>                  {                      var geometry = model.Geometry as MeshGeometry3D;                      if (geometry == null || geometry.Positions == null || geometry.TriangleIndices == null)                      {                          return;                      }                        var status = mode == SelectionHitMode.Inside;                        // transform the positions of the mesh to screen coordinates                      var point2Ds = geometry.Positions.Select(transform.Transform).Select(viewport.Point3DtoPoint2D).ToArray();                        // evaluate each triangle                      for (var i = 0; i < geometry.TriangleIndices.Count / 3; i++)                      {                          var triangle = new Triangle(                              point2Ds[geometry.TriangleIndices[i * 3]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 1]]'                              point2Ds[geometry.TriangleIndices[(i * 3) + 2]]);                          switch (mode)                          {                              case SelectionHitMode.Inside:                                  status = status && triangle.IsCompletelyInside(rectangle);                                  break;                              case SelectionHitMode.Touch:                                  status = status                                           || triangle.IsCompletelyInside(rectangle)                                           || triangle.IntersectsWith(rectangle)                                           || triangle.IsRectCompletelyInside(rectangle);                                  break;                          }                            if (mode == SelectionHitMode.Touch && status)                          {                              break;                          }                      }                        if (status)                      {                          results.Add(new RectangleHitResult(model' visual));                      }                  });
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetViewportTransform,The following statement contains a magic number: return new Matrix3D(                  viewport3DVisual.Viewport.Width / 2'                  0'                  0'                  0'                  0'                  -viewport3DVisual.Viewport.Height / 2'                  0'                  0'                  0'                  0'                  1'                  0'                  viewport3DVisual.Viewport.X + (viewport3DVisual.Viewport.Width / 2)'                  viewport3DVisual.Viewport.Y + (viewport3DVisual.Viewport.Height / 2)'                  0'                  1);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetViewportTransform,The following statement contains a magic number: return new Matrix3D(                  viewport3DVisual.Viewport.Width / 2'                  0'                  0'                  0'                  0'                  -viewport3DVisual.Viewport.Height / 2'                  0'                  0'                  0'                  0'                  1'                  0'                  viewport3DVisual.Viewport.X + (viewport3DVisual.Viewport.Width / 2)'                  viewport3DVisual.Viewport.Y + (viewport3DVisual.Viewport.Height / 2)'                  0'                  1);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetViewportTransform,The following statement contains a magic number: return new Matrix3D(                  viewport3DVisual.Viewport.Width / 2'                  0'                  0'                  0'                  0'                  -viewport3DVisual.Viewport.Height / 2'                  0'                  0'                  0'                  0'                  1'                  0'                  viewport3DVisual.Viewport.X + (viewport3DVisual.Viewport.Width / 2)'                  viewport3DVisual.Viewport.Y + (viewport3DVisual.Viewport.Height / 2)'                  0'                  1);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetViewportTransform,The following statement contains a magic number: return new Matrix3D(                  viewport3DVisual.Viewport.Width / 2'                  0'                  0'                  0'                  0'                  -viewport3DVisual.Viewport.Height / 2'                  0'                  0'                  0'                  0'                  1'                  0'                  viewport3DVisual.Viewport.X + (viewport3DVisual.Viewport.Width / 2)'                  viewport3DVisual.Viewport.Y + (viewport3DVisual.Viewport.Height / 2)'                  0'                  1);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetViewportTransform,The following statement contains a magic number: return new Matrix3D(                  viewport.ActualWidth / 2'                  0'                  0'                  0'                  0'                  -viewport.ActualHeight / 2'                  0'                  0'                  0'                  0'                  1'                  0'                  viewport.ActualWidth / 2'                  viewport.ActualHeight / 2'                  0'                  1);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetViewportTransform,The following statement contains a magic number: return new Matrix3D(                  viewport.ActualWidth / 2'                  0'                  0'                  0'                  0'                  -viewport.ActualHeight / 2'                  0'                  0'                  0'                  0'                  1'                  0'                  viewport.ActualWidth / 2'                  viewport.ActualHeight / 2'                  0'                  1);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetViewportTransform,The following statement contains a magic number: return new Matrix3D(                  viewport.ActualWidth / 2'                  0'                  0'                  0'                  0'                  -viewport.ActualHeight / 2'                  0'                  0'                  0'                  0'                  1'                  0'                  viewport.ActualWidth / 2'                  viewport.ActualHeight / 2'                  0'                  1);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetViewportTransform,The following statement contains a magic number: return new Matrix3D(                  viewport.ActualWidth / 2'                  0'                  0'                  0'                  0'                  -viewport.ActualHeight / 2'                  0'                  0'                  0'                  0'                  1'                  0'                  viewport.ActualWidth / 2'                  viewport.ActualHeight / 2'                  0'                  1);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,Point2DtoPoint3D,The following statement contains a magic number: pointNormalized.Z = 0.01;
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,Point2DtoPoint3D,The following statement contains a magic number: pointNormalized.Z = 0.99;
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The following statement contains a magic number: var target = new WriteableBitmap((int)view.ActualWidth * m' (int)view.ActualHeight * m' 96' 96' PixelFormats.Pbgra32' null);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The following statement contains a magic number: var target = new WriteableBitmap((int)view.ActualWidth * m' (int)view.ActualHeight * m' 96' 96' PixelFormats.Pbgra32' null);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The following statement contains a magic number: pm.OffsetX = m - 1 - (i * 2);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The following statement contains a magic number: pm.OffsetY = -(m - 1 - (j * 2));
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The following statement contains a magic number: pm.M31 = -(m - 1 - (i * 2));
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The following statement contains a magic number: pm.M32 = m - 1 - (j * 2);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The following statement contains a magic number: var partialBitmap = new RenderTargetBitmap((int)view.ActualWidth' (int)view.ActualHeight' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,RenderBitmap,The following statement contains a magic number: var partialBitmap = new RenderTargetBitmap((int)view.ActualWidth' (int)view.ActualHeight' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,GetTotalNumberOfTriangles,The following statement contains a magic number: viewport.Children.Traverse<GeometryModel3D>((m' t) =>                  {                      var geometry = m.Geometry as MeshGeometry3D;                      if (geometry != null && geometry.TriangleIndices != null)                      {                          count += geometry.TriangleIndices.Count / 3;                      }                  });
Magic Number,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,CopyBitmap,The following statement contains a magic number: int stride = source.PixelWidth * (source.Format.BitsPerPixel / 8);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,Read,The following statement contains a magic number: headerSize + 8 != length
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadChunkId,The following statement contains a magic number: var chars = reader.ReadChars(4);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadFloat,The following statement contains a magic number: var bytes = reader.ReadBytes(4);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadFloat,The following statement contains a magic number: return BitConverter.ToSingle(new[] { bytes[3]' bytes[2]' bytes[1]' bytes[0] }' 0);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadFloat,The following statement contains a magic number: return BitConverter.ToSingle(new[] { bytes[3]' bytes[2]' bytes[1]' bytes[0] }' 0);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadInt,The following statement contains a magic number: var bytes = reader.ReadBytes(4);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadInt,The following statement contains a magic number: return BitConverter.ToInt32(new[] { bytes[3]' bytes[2]' bytes[1]' bytes[0] }' 0);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadInt,The following statement contains a magic number: return BitConverter.ToInt32(new[] { bytes[3]' bytes[2]' bytes[1]' bytes[0] }' 0);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadPoints,The following statement contains a magic number: int n = size / 4 / 3;
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadPoints,The following statement contains a magic number: int n = size / 4 / 3;
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadPolygons,The following statement contains a magic number: size -= (2 + nverts) * 2;
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadPolygons,The following statement contains a magic number: size -= (2 + nverts) * 2;
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadShortInt,The following statement contains a magic number: var bytes = reader.ReadBytes(2);
Magic Number,HelixToolkit.Wpf,LwoReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\LwoReader.cs,ReadSurface,The following statement contains a magic number: (n.Length + 1) % 2 == 1
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,ColorParse,The following statement contains a magic number: return Color.FromRgb((byte)(fields[0] * 255)' (byte)(fields[1] * 255)' (byte)(fields[2] * 255));
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,ColorParse,The following statement contains a magic number: return Color.FromRgb((byte)(fields[0] * 255)' (byte)(fields[1] * 255)' (byte)(fields[2] * 255));
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,ColorParse,The following statement contains a magic number: return Color.FromRgb((byte)(fields[0] * 255)' (byte)(fields[1] * 255)' (byte)(fields[2] * 255));
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,ColorParse,The following statement contains a magic number: return Color.FromRgb((byte)(fields[0] * 255)' (byte)(fields[1] * 255)' (byte)(fields[2] * 255));
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,AddFace,The following statement contains a magic number: int vni = ff.Length > 2 && ff[2].Length > 0 ? int.Parse(ff[2]) : int.MaxValue;
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,AddFace,The following statement contains a magic number: int vni = ff.Length > 2 && ff[2].Length > 0 ? int.Parse(ff[2]) : int.MaxValue;
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,AddFace,The following statement contains a magic number: int vni = ff.Length > 2 && ff[2].Length > 0 ? int.Parse(ff[2]) : int.MaxValue;
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,AddFace,The following statement contains a magic number: faceIndices.Count <= 4
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,AddNormal,The following statement contains a magic number: this.Normals.Add(new Vector3D(fields[0]' -fields[2]' fields[1]));
Magic Number,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,AddVertex,The following statement contains a magic number: this.Points.Add(new Point3D(fields[0]' -fields[2]' fields[1]));
Magic Number,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,The following statement contains a magic number: int vertexDimension = 3;
Magic Number,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,The following statement contains a magic number: var uv = new double[2];
Magic Number,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,The following statement contains a magic number: j < 2
Magic Number,HelixToolkit.Wpf,OffReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\OffReader.cs,Load,The following statement contains a magic number: this.Vertices.Add(new Point3D(x[0]' x[1]' x[2]));
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: var fileVersion = Version.Parse(formatSpecLineParts[2]);
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: switch (headerItemType)                              {                                  case PlyHeaderItems.element:                                      {                                          if (lineParts.Length == 3)                                          {                                              var elementName = lineParts[1];                                              var elementCount = int.Parse(lineParts[2]);                                              var element = new PlyElement(elementName' elementCount' new List<PlyProperty[]> { new PlyProperty[] { } });                                              elements.Add(element);                                          }                                          break;                                      }                                  case PlyHeaderItems.property:                                      {                                          if (lineParts.Length >= 3 && elements.Count > 0)                                          {                                              if (lineParts[1] != "list" && lineParts.Length == 3)                                              {                                                  if (Enum.TryParse($"_{lineParts[1]}"' out PlyDataTypes propertyType))                                                  {                                                      var propertyName = lineParts[2];                                                        var property = new PlyProperty(propertyName' propertyType' null' false' PlyDataTypes._char' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                  }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else if (lineParts[1] == "list" && lineParts.Length == 5)                                              {                                                  //array property                                                  if (Enum.TryParse($"_{lineParts[2]}"' out PlyDataTypes propertyType) && Enum.TryParse($"_{lineParts[3]}"' out PlyDataTypes listContentType))                                                  {                                                      var propertyName = lineParts[4];                                                        var property = new PlyProperty(propertyName' propertyType' null' true' listContentType' null);                                                        var newPropertyList = new List<PlyProperty>();                                                      for (int j = 0; j < elements.Last().Instances[0].Length; j++)                                                      {                                                          newPropertyList.Add(elements.Last().Instances[0][j]);                                                      }                                                      newPropertyList.Add(property);                                                      elements.Last().Instances[0] = newPropertyList.ToArray();                                                    }                                                  else                                                      throw new InvalidDataException($"Invalid data type' {lineParts[1]}.");                                              }                                              else                                                  throw new InvalidDataException("Invalid property definition.");                                          }                                          break;                                      }                                  case PlyHeaderItems.obj_info:                                      {                                          if (lineParts.Length == 3)                                          {                                              objInfos.Add(new Tuple<string' string>(lineParts[1]' lineParts[2]));                                          }                                          else                                          {                                              objInfos.Add(new Tuple<string' string>($"htk_info_{objInfos.Count}"' headerLines[i].Substring(lineParts[0].Length + 1)));                                          }                                          break;                                      }                                  case PlyHeaderItems.comment:                                      {                                          comments.Add(headerLines[i].Substring(lineParts[0].Length + 1));                                          break;                                      }                                  default:                                      {                                          throw new InvalidDataException($"Unknown header item' {lineParts[0]}.");                                      }                              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ReadHeader,The following statement contains a magic number: headerLines.Length > 2 && (PlyHeaderItems)Enum.Parse(typeof(PlyHeaderItems)' headerLines[0]) == PlyHeaderItems.ply                  && (PlyHeaderItems)Enum.Parse(typeof(PlyHeaderItems)' headerLines[headerLines.Length - 1]) == PlyHeaderItems.end_header
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ConvertPropValueBinary,The following statement contains a magic number: switch (plyDataType)              {                  case PlyDataTypes._char:                      {                          result = reverseBytes ? BitConverter.ToChar(reader.ReadBytes(1).Reverse().ToArray()' 0) : reader.ReadChar();                          break;                      }                  case PlyDataTypes._uint8:                  case PlyDataTypes._uchar:                      {                          result = reader.ReadByte();                          break;                      }                  case PlyDataTypes._short:                      {                          result = reverseBytes ? BitConverter.ToInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadInt16();                          break;                      }                  case PlyDataTypes._ushort:                      {                          result = reverseBytes ? BitConverter.ToUInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadUInt16();                          break;                      }                  case PlyDataTypes._int:                  case PlyDataTypes._int32:                      {                          result = reverseBytes ? BitConverter.ToInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadInt32();                          break;                      }                  case PlyDataTypes._uint:                      {                          result = reverseBytes ? BitConverter.ToUInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadUInt32();                          break;                      }                  case PlyDataTypes._float:                  case PlyDataTypes._float32:                      {                          result = reverseBytes ? BitConverter.ToSingle(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadSingle();                          break;                      }                  case PlyDataTypes._double:                      {                          result = reverseBytes ? BitConverter.ToDouble(reader.ReadBytes(8).Reverse().ToArray()' 0) : reader.ReadDouble();                          break;                      }                  default:                      throw new InvalidOperationException("Unimplemented data conversion.");              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ConvertPropValueBinary,The following statement contains a magic number: switch (plyDataType)              {                  case PlyDataTypes._char:                      {                          result = reverseBytes ? BitConverter.ToChar(reader.ReadBytes(1).Reverse().ToArray()' 0) : reader.ReadChar();                          break;                      }                  case PlyDataTypes._uint8:                  case PlyDataTypes._uchar:                      {                          result = reader.ReadByte();                          break;                      }                  case PlyDataTypes._short:                      {                          result = reverseBytes ? BitConverter.ToInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadInt16();                          break;                      }                  case PlyDataTypes._ushort:                      {                          result = reverseBytes ? BitConverter.ToUInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadUInt16();                          break;                      }                  case PlyDataTypes._int:                  case PlyDataTypes._int32:                      {                          result = reverseBytes ? BitConverter.ToInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadInt32();                          break;                      }                  case PlyDataTypes._uint:                      {                          result = reverseBytes ? BitConverter.ToUInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadUInt32();                          break;                      }                  case PlyDataTypes._float:                  case PlyDataTypes._float32:                      {                          result = reverseBytes ? BitConverter.ToSingle(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadSingle();                          break;                      }                  case PlyDataTypes._double:                      {                          result = reverseBytes ? BitConverter.ToDouble(reader.ReadBytes(8).Reverse().ToArray()' 0) : reader.ReadDouble();                          break;                      }                  default:                      throw new InvalidOperationException("Unimplemented data conversion.");              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ConvertPropValueBinary,The following statement contains a magic number: switch (plyDataType)              {                  case PlyDataTypes._char:                      {                          result = reverseBytes ? BitConverter.ToChar(reader.ReadBytes(1).Reverse().ToArray()' 0) : reader.ReadChar();                          break;                      }                  case PlyDataTypes._uint8:                  case PlyDataTypes._uchar:                      {                          result = reader.ReadByte();                          break;                      }                  case PlyDataTypes._short:                      {                          result = reverseBytes ? BitConverter.ToInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadInt16();                          break;                      }                  case PlyDataTypes._ushort:                      {                          result = reverseBytes ? BitConverter.ToUInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadUInt16();                          break;                      }                  case PlyDataTypes._int:                  case PlyDataTypes._int32:                      {                          result = reverseBytes ? BitConverter.ToInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadInt32();                          break;                      }                  case PlyDataTypes._uint:                      {                          result = reverseBytes ? BitConverter.ToUInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadUInt32();                          break;                      }                  case PlyDataTypes._float:                  case PlyDataTypes._float32:                      {                          result = reverseBytes ? BitConverter.ToSingle(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadSingle();                          break;                      }                  case PlyDataTypes._double:                      {                          result = reverseBytes ? BitConverter.ToDouble(reader.ReadBytes(8).Reverse().ToArray()' 0) : reader.ReadDouble();                          break;                      }                  default:                      throw new InvalidOperationException("Unimplemented data conversion.");              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ConvertPropValueBinary,The following statement contains a magic number: switch (plyDataType)              {                  case PlyDataTypes._char:                      {                          result = reverseBytes ? BitConverter.ToChar(reader.ReadBytes(1).Reverse().ToArray()' 0) : reader.ReadChar();                          break;                      }                  case PlyDataTypes._uint8:                  case PlyDataTypes._uchar:                      {                          result = reader.ReadByte();                          break;                      }                  case PlyDataTypes._short:                      {                          result = reverseBytes ? BitConverter.ToInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadInt16();                          break;                      }                  case PlyDataTypes._ushort:                      {                          result = reverseBytes ? BitConverter.ToUInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadUInt16();                          break;                      }                  case PlyDataTypes._int:                  case PlyDataTypes._int32:                      {                          result = reverseBytes ? BitConverter.ToInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadInt32();                          break;                      }                  case PlyDataTypes._uint:                      {                          result = reverseBytes ? BitConverter.ToUInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadUInt32();                          break;                      }                  case PlyDataTypes._float:                  case PlyDataTypes._float32:                      {                          result = reverseBytes ? BitConverter.ToSingle(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadSingle();                          break;                      }                  case PlyDataTypes._double:                      {                          result = reverseBytes ? BitConverter.ToDouble(reader.ReadBytes(8).Reverse().ToArray()' 0) : reader.ReadDouble();                          break;                      }                  default:                      throw new InvalidOperationException("Unimplemented data conversion.");              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ConvertPropValueBinary,The following statement contains a magic number: switch (plyDataType)              {                  case PlyDataTypes._char:                      {                          result = reverseBytes ? BitConverter.ToChar(reader.ReadBytes(1).Reverse().ToArray()' 0) : reader.ReadChar();                          break;                      }                  case PlyDataTypes._uint8:                  case PlyDataTypes._uchar:                      {                          result = reader.ReadByte();                          break;                      }                  case PlyDataTypes._short:                      {                          result = reverseBytes ? BitConverter.ToInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadInt16();                          break;                      }                  case PlyDataTypes._ushort:                      {                          result = reverseBytes ? BitConverter.ToUInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadUInt16();                          break;                      }                  case PlyDataTypes._int:                  case PlyDataTypes._int32:                      {                          result = reverseBytes ? BitConverter.ToInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadInt32();                          break;                      }                  case PlyDataTypes._uint:                      {                          result = reverseBytes ? BitConverter.ToUInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadUInt32();                          break;                      }                  case PlyDataTypes._float:                  case PlyDataTypes._float32:                      {                          result = reverseBytes ? BitConverter.ToSingle(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadSingle();                          break;                      }                  case PlyDataTypes._double:                      {                          result = reverseBytes ? BitConverter.ToDouble(reader.ReadBytes(8).Reverse().ToArray()' 0) : reader.ReadDouble();                          break;                      }                  default:                      throw new InvalidOperationException("Unimplemented data conversion.");              }
Magic Number,HelixToolkit.Wpf,PlyReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\PlyReader.cs,ConvertPropValueBinary,The following statement contains a magic number: switch (plyDataType)              {                  case PlyDataTypes._char:                      {                          result = reverseBytes ? BitConverter.ToChar(reader.ReadBytes(1).Reverse().ToArray()' 0) : reader.ReadChar();                          break;                      }                  case PlyDataTypes._uint8:                  case PlyDataTypes._uchar:                      {                          result = reader.ReadByte();                          break;                      }                  case PlyDataTypes._short:                      {                          result = reverseBytes ? BitConverter.ToInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadInt16();                          break;                      }                  case PlyDataTypes._ushort:                      {                          result = reverseBytes ? BitConverter.ToUInt16(reader.ReadBytes(2).Reverse().ToArray()' 0) : reader.ReadUInt16();                          break;                      }                  case PlyDataTypes._int:                  case PlyDataTypes._int32:                      {                          result = reverseBytes ? BitConverter.ToInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadInt32();                          break;                      }                  case PlyDataTypes._uint:                      {                          result = reverseBytes ? BitConverter.ToUInt32(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadUInt32();                          break;                      }                  case PlyDataTypes._float:                  case PlyDataTypes._float32:                      {                          result = reverseBytes ? BitConverter.ToSingle(reader.ReadBytes(4).Reverse().ToArray()' 0) : reader.ReadSingle();                          break;                      }                  case PlyDataTypes._double:                      {                          result = reverseBytes ? BitConverter.ToDouble(reader.ReadBytes(8).Reverse().ToArray()' 0) : reader.ReadDouble();                          break;                      }                  default:                      throw new InvalidOperationException("Unimplemented data conversion.");              }
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ParseNormal,The following statement contains a magic number: double y = double.Parse(match.Groups[2].Value' CultureInfo.InvariantCulture);
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ParseNormal,The following statement contains a magic number: double z = double.Parse(match.Groups[3].Value' CultureInfo.InvariantCulture);
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadFloat,The following statement contains a magic number: var bytes = reader.ReadBytes(4);
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadUInt16,The following statement contains a magic number: var bytes = reader.ReadBytes(2);
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadUInt32,The following statement contains a magic number: var bytes = reader.ReadBytes(4);
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,TryParseVertex,The following statement contains a magic number: double y = double.Parse(match.Groups[2].Value' CultureInfo.InvariantCulture);
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,TryParseVertex,The following statement contains a magic number: double z = double.Parse(match.Groups[3].Value' CultureInfo.InvariantCulture);
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: var attrib = Convert.ToString(ReadUInt16(reader)' 2).PadLeft(16' '0').ToCharArray();
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: var attrib = Convert.ToString(ReadUInt16(reader)' 2).PadLeft(16' '0').ToCharArray();
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: int blue = attrib[15].Equals('1') ? 1 : 0;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: blue = attrib[14].Equals('1') ? blue + 2 : blue;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: blue = attrib[14].Equals('1') ? blue + 2 : blue;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: blue = attrib[13].Equals('1') ? blue + 4 : blue;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: blue = attrib[13].Equals('1') ? blue + 4 : blue;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: blue = attrib[12].Equals('1') ? blue + 8 : blue;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: blue = attrib[12].Equals('1') ? blue + 8 : blue;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: blue = attrib[11].Equals('1') ? blue + 16 : blue;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: blue = attrib[11].Equals('1') ? blue + 16 : blue;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: int b = blue * 8;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: int green = attrib[10].Equals('1') ? 1 : 0;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: green = attrib[9].Equals('1') ? green + 2 : green;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: green = attrib[9].Equals('1') ? green + 2 : green;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: green = attrib[8].Equals('1') ? green + 4 : green;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: green = attrib[8].Equals('1') ? green + 4 : green;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: green = attrib[7].Equals('1') ? green + 8 : green;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: green = attrib[7].Equals('1') ? green + 8 : green;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: green = attrib[6].Equals('1') ? green + 16 : green;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: green = attrib[6].Equals('1') ? green + 16 : green;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: int g = green * 8;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: int red = attrib[5].Equals('1') ? 1 : 0;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: red = attrib[4].Equals('1') ? red + 2 : red;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: red = attrib[4].Equals('1') ? red + 2 : red;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: red = attrib[3].Equals('1') ? red + 4 : red;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: red = attrib[3].Equals('1') ? red + 4 : red;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: red = attrib[2].Equals('1') ? red + 8 : red;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: red = attrib[2].Equals('1') ? red + 8 : red;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: red = attrib[1].Equals('1') ? red + 16 : red;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,ReadTriangle,The following statement contains a magic number: int r = red * 8;
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,TryReadBinary,The following statement contains a magic number: length < 84
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,TryReadBinary,The following statement contains a magic number: this.Header = System.Text.Encoding.ASCII.GetString(reader.ReadBytes(80)).Trim();
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,TryReadBinary,The following statement contains a magic number: length - 84 != numberTriangles * 50
Magic Number,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,TryReadBinary,The following statement contains a magic number: length - 84 != numberTriangles * 50
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,Read,The following statement contains a magic number: switch (id)                      {                          case ChunkID.EDIT_MATERIAL:                              this.ReadMaterial(reader' size);                              break;                          case ChunkID.EDIT_OBJECT:                              this.ReadObject(reader' size);                              break;                          case ChunkID.EDIT3DS:                          case ChunkID.OBJ_CAMERA:                          case ChunkID.OBJ_LIGHT:                          case ChunkID.OBJ_TRIMESH:                                // don't read the whole chunk' read the sub-defines...                              break;                            default:                                // download the whole chunk                              this.ReadData(reader' size - 6);                              break;                      }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadFaceList,The following statement contains a magic number: var faces = new List<int>(size * 3);
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadFaceSets,The following statement contains a magic number: int total = 6;
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadFaceSets,The following statement contains a magic number: switch (id)                  {                      case ChunkID.TRI_FACEMAT:                          {                              string name = this.ReadString(reader);                              int n = reader.ReadUInt16();                              var c = new List<int>();                              for (int i = 0; i < n; i++)                              {                                  c.Add(reader.ReadUInt16());                              }                                var fm = new FaceSet { Name = name' Faces = c };                              list.Add(fm);                              break;                          }                        case ChunkID.TRI_SMOOTH:                          {                              this.ReadData(reader' size - 6);                              break;                          }                        default:                          {                              this.ReadData(reader' size - 6);                              break;                          }                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadFaceSets,The following statement contains a magic number: switch (id)                  {                      case ChunkID.TRI_FACEMAT:                          {                              string name = this.ReadString(reader);                              int n = reader.ReadUInt16();                              var c = new List<int>();                              for (int i = 0; i < n; i++)                              {                                  c.Add(reader.ReadUInt16());                              }                                var fm = new FaceSet { Name = name' Faces = c };                              list.Add(fm);                              break;                          }                        case ChunkID.TRI_SMOOTH:                          {                              this.ReadData(reader' size - 6);                              break;                          }                        default:                          {                              this.ReadData(reader' size - 6);                              break;                          }                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadMatMap,The following statement contains a magic number: size -= 14;
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadMaterial,The following statement contains a magic number: int total = 6;
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadMaterial,The following statement contains a magic number: switch (id)                  {                      case ChunkID.MAT_NAME01:                          name = this.ReadString(reader);                            // name = ReadString(size - 6);                          break;                        case ChunkID.MAT_LUMINANCE:                          luminance = this.ReadColor(reader);                          break;                        case ChunkID.MAT_DIFFUSE:                          diffuse = this.ReadColor(reader);                          break;                        case ChunkID.MAT_SPECULAR:                          specular = this.ReadColor(reader);                          break;                        case ChunkID.MAT_SHININESS:                          byte[] bytes = this.ReadData(reader' size - 6);                            // shininess = ReadColor(r' size);                          break;                        case ChunkID.MAT_MAP:                          texture = this.ReadMatMap(reader' size - 6);                          break;                        case ChunkID.MAT_MAPFILE:                          this.ReadData(reader' size - 6);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadMaterial,The following statement contains a magic number: switch (id)                  {                      case ChunkID.MAT_NAME01:                          name = this.ReadString(reader);                            // name = ReadString(size - 6);                          break;                        case ChunkID.MAT_LUMINANCE:                          luminance = this.ReadColor(reader);                          break;                        case ChunkID.MAT_DIFFUSE:                          diffuse = this.ReadColor(reader);                          break;                        case ChunkID.MAT_SPECULAR:                          specular = this.ReadColor(reader);                          break;                        case ChunkID.MAT_SHININESS:                          byte[] bytes = this.ReadData(reader' size - 6);                            // shininess = ReadColor(r' size);                          break;                        case ChunkID.MAT_MAP:                          texture = this.ReadMatMap(reader' size - 6);                          break;                        case ChunkID.MAT_MAPFILE:                          this.ReadData(reader' size - 6);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadMaterial,The following statement contains a magic number: switch (id)                  {                      case ChunkID.MAT_NAME01:                          name = this.ReadString(reader);                            // name = ReadString(size - 6);                          break;                        case ChunkID.MAT_LUMINANCE:                          luminance = this.ReadColor(reader);                          break;                        case ChunkID.MAT_DIFFUSE:                          diffuse = this.ReadColor(reader);                          break;                        case ChunkID.MAT_SPECULAR:                          specular = this.ReadColor(reader);                          break;                        case ChunkID.MAT_SHININESS:                          byte[] bytes = this.ReadData(reader' size - 6);                            // shininess = ReadColor(r' size);                          break;                        case ChunkID.MAT_MAP:                          texture = this.ReadMatMap(reader' size - 6);                          break;                        case ChunkID.MAT_MAPFILE:                          this.ReadData(reader' size - 6);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadMaterial,The following statement contains a magic number: switch (id)                  {                      case ChunkID.MAT_NAME01:                          name = this.ReadString(reader);                            // name = ReadString(size - 6);                          break;                        case ChunkID.MAT_LUMINANCE:                          luminance = this.ReadColor(reader);                          break;                        case ChunkID.MAT_DIFFUSE:                          diffuse = this.ReadColor(reader);                          break;                        case ChunkID.MAT_SPECULAR:                          specular = this.ReadColor(reader);                          break;                        case ChunkID.MAT_SHININESS:                          byte[] bytes = this.ReadData(reader' size - 6);                            // shininess = ReadColor(r' size);                          break;                        case ChunkID.MAT_MAP:                          texture = this.ReadMatMap(reader' size - 6);                          break;                        case ChunkID.MAT_MAPFILE:                          this.ReadData(reader' size - 6);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadMaterial,The following statement contains a magic number: int specularPower = 100;
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadObject,The following statement contains a magic number: int total = 6;
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadObject,The following statement contains a magic number: switch (id)                  {                      case ChunkID.OBJ_TRIMESH:                          this.ReadTriangularMesh(reader' size);                          break;                        // case ChunkID.OBJ_CAMERA:                      default:                          {                              this.ReadData(reader' size - 6);                              break;                          }                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadTriangularMesh,The following statement contains a magic number: int bytesRead = 6;
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadTriangularMesh,The following statement contains a magic number: switch (id)                  {                      case ChunkID.TRI_VERTEXL:                          positions = this.ReadVertexList(reader);                          break;                      case ChunkID.TRI_FACEL1:                          faces = this.ReadFaceList(reader);                          size -= (faces.Count / 3 * 8) + 2;                          faceSets = this.ReadFaceSets(reader' size - 6);                          break;                      case ChunkID.TRI_TEXCOORD:                          textureCoordinates = this.ReadTexCoords(reader);                          break;                      case ChunkID.TRI_LOCAL:                          this.ReadTransformation(reader);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadTriangularMesh,The following statement contains a magic number: switch (id)                  {                      case ChunkID.TRI_VERTEXL:                          positions = this.ReadVertexList(reader);                          break;                      case ChunkID.TRI_FACEL1:                          faces = this.ReadFaceList(reader);                          size -= (faces.Count / 3 * 8) + 2;                          faceSets = this.ReadFaceSets(reader' size - 6);                          break;                      case ChunkID.TRI_TEXCOORD:                          textureCoordinates = this.ReadTexCoords(reader);                          break;                      case ChunkID.TRI_LOCAL:                          this.ReadTransformation(reader);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadTriangularMesh,The following statement contains a magic number: switch (id)                  {                      case ChunkID.TRI_VERTEXL:                          positions = this.ReadVertexList(reader);                          break;                      case ChunkID.TRI_FACEL1:                          faces = this.ReadFaceList(reader);                          size -= (faces.Count / 3 * 8) + 2;                          faceSets = this.ReadFaceSets(reader' size - 6);                          break;                      case ChunkID.TRI_TEXCOORD:                          textureCoordinates = this.ReadTexCoords(reader);                          break;                      case ChunkID.TRI_LOCAL:                          this.ReadTransformation(reader);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadTriangularMesh,The following statement contains a magic number: switch (id)                  {                      case ChunkID.TRI_VERTEXL:                          positions = this.ReadVertexList(reader);                          break;                      case ChunkID.TRI_FACEL1:                          faces = this.ReadFaceList(reader);                          size -= (faces.Count / 3 * 8) + 2;                          faceSets = this.ReadFaceSets(reader' size - 6);                          break;                      case ChunkID.TRI_TEXCOORD:                          textureCoordinates = this.ReadTexCoords(reader);                          break;                      case ChunkID.TRI_LOCAL:                          this.ReadTransformation(reader);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ReadTriangularMesh,The following statement contains a magic number: switch (id)                  {                      case ChunkID.TRI_VERTEXL:                          positions = this.ReadVertexList(reader);                          break;                      case ChunkID.TRI_FACEL1:                          faces = this.ReadFaceList(reader);                          size -= (faces.Count / 3 * 8) + 2;                          faceSets = this.ReadFaceSets(reader' size - 6);                          break;                      case ChunkID.TRI_TEXCOORD:                          textureCoordinates = this.ReadTexCoords(reader);                          break;                      case ChunkID.TRI_LOCAL:                          this.ReadTransformation(reader);                          break;                        default:                          this.ReadData(reader' size - 6);                          break;                  }
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ConvertFaceIndices,The following statement contains a magic number: var triangleIndices = new List<int>(subFaces.Count * 3);
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ConvertFaceIndices,The following statement contains a magic number: triangleIndices.Add(faces[f * 3]);
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ConvertFaceIndices,The following statement contains a magic number: triangleIndices.Add(faces[(f * 3) + 1]);
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ConvertFaceIndices,The following statement contains a magic number: triangleIndices.Add(faces[(f * 3) + 2]);
Magic Number,HelixToolkit.Wpf,StudioReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StudioReader.cs,ConvertFaceIndices,The following statement contains a magic number: triangleIndices.Add(faces[(f * 3) + 2]);
Magic Number,HelixToolkit.Wpf,MaterialExtension,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\MarkupExtensions\MaterialExtension.cs,MaterialExtension,The following statement contains a magic number: this.SpecularPower = 100;
Magic Number,HelixToolkit.Wpf,PerspectiveCameraExtension,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\MarkupExtensions\PerspectiveCameraExtension.cs,PerspectiveCameraExtension,The following statement contains a magic number: this.FieldOfView = 60;
Magic Number,HelixToolkit.Wpf,VerletIntegrator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Physics\VerletIntegrator.cs,VerletIntegrator,The following statement contains a magic number: this.Damping = 0.995f;
Magic Number,HelixToolkit.Wpf,VerletIntegrator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Physics\VerletIntegrator.cs,VerletIntegrator,The following statement contains a magic number: this.Iterations = 4;
Magic Number,HelixToolkit.Wpf,VerletIntegrator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Physics\VerletIntegrator.cs,CreateConstraintsByMesh,The following statement contains a magic number: int i2 = mesh.TriangleIndices[i + 2];
Magic Number,HelixToolkit.Wpf,SphereConstraint,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Physics\VerletIntegrator.cs,Satisfy,The following statement contains a magic number: vs.Positions[this.Index] = this.Center + vec * this.Radius * 1.1;
Magic Number,HelixToolkit.Wpf,DistanceConstraint,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Physics\VerletIntegrator.cs,Satisfy,The following statement contains a magic number: Math.Abs(div) > 1e-8
Magic Number,HelixToolkit.Wpf,BoundingBoxVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\BoundingBoxVisual3D.cs,AddEdge,The following statement contains a magic number: fv.ThetaDiv = 10;
Magic Number,HelixToolkit.Wpf,CoordinateSystemVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\CoordinateSystemVisual3D.cs,OnGeometryChanged,The following statement contains a magic number: double d = l * 0.1;
Magic Number,HelixToolkit.Wpf,Expander3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\Expander3D.cs,ExpandTo,The following statement contains a magic number: var a = new DoubleAnimation(value' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                     AccelerationRatio = 0.3' DecelerationRatio = 0.5                  };
Magic Number,HelixToolkit.Wpf,Expander3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\Expander3D.cs,ExpandTo,The following statement contains a magic number: var a = new DoubleAnimation(value' new Duration(TimeSpan.FromMilliseconds(animationTime)))                  {                     AccelerationRatio = 0.3' DecelerationRatio = 0.5                  };
Magic Number,HelixToolkit.Wpf,LightVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\LightVisual3D.cs,OnLightChanged,The following statement contains a magic number: double distance = 10;
Magic Number,HelixToolkit.Wpf,LightVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\LightVisual3D.cs,OnLightChanged,The following statement contains a magic number: double length = 5;
Magic Number,HelixToolkit.Wpf,LightVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\LightVisual3D.cs,OnLightChanged,The following statement contains a magic number: arrow.Diameter = 0.1 * length;
Magic Number,HelixToolkit.Wpf,LightVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\LightVisual3D.cs,OnLightChanged,The following statement contains a magic number: arrow.Diameter = 0.1;
Magic Number,HelixToolkit.Wpf,MeshNormalsVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\MeshNormalsVisual3D.cs,OnMeshChanged,The following statement contains a magic number: builder.AddArrow(                      this.Mesh.Positions[i]' this.Mesh.Positions[i] + this.Mesh.Normals[i]' this.Diameter' 3' 10);
Magic Number,HelixToolkit.Wpf,MeshNormalsVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\MeshNormalsVisual3D.cs,OnMeshChanged,The following statement contains a magic number: builder.AddArrow(                      this.Mesh.Positions[i]' this.Mesh.Positions[i] + this.Mesh.Normals[i]' this.Diameter' 3' 10);
Magic Number,HelixToolkit.Wpf,MeshVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\MeshVisual3D.cs,UpdateVisuals,The following statement contains a magic number: em.AddCylinder(p0' p1' this.EdgeDiameter' 4);
Magic Number,HelixToolkit.Wpf,PanoramaCube3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\PanoramaCube3D.cs,AddCubeSide,The following statement contains a magic number: double f = this.ShowSeams ? 0.995 : 1;
Magic Number,HelixToolkit.Wpf,PanoramaCube3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\PanoramaCube3D.cs,AddCubeSide,The following statement contains a magic number: mesh.TriangleIndices.Add(2);
Magic Number,HelixToolkit.Wpf,PanoramaCube3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\PanoramaCube3D.cs,AddCubeSide,The following statement contains a magic number: mesh.TriangleIndices.Add(2);
Magic Number,HelixToolkit.Wpf,PanoramaCube3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\PanoramaCube3D.cs,AddCubeSide,The following statement contains a magic number: mesh.TriangleIndices.Add(3);
Magic Number,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,OnCompositionTargetRendering,The following statement contains a magic number: double time = 100e-9 * (e.RenderingTime.Ticks - this.startTick);
Magic Number,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,GetCameraDistance,The following statement contains a magic number: switch (this.Method)              {                  case SortingMethod.BoundingBoxCenter:                      var mid = new Point3D(                          bounds.X + bounds.SizeX * 0.5' bounds.Y + bounds.SizeY * 0.5' bounds.Z + bounds.SizeZ * 0.5);                      return (mid - cameraPos).LengthSquared;                  case SortingMethod.BoundingBoxCorners:                      double d = double.MaxValue;                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y' bounds.Z)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y + bounds.SizeY' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y + bounds.SizeY' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d'                          cameraPos.DistanceTo(                              new Point3D(bounds.X + bounds.SizeX' bounds.Y + bounds.SizeY' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y + bounds.SizeY' bounds.Z + bounds.SizeZ)));                      return d;                  default:                      var boundingSphere = BoundingSphere.CreateFromRect3D(bounds);                      return boundingSphere.DistanceFrom(cameraPos);              }
Magic Number,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,GetCameraDistance,The following statement contains a magic number: switch (this.Method)              {                  case SortingMethod.BoundingBoxCenter:                      var mid = new Point3D(                          bounds.X + bounds.SizeX * 0.5' bounds.Y + bounds.SizeY * 0.5' bounds.Z + bounds.SizeZ * 0.5);                      return (mid - cameraPos).LengthSquared;                  case SortingMethod.BoundingBoxCorners:                      double d = double.MaxValue;                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y' bounds.Z)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y + bounds.SizeY' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y + bounds.SizeY' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d'                          cameraPos.DistanceTo(                              new Point3D(bounds.X + bounds.SizeX' bounds.Y + bounds.SizeY' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y + bounds.SizeY' bounds.Z + bounds.SizeZ)));                      return d;                  default:                      var boundingSphere = BoundingSphere.CreateFromRect3D(bounds);                      return boundingSphere.DistanceFrom(cameraPos);              }
Magic Number,HelixToolkit.Wpf,SortingVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\SortingVisual3D.cs,GetCameraDistance,The following statement contains a magic number: switch (this.Method)              {                  case SortingMethod.BoundingBoxCenter:                      var mid = new Point3D(                          bounds.X + bounds.SizeX * 0.5' bounds.Y + bounds.SizeY * 0.5' bounds.Z + bounds.SizeZ * 0.5);                      return (mid - cameraPos).LengthSquared;                  case SortingMethod.BoundingBoxCorners:                      double d = double.MaxValue;                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y' bounds.Z)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y + bounds.SizeY' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y + bounds.SizeY' bounds.Z)));                      d = Math.Min(d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X + bounds.SizeX' bounds.Y' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d'                          cameraPos.DistanceTo(                              new Point3D(bounds.X + bounds.SizeX' bounds.Y + bounds.SizeY' bounds.Z + bounds.SizeZ)));                      d = Math.Min(                          d' cameraPos.DistanceTo(new Point3D(bounds.X' bounds.Y + bounds.SizeY' bounds.Z + bounds.SizeZ)));                      return d;                  default:                      var boundingSphere = BoundingSphere.CreateFromRect3D(bounds);                      return boundingSphere.DistanceFrom(cameraPos);              }
Magic Number,HelixToolkit.Wpf,VectorFieldVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\VectorFieldVisual3D.cs,VectorFieldVisual3D,The following statement contains a magic number: this.ThetaDiv = 37;
Magic Number,HelixToolkit.Wpf,VectorFieldVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\VectorFieldVisual3D.cs,VectorFieldVisual3D,The following statement contains a magic number: this.HeadLength = 2;
Magic Number,HelixToolkit.Wpf,VectorFieldVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\VectorFieldVisual3D.cs,CreateGeometry,The following statement contains a magic number: double r = this.Diameter / 2;
Magic Number,HelixToolkit.Wpf,VectorFieldVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\VectorFieldVisual3D.cs,CreateGeometry,The following statement contains a magic number: var pc = new PointCollection { new Point(-l' r)' new Point(-l' r * 2)' new Point(0' 0) };
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,InitialModels,The following statement contains a magic number: i < 6
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: AddCubeFace(CubeFaceModels[2]' vecLeft' vecUp' GetCubefaceColor(2)' this.LeftText);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: AddCubeFace(CubeFaceModels[2]' vecLeft' vecUp' GetCubefaceColor(2)' this.LeftText);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: AddCubeFace(CubeFaceModels[3]' -vecLeft' vecUp' GetCubefaceColor(3)' this.RightText);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: AddCubeFace(CubeFaceModels[3]' -vecLeft' vecUp' GetCubefaceColor(3)' this.RightText);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: AddCubeFace(CubeFaceModels[4]' vecUp' vecFront' GetCubefaceColor(4)' this.TopText);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: AddCubeFace(CubeFaceModels[4]' vecUp' vecFront' GetCubefaceColor(4)' this.TopText);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: AddCubeFace(CubeFaceModels[5]' -vecUp' -vecFront' GetCubefaceColor(5)' this.BottomText);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: AddCubeFace(CubeFaceModels[5]' -vecUp' -vecFront' GetCubefaceColor(5)' this.BottomText);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: circle.Center = (this.ModelUpDirection * (-this.Size / 2)).ToPoint3D();
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: circle.OuterRadius = this.Size * 1.3;
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,UpdateVisuals,The following statement contains a magic number: circle.EndAngle = 360;
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,GetCubefaceColor,The following statement contains a magic number: switch (index)              {                  case 0:                  case 1:                      return Brushes.Red;                  case 2:                  case 3:                      if (ModelUpDirection.Z < 1)                      {                          return Brushes.Blue;                      }                      else                      {                          return Brushes.Green;                      }                  case 4:                  case 5:                      if (ModelUpDirection.Z < 1)                      {                          return Brushes.Green;                      }                      else                      {                          return Brushes.Blue;                      }                  default:                      return Brushes.White;              }
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,GetCubefaceColor,The following statement contains a magic number: switch (index)              {                  case 0:                  case 1:                      return Brushes.Red;                  case 2:                  case 3:                      if (ModelUpDirection.Z < 1)                      {                          return Brushes.Blue;                      }                      else                      {                          return Brushes.Green;                      }                  case 4:                  case 5:                      if (ModelUpDirection.Z < 1)                      {                          return Brushes.Green;                      }                      else                      {                          return Brushes.Blue;                      }                  default:                      return Brushes.White;              }
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,GetCubefaceColor,The following statement contains a magic number: switch (index)              {                  case 0:                  case 1:                      return Brushes.Red;                  case 2:                  case 3:                      if (ModelUpDirection.Z < 1)                      {                          return Brushes.Blue;                      }                      else                      {                          return Brushes.Green;                      }                  case 4:                  case 5:                      if (ModelUpDirection.Z < 1)                      {                          return Brushes.Green;                      }                      else                      {                          return Brushes.Blue;                      }                  default:                      return Brushes.White;              }
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,GetCubefaceColor,The following statement contains a magic number: switch (index)              {                  case 0:                  case 1:                      return Brushes.Red;                  case 2:                  case 3:                      if (ModelUpDirection.Z < 1)                      {                          return Brushes.Blue;                      }                      else                      {                          return Brushes.Green;                      }                  case 4:                  case 5:                      if (ModelUpDirection.Z < 1)                      {                          return Brushes.Green;                      }                      else                      {                          return Brushes.Blue;                      }                  default:                      return Brushes.White;              }
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddEdges,The following statement contains a magic number: var halfSize = Size / 2;
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddEdges,The following statement contains a magic number: var sideLength = halfSize / 2;
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddEdges,The following statement contains a magic number: AddEdge(EdgeModels[counter++]' center' 1.5 * halfSize' sideLength' sideLength' p.ToVector3D());
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddEdges,The following statement contains a magic number: AddEdge(EdgeModels[counter++]' center' sideLength' 1.5 * halfSize' sideLength' p.ToVector3D());
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddEdges,The following statement contains a magic number: AddEdge(EdgeModels[counter++]' center' sideLength' sideLength' 1.5 * halfSize' p.ToVector3D());
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddCorners,The following statement contains a magic number: var a = Size / 2;
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,AddCorners,The following statement contains a magic number: var sideLength = a / 2;
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: var grid = new Grid { Width = 20' Height = 20' Background = b };
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: var grid = new Grid { Width = 20' Height = 20' Background = b };
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: grid.Children.Add(                  new TextBlock                  {                      Text = text'                      VerticalAlignment = VerticalAlignment.Center'                      HorizontalAlignment = HorizontalAlignment.Center'                      FontSize = 15'                      Foreground = Brushes.White                  });
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: grid.Arrange(new Rect(new Point(0' 0)' new Size(20' 20)));
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: grid.Arrange(new Rect(new Point(0' 0)' new Size(20' 20)));
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: var bmp = new RenderTargetBitmap((int)grid.Width' (int)grid.Height' 96' 96' PixelFormats.Default);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: var bmp = new RenderTargetBitmap((int)grid.Width' (int)grid.Height' 96' 96' PixelFormats.Default);
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,FaceMouseLeftButtonDown,The following statement contains a magic number: e.ClickCount == 2
Magic Number,HelixToolkit.Wpf,ViewCubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\ViewCubeVisual3D.cs,FaceMouseLeftButtonDown,The following statement contains a magic number: CameraHelper.AnimateTo(camera' newPosition' lookDirection' upDirection' 500);
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(180' 180' 180)' new Vector3D(-1' -1' -1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(180' 180' 180)' new Vector3D(-1' -1' -1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(180' 180' 180)' new Vector3D(-1' -1' -1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(120' 120' 120)' new Vector3D(1' -1' -0.1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(120' 120' 120)' new Vector3D(1' -1' -0.1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(120' 120' 120)' new Vector3D(1' -1' -0.1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(120' 120' 120)' new Vector3D(1' -1' -0.1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(60' 60' 60)' new Vector3D(0.1' 1' -1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(60' 60' 60)' new Vector3D(0.1' 1' -1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(60' 60' 60)' new Vector3D(0.1' 1' -1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(60' 60' 60)' new Vector3D(0.1' 1' -1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(50' 50' 50)' new Vector3D(0.1' 0.1' 1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(50' 50' 50)' new Vector3D(0.1' 0.1' 1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(50' 50' 50)' new Vector3D(0.1' 0.1' 1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(50' 50' 50)' new Vector3D(0.1' 0.1' 1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new DirectionalLight(Color.FromRgb(50' 50' 50)' new Vector3D(0.1' 0.1' 1)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new AmbientLight(Color.FromRgb(30' 30' 30)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new AmbientLight(Color.FromRgb(30' 30' 30)));
Magic Number,HelixToolkit.Wpf,DefaultLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\DefaultLights.cs,AddLights,The following statement contains a magic number: lightGroup.Children.Add(new AmbientLight(Color.FromRgb(30' 30' 30)));
Magic Number,HelixToolkit.Wpf,GenericHeadLight<T>,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\GenericHeadLight.cs,Update,The following statement contains a magic number: var a = (byte)(this.Brightness * 255);
Magic Number,HelixToolkit.Wpf,GenericHeadLight<T>,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\GenericHeadLight.cs,Update,The following statement contains a magic number: this.light.Color = Color.FromArgb(255' a' a' a);
Magic Number,HelixToolkit.Wpf,LightSetup,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\LightSetup.cs,OnShowLightsChanged,The following statement contains a magic number: var source = target - (dir * 20);
Magic Number,HelixToolkit.Wpf,LightSetup,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\LightSetup.cs,OnShowLightsChanged,The following statement contains a magic number: var p2 = source + (dir * 10);
Magic Number,HelixToolkit.Wpf,LightSetup,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\LightSetup.cs,OnShowLightsChanged,The following statement contains a magic number: arrow.Diameter = 0.5;
Magic Number,HelixToolkit.Wpf,LightSetup,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\LightSetup.cs,OnShowLightsChanged,The following statement contains a magic number: var pos = new Point3D(0' 0' 20);
Magic Number,HelixToolkit.Wpf,SunLight,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\SunLight.cs,AddLights,The following statement contains a magic number: var i = (byte)(255 * this.Brightness);
Magic Number,HelixToolkit.Wpf,SunLight,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\SunLight.cs,AddLights,The following statement contains a magic number: var ai = (byte)(255 * this.Ambient);
Magic Number,HelixToolkit.Wpf,ThreePointLights,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\LightSetups\ThreePointLights.cs,AddLights,The following statement contains a magic number: var i = (byte)(255 * this.KeyLightBrightness);
Magic Number,HelixToolkit.Wpf,BindableRotateManipulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Manipulators\BindableRotateManipulator.cs,UpdateGeometry,The following statement contains a magic number: var p1 = p0 - (d * this.Length * 0.5);
Magic Number,HelixToolkit.Wpf,BindableRotateManipulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Manipulators\BindableRotateManipulator.cs,UpdateGeometry,The following statement contains a magic number: var p2 = p0 + (d * this.Length * 0.5);
Magic Number,HelixToolkit.Wpf,BindableRotateManipulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Manipulators\BindableRotateManipulator.cs,UpdateGeometry,The following statement contains a magic number: mb.AddPipe(p1' p2' this.InnerDiameter' this.Diameter' 60);
Magic Number,HelixToolkit.Wpf,BindableRotateManipulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Manipulators\BindableRotateManipulator.cs,OnMouseMove,The following statement contains a magic number: double theta = Math.Sign(sign) * Math.Asin(currentAxis.Length) / Math.PI * 180;
Magic Number,HelixToolkit.Wpf,RotateManipulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Manipulators\RotateManipulator.cs,UpdateGeometry,The following statement contains a magic number: var p1 = p0 - (d * this.Length * 0.5);
Magic Number,HelixToolkit.Wpf,RotateManipulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Manipulators\RotateManipulator.cs,UpdateGeometry,The following statement contains a magic number: var p2 = p0 + (d * this.Length * 0.5);
Magic Number,HelixToolkit.Wpf,RotateManipulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Manipulators\RotateManipulator.cs,UpdateGeometry,The following statement contains a magic number: mb.AddPipe(p1' p2' this.InnerDiameter' this.Diameter' 60);
Magic Number,HelixToolkit.Wpf,RotateManipulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Manipulators\RotateManipulator.cs,OnMouseMove,The following statement contains a magic number: double theta = Math.Sign(sign) * Math.Asin(currentAxis.Length) / Math.PI * 180;
Magic Number,HelixToolkit.Wpf,ExtrudedVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ExtrudedVisual3D.cs,Tessellate,The following statement contains a magic number: this.Path == null || this.Path.Count < 2
Magic Number,HelixToolkit.Wpf,ExtrudedVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ExtrudedVisual3D.cs,Tessellate,The following statement contains a magic number: sectionXAxis.Length < 1e-6
Magic Number,HelixToolkit.Wpf,ExtrudedVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ExtrudedVisual3D.cs,Tessellate,The following statement contains a magic number: up.LengthSquared < 1e-6
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,Tessellate,The following statement contains a magic number: var rotate = new RotateTransform3D(new AxisAngleRotation3D(this.Normal' 90.0));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,Tessellate,The following statement contains a magic number: double minX = -this.Width / 2;
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,Tessellate,The following statement contains a magic number: double minY = -this.Length / 2;
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,Tessellate,The following statement contains a magic number: double maxX = this.Width / 2;
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,Tessellate,The following statement contains a magic number: double maxY = this.Length / 2;
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,Tessellate,The following statement contains a magic number: double eps = this.MinorDistance / 10;
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,Tessellate,The following statement contains a magic number: t *= 2;
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,Tessellate,The following statement contains a magic number: t *= 2;
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,IsMultipleOf,The following statement contains a magic number: return Math.Abs(y - y2) < 1e-3;
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineX,The following statement contains a magic number: mesh.Positions.Add(this.GetPoint(x - (thickness / 2)' minY));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineX,The following statement contains a magic number: mesh.Positions.Add(this.GetPoint(x - (thickness / 2)' maxY));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineX,The following statement contains a magic number: mesh.Positions.Add(this.GetPoint(x + (thickness / 2)' maxY));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineX,The following statement contains a magic number: mesh.Positions.Add(this.GetPoint(x + (thickness / 2)' minY));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineX,The following statement contains a magic number: mesh.TriangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineX,The following statement contains a magic number: mesh.TriangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineX,The following statement contains a magic number: mesh.TriangleIndices.Add(i0 + 3);
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineY,The following statement contains a magic number: mesh.Positions.Add(this.GetPoint(minX' y + (thickness / 2)));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineY,The following statement contains a magic number: mesh.Positions.Add(this.GetPoint(maxX' y + (thickness / 2)));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineY,The following statement contains a magic number: mesh.Positions.Add(this.GetPoint(maxX' y - (thickness / 2)));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineY,The following statement contains a magic number: mesh.Positions.Add(this.GetPoint(minX' y - (thickness / 2)));
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineY,The following statement contains a magic number: mesh.TriangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineY,The following statement contains a magic number: mesh.TriangleIndices.Add(i0 + 2);
Magic Number,HelixToolkit.Wpf,GridLinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\GridLinesVisual3D.cs,AddLineY,The following statement contains a magic number: mesh.TriangleIndices.Add(i0 + 3);
Magic Number,HelixToolkit.Wpf,HelixVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\HelixVisual3D.cs,Evaluate,The following statement contains a magic number: v *= 2 * Math.PI;
Magic Number,HelixToolkit.Wpf,HelixVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\HelixVisual3D.cs,Evaluate,The following statement contains a magic number: double b = this.Turns * 2 * Math.PI;
Magic Number,HelixToolkit.Wpf,HelixVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\HelixVisual3D.cs,Evaluate,The following statement contains a magic number: double r = this.Radius / 2;
Magic Number,HelixToolkit.Wpf,HelixVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\HelixVisual3D.cs,Evaluate,The following statement contains a magic number: double p = this.Phase / 180 * Math.PI;
Magic Number,HelixToolkit.Wpf,HelixVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\HelixVisual3D.cs,Evaluate,The following statement contains a magic number: double x = r * Math.Cos((b * u) + p) * (2 + (dr * Math.Cos(v)));
Magic Number,HelixToolkit.Wpf,HelixVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\HelixVisual3D.cs,Evaluate,The following statement contains a magic number: double y = r * Math.Sin((b * u) + p) * (2 + (dr * Math.Cos(v)));
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,TextureChanged,The following statement contains a magic number: var w = 256;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,TextureChanged,The following statement contains a magic number: var h = 256;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,TextureChanged,The following statement contains a magic number: var bitmap = new RenderTargetBitmap(opacityLevels * w' h' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,TextureChanged,The following statement contains a magic number: var bitmap = new RenderTargetBitmap(opacityLevels * w' h' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,EmitOne,The following statement contains a magic number: var speed = this.StartVelocity + (this.StartVelocityRandomness * (r.NextDouble() - 0.5));
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: positions = new Point3DCollection(alive * 4);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: textureCoordinates = new PointCollection(alive * 4);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: triangleIndices = new Int32Collection(alive * 6);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: int previousAliveParticles = positions.Count / 4;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: AdjustListLength(positions' alive * 4);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: AdjustListLength(textureCoordinates' alive * 4);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: AdjustListLength(triangleIndices' alive * 6);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: var i4 = i * 4;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: var i6 = i * 6;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: triangleIndices[i6 + 2] = i4 + 2;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: triangleIndices[i6 + 2] = i4 + 2;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: triangleIndices[i6 + 3] = i4 + 2;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: triangleIndices[i6 + 3] = i4 + 2;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: triangleIndices[i6 + 4] = i4 + 3;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: triangleIndices[i6 + 4] = i4 + 3;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: triangleIndices[i6 + 5] = i4;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: positions.Count != alive * 4
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: var halfSize = p.Size * 0.5;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: var j4 = j * 4;
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: positions[j4 + 2] = pos + (x * p2.X) + (y * p2.Y);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: positions[j4 + 3] = pos + (x * p3.X) + (y * p3.Y);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: textureCoordinates[j4 + 2] = new Point(u0' 0);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,Update,The following statement contains a magic number: textureCoordinates[j4 + 3] = new Point(u0' 1);
Magic Number,HelixToolkit.Wpf,ParticleSystem,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\ParticleSystem.cs,OnCompositionTargetRendering,The following statement contains a magic number: this.Update(this.watch.ElapsedMilliseconds * 0.001);
Magic Number,HelixToolkit.Wpf,PieSliceVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\PieSliceVisual3D.cs,Tessellate,The following statement contains a magic number: double angleRad = angle / 180 * Math.PI;
Magic Number,HelixToolkit.Wpf,RectangleVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\RectangleVisual3D.cs,Tessellate,The following statement contains a magic number: double fi = -0.5 + ((double)i / (this.DivLength - 1));
Magic Number,HelixToolkit.Wpf,RectangleVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\RectangleVisual3D.cs,Tessellate,The following statement contains a magic number: double fj = -0.5 + ((double)j / (this.DivWidth - 1));
Magic Number,HelixToolkit.Wpf,RectangleVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\RectangleVisual3D.cs,CoerceDivValue,The following statement contains a magic number: return Math.Max(2' (int)baseValue);
Magic Number,HelixToolkit.Wpf,TubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\TubeVisual3D.cs,OnSectionChanged,The following statement contains a magic number: double r = this.Diameters != null ? 1 : this.Diameter / 2;
Magic Number,HelixToolkit.Wpf,TubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\TubeVisual3D.cs,Tessellate,The following statement contains a magic number: this.Path == null || this.Path.Count < 2
Magic Number,HelixToolkit.Wpf,TubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\TubeVisual3D.cs,Tessellate,The following statement contains a magic number: sectionXAxis.Length < 1e-6
Magic Number,HelixToolkit.Wpf,TubeVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\MeshVisuals\TubeVisual3D.cs,Tessellate,The following statement contains a magic number: up.LengthSquared < 1e-6
Magic Number,HelixToolkit.Wpf,LinesVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\ScreenSpaceVisuals\LinesVisual3D.cs,UpdateGeometry,The following statement contains a magic number: this.Mesh.TriangleIndices.Count != n * 3
Magic Number,HelixToolkit.Wpf,PointsVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\ScreenSpaceVisuals\PointsVisual3D.cs,UpdateGeometry,The following statement contains a magic number: this.Mesh.TriangleIndices.Count != n * 6
Magic Number,HelixToolkit.Wpf,ScreenSpaceVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\ScreenSpaceVisuals\ScreenSpaceVisual3D.cs,UpdateClipping,The following statement contains a magic number: this.Clipping = new CohenSutherlandClipping(10' vp.ActualWidth - 20' 10' vp.ActualHeight - 20);
Magic Number,HelixToolkit.Wpf,ScreenSpaceVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\ScreenSpaceVisuals\ScreenSpaceVisual3D.cs,UpdateClipping,The following statement contains a magic number: this.Clipping = new CohenSutherlandClipping(10' vp.ActualWidth - 20' 10' vp.ActualHeight - 20);
Magic Number,HelixToolkit.Wpf,ScreenSpaceVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\ScreenSpaceVisuals\ScreenSpaceVisual3D.cs,UpdateClipping,The following statement contains a magic number: this.Clipping = new CohenSutherlandClipping(10' vp.ActualWidth - 20' 10' vp.ActualHeight - 20);
Magic Number,HelixToolkit.Wpf,ScreenSpaceVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\ScreenSpaceVisuals\ScreenSpaceVisual3D.cs,UpdateClipping,The following statement contains a magic number: this.Clipping = new CohenSutherlandClipping(10' vp.ActualWidth - 20' 10' vp.ActualHeight - 20);
Magic Number,HelixToolkit.Wpf,TerrainModel,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainModel.cs,CreateModel,The following statement contains a magic number: double mx = (this.Left + this.Right) / 2;
Magic Number,HelixToolkit.Wpf,TerrainModel,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainModel.cs,CreateModel,The following statement contains a magic number: double my = (this.Top + this.Bottom) / 2;
Magic Number,HelixToolkit.Wpf,TerrainModel,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainModel.cs,CreateModel,The following statement contains a magic number: double mz = (this.MinimumZ + this.MaximumZ) / 2;
Magic Number,HelixToolkit.Wpf,TerrainModel,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainModel.cs,ReadTerrainFile,The following statement contains a magic number: var buffer = reader.ReadBytes(10);
Magic Number,HelixToolkit.Wpf,TerrainModel,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainModel.cs,ReadTerrainFile,The following statement contains a magic number: var version = marker.Substring(7);
Magic Number,HelixToolkit.Wpf,TerrainModel,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainModel.cs,ReadTerrainFile,The following statement contains a magic number: var padding = reader.ReadBytes(190);
Magic Number,HelixToolkit.Wpf,TerrainModel,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainModel.cs,ReadTerrainFile,The following statement contains a magic number: dataSize == 2
Magic Number,HelixToolkit.Wpf,TerrainVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainVisual3D.cs,UpdateModel,The following statement contains a magic number: r.Texture = new SlopeTexture(8);
Magic Number,HelixToolkit.Wpf,TerrainVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainVisual3D.cs,UpdateModel,The following statement contains a magic number: this.visualChild.Content = r.CreateModel(2);
Magic Number,HelixToolkit.Wpf,SlopeDirectionTexture,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\Textures\SlopeDirectionTexture.cs,Calculate,The following statement contains a magic number: double slopedir = Math.Atan2(normals[i].Y' normals[i].X) * 180 / Math.PI;
Magic Number,HelixToolkit.Wpf,SlopeDirectionTexture,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\Textures\SlopeDirectionTexture.cs,Calculate,The following statement contains a magic number: slopedir += 360;
Magic Number,HelixToolkit.Wpf,SlopeDirectionTexture,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\Textures\SlopeDirectionTexture.cs,Calculate,The following statement contains a magic number: double u = slopedir / 360;
Magic Number,HelixToolkit.Wpf,SlopeTexture,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\Textures\SlopeTexture.cs,Calculate,The following statement contains a magic number: double slope = Math.Acos(Vector3D.DotProduct(normals[i]' up)) * 180 / Math.PI;
Magic Number,HelixToolkit.Wpf,SlopeTexture,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\Textures\SlopeTexture.cs,Calculate,The following statement contains a magic number: double u = slope / 40;
Magic Number,HelixToolkit.Wpf,BillboardTextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\BillboardTextVisual3D.cs,VisualChanged,The following statement contains a magic number: element.Measure(new Size(1000' 1000));
Magic Number,HelixToolkit.Wpf,BillboardTextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\BillboardTextVisual3D.cs,VisualChanged,The following statement contains a magic number: element.Measure(new Size(1000' 1000));
Magic Number,HelixToolkit.Wpf,BillboardTextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\BillboardTextVisual3D.cs,VisualChanged,The following statement contains a magic number: var rtb = new RenderTargetBitmap(                  (int)element.ActualWidth + 1' (int)element.ActualHeight + 1' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,BillboardTextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\BillboardTextVisual3D.cs,VisualChanged,The following statement contains a magic number: var rtb = new RenderTargetBitmap(                  (int)element.ActualWidth + 1' (int)element.ActualHeight + 1' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: double maxWidth = 16;
Magic Number,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: e.Measure(new Size(2048' 2048));
Magic Number,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: e.Measure(new Size(2048' 2048));
Magic Number,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: var pw = (int)Math.Ceiling(OptimizeSize(panel' maxWidth' 1024));
Magic Number,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: var rtb = new RenderTargetBitmap(pw' ph' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,CreateTextMaterial,The following statement contains a magic number: var rtb = new RenderTargetBitmap(pw' ph' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,VisualChanged,The following statement contains a magic number: var xa = -0.5;
Magic Number,HelixToolkit.Wpf,TextGroupVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextGroupVisual3D.cs,VisualChanged,The following statement contains a magic number: var ya = -0.5;
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: element.Measure(new Size(1000' 1000));
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: element.Measure(new Size(1000' 1000));
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: var rtb = new RenderTargetBitmap(                      (int)element.ActualWidth + 1' (int)element.ActualHeight + 1' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: var rtb = new RenderTargetBitmap(                      (int)element.ActualWidth + 1' (int)element.ActualHeight + 1' 96' 96' PixelFormats.Pbgra32);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: var xa = -0.5;
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: var ya = -0.5;
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(3);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(2);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(3);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(4);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(5);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(7);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(4);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(7);
Magic Number,HelixToolkit.Wpf,TextVisual3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Text\TextVisual3D.cs,VisualChanged,The following statement contains a magic number: mg.TriangleIndices.Add(6);
Missing Default,HelixToolkit.Wpf,SweepLinePolygonTriangulator,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Shared\Geometry\SweepLinePolygonTriangulator.cs,CalculateDiagonals,The following switch statement is missing a default case: switch (evClass)                  {                      case PolygonPointClass.Start:                          // Just add the left Edge (depending on the sweeping direction)                          statusAndHelper.Add(new StatusHelperElement(sweepDown ? ev.EdgeTwo : ev.EdgeOne' ev));                          break;                      case PolygonPointClass.Stop:                          // Just remove the left Edge (depending on the sweeping direction)                          statusAndHelper.Remove(sweepDown ? ev.EdgeOne : ev.EdgeTwo);                          break;                      case PolygonPointClass.Regular:                          // If the Polygon is positioned on the right Side of this Event                          if (ev.Last > ev.Next)                          {                              // Replace the corresponding (old) StatusHelperElement with the new one                              statusAndHelper.Remove(sweepDown ? ev.EdgeOne : ev.EdgeTwo);                              statusAndHelper.Add(new StatusHelperElement(sweepDown ? ev.EdgeTwo : ev.EdgeOne' ev));                          }                          else                          {                              // Search Edge left of the Event and set Event as it's Helper                              she = statusAndHelper.SearchLeft(ev);                              if (she != null)                                  she.Helper = ev;                          }                          break;                      case PolygonPointClass.Merge:                          // Just remove the left Edge (depending on the sweeping direction)                          statusAndHelper.Remove(sweepDown ? ev.EdgeOne : ev.EdgeTwo);                          // Search Edge left of the Event and set Event as it's Helper                          she = statusAndHelper.SearchLeft(ev);                          if (she != null)                              she.Helper = ev;                          break;                      case PolygonPointClass.Split:                          // Search Edge left of the Event                          she = statusAndHelper.SearchLeft(ev);                          if (she != null)                          {                              // Chose diagonal from Helper of Edge to Event.                              var minP = Math.Min(she.Helper.Index' ev.Index);                              var maxP = Math.Max(she.Helper.Index' ev.Index);                              var diagonal = new Tuple<int' int>(minP' maxP);                              diagonals.Add(diagonal);                                // Replace the Helper of the StatusHelperElement by Event                              she.Helper = ev;                              // Insert the right Edge from Event                              statusAndHelper.Add(new StatusHelperElement(sweepDown ? ev.EdgeTwo : ev.EdgeOne' ev));                          }                          break;                  }
Missing Default,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)                  {                      case Key.Left:                          this.AddRotateForce(-1 * f * this.LeftRightRotationSensitivity' 0);                          e.Handled = true;                          break;                      case Key.Right:                          this.AddRotateForce(1 * f * this.LeftRightRotationSensitivity' 0);                          e.Handled = true;                          break;                      case Key.Up:                          this.AddRotateForce(0' -1 * f * this.UpDownRotationSensitivity);                          e.Handled = true;                          break;                      case Key.Down:                          this.AddRotateForce(0' 1 * f * this.UpDownRotationSensitivity);                          e.Handled = true;                          break;                  }
Missing Default,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)                  {                      case Key.Left:                          this.AddPanForce(-5 * f * this.LeftRightPanSensitivity' 0);                          e.Handled = true;                          break;                      case Key.Right:                          this.AddPanForce(5 * f * this.LeftRightPanSensitivity' 0);                          e.Handled = true;                          break;                      case Key.Up:                          this.AddPanForce(0' -5 * f * this.UpDownPanSensitivity);                          e.Handled = true;                          break;                      case Key.Down:                          this.AddPanForce(0' 5 * f * this.UpDownPanSensitivity);                          e.Handled = true;                          break;                  }
Missing Default,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.PageUp:                      this.AddZoomForce(-0.1 * f * this.PageUpDownZoomSensitivity);                      e.Handled = true;                      break;                  case Key.PageDown:                      this.AddZoomForce(0.1 * f * this.PageUpDownZoomSensitivity);                      e.Handled = true;                      break;                  case Key.Back:                      if (this.RestoreCameraSetting())                      {                          e.Handled = true;                      }                        break;              }
Missing Default,HelixToolkit.Wpf,CameraController,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\CameraController.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.W:                      this.AddMoveForce(0' 0' 0.1 * f * this.MoveSensitivity);                      break;                  case Key.A:                      this.AddMoveForce(-0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.S:                      this.AddMoveForce(0' 0' -0.1 * f * this.MoveSensitivity);                      break;                  case Key.D:                      this.AddMoveForce(0.1 * f * this.LeftRightPanSensitivity' 0' 0);                      break;                  case Key.Z:                      this.AddMoveForce(0' -0.1 * f * this.LeftRightPanSensitivity' 0);                      break;                  case Key.Q:                      this.AddMoveForce(0' 0.1 * f * this.LeftRightPanSensitivity' 0);                      break;              }
Missing Default,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,Rotate,The following switch statement is missing a default case: switch (this.Controller.CameraRotationMode)              {                  case CameraRotationMode.Trackball:                      this.RotateTrackball(p0' p1' rotateAround);                      break;                  case CameraRotationMode.Turntable:                      this.RotateTurntable(p1 - p0' rotateAround);                      break;                  case CameraRotationMode.Turnball:                      this.RotateTurnball(p0' p1' rotateAround);                      break;              }
Missing Default,HelixToolkit.Wpf,RotateHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\RotateHandler.cs,Started,The following switch statement is missing a default case: switch (this.Controller.CameraRotationMode)              {                  case CameraRotationMode.Trackball:                      break;                  case CameraRotationMode.Turntable:                      break;                  case CameraRotationMode.Turnball:                      this.InitTurnballRotationAxes(e.CurrentPosition);                      break;              }
Missing Default,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingCameraPosition,The following switch statement is missing a default case: switch (this.CameraMode)              {                  case CameraMode.Inspect:                      this.ChangeCameraDistance(delta' zoomAround);                      break;                  case CameraMode.WalkAround:                      this.CameraPosition -= this.CameraLookDirection * delta;                      break;              }
Missing Default,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,MoveCameraPosition,The following switch statement is missing a default case: switch (this.CameraMode)              {                  case CameraMode.Inspect:                  case CameraMode.WalkAround:                      this.CameraPosition += (x * delta.X) + (y * delta.Y) + (z * delta.Z);                      break;              }
Missing Default,HelixToolkit.Wpf,ZoomHandler,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\CameraController\ZoomHandler.cs,ZoomByChangingCameraWidth,The following switch statement is missing a default case: switch (this.CameraMode)              {                  case CameraMode.WalkAround:                  case CameraMode.Inspect:                  case CameraMode.FixedPosition:                      this.ChangeCameraDistance(delta' zoomAround);                        // Modify the camera width                      var ocamera = this.Camera as OrthographicCamera;                      if (ocamera != null)                      {                          ocamera.Width *= Math.Pow(2.5' delta);                      }                        break;              }
Missing Default,HelixToolkit.Wpf,ColorAxis,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\ColorAxis\ColorAxis.cs,AddVisuals,The following switch statement is missing a default case: switch (this.Position)              {                  case ColorAxisPosition.Left:                      this.ColorArea = new Rect(                          this.Padding.Left'                          this.Padding.Top'                          this.BarWidth'                          System.Math.Max(0' this.ActualHeight - this.Padding.Bottom - this.Padding.Top));                      break;                  case ColorAxisPosition.Right:                      this.ColorArea = new Rect(                          System.Math.Max(0' this.ActualWidth - this.Padding.Right - this.BarWidth)'                          this.Padding.Top'                          this.BarWidth'                          System.Math.Max(0' this.ActualHeight - this.Padding.Bottom - this.Padding.Top));                      break;              }
Missing Default,HelixToolkit.Wpf,HelixViewport3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\HelixViewport3D.cs,OnItemsChanged,The following switch statement is missing a default case: switch (e.Action)              {                  case NotifyCollectionChangedAction.Add:                      this.AddItems(e.NewItems);                      break;                    case NotifyCollectionChangedAction.Move:                      throw new NotImplementedException("Move operation not implemented.");                  case NotifyCollectionChangedAction.Remove:                      this.RemoveItems(e.OldItems);                      break;                    case NotifyCollectionChangedAction.Replace:                      throw new NotImplementedException("Replace operation not implemented.");                  case NotifyCollectionChangedAction.Reset:                      this.Children.Clear();                      break;              }
Missing Default,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Left:                      this.HorizontalOffset -= 0.001f;                      break;                  case Key.Right:                      this.HorizontalOffset += 0.001f;                      break;              }
Missing Default,HelixToolkit.Wpf,AnaglyphView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\AnaglyphView3D.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.AnaglyphView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.AnaglyphEffect1 = ((HelixToolkit.Wpf.AnaglyphEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Missing Default,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Left:                      this.HorizontalOffset -= 0.001f;                      break;                  case Key.Right:                      this.HorizontalOffset += 0.001f;                      break;              }
Missing Default,HelixToolkit.Wpf,InterlacedView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\InterlacedView3D.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.InterlacedView3D)(target));              return;              case 2:              this.LeftPanel = ((System.Windows.Controls.Grid)(target));              return;              case 3:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 4:              this.RightPanel = ((System.Windows.Controls.Grid)(target));              return;              case 5:              this.InterlacedEffect1 = ((HelixToolkit.Wpf.InterlacedEffect)(target));              return;              case 6:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 7:              this.CameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Missing Default,HelixToolkit.Wpf,StereoView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\StereoView3D.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.StereoView3D)(target));              return;              case 2:              this.LeftView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 3:              this.LeftCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              case 4:              this.RightView = ((System.Windows.Controls.Viewport3D)(target));              return;              case 5:              this.RightCameraControl = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Missing Default,HelixToolkit.Wpf,WiggleView3D,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Controls\Stereo\WiggleView3D.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.thisControl = ((HelixToolkit.Wpf.WiggleView3D)(target));              return;              case 2:              this.View1 = ((System.Windows.Controls.Viewport3D)(target));              return;              case 3:              this.CameraControl1 = ((HelixToolkit.Wpf.CameraController)(target));              return;              }
Missing Default,HelixToolkit.Wpf,ColorHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\ColorHelper.cs,HsvToColor,The following switch statement is missing a default case: switch (i)                  {                      case 0:                          r = val;                          g = cc;                          b = aa;                          break;                      case 1:                          r = bb;                          g = val;                          b = aa;                          break;                      case 2:                          r = aa;                          g = val;                          b = cc;                          break;                      case 3:                          r = aa;                          g = bb;                          b = val;                          break;                      case 4:                          r = cc;                          g = aa;                          b = val;                          break;                      case 5:                          r = val;                          g = aa;                          b = bb;                          break;                  }
Missing Default,HelixToolkit.Wpf,Viewport3DHelper,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Helpers\Viewport3DHelper.cs,FindHits,The following switch statement is missing a default case: switch (mode)                          {                              case SelectionHitMode.Inside:                                  status = status && triangle.IsCompletelyInside(rectangle);                                  break;                              case SelectionHitMode.Touch:                                  status = status                                           || triangle.IsCompletelyInside(rectangle)                                           || triangle.IntersectsWith(rectangle)                                           || triangle.IsRectCompletelyInside(rectangle);                                  break;                          }
Missing Default,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,Read,The following switch statement is missing a default case: switch (keyword.ToLower())                      {                          // Vertex data                          case "v": // geometric vertices                              this.AddVertex(values);                              break;                          case "vt": // texture vertices                              this.AddTexCoord(values);                              break;                          case "vn": // vertex normals                              this.AddNormal(values);                              break;                          case "vp": // parameter space vertices                          case "cstype": // rational or non-rational forms of curve or surface type: basis matrix' Bezier' B-spline' Cardinal' Taylor                          case "degree": // degree                          case "bmat": // basis matrix                          case "step": // step size                              // not supported                              break;                            // Elements                          case "f": // face                              this.AddFace(values);                              break;                          case "p": // point                          case "l": // line                          case "curv": // curve                          case "curv2": // 2D curve                          case "surf": // surface                              // not supported                              break;                            // Free-form curve/surface body statements                          case "parm": // parameter name                          case "trim": // outer trimming loop (trim)                          case "hole": // inner trimming loop (hole)                          case "scrv": // special curve (scrv)                          case "sp":  // special point (sp)                          case "end": // end statement (end)                              // not supported                              break;                            // Connectivity between free-form surfaces                          case "con": // connect                              // not supported                              break;                            // Grouping                          case "g": // group name                              this.AddGroup(values);                              break;                          case "s": // smoothing group                              this.SetSmoothingGroup(values);                              break;                          case "mg": // merging group                              break;                          case "o": // object name                              // not supported                              break;                            // Display/render attributes                          case "mtllib": // material library                              this.LoadMaterialLib(values);                              break;                          case "usemtl": // material name                              this.EnsureNewMesh();                                this.SetMaterial(values);                              break;                          case "usemap": // texture map name                              this.EnsureNewMesh();                                break;                          case "bevel": // bevel interpolation                          case "c_interp": // color interpolation                          case "d_interp": // dissolve interpolation                          case "lod": // level of detail                          case "shadow_obj": // shadow casting                          case "trace_obj": // ray tracing                          case "ctech": // curve approximation technique                          case "stech": // surface approximation technique                              // not supported                              break;                      }
Missing Default,HelixToolkit.Wpf,ObjReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\ObjReader.cs,LoadMaterialLib,The following switch statement is missing a default case: switch (keyword.ToLower())                      {                          case "newmtl":                              if (value != null)                              {                                  if (this.Materials.ContainsKey(value))                                  {                                      currentMaterial = null;                                  }                                  else                                  {                                      currentMaterial = new MaterialDefinition(value);                                      this.Materials.Add(value' currentMaterial);                                  }                              }                                break;                          case "ka":                              if (currentMaterial != null && value != null)                              {                                  currentMaterial.Ambient = ColorParse(value);                              }                                break;                          case "kd":                              if (currentMaterial != null && value != null)                              {                                  currentMaterial.Diffuse = ColorParse(value);                              }                                break;                          case "ks":                              if (currentMaterial != null && value != null)                              {                                  currentMaterial.Specular = ColorParse(value);                              }                                break;                          case "ns":                              if (currentMaterial != null && value != null)                              {                                  currentMaterial.SpecularCoefficient = DoubleParse(value);                              }                                break;                          case "d":                              if (currentMaterial != null && value != null)                              {                                  currentMaterial.Dissolved = DoubleParse(value);                              }                                break;                          case "tr":                              if (!this.SkipTransparencyValues && currentMaterial != null && value != null)                              {                                  currentMaterial.Dissolved = DoubleParse(value);                              }                                break;                          case "illum":                              if (currentMaterial != null && value != null)                              {                                  currentMaterial.Illumination = int.Parse(value);                              }                                break;                          case "map_ka":                              if (currentMaterial != null)                              {                                  currentMaterial.AmbientMap = value;                              }                                break;                          case "map_kd":                              if (currentMaterial != null)                              {                                  currentMaterial.DiffuseMap = value;                              }                                break;                          case "map_ks":                              if (currentMaterial != null)                              {                                  currentMaterial.SpecularMap = value;                              }                                break;                          case "map_d":                              if (currentMaterial != null)                              {                                  currentMaterial.AlphaMap = value;                              }                                break;                          case "map_bump":                          case "bump":                              if (currentMaterial != null)                              {                                  currentMaterial.BumpMap = value;                              }                                break;                      }
Missing Default,HelixToolkit.Wpf,StLReader,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Importers\StLReader.cs,TryReadAscii,The following switch statement is missing a default case: switch (id)                  {                      case "solid":                          this.Header = values.Trim();                          break;                      case "facet":                          this.ReadFacet(reader' values);                          break;                      case "endsolid":                          break;                  }
Missing Default,HelixToolkit.Wpf,CuttingPlaneGroup,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Composite\CuttingPlaneGroup.cs,ApplyCuttingPlanesToModel,The following switch statement is missing a default case: switch (this.Operation)                  {                      case CuttingOperation.Intersect:                            var intersectedGeometry = originalMeshGeometry;                            // Calculate the intersection of all the intersections                          foreach (var cp in this.CuttingPlanes)                          {                              intersectedGeometry = this.Intersect(intersectedGeometry' inverseTransform' cp' false);                          }                            newGeometry = intersectedGeometry;                          break;                      case CuttingOperation.Subtract:                          var builder = new MeshBuilder(originalMeshGeometry.Normals.Any()' originalMeshGeometry.TextureCoordinates.Any());                            // Calculate the union of all complement intersections                          foreach (var cp in this.CuttingPlanes)                          {                              var cg = this.Intersect(originalMeshGeometry' inverseTransform' cp' true);                              builder.Append(cg);                          }                            newGeometry = builder.ToMesh(true);                          break;                  }
Missing Default,HelixToolkit.Wpf,TerrainModel,D:\research\architectureSmells\repos\helix-toolkit_helix-toolkit\Source\HelixToolkit.Wpf.Shared\Visual3Ds\Terrain\TerrainModel.cs,Load,The following switch statement is missing a default case: switch (ext)              {                  case ".btz":                      this.ReadZippedFile(source);                      break;                  case ".bt":                      this.ReadTerrainFile(source);                      break;              }
