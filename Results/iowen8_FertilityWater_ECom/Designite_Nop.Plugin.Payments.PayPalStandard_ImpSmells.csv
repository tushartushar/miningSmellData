Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The method has 153 lines of code.
Long Method,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The method has 111 lines of code.
Long Method,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,IPNHandler,The method has 169 lines of code.
Complex Method,Nop.Plugin.Payments.PayPalStandard,PaypalHelper,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PaypalHelper.cs,GetPaymentStatus,Cyclomatic complexity of the method is 22
Complex Method,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,Cyclomatic complexity of the method is 16
Complex Method,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,Cyclomatic complexity of the method is 23
Complex Method,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,Cyclomatic complexity of the method is 10
Complex Method,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,IPNHandler,Cyclomatic complexity of the method is 41
Long Parameter List,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PayPalStandardPaymentProcessor,The method has 9 parameters.
Long Parameter List,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PaymentPayPalStandardController,The method has 11 parameters.
Long Parameter List,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The method has 11 parameters.
Long Parameter List,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The method has 23 parameters.
Long Identifier,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the parameter paymentMethodAdditionalFeeExclTax is 33.
Long Identifier,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the parameter paymentMethodAdditionalFeeExclTaxRounded is 40.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,GetPaypalUrl,The length of the statement  "	return _paypalStandardPaymentSettings.UseSandbox ? "https://www.sandbox.paypal.com/us/cgi-bin/webscr" : "https://www.paypal.com/us/cgi-bin/webscr"; " is 147.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	builder.AppendFormat ("?cmd={0}&business={1}"' cmd' HttpUtility.UrlEncode (_paypalStandardPaymentSettings.BusinessEmail)); " is 122.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "			builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture)); " is 120.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "		var caValues = _checkoutAttributeParser.ParseCheckoutAttributeValues (postProcessPaymentRequest.Order.CheckoutAttributesXml); " is 125.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "			builder.AppendFormat ("&amount_" + x + "={0}"' orderShippingExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture)); " is 124.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "			builder.AppendFormat ("&amount_" + x + "={0}"' paymentMethodAdditionalFeeExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture)); " is 137.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	builder.Append (string.Format ("&no_note=1&currency_code={0}"' HttpUtility.UrlEncode (_currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode))); " is 178.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	builder.AppendFormat ("&return={0}&cancel_return={1}"' HttpUtility.UrlEncode (returnUrl)' HttpUtility.UrlEncode (cancelReturnUrl)); " is 131.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	builder.AppendFormat ("&first_name={0}"' HttpUtility.UrlEncode (postProcessPaymentRequest.Order.BillingAddress.FirstName)); " is 123.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	builder.AppendFormat ("&last_name={0}"' HttpUtility.UrlEncode (postProcessPaymentRequest.Order.BillingAddress.LastName)); " is 121.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	builder.AppendFormat ("&address1={0}"' HttpUtility.UrlEncode (postProcessPaymentRequest.Order.BillingAddress.Address1)); " is 120.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	builder.AppendFormat ("&address2={0}"' HttpUtility.UrlEncode (postProcessPaymentRequest.Order.BillingAddress.Address2)); " is 120.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	//    string billingPhoneNumber = System.Text.RegularExpressions.Regex.Replace(postProcessPaymentRequest.Order.BillingAddress.PhoneNumber' @"\D"' string.Empty); " is 160.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "		builder.AppendFormat ("&state={0}"' HttpUtility.UrlEncode (postProcessPaymentRequest.Order.BillingAddress.StateProvince.Abbreviation)); " is 135.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "		builder.AppendFormat ("&country={0}"' HttpUtility.UrlEncode (postProcessPaymentRequest.Order.BillingAddress.Country.TwoLetterIsoCode)); " is 135.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The length of the statement  "	builder.AppendFormat ("&zip={0}"' HttpUtility.UrlEncode (postProcessPaymentRequest.Order.BillingAddress.ZipPostalCode)); " is 120.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,GetAdditionalHandlingFee,The length of the statement  "	var result = this.CalculateAdditionalFee (_orderTotalCalculationService' cart' _paypalStandardPaymentSettings.AdditionalFee' _paypalStandardPaymentSettings.AdditionalFeePercentage); " is 181.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.RedirectionTip"' "You will be redirected to PayPal site to complete the order."); " is 159.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.UseSandbox.Hint"' "Check to enable Sandbox (testing environment)."); " is 146.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.BusinessEmail.Hint"' "Specify your PayPal business email."); " is 138.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.PDTToken.Hint"' "Specify PDT identity token"); " is 124.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.PDTValidateOrderTotal"' "PDT. Validate order total"); " is 131.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.PDTValidateOrderTotal.Hint"' "Check if PDT handler should validate order totals."); " is 161.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.AdditionalFee.Hint"' "Enter additional fee to charge your customers."); " is 149.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.AdditionalFeePercentage"' "Additional fee. Use percentage"); " is 138.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.AdditionalFeePercentage.Hint"' "Determines whether to apply a percentage additional fee to the order total. If not enabled' a fixed value is used."); " is 227.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.PassProductNamesAndTotals"' "Pass product names and order totals to PayPal"); " is 155.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.PassProductNamesAndTotals.Hint"' "Check if product names and order totals should be passed to PayPal."); " is 182.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.EnableIpn"' "Enable IPN (Instant Payment Notification)"); " is 135.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.EnableIpn.Hint"' "Check if IPN is enabled."); " is 123.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.EnableIpn.Hint2"' "Leave blank to use the default IPN handler URL."); " is 147.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.AddressOverride.Hint"' "For people who already have PayPal accounts and whom you already prompted for a shipping address before they choose to pay with PayPal' you can use the entered address instead of the address the person has stored with PayPal."); " is 330.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage"' "Return to order details page"); " is 170.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage.Hint"' "Enable if a customer should be redirected to the order details page when he clicks \"return to store\" link on PayPal site WITHOUT completing a payment"); " is 298.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Uninstall,The length of the statement  "	this.DeletePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage"); " is 133.
Long Statement,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,Uninstall,The length of the statement  "	this.DeletePluginLocaleResource ("Plugins.Payments.PayPalStandard.Fields.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage.Hint"); " is 138.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "	model.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage = payPalStandardPaymentSettings.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage; " is 154.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.UseSandbox_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.UseSandbox' storeScope); " is 129.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.BusinessEmail_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.BusinessEmail' storeScope); " is 135.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.PdtToken_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.PdtToken' storeScope); " is 125.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.PdtValidateOrderTotal_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.PdtValidateOrderTotal' storeScope); " is 151.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.AdditionalFee_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.AdditionalFee' storeScope); " is 135.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.AdditionalFeePercentage_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.AdditionalFeePercentage' storeScope); " is 155.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.PassProductNamesAndTotals_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.PassProductNamesAndTotals' storeScope); " is 159.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.EnableIpn_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.EnableIpn' storeScope); " is 127.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.IpnUrl_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.IpnUrl' storeScope); " is 121.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.AddressOverride_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.AddressOverride' storeScope); " is 139.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		model.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage_OverrideForStore = _settingService.SettingExists (payPalStandardPaymentSettings' x => x.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage' storeScope); " is 223.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "	payPalStandardPaymentSettings.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage = model.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage; " is 154.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		_settingService.SaveSetting (payPalStandardPaymentSettings' x => x.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage' storeScope' false); " is 145.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,Configure,The length of the statement  "		_settingService.DeleteSetting (payPalStandardPaymentSettings' x => x.ReturnFromPayPalWithoutPaymentRedirectsToOrderDetailsPage' storeScope); " is 140.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The length of the statement  "	var processor = _paymentService.LoadPaymentMethodBySystemName ("Payments.PayPalStandard") as PayPalStandardPaymentProcessor; " is 124.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The length of the statement  "			if (payPalStandardPaymentSettings.PdtValidateOrderTotal && !Math.Round (total' 2).Equals (Math.Round (order.OrderTotal' 2))) { " is 126.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The length of the statement  "				string errorStr = string.Format ("PayPal PDT. Returned order total {0} doesn't equal order total {1}"' total' order.OrderTotal); " is 128.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,IPNHandler,The length of the statement  "	var processor = _paymentService.LoadPaymentMethodBySystemName ("Payments.PayPalStandard") as PayPalStandardPaymentProcessor; " is 124.
Long Statement,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,CancelOrder,The length of the statement  "		var order = _orderService.SearchOrders (storeId: _storeContext.CurrentStore.Id' customerId: _workContext.CurrentCustomer.Id' pageSize: 1).FirstOrDefault (); " is 156.
Empty Catch Block,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The method has an empty catch block.
Empty Catch Block,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The method has an empty catch block.
Empty Catch Block,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,IPNHandler,The method has an empty catch block.
Empty Catch Block,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,IPNHandler,The method has an empty catch block.
Empty Catch Block,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,IPNHandler,The method has an empty catch block.
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: if (_paypalStandardPaymentSettings.PassProductNamesAndTotals) {  	builder.AppendFormat ("&upload=1");  	//get the items in the cart  	decimal cartTotal = decimal.Zero;  	var cartItems = postProcessPaymentRequest.Order.OrderItems;  	int x = 1;  	foreach (var item in cartItems) {  		var unitPriceExclTax = item.UnitPriceExclTax;  		var priceExclTax = item.PriceExclTax;  		//round  		var unitPriceExclTaxRounded = Math.Round (unitPriceExclTax' 2);  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (item.Product.Name));  		builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' item.Quantity);  		x++;  		cartTotal += priceExclTax;  	}  	//the checkout attributes that have a dollar value and send them to Paypal as items to be paid for  	var caValues = _checkoutAttributeParser.ParseCheckoutAttributeValues (postProcessPaymentRequest.Order.CheckoutAttributesXml);  	foreach (var val in caValues) {  		var attPrice = _taxService.GetCheckoutAttributePrice (val' false' postProcessPaymentRequest.Order.Customer);  		//round  		var attPriceRounded = Math.Round (attPrice' 2);  		if (attPrice > decimal.Zero)//if it has a price  		 {  			var ca = val.CheckoutAttribute;  			if (ca != null) {  				var attName = ca.Name;  				//set the name  				builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (attName));  				//name  				builder.AppendFormat ("&amount_" + x + "={0}"' attPriceRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  				//amount  				builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  				//quantity  				x++;  				cartTotal += attPrice;  			}  		}  	}  	//order totals  	//shipping  	var orderShippingExclTax = postProcessPaymentRequest.Order.OrderShippingExclTax;  	var orderShippingExclTaxRounded = Math.Round (orderShippingExclTax' 2);  	if (orderShippingExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Shipping fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' orderShippingExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += orderShippingExclTax;  	}  	//payment method additional fee  	var paymentMethodAdditionalFeeExclTax = postProcessPaymentRequest.Order.PaymentMethodAdditionalFeeExclTax;  	var paymentMethodAdditionalFeeExclTaxRounded = Math.Round (paymentMethodAdditionalFeeExclTax' 2);  	if (paymentMethodAdditionalFeeExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Payment method fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' paymentMethodAdditionalFeeExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += paymentMethodAdditionalFeeExclTax;  	}  	//tax  	var orderTax = postProcessPaymentRequest.Order.OrderTax;  	var orderTaxRounded = Math.Round (orderTax' 2);  	if (orderTax > decimal.Zero) {  		//builder.AppendFormat("&tax_1={0}"' orderTax.ToString("0.00"' CultureInfo.InvariantCulture));  		//add tax as item  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode ("Sales Tax"));  		//name  		builder.AppendFormat ("&amount_" + x + "={0}"' orderTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		//amount  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		//quantity  		cartTotal += orderTax;  		x++;  	}  	if (cartTotal > postProcessPaymentRequest.Order.OrderTotal) {  		/* Take the difference between what the order total is and what it should be and use that as the "discount".                      * The difference equals the amount of the gift card and/or reward points used.                       */decimal discountTotal = cartTotal - postProcessPaymentRequest.Order.OrderTotal;  		discountTotal = Math.Round (discountTotal' 2);  		//gift card or rewared point amount applied to cart in nopCommerce - shows in Paypal as "discount"  		builder.AppendFormat ("&discount_amount_cart={0}"' discountTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  	}  }  else {  	//pass order total  	builder.AppendFormat ("&item_name=Order Number {0}"' postProcessPaymentRequest.Order.Id);  	var orderTotal = Math.Round (postProcessPaymentRequest.Order.OrderTotal' 2);  	builder.AppendFormat ("&amount={0}"' orderTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: if (_paypalStandardPaymentSettings.PassProductNamesAndTotals) {  	builder.AppendFormat ("&upload=1");  	//get the items in the cart  	decimal cartTotal = decimal.Zero;  	var cartItems = postProcessPaymentRequest.Order.OrderItems;  	int x = 1;  	foreach (var item in cartItems) {  		var unitPriceExclTax = item.UnitPriceExclTax;  		var priceExclTax = item.PriceExclTax;  		//round  		var unitPriceExclTaxRounded = Math.Round (unitPriceExclTax' 2);  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (item.Product.Name));  		builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' item.Quantity);  		x++;  		cartTotal += priceExclTax;  	}  	//the checkout attributes that have a dollar value and send them to Paypal as items to be paid for  	var caValues = _checkoutAttributeParser.ParseCheckoutAttributeValues (postProcessPaymentRequest.Order.CheckoutAttributesXml);  	foreach (var val in caValues) {  		var attPrice = _taxService.GetCheckoutAttributePrice (val' false' postProcessPaymentRequest.Order.Customer);  		//round  		var attPriceRounded = Math.Round (attPrice' 2);  		if (attPrice > decimal.Zero)//if it has a price  		 {  			var ca = val.CheckoutAttribute;  			if (ca != null) {  				var attName = ca.Name;  				//set the name  				builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (attName));  				//name  				builder.AppendFormat ("&amount_" + x + "={0}"' attPriceRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  				//amount  				builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  				//quantity  				x++;  				cartTotal += attPrice;  			}  		}  	}  	//order totals  	//shipping  	var orderShippingExclTax = postProcessPaymentRequest.Order.OrderShippingExclTax;  	var orderShippingExclTaxRounded = Math.Round (orderShippingExclTax' 2);  	if (orderShippingExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Shipping fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' orderShippingExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += orderShippingExclTax;  	}  	//payment method additional fee  	var paymentMethodAdditionalFeeExclTax = postProcessPaymentRequest.Order.PaymentMethodAdditionalFeeExclTax;  	var paymentMethodAdditionalFeeExclTaxRounded = Math.Round (paymentMethodAdditionalFeeExclTax' 2);  	if (paymentMethodAdditionalFeeExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Payment method fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' paymentMethodAdditionalFeeExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += paymentMethodAdditionalFeeExclTax;  	}  	//tax  	var orderTax = postProcessPaymentRequest.Order.OrderTax;  	var orderTaxRounded = Math.Round (orderTax' 2);  	if (orderTax > decimal.Zero) {  		//builder.AppendFormat("&tax_1={0}"' orderTax.ToString("0.00"' CultureInfo.InvariantCulture));  		//add tax as item  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode ("Sales Tax"));  		//name  		builder.AppendFormat ("&amount_" + x + "={0}"' orderTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		//amount  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		//quantity  		cartTotal += orderTax;  		x++;  	}  	if (cartTotal > postProcessPaymentRequest.Order.OrderTotal) {  		/* Take the difference between what the order total is and what it should be and use that as the "discount".                      * The difference equals the amount of the gift card and/or reward points used.                       */decimal discountTotal = cartTotal - postProcessPaymentRequest.Order.OrderTotal;  		discountTotal = Math.Round (discountTotal' 2);  		//gift card or rewared point amount applied to cart in nopCommerce - shows in Paypal as "discount"  		builder.AppendFormat ("&discount_amount_cart={0}"' discountTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  	}  }  else {  	//pass order total  	builder.AppendFormat ("&item_name=Order Number {0}"' postProcessPaymentRequest.Order.Id);  	var orderTotal = Math.Round (postProcessPaymentRequest.Order.OrderTotal' 2);  	builder.AppendFormat ("&amount={0}"' orderTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: if (_paypalStandardPaymentSettings.PassProductNamesAndTotals) {  	builder.AppendFormat ("&upload=1");  	//get the items in the cart  	decimal cartTotal = decimal.Zero;  	var cartItems = postProcessPaymentRequest.Order.OrderItems;  	int x = 1;  	foreach (var item in cartItems) {  		var unitPriceExclTax = item.UnitPriceExclTax;  		var priceExclTax = item.PriceExclTax;  		//round  		var unitPriceExclTaxRounded = Math.Round (unitPriceExclTax' 2);  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (item.Product.Name));  		builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' item.Quantity);  		x++;  		cartTotal += priceExclTax;  	}  	//the checkout attributes that have a dollar value and send them to Paypal as items to be paid for  	var caValues = _checkoutAttributeParser.ParseCheckoutAttributeValues (postProcessPaymentRequest.Order.CheckoutAttributesXml);  	foreach (var val in caValues) {  		var attPrice = _taxService.GetCheckoutAttributePrice (val' false' postProcessPaymentRequest.Order.Customer);  		//round  		var attPriceRounded = Math.Round (attPrice' 2);  		if (attPrice > decimal.Zero)//if it has a price  		 {  			var ca = val.CheckoutAttribute;  			if (ca != null) {  				var attName = ca.Name;  				//set the name  				builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (attName));  				//name  				builder.AppendFormat ("&amount_" + x + "={0}"' attPriceRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  				//amount  				builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  				//quantity  				x++;  				cartTotal += attPrice;  			}  		}  	}  	//order totals  	//shipping  	var orderShippingExclTax = postProcessPaymentRequest.Order.OrderShippingExclTax;  	var orderShippingExclTaxRounded = Math.Round (orderShippingExclTax' 2);  	if (orderShippingExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Shipping fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' orderShippingExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += orderShippingExclTax;  	}  	//payment method additional fee  	var paymentMethodAdditionalFeeExclTax = postProcessPaymentRequest.Order.PaymentMethodAdditionalFeeExclTax;  	var paymentMethodAdditionalFeeExclTaxRounded = Math.Round (paymentMethodAdditionalFeeExclTax' 2);  	if (paymentMethodAdditionalFeeExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Payment method fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' paymentMethodAdditionalFeeExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += paymentMethodAdditionalFeeExclTax;  	}  	//tax  	var orderTax = postProcessPaymentRequest.Order.OrderTax;  	var orderTaxRounded = Math.Round (orderTax' 2);  	if (orderTax > decimal.Zero) {  		//builder.AppendFormat("&tax_1={0}"' orderTax.ToString("0.00"' CultureInfo.InvariantCulture));  		//add tax as item  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode ("Sales Tax"));  		//name  		builder.AppendFormat ("&amount_" + x + "={0}"' orderTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		//amount  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		//quantity  		cartTotal += orderTax;  		x++;  	}  	if (cartTotal > postProcessPaymentRequest.Order.OrderTotal) {  		/* Take the difference between what the order total is and what it should be and use that as the "discount".                      * The difference equals the amount of the gift card and/or reward points used.                       */decimal discountTotal = cartTotal - postProcessPaymentRequest.Order.OrderTotal;  		discountTotal = Math.Round (discountTotal' 2);  		//gift card or rewared point amount applied to cart in nopCommerce - shows in Paypal as "discount"  		builder.AppendFormat ("&discount_amount_cart={0}"' discountTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  	}  }  else {  	//pass order total  	builder.AppendFormat ("&item_name=Order Number {0}"' postProcessPaymentRequest.Order.Id);  	var orderTotal = Math.Round (postProcessPaymentRequest.Order.OrderTotal' 2);  	builder.AppendFormat ("&amount={0}"' orderTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: if (_paypalStandardPaymentSettings.PassProductNamesAndTotals) {  	builder.AppendFormat ("&upload=1");  	//get the items in the cart  	decimal cartTotal = decimal.Zero;  	var cartItems = postProcessPaymentRequest.Order.OrderItems;  	int x = 1;  	foreach (var item in cartItems) {  		var unitPriceExclTax = item.UnitPriceExclTax;  		var priceExclTax = item.PriceExclTax;  		//round  		var unitPriceExclTaxRounded = Math.Round (unitPriceExclTax' 2);  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (item.Product.Name));  		builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' item.Quantity);  		x++;  		cartTotal += priceExclTax;  	}  	//the checkout attributes that have a dollar value and send them to Paypal as items to be paid for  	var caValues = _checkoutAttributeParser.ParseCheckoutAttributeValues (postProcessPaymentRequest.Order.CheckoutAttributesXml);  	foreach (var val in caValues) {  		var attPrice = _taxService.GetCheckoutAttributePrice (val' false' postProcessPaymentRequest.Order.Customer);  		//round  		var attPriceRounded = Math.Round (attPrice' 2);  		if (attPrice > decimal.Zero)//if it has a price  		 {  			var ca = val.CheckoutAttribute;  			if (ca != null) {  				var attName = ca.Name;  				//set the name  				builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (attName));  				//name  				builder.AppendFormat ("&amount_" + x + "={0}"' attPriceRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  				//amount  				builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  				//quantity  				x++;  				cartTotal += attPrice;  			}  		}  	}  	//order totals  	//shipping  	var orderShippingExclTax = postProcessPaymentRequest.Order.OrderShippingExclTax;  	var orderShippingExclTaxRounded = Math.Round (orderShippingExclTax' 2);  	if (orderShippingExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Shipping fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' orderShippingExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += orderShippingExclTax;  	}  	//payment method additional fee  	var paymentMethodAdditionalFeeExclTax = postProcessPaymentRequest.Order.PaymentMethodAdditionalFeeExclTax;  	var paymentMethodAdditionalFeeExclTaxRounded = Math.Round (paymentMethodAdditionalFeeExclTax' 2);  	if (paymentMethodAdditionalFeeExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Payment method fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' paymentMethodAdditionalFeeExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += paymentMethodAdditionalFeeExclTax;  	}  	//tax  	var orderTax = postProcessPaymentRequest.Order.OrderTax;  	var orderTaxRounded = Math.Round (orderTax' 2);  	if (orderTax > decimal.Zero) {  		//builder.AppendFormat("&tax_1={0}"' orderTax.ToString("0.00"' CultureInfo.InvariantCulture));  		//add tax as item  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode ("Sales Tax"));  		//name  		builder.AppendFormat ("&amount_" + x + "={0}"' orderTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		//amount  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		//quantity  		cartTotal += orderTax;  		x++;  	}  	if (cartTotal > postProcessPaymentRequest.Order.OrderTotal) {  		/* Take the difference between what the order total is and what it should be and use that as the "discount".                      * The difference equals the amount of the gift card and/or reward points used.                       */decimal discountTotal = cartTotal - postProcessPaymentRequest.Order.OrderTotal;  		discountTotal = Math.Round (discountTotal' 2);  		//gift card or rewared point amount applied to cart in nopCommerce - shows in Paypal as "discount"  		builder.AppendFormat ("&discount_amount_cart={0}"' discountTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  	}  }  else {  	//pass order total  	builder.AppendFormat ("&item_name=Order Number {0}"' postProcessPaymentRequest.Order.Id);  	var orderTotal = Math.Round (postProcessPaymentRequest.Order.OrderTotal' 2);  	builder.AppendFormat ("&amount={0}"' orderTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: if (_paypalStandardPaymentSettings.PassProductNamesAndTotals) {  	builder.AppendFormat ("&upload=1");  	//get the items in the cart  	decimal cartTotal = decimal.Zero;  	var cartItems = postProcessPaymentRequest.Order.OrderItems;  	int x = 1;  	foreach (var item in cartItems) {  		var unitPriceExclTax = item.UnitPriceExclTax;  		var priceExclTax = item.PriceExclTax;  		//round  		var unitPriceExclTaxRounded = Math.Round (unitPriceExclTax' 2);  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (item.Product.Name));  		builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' item.Quantity);  		x++;  		cartTotal += priceExclTax;  	}  	//the checkout attributes that have a dollar value and send them to Paypal as items to be paid for  	var caValues = _checkoutAttributeParser.ParseCheckoutAttributeValues (postProcessPaymentRequest.Order.CheckoutAttributesXml);  	foreach (var val in caValues) {  		var attPrice = _taxService.GetCheckoutAttributePrice (val' false' postProcessPaymentRequest.Order.Customer);  		//round  		var attPriceRounded = Math.Round (attPrice' 2);  		if (attPrice > decimal.Zero)//if it has a price  		 {  			var ca = val.CheckoutAttribute;  			if (ca != null) {  				var attName = ca.Name;  				//set the name  				builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (attName));  				//name  				builder.AppendFormat ("&amount_" + x + "={0}"' attPriceRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  				//amount  				builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  				//quantity  				x++;  				cartTotal += attPrice;  			}  		}  	}  	//order totals  	//shipping  	var orderShippingExclTax = postProcessPaymentRequest.Order.OrderShippingExclTax;  	var orderShippingExclTaxRounded = Math.Round (orderShippingExclTax' 2);  	if (orderShippingExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Shipping fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' orderShippingExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += orderShippingExclTax;  	}  	//payment method additional fee  	var paymentMethodAdditionalFeeExclTax = postProcessPaymentRequest.Order.PaymentMethodAdditionalFeeExclTax;  	var paymentMethodAdditionalFeeExclTaxRounded = Math.Round (paymentMethodAdditionalFeeExclTax' 2);  	if (paymentMethodAdditionalFeeExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Payment method fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' paymentMethodAdditionalFeeExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += paymentMethodAdditionalFeeExclTax;  	}  	//tax  	var orderTax = postProcessPaymentRequest.Order.OrderTax;  	var orderTaxRounded = Math.Round (orderTax' 2);  	if (orderTax > decimal.Zero) {  		//builder.AppendFormat("&tax_1={0}"' orderTax.ToString("0.00"' CultureInfo.InvariantCulture));  		//add tax as item  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode ("Sales Tax"));  		//name  		builder.AppendFormat ("&amount_" + x + "={0}"' orderTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		//amount  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		//quantity  		cartTotal += orderTax;  		x++;  	}  	if (cartTotal > postProcessPaymentRequest.Order.OrderTotal) {  		/* Take the difference between what the order total is and what it should be and use that as the "discount".                      * The difference equals the amount of the gift card and/or reward points used.                       */decimal discountTotal = cartTotal - postProcessPaymentRequest.Order.OrderTotal;  		discountTotal = Math.Round (discountTotal' 2);  		//gift card or rewared point amount applied to cart in nopCommerce - shows in Paypal as "discount"  		builder.AppendFormat ("&discount_amount_cart={0}"' discountTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  	}  }  else {  	//pass order total  	builder.AppendFormat ("&item_name=Order Number {0}"' postProcessPaymentRequest.Order.Id);  	var orderTotal = Math.Round (postProcessPaymentRequest.Order.OrderTotal' 2);  	builder.AppendFormat ("&amount={0}"' orderTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: if (_paypalStandardPaymentSettings.PassProductNamesAndTotals) {  	builder.AppendFormat ("&upload=1");  	//get the items in the cart  	decimal cartTotal = decimal.Zero;  	var cartItems = postProcessPaymentRequest.Order.OrderItems;  	int x = 1;  	foreach (var item in cartItems) {  		var unitPriceExclTax = item.UnitPriceExclTax;  		var priceExclTax = item.PriceExclTax;  		//round  		var unitPriceExclTaxRounded = Math.Round (unitPriceExclTax' 2);  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (item.Product.Name));  		builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' item.Quantity);  		x++;  		cartTotal += priceExclTax;  	}  	//the checkout attributes that have a dollar value and send them to Paypal as items to be paid for  	var caValues = _checkoutAttributeParser.ParseCheckoutAttributeValues (postProcessPaymentRequest.Order.CheckoutAttributesXml);  	foreach (var val in caValues) {  		var attPrice = _taxService.GetCheckoutAttributePrice (val' false' postProcessPaymentRequest.Order.Customer);  		//round  		var attPriceRounded = Math.Round (attPrice' 2);  		if (attPrice > decimal.Zero)//if it has a price  		 {  			var ca = val.CheckoutAttribute;  			if (ca != null) {  				var attName = ca.Name;  				//set the name  				builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (attName));  				//name  				builder.AppendFormat ("&amount_" + x + "={0}"' attPriceRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  				//amount  				builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  				//quantity  				x++;  				cartTotal += attPrice;  			}  		}  	}  	//order totals  	//shipping  	var orderShippingExclTax = postProcessPaymentRequest.Order.OrderShippingExclTax;  	var orderShippingExclTaxRounded = Math.Round (orderShippingExclTax' 2);  	if (orderShippingExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Shipping fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' orderShippingExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += orderShippingExclTax;  	}  	//payment method additional fee  	var paymentMethodAdditionalFeeExclTax = postProcessPaymentRequest.Order.PaymentMethodAdditionalFeeExclTax;  	var paymentMethodAdditionalFeeExclTaxRounded = Math.Round (paymentMethodAdditionalFeeExclTax' 2);  	if (paymentMethodAdditionalFeeExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Payment method fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' paymentMethodAdditionalFeeExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += paymentMethodAdditionalFeeExclTax;  	}  	//tax  	var orderTax = postProcessPaymentRequest.Order.OrderTax;  	var orderTaxRounded = Math.Round (orderTax' 2);  	if (orderTax > decimal.Zero) {  		//builder.AppendFormat("&tax_1={0}"' orderTax.ToString("0.00"' CultureInfo.InvariantCulture));  		//add tax as item  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode ("Sales Tax"));  		//name  		builder.AppendFormat ("&amount_" + x + "={0}"' orderTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		//amount  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		//quantity  		cartTotal += orderTax;  		x++;  	}  	if (cartTotal > postProcessPaymentRequest.Order.OrderTotal) {  		/* Take the difference between what the order total is and what it should be and use that as the "discount".                      * The difference equals the amount of the gift card and/or reward points used.                       */decimal discountTotal = cartTotal - postProcessPaymentRequest.Order.OrderTotal;  		discountTotal = Math.Round (discountTotal' 2);  		//gift card or rewared point amount applied to cart in nopCommerce - shows in Paypal as "discount"  		builder.AppendFormat ("&discount_amount_cart={0}"' discountTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  	}  }  else {  	//pass order total  	builder.AppendFormat ("&item_name=Order Number {0}"' postProcessPaymentRequest.Order.Id);  	var orderTotal = Math.Round (postProcessPaymentRequest.Order.OrderTotal' 2);  	builder.AppendFormat ("&amount={0}"' orderTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: if (_paypalStandardPaymentSettings.PassProductNamesAndTotals) {  	builder.AppendFormat ("&upload=1");  	//get the items in the cart  	decimal cartTotal = decimal.Zero;  	var cartItems = postProcessPaymentRequest.Order.OrderItems;  	int x = 1;  	foreach (var item in cartItems) {  		var unitPriceExclTax = item.UnitPriceExclTax;  		var priceExclTax = item.PriceExclTax;  		//round  		var unitPriceExclTaxRounded = Math.Round (unitPriceExclTax' 2);  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (item.Product.Name));  		builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' item.Quantity);  		x++;  		cartTotal += priceExclTax;  	}  	//the checkout attributes that have a dollar value and send them to Paypal as items to be paid for  	var caValues = _checkoutAttributeParser.ParseCheckoutAttributeValues (postProcessPaymentRequest.Order.CheckoutAttributesXml);  	foreach (var val in caValues) {  		var attPrice = _taxService.GetCheckoutAttributePrice (val' false' postProcessPaymentRequest.Order.Customer);  		//round  		var attPriceRounded = Math.Round (attPrice' 2);  		if (attPrice > decimal.Zero)//if it has a price  		 {  			var ca = val.CheckoutAttribute;  			if (ca != null) {  				var attName = ca.Name;  				//set the name  				builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (attName));  				//name  				builder.AppendFormat ("&amount_" + x + "={0}"' attPriceRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  				//amount  				builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  				//quantity  				x++;  				cartTotal += attPrice;  			}  		}  	}  	//order totals  	//shipping  	var orderShippingExclTax = postProcessPaymentRequest.Order.OrderShippingExclTax;  	var orderShippingExclTaxRounded = Math.Round (orderShippingExclTax' 2);  	if (orderShippingExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Shipping fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' orderShippingExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += orderShippingExclTax;  	}  	//payment method additional fee  	var paymentMethodAdditionalFeeExclTax = postProcessPaymentRequest.Order.PaymentMethodAdditionalFeeExclTax;  	var paymentMethodAdditionalFeeExclTaxRounded = Math.Round (paymentMethodAdditionalFeeExclTax' 2);  	if (paymentMethodAdditionalFeeExclTax > decimal.Zero) {  		builder.AppendFormat ("&item_name_" + x + "={0}"' "Payment method fee");  		builder.AppendFormat ("&amount_" + x + "={0}"' paymentMethodAdditionalFeeExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		x++;  		cartTotal += paymentMethodAdditionalFeeExclTax;  	}  	//tax  	var orderTax = postProcessPaymentRequest.Order.OrderTax;  	var orderTaxRounded = Math.Round (orderTax' 2);  	if (orderTax > decimal.Zero) {  		//builder.AppendFormat("&tax_1={0}"' orderTax.ToString("0.00"' CultureInfo.InvariantCulture));  		//add tax as item  		builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode ("Sales Tax"));  		//name  		builder.AppendFormat ("&amount_" + x + "={0}"' orderTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  		//amount  		builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  		//quantity  		cartTotal += orderTax;  		x++;  	}  	if (cartTotal > postProcessPaymentRequest.Order.OrderTotal) {  		/* Take the difference between what the order total is and what it should be and use that as the "discount".                      * The difference equals the amount of the gift card and/or reward points used.                       */decimal discountTotal = cartTotal - postProcessPaymentRequest.Order.OrderTotal;  		discountTotal = Math.Round (discountTotal' 2);  		//gift card or rewared point amount applied to cart in nopCommerce - shows in Paypal as "discount"  		builder.AppendFormat ("&discount_amount_cart={0}"' discountTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  	}  }  else {  	//pass order total  	builder.AppendFormat ("&item_name=Order Number {0}"' postProcessPaymentRequest.Order.Id);  	var orderTotal = Math.Round (postProcessPaymentRequest.Order.OrderTotal' 2);  	builder.AppendFormat ("&amount={0}"' orderTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: foreach (var item in cartItems) {  	var unitPriceExclTax = item.UnitPriceExclTax;  	var priceExclTax = item.PriceExclTax;  	//round  	var unitPriceExclTaxRounded = Math.Round (unitPriceExclTax' 2);  	builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (item.Product.Name));  	builder.AppendFormat ("&amount_" + x + "={0}"' unitPriceExclTaxRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  	builder.AppendFormat ("&quantity_" + x + "={0}"' item.Quantity);  	x++;  	cartTotal += priceExclTax;  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: foreach (var val in caValues) {  	var attPrice = _taxService.GetCheckoutAttributePrice (val' false' postProcessPaymentRequest.Order.Customer);  	//round  	var attPriceRounded = Math.Round (attPrice' 2);  	if (attPrice > decimal.Zero)//if it has a price  	 {  		var ca = val.CheckoutAttribute;  		if (ca != null) {  			var attName = ca.Name;  			//set the name  			builder.AppendFormat ("&item_name_" + x + "={0}"' HttpUtility.UrlEncode (attName));  			//name  			builder.AppendFormat ("&amount_" + x + "={0}"' attPriceRounded.ToString ("0.00"' CultureInfo.InvariantCulture));  			//amount  			builder.AppendFormat ("&quantity_" + x + "={0}"' 1);  			//quantity  			x++;  			cartTotal += attPrice;  		}  	}  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: if (cartTotal > postProcessPaymentRequest.Order.OrderTotal) {  	/* Take the difference between what the order total is and what it should be and use that as the "discount".                      * The difference equals the amount of the gift card and/or reward points used.                       */decimal discountTotal = cartTotal - postProcessPaymentRequest.Order.OrderTotal;  	discountTotal = Math.Round (discountTotal' 2);  	//gift card or rewared point amount applied to cart in nopCommerce - shows in Paypal as "discount"  	builder.AppendFormat ("&discount_amount_cart={0}"' discountTotal.ToString ("0.00"' CultureInfo.InvariantCulture));  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,PostProcessPayment,The following statement contains a magic number: discountTotal = Math.Round (discountTotal' 2);  
Magic Number,Nop.Plugin.Payments.PayPalStandard,PayPalStandardPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\PayPalStandardPaymentProcessor.cs,CanRePostProcessPayment,The following statement contains a magic number: if ((DateTime.UtcNow - order.CreatedOnUtc).TotalSeconds < 5)  	return false;  
Magic Number,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The following statement contains a magic number: if (processor.GetPDTDetails (tx' out values' out response)) {  	string orderNumber = string.Empty;  	values.TryGetValue ("custom"' out orderNumber);  	Guid orderNumberGuid = Guid.Empty;  	try {  		orderNumberGuid = new Guid (orderNumber);  	}  	catch {  	}  	Order order = _orderService.GetOrderByGuid (orderNumberGuid);  	if (order != null) {  		decimal total = decimal.Zero;  		try {  			total = decimal.Parse (values ["mc_gross"]' new CultureInfo ("en-US"));  		}  		catch (Exception exc) {  			_logger.Error ("PayPal PDT. Error getting mc_gross"' exc);  		}  		string payer_status = string.Empty;  		values.TryGetValue ("payer_status"' out payer_status);  		string payment_status = string.Empty;  		values.TryGetValue ("payment_status"' out payment_status);  		string pending_reason = string.Empty;  		values.TryGetValue ("pending_reason"' out pending_reason);  		string mc_currency = string.Empty;  		values.TryGetValue ("mc_currency"' out mc_currency);  		string txn_id = string.Empty;  		values.TryGetValue ("txn_id"' out txn_id);  		string payment_type = string.Empty;  		values.TryGetValue ("payment_type"' out payment_type);  		string payer_id = string.Empty;  		values.TryGetValue ("payer_id"' out payer_id);  		string receiver_id = string.Empty;  		values.TryGetValue ("receiver_id"' out receiver_id);  		string invoice = string.Empty;  		values.TryGetValue ("invoice"' out invoice);  		string payment_fee = string.Empty;  		values.TryGetValue ("payment_fee"' out payment_fee);  		var sb = new StringBuilder ();  		sb.AppendLine ("Paypal PDT:");  		sb.AppendLine ("total: " + total);  		sb.AppendLine ("Payer status: " + payer_status);  		sb.AppendLine ("Payment status: " + payment_status);  		sb.AppendLine ("Pending reason: " + pending_reason);  		sb.AppendLine ("mc_currency: " + mc_currency);  		sb.AppendLine ("txn_id: " + txn_id);  		sb.AppendLine ("payment_type: " + payment_type);  		sb.AppendLine ("payer_id: " + payer_id);  		sb.AppendLine ("receiver_id: " + receiver_id);  		sb.AppendLine ("invoice: " + invoice);  		sb.AppendLine ("payment_fee: " + payment_fee);  		//order note  		order.OrderNotes.Add (new OrderNote () {  			Note = sb.ToString ()'  			DisplayToCustomer = false'  			CreatedOnUtc = DateTime.UtcNow  		});  		_orderService.UpdateOrder (order);  		//load settings for a chosen store scope  		var storeScope = this.GetActiveStoreScopeConfiguration (_storeService' _workContext);  		var payPalStandardPaymentSettings = _settingService.LoadSetting<PayPalStandardPaymentSettings> (storeScope);  		//validate order total  		if (payPalStandardPaymentSettings.PdtValidateOrderTotal && !Math.Round (total' 2).Equals (Math.Round (order.OrderTotal' 2))) {  			string errorStr = string.Format ("PayPal PDT. Returned order total {0} doesn't equal order total {1}"' total' order.OrderTotal);  			_logger.Error (errorStr);  			return RedirectToAction ("Index"' "Home"' new {  				area = ""  			});  		}  		//mark order as paid  		if (_orderProcessingService.CanMarkOrderAsPaid (order)) {  			order.AuthorizationTransactionId = txn_id;  			_orderService.UpdateOrder (order);  			_orderProcessingService.MarkOrderAsPaid (order);  		}  	}  	return RedirectToRoute ("CheckoutCompleted"' new {  		orderId = order.Id  	});  }  else {  	string orderNumber = string.Empty;  	values.TryGetValue ("custom"' out orderNumber);  	Guid orderNumberGuid = Guid.Empty;  	try {  		orderNumberGuid = new Guid (orderNumber);  	}  	catch {  	}  	Order order = _orderService.GetOrderByGuid (orderNumberGuid);  	if (order != null) {  		//order note  		order.OrderNotes.Add (new OrderNote () {  			Note = "PayPal PDT failed. " + response'  			DisplayToCustomer = false'  			CreatedOnUtc = DateTime.UtcNow  		});  		_orderService.UpdateOrder (order);  	}  	return RedirectToAction ("Index"' "Home"' new {  		area = ""  	});  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The following statement contains a magic number: if (processor.GetPDTDetails (tx' out values' out response)) {  	string orderNumber = string.Empty;  	values.TryGetValue ("custom"' out orderNumber);  	Guid orderNumberGuid = Guid.Empty;  	try {  		orderNumberGuid = new Guid (orderNumber);  	}  	catch {  	}  	Order order = _orderService.GetOrderByGuid (orderNumberGuid);  	if (order != null) {  		decimal total = decimal.Zero;  		try {  			total = decimal.Parse (values ["mc_gross"]' new CultureInfo ("en-US"));  		}  		catch (Exception exc) {  			_logger.Error ("PayPal PDT. Error getting mc_gross"' exc);  		}  		string payer_status = string.Empty;  		values.TryGetValue ("payer_status"' out payer_status);  		string payment_status = string.Empty;  		values.TryGetValue ("payment_status"' out payment_status);  		string pending_reason = string.Empty;  		values.TryGetValue ("pending_reason"' out pending_reason);  		string mc_currency = string.Empty;  		values.TryGetValue ("mc_currency"' out mc_currency);  		string txn_id = string.Empty;  		values.TryGetValue ("txn_id"' out txn_id);  		string payment_type = string.Empty;  		values.TryGetValue ("payment_type"' out payment_type);  		string payer_id = string.Empty;  		values.TryGetValue ("payer_id"' out payer_id);  		string receiver_id = string.Empty;  		values.TryGetValue ("receiver_id"' out receiver_id);  		string invoice = string.Empty;  		values.TryGetValue ("invoice"' out invoice);  		string payment_fee = string.Empty;  		values.TryGetValue ("payment_fee"' out payment_fee);  		var sb = new StringBuilder ();  		sb.AppendLine ("Paypal PDT:");  		sb.AppendLine ("total: " + total);  		sb.AppendLine ("Payer status: " + payer_status);  		sb.AppendLine ("Payment status: " + payment_status);  		sb.AppendLine ("Pending reason: " + pending_reason);  		sb.AppendLine ("mc_currency: " + mc_currency);  		sb.AppendLine ("txn_id: " + txn_id);  		sb.AppendLine ("payment_type: " + payment_type);  		sb.AppendLine ("payer_id: " + payer_id);  		sb.AppendLine ("receiver_id: " + receiver_id);  		sb.AppendLine ("invoice: " + invoice);  		sb.AppendLine ("payment_fee: " + payment_fee);  		//order note  		order.OrderNotes.Add (new OrderNote () {  			Note = sb.ToString ()'  			DisplayToCustomer = false'  			CreatedOnUtc = DateTime.UtcNow  		});  		_orderService.UpdateOrder (order);  		//load settings for a chosen store scope  		var storeScope = this.GetActiveStoreScopeConfiguration (_storeService' _workContext);  		var payPalStandardPaymentSettings = _settingService.LoadSetting<PayPalStandardPaymentSettings> (storeScope);  		//validate order total  		if (payPalStandardPaymentSettings.PdtValidateOrderTotal && !Math.Round (total' 2).Equals (Math.Round (order.OrderTotal' 2))) {  			string errorStr = string.Format ("PayPal PDT. Returned order total {0} doesn't equal order total {1}"' total' order.OrderTotal);  			_logger.Error (errorStr);  			return RedirectToAction ("Index"' "Home"' new {  				area = ""  			});  		}  		//mark order as paid  		if (_orderProcessingService.CanMarkOrderAsPaid (order)) {  			order.AuthorizationTransactionId = txn_id;  			_orderService.UpdateOrder (order);  			_orderProcessingService.MarkOrderAsPaid (order);  		}  	}  	return RedirectToRoute ("CheckoutCompleted"' new {  		orderId = order.Id  	});  }  else {  	string orderNumber = string.Empty;  	values.TryGetValue ("custom"' out orderNumber);  	Guid orderNumberGuid = Guid.Empty;  	try {  		orderNumberGuid = new Guid (orderNumber);  	}  	catch {  	}  	Order order = _orderService.GetOrderByGuid (orderNumberGuid);  	if (order != null) {  		//order note  		order.OrderNotes.Add (new OrderNote () {  			Note = "PayPal PDT failed. " + response'  			DisplayToCustomer = false'  			CreatedOnUtc = DateTime.UtcNow  		});  		_orderService.UpdateOrder (order);  	}  	return RedirectToAction ("Index"' "Home"' new {  		area = ""  	});  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The following statement contains a magic number: if (order != null) {  	decimal total = decimal.Zero;  	try {  		total = decimal.Parse (values ["mc_gross"]' new CultureInfo ("en-US"));  	}  	catch (Exception exc) {  		_logger.Error ("PayPal PDT. Error getting mc_gross"' exc);  	}  	string payer_status = string.Empty;  	values.TryGetValue ("payer_status"' out payer_status);  	string payment_status = string.Empty;  	values.TryGetValue ("payment_status"' out payment_status);  	string pending_reason = string.Empty;  	values.TryGetValue ("pending_reason"' out pending_reason);  	string mc_currency = string.Empty;  	values.TryGetValue ("mc_currency"' out mc_currency);  	string txn_id = string.Empty;  	values.TryGetValue ("txn_id"' out txn_id);  	string payment_type = string.Empty;  	values.TryGetValue ("payment_type"' out payment_type);  	string payer_id = string.Empty;  	values.TryGetValue ("payer_id"' out payer_id);  	string receiver_id = string.Empty;  	values.TryGetValue ("receiver_id"' out receiver_id);  	string invoice = string.Empty;  	values.TryGetValue ("invoice"' out invoice);  	string payment_fee = string.Empty;  	values.TryGetValue ("payment_fee"' out payment_fee);  	var sb = new StringBuilder ();  	sb.AppendLine ("Paypal PDT:");  	sb.AppendLine ("total: " + total);  	sb.AppendLine ("Payer status: " + payer_status);  	sb.AppendLine ("Payment status: " + payment_status);  	sb.AppendLine ("Pending reason: " + pending_reason);  	sb.AppendLine ("mc_currency: " + mc_currency);  	sb.AppendLine ("txn_id: " + txn_id);  	sb.AppendLine ("payment_type: " + payment_type);  	sb.AppendLine ("payer_id: " + payer_id);  	sb.AppendLine ("receiver_id: " + receiver_id);  	sb.AppendLine ("invoice: " + invoice);  	sb.AppendLine ("payment_fee: " + payment_fee);  	//order note  	order.OrderNotes.Add (new OrderNote () {  		Note = sb.ToString ()'  		DisplayToCustomer = false'  		CreatedOnUtc = DateTime.UtcNow  	});  	_orderService.UpdateOrder (order);  	//load settings for a chosen store scope  	var storeScope = this.GetActiveStoreScopeConfiguration (_storeService' _workContext);  	var payPalStandardPaymentSettings = _settingService.LoadSetting<PayPalStandardPaymentSettings> (storeScope);  	//validate order total  	if (payPalStandardPaymentSettings.PdtValidateOrderTotal && !Math.Round (total' 2).Equals (Math.Round (order.OrderTotal' 2))) {  		string errorStr = string.Format ("PayPal PDT. Returned order total {0} doesn't equal order total {1}"' total' order.OrderTotal);  		_logger.Error (errorStr);  		return RedirectToAction ("Index"' "Home"' new {  			area = ""  		});  	}  	//mark order as paid  	if (_orderProcessingService.CanMarkOrderAsPaid (order)) {  		order.AuthorizationTransactionId = txn_id;  		_orderService.UpdateOrder (order);  		_orderProcessingService.MarkOrderAsPaid (order);  	}  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The following statement contains a magic number: if (order != null) {  	decimal total = decimal.Zero;  	try {  		total = decimal.Parse (values ["mc_gross"]' new CultureInfo ("en-US"));  	}  	catch (Exception exc) {  		_logger.Error ("PayPal PDT. Error getting mc_gross"' exc);  	}  	string payer_status = string.Empty;  	values.TryGetValue ("payer_status"' out payer_status);  	string payment_status = string.Empty;  	values.TryGetValue ("payment_status"' out payment_status);  	string pending_reason = string.Empty;  	values.TryGetValue ("pending_reason"' out pending_reason);  	string mc_currency = string.Empty;  	values.TryGetValue ("mc_currency"' out mc_currency);  	string txn_id = string.Empty;  	values.TryGetValue ("txn_id"' out txn_id);  	string payment_type = string.Empty;  	values.TryGetValue ("payment_type"' out payment_type);  	string payer_id = string.Empty;  	values.TryGetValue ("payer_id"' out payer_id);  	string receiver_id = string.Empty;  	values.TryGetValue ("receiver_id"' out receiver_id);  	string invoice = string.Empty;  	values.TryGetValue ("invoice"' out invoice);  	string payment_fee = string.Empty;  	values.TryGetValue ("payment_fee"' out payment_fee);  	var sb = new StringBuilder ();  	sb.AppendLine ("Paypal PDT:");  	sb.AppendLine ("total: " + total);  	sb.AppendLine ("Payer status: " + payer_status);  	sb.AppendLine ("Payment status: " + payment_status);  	sb.AppendLine ("Pending reason: " + pending_reason);  	sb.AppendLine ("mc_currency: " + mc_currency);  	sb.AppendLine ("txn_id: " + txn_id);  	sb.AppendLine ("payment_type: " + payment_type);  	sb.AppendLine ("payer_id: " + payer_id);  	sb.AppendLine ("receiver_id: " + receiver_id);  	sb.AppendLine ("invoice: " + invoice);  	sb.AppendLine ("payment_fee: " + payment_fee);  	//order note  	order.OrderNotes.Add (new OrderNote () {  		Note = sb.ToString ()'  		DisplayToCustomer = false'  		CreatedOnUtc = DateTime.UtcNow  	});  	_orderService.UpdateOrder (order);  	//load settings for a chosen store scope  	var storeScope = this.GetActiveStoreScopeConfiguration (_storeService' _workContext);  	var payPalStandardPaymentSettings = _settingService.LoadSetting<PayPalStandardPaymentSettings> (storeScope);  	//validate order total  	if (payPalStandardPaymentSettings.PdtValidateOrderTotal && !Math.Round (total' 2).Equals (Math.Round (order.OrderTotal' 2))) {  		string errorStr = string.Format ("PayPal PDT. Returned order total {0} doesn't equal order total {1}"' total' order.OrderTotal);  		_logger.Error (errorStr);  		return RedirectToAction ("Index"' "Home"' new {  			area = ""  		});  	}  	//mark order as paid  	if (_orderProcessingService.CanMarkOrderAsPaid (order)) {  		order.AuthorizationTransactionId = txn_id;  		_orderService.UpdateOrder (order);  		_orderProcessingService.MarkOrderAsPaid (order);  	}  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The following statement contains a magic number: if (payPalStandardPaymentSettings.PdtValidateOrderTotal && !Math.Round (total' 2).Equals (Math.Round (order.OrderTotal' 2))) {  	string errorStr = string.Format ("PayPal PDT. Returned order total {0} doesn't equal order total {1}"' total' order.OrderTotal);  	_logger.Error (errorStr);  	return RedirectToAction ("Index"' "Home"' new {  		area = ""  	});  }  
Magic Number,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,PDTHandler,The following statement contains a magic number: if (payPalStandardPaymentSettings.PdtValidateOrderTotal && !Math.Round (total' 2).Equals (Math.Round (order.OrderTotal' 2))) {  	string errorStr = string.Format ("PayPal PDT. Returned order total {0} doesn't equal order total {1}"' total' order.OrderTotal);  	_logger.Error (errorStr);  	return RedirectToAction ("Index"' "Home"' new {  		area = ""  	});  }  
Missing Default,Nop.Plugin.Payments.PayPalStandard.Controllers,PaymentPayPalStandardController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.PayPalStandard\Controllers\PaymentPayPalStandardController.cs,IPNHandler,The following switch statement is missing a default case: switch (newPaymentStatus) {  case PaymentStatus.Authorized:  case PaymentStatus.Paid:  	{  		var recurringPaymentHistory = rp.RecurringPaymentHistory;  		if (recurringPaymentHistory.Count == 0) {  			//first payment  			var rph = new RecurringPaymentHistory () {  				RecurringPaymentId = rp.Id'  				OrderId = initialOrder.Id'  				CreatedOnUtc = DateTime.UtcNow  			};  			rp.RecurringPaymentHistory.Add (rph);  			_orderService.UpdateRecurringPayment (rp);  		}  		else {  			//next payments  			_orderProcessingService.ProcessNextRecurringPayment (rp);  		}  	}  	break;  }  
