Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The method has 160 lines of code.
Long Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The method has 116 lines of code.
Long Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,NextToken,The method has 185 lines of code.
Long Method,Nop.Web.Framework.Seo,GenericPathRoute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRoute.cs,GetRouteData,The method has 131 lines of code.
Complex Method,Nop.Web.Framework,RemotePost,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\RemotePost.cs,Post,Cyclomatic complexity of the method is 8
Complex Method,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,Cyclomatic complexity of the method is 13
Complex Method,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,Cyclomatic complexity of the method is 12
Complex Method,Nop.Web.Framework.Controllers,FormValueRequiredAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Controllers\FormValueRequiredAttribute.cs,IsValidForRequest,Cyclomatic complexity of the method is 10
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseComparison,Cyclomatic complexity of the method is 29
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseAdditive,Cyclomatic complexity of the method is 14
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseMultiplicative,Cyclomatic complexity of the method is 11
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseTypeAccess,Cyclomatic complexity of the method is 9
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseMemberAccess,Cyclomatic complexity of the method is 15
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseElementAccess,Cyclomatic complexity of the method is 8
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GetNumericTypeKind,Cyclomatic complexity of the method is 13
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,PromoteExpression,Cyclomatic complexity of the method is 17
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseNumber,Cyclomatic complexity of the method is 44
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,Cyclomatic complexity of the method is 30
Complex Method,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,NextToken,Cyclomatic complexity of the method is 111
Complex Method,Nop.Web.Framework.Seo,WwwRequirementAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\WwwRequirementAttribute.cs,OnAuthorization,Cyclomatic complexity of the method is 18
Complex Method,Nop.Web.Framework.Seo,GenericPathRoute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRoute.cs,GetRouteData,Cyclomatic complexity of the method is 29
Complex Method,Nop.Web.Framework.Security,FilePermissionHelper,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Security\FilePermissionHelper.cs,CheckPermissions,Cyclomatic complexity of the method is 32
Complex Method,Nop.Web.Framework.Security,NopHttpsRequirementAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Security\NopHttpsRequirementAttribute.cs,OnAuthorization,Cyclomatic complexity of the method is 16
Complex Method,Nop.Web.Framework.UI,PageHeadBuilder,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\PageHeadBuilder.cs,GenerateTitle,Cyclomatic complexity of the method is 9
Complex Method,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,Cyclomatic complexity of the method is 15
Long Parameter List,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The method has 14 parameters.
Long Parameter List,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,LocalizedEditor,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,OverrideStoreCheckboxFor,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,OverrideStoreCheckboxFor,The method has 6 parameters.
Long Parameter List,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,OverrideStoreCheckboxFor,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The method has 10 parameters.
Long Parameter List,Nop.Web.Framework,WebWorkContext,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\WebWorkContext.cs,WebWorkContext,The method has 13 parameters.
Long Parameter List,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,FindMethod,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,FindIndexer,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,FindBestMethod,The method has 7 parameters.
Long Parameter List,Nop.Web.Framework.Mvc,DependencyRegistrarExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Mvc\DependencyRegistrarExtensions.cs,RegisterPluginDataContext,The method has 7 parameters.
Long Parameter List,Nop.Web.Framework.Mvc,NopMetadataProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Mvc\NopMetadataProvider.cs,CreateMetadata,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Seo,GenericPathRoute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRoute.cs,GenericPathRoute,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Seo,GenericPathRouteExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRouteExtensions.cs,MapGenericPathRoute,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Seo,GenericPathRouteExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRouteExtensions.cs,MapGenericPathRoute,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Seo,GenericPathRouteExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRouteExtensions.cs,MapGenericPathRoute,The method has 6 parameters.
Long Parameter List,Nop.Web.Framework.Mvc.Routes,GuidConstraint,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Mvc\Routes\GuidConstraint.cs,Match,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Security,FilePermissionHelper,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Security\FilePermissionHelper.cs,CheckPermissions,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Localization,LocalizedRoute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedRoute.cs,LocalizedRoute,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Localization,LocalizedRouteExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedRouteExtensions.cs,MapLocalizedRoute,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Localization,LocalizedRouteExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedRouteExtensions.cs,MapLocalizedRoute,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Localization,LocalizedRouteExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedRouteExtensions.cs,MapLocalizedRoute,The method has 6 parameters.
Long Parameter List,Nop.Web.Framework.Themes,ThemeableVirtualPathProviderViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,GetPath,The method has 10 parameters.
Long Parameter List,Nop.Web.Framework.Themes,ThemeableVirtualPathProviderViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,GetPathFromGeneralName,The method has 8 parameters.
Long Parameter List,Nop.Web.Framework.Themes,ThemeableVirtualPathProviderViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,CreateCacheKey,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.Themes,ThemeContext,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeContext.cs,ThemeContext,The method has 5 parameters.
Long Parameter List,Nop.Web.Framework.UI,PageHeadBuilder,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\PageHeadBuilder.cs,GenerateScripts,The method has 8 parameters.
Long Statement,Nop.Web.Framework,LanguageSeoCodeAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\LanguageSeoCodeAttribute.cs,OnActionExecuting,The length of the statement  "	if (filterContext.RouteData == null || filterContext.RouteData.Route == null || !(filterContext.RouteData.Route is LocalizedRoute)) " is 131.
Long Statement,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Login"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Logout page " is 225.
Long Statement,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Logout"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Register page " is 228.
Long Statement,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Register"' StringComparison.InvariantCultureIgnoreCase)) && !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("RegisterResult"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Password recovery page " is 440.
Long Statement,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("PasswordRecovery"' StringComparison.InvariantCultureIgnoreCase)) && !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("PasswordRecoveryConfirm"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Account activation page " is 458.
Long Statement,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("AccountActivation"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Register page " is 239.
Long Statement,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("CheckUsernameAvailability"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the GetStatesByCountryId ajax method (can be used during registration) " is 300.
Long Statement,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CountryController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("GetStatesByCountryId"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the method (AJAX) for accepting EU Cookie law " is 269.
Long Statement,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CommonController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("EuCookieLawAccept"' StringComparison.InvariantCultureIgnoreCase))) { " is 201.
Long Statement,Nop.Web.Framework,StoreClosedAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\StoreClosedAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Login"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Logout page " is 225.
Long Statement,Nop.Web.Framework,StoreClosedAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\StoreClosedAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Logout"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the method (AJAX) for accepting EU Cookie law " is 256.
Long Statement,Nop.Web.Framework,StoreClosedAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\StoreClosedAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CommonController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("EuCookieLawAccept"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the store closed page " is 241.
Long Statement,Nop.Web.Framework,StoreClosedAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\StoreClosedAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CommonController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("StoreClosed"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the change language page (request) " is 248.
Long Statement,Nop.Web.Framework,StoreClosedAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\StoreClosedAttribute.cs,OnActionExecuting,The length of the statement  "	!(controllerName.Equals ("Nop.Web.Controllers.CommonController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("SetLanguage"' StringComparison.InvariantCultureIgnoreCase))) { " is 195.
Long Statement,Nop.Web.Framework,StoreClosedAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\StoreClosedAttribute.cs,OnActionExecuting,The length of the statement  "		if (storeInformationSettings.StoreClosedAllowForAdmins && EngineContext.Current.Resolve<IWorkContext> ().CurrentCustomer.IsAdmin ()) { " is 134.
Long Statement,Nop.Web.Framework,StoreLastVisitedPageAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\StoreLastVisitedPageAttribute.cs,OnActionExecuting,The length of the statement  "			genericAttributeService.SaveAttribute (workContext.CurrentCustomer' SystemCustomerAttributeNames.LastVisitedPage' pageUrl); " is 123.
Long Statement,Nop.Web.Framework,RemotePost,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\RemotePost.cs,Post,The length of the statement  "		_httpContext.Response.Write (string.Format ("<form name=\"{0}\" method=\"{1}\" action=\"{2}\" accept-charset=\"{3}\">"' FormName' Method' Url' AcceptCharset)); " is 159.
Long Statement,Nop.Web.Framework,RemotePost,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\RemotePost.cs,Post,The length of the statement  "		_httpContext.Response.Write (string.Format ("<form name=\"{0}\" method=\"{1}\" action=\"{2}\" >"' FormName' Method' Url)); " is 122.
Long Statement,Nop.Web.Framework,RemotePost,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\RemotePost.cs,Post,The length of the statement  "					_httpContext.Response.Write (string.Format ("<input name=\"{0}\" type=\"hidden\" value=\"{1}\">"' HttpUtility.HtmlEncode (key)' HttpUtility.HtmlEncode (value))); " is 161.
Long Statement,Nop.Web.Framework,RemotePost,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\RemotePost.cs,Post,The length of the statement  "			_httpContext.Response.Write (string.Format ("<input name=\"{0}\" type=\"hidden\" value=\"{1}\">"' HttpUtility.HtmlEncode (_inputValues.Keys [i])' HttpUtility.HtmlEncode (_inputValues [_inputValues.Keys [i]]))); " is 210.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	HttpContext.Current != null ? (new HttpContextWrapper (HttpContext.Current) as HttpContextBase) : (new FakeHttpContext ("~/") as HttpContextBase)).As<HttpContextBase> ().InstancePerLifetimeScope (); " is 198.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.Register (x => new EfDataProviderManager (x.Resolve<DataSettings> ())).As<BaseDataProviderManager> ().InstancePerDependency (); " is 135.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.Register (x => x.Resolve<BaseDataProviderManager> ().LoadDataProvider ()).As<IDataProvider> ().InstancePerDependency (); " is 128.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "		builder.Register<IDbContext> (c => new NopObjectContext (dataProviderSettings.DataConnectionString)).InstancePerLifetimeScope (); " is 129.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "		builder.Register<IDbContext> (c => new NopObjectContext (dataSettingsManager.LoadSettings ().DataConnectionString)).InstancePerLifetimeScope (); " is 144.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<MemoryCacheManager> ().As<ICacheManager> ().Named<ICacheManager> ("nop_cache_static").SingleInstance (); " is 125.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<PerRequestCacheManager> ().As<ICacheManager> ().Named<ICacheManager> ("nop_cache_per_request").InstancePerLifetimeScope (); " is 144.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<BackInStockSubscriptionService> ().As<IBackInStockSubscriptionService> ().InstancePerLifetimeScope (); " is 123.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<RecentlyViewedProductsService> ().As<IRecentlyViewedProductsService> ().InstancePerLifetimeScope (); " is 121.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<SpecificationAttributeService> ().As<ISpecificationAttributeService> ().InstancePerLifetimeScope (); " is 121.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<ProductTagService> ().As<IProductTagService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 176.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<PermissionService> ().As<IPermissionService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 176.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<AclService> ().As<IAclService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 162.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<PriceCalculationService> ().As<IPriceCalculationService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 188.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<StoreMappingService> ().As<IStoreMappingService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 180.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<SettingService> ().As<ISettingService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 170.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<LocalizationService> ().As<ILocalizationService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 180.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<LocalizedEntityService> ().As<ILocalizedEntityService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 186.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<NewsLetterSubscriptionService> ().As<INewsLetterSubscriptionService> ().InstancePerLifetimeScope (); " is 121.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<UrlRecordService> ().As<IUrlRecordService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 174.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	builder.RegisterType<CustomerActivityService> ().As<ICustomerActivityService> ().WithParameter (ResolvedParameter.ForNamed<ICacheManager> ("nop_cache_static")).InstancePerLifetimeScope (); " is 188.
Long Statement,Nop.Web.Framework,DependencyRegistrar,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\DependencyRegistrar.cs,Register,The length of the statement  "	if (!String.IsNullOrEmpty (ConfigurationManager.AppSettings ["UseFastInstallationService"]) && Convert.ToBoolean (ConfigurationManager.AppSettings ["UseFastInstallationService"])) { " is 181.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DeleteConfirmation,The length of the statement  "	var modalId = MvcHtmlString.Create (helper.ViewData.ModelMetadata.ModelType.Name.ToLower () + "-delete-confirmation").ToHtmlString (); " is 134.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DeleteConfirmation,The length of the statement  "	window.AppendLine (string.Format ("title: '{0}''"' EngineContext.Current.Resolve<ILocalizationService> ().GetResource ("Admin.Common.AreYouSure"))); " is 148.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,NopLabelFor,The length of the statement  "			hintResource = EngineContext.Current.Resolve<ILocalizationService> ().GetResource (resourceDisplayName.ResourceKey + ".Hint"' langId); " is 134.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,OverrideStoreCheckboxFor,The length of the statement  "			dataInputSelector = "#" + parentContainer + " input' #" + parentContainer + " textarea' #" + parentContainer + " select"; " is 121.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The length of the statement  "		days.AppendFormat ("<option value='{0}'{1}>{0}</option>"' i' (selectedDay.HasValue && selectedDay.Value == i) ? " selected=\"selected\"" : null); " is 145.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The length of the statement  "		months.AppendFormat ("<option value='{0}'{1}>{2}</option>"' i' (selectedMonth.HasValue && selectedMonth.Value == i) ? " selected=\"selected\"" : null' CultureInfo.CurrentUICulture.DateTimeFormat.GetMonthName (i)); " is 213.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The length of the statement  "			years.AppendFormat ("<option value='{0}'{1}>{0}</option>"' i' (selectedYear.HasValue && selectedYear.Value == i) ? " selected=\"selected\"" : null); " is 148.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The length of the statement  "			years.AppendFormat ("<option value='{0}'{1}>{0}</option>"' i' (selectedYear.HasValue && selectedYear.Value == i) ? " selected=\"selected\"" : null); " is 148.
Long Statement,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,LabelFor,The length of the statement  "	tag.Attributes.Add ("for"' TagBuilder.CreateSanitizedId (html.ViewContext.ViewData.TemplateInfo.GetFullHtmlFieldId (htmlFieldName))); " is 133.
Long Statement,Nop.Web.Framework,WebWorkContext,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\WebWorkContext.cs,GetLanguageFromUrl,The length of the statement  "	var language = _languageService.GetAllLanguages ().FirstOrDefault (l => seoCode.Equals (l.UniqueSeoCode' StringComparison.InvariantCultureIgnoreCase)); " is 151.
Long Statement,Nop.Web.Framework,WebWorkContext,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\WebWorkContext.cs,GetLanguageFromBrowserSettings,The length of the statement  "	var language = _languageService.GetAllLanguages ().FirstOrDefault (l => userLanguage.Equals (l.LanguageCulture' StringComparison.InvariantCultureIgnoreCase)); " is 158.
Long Statement,Nop.Web.Framework.Controllers,BaseController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Controllers\BaseController.cs,GetActiveStoreScopeConfiguration,The length of the statement  "	var storeId = workContext.CurrentCustomer.GetAttribute<int> (SystemCustomerAttributeNames.AdminAreaStoreScopeConfiguration); " is 124.
Long Statement,Nop.Web.Framework.Controllers,ParameterBasedOnFormNameAndValueAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Controllers\ParameterBasedOnFormNameAndValueAttribute.cs,OnActionExecuting,The length of the statement  "	filterContext.ActionParameters [_actionParameterName] = !string.IsNullOrEmpty (formValue) && formValue.ToLower ().Equals (_value.ToLower ()); " is 141.
Long Statement,Nop.Web.Framework.Controllers,AdminAuthorizeAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Controllers\AdminAuthorizeAttribute.cs,GetAdminAuthorizeAttributes,The length of the statement  "	return descriptor.GetCustomAttributes (typeof(AdminAuthorizeAttribute)' true).Concat (descriptor.ControllerDescriptor.GetCustomAttributes (typeof(AdminAuthorizeAttribute)' true)).OfType<AdminAuthorizeAttribute> (); " is 214.
Long Statement,Nop.Web.Framework.Kendoui,ClassFactory,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbGet = tb.DefineMethod ("get_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' dp.Type' Type.EmptyTypes); " is 168.
Long Statement,Nop.Web.Framework.Kendoui,ClassFactory,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbSet = tb.DefineMethod ("set_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new Type[] { " is 160.
Long Statement,Nop.Web.Framework.Kendoui,ClassFactory,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GenerateEquals,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("Equals"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(bool)' new Type[] { " is 182.
Long Statement,Nop.Web.Framework.Kendoui,ClassFactory,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GenerateGetHashCode,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("GetHashCode"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(int)' Type.EmptyTypes); " is 191.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseComparison,The length of the statement  "	while (token.id == TokenId.Equal || token.id == TokenId.DoubleEqual || token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater || token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual || token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual) { " is 289.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseComparison,The length of the statement  "		bool isEquality = op.id == TokenId.Equal || op.id == TokenId.DoubleEqual || op.id == TokenId.ExclamationEqual || op.id == TokenId.LessGreater; " is 142.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseComparison,The length of the statement  "			CheckAndPromoteOperands (isEquality ? typeof(IEqualitySignatures) : typeof(IRelationalSignatures)' op.text' ref left' ref right' op.pos); " is 137.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseMultiplicative,The length of the statement  "	while (token.id == TokenId.Asterisk || token.id == TokenId.Slash || token.id == TokenId.Percent || TokenIdentifierIs ("mod")) { " is 127.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseIdentifier,The length of the statement  "	if (symbols.TryGetValue (token.text' out value) || externals != null && externals.TryGetValue (token.text' out value)) { " is 120.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseMemberAccess,The length of the statement  "		return member is PropertyInfo ? Expression.Property (instance' (PropertyInfo)member) : Expression.Field (instance' (FieldInfo)member); " is 134.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,FindPropertyOrField,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,FindPropertyOrField,The length of the statement  "		MemberInfo[] members = t.FindMembers (MemberTypes.Property | MemberTypes.Field' flags' Type.FilterNameIgnoreCase' memberName); " is 126.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,FindMethod,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,FindIndexer,The length of the statement  "			IEnumerable<MethodBase> methods = members.OfType<PropertyInfo> ().Select (p => (MethodBase)p.GetGetMethod ()).Where (m => m != null); " is 133.
Long Statement,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseEnum,The length of the statement  "		MemberInfo[] memberInfos = type.FindMembers (MemberTypes.Field' BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static' Type.FilterNameIgnoreCase' name); " is 168.
Long Statement,Nop.Web.Framework.Kendoui,Filter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Filter.cs,ToExpression,The length of the statement  "		return "(" + String.Join (" " + Logic + " "' Filters.Select (filter => filter.ToExpression (filters)).ToArray ()) + ")"; " is 120.
Long Statement,Nop.Web.Framework.Kendoui,ModelStateExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\ModelStateExtensions.cs,SerializeErrors,The length of the statement  "	return modelState.Where<KeyValuePair<string' ModelState>> (entry => entry.Value.Errors.Any<ModelError> ()).ToDictionary<KeyValuePair<string' ModelState>' string' Dictionary<string' object>> (entry => entry.Key' entry => SerializeModelState (entry.Value)); " is 255.
Long Statement,Nop.Web.Framework.Kendoui,ModelStateExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\ModelStateExtensions.cs,SerializeModelState,The length of the statement  "	dictionary ["errors"] = modelState.Errors.Select<ModelError' string> (x => GetErrorMessage (x' modelState)).ToArray<string> (); " is 127.
Long Statement,Nop.Web.Framework.Menu,XmlSiteMap,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Menu\XmlSiteMap.cs,PopulateNode,The length of the statement  "		//apply admin area as described here - http://www.nopcommerce.com/boards/t/20478/broken-menus-in-admin-area-whilst-trying-to-make-a-plugin-admin-page.aspx " is 154.
Long Statement,Nop.Web.Framework.Mvc,NullJsonResult,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Mvc\NullJsonResult.cs,ExecuteResult,The length of the statement  "	//we do it as described here - http://stackoverflow.com/questions/15939944/jquery-post-json-fails-when-returning-null-from-asp-net-mvc " is 134.
Long Statement,Nop.Web.Framework.Mvc,CommaSeparatedModelBinder,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Mvc\CommaSeparatedModelBinder.cs,BindModel,The length of the statement  "	return BindCsv (bindingContext.ModelType' bindingContext.ModelName' bindingContext) ?? base.BindModel (controllerContext' bindingContext); " is 138.
Long Statement,Nop.Web.Framework.Mvc,CommaSeparatedModelBinder,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Mvc\CommaSeparatedModelBinder.cs,GetPropertyValue,The length of the statement  "	return BindCsv (propertyDescriptor.PropertyType' propertyDescriptor.Name' bindingContext) ?? base.GetPropertyValue (controllerContext' bindingContext' propertyDescriptor' propertyBinder); " is 187.
Long Statement,Nop.Web.Framework.Mvc,XmlDownloadResult,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Mvc\XmlDownloadResult.cs,ExecuteResult,The length of the statement  "	context.HttpContext.Response.AddHeader ("content-disposition"' string.Format ("attachment; filename={0}"' FileDownloadName)); " is 125.
Long Statement,Nop.Web.Framework.Mvc,NopMetadataProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Mvc\NopMetadataProvider.cs,CreateMetadata,The length of the statement  "			throw new NopException ("There is already an attribute with the name of \"" + additionalValue.Name + "\" on this model."); " is 122.
Long Statement,Nop.Web.Framework.Seo,GenericPathRoute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRoute.cs,GetRouteData,The length of the statement  "		var slugForCurrentLanguage = SeoExtensions.GetSeName (urlRecord.EntityId' urlRecord.EntityName' workContext.WorkingLanguage.Id); " is 128.
Long Statement,Nop.Web.Framework.Seo,GenericPathRoute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRoute.cs,GetRouteData,The length of the statement  "		if (!String.IsNullOrEmpty (slugForCurrentLanguage) && !slugForCurrentLanguage.Equals (slug' StringComparison.InvariantCultureIgnoreCase)) { " is 139.
Long Statement,Nop.Web.Framework.Seo,GenericPathRoute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Seo\GenericPathRoute.cs,GetRouteData,The length of the statement  "			//we should make not null or "" validation above because some entities does not have SeName for standard (ID=0) language (e.g. news' blog posts) " is 144.
Long Statement,Nop.Web.Framework.Security,AdminValidateIpAddressAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Security\AdminValidateIpAddressAttribute.cs,OnActionExecuting,The length of the statement  "		if (!thisPageUrl.StartsWith (string.Format ("{0}admin/security/accessdenied"' webHelper.GetStoreLocation ())' StringComparison.InvariantCultureIgnoreCase)) { " is 157.
Long Statement,Nop.Web.Framework.Themes,ThemeableVirtualPathProviderViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,GetPath,The length of the statement  "		throw new InvalidOperationException (string.Format (CultureInfo.CurrentCulture' "Properties cannot be null or empty."' new object[] { " is 133.
Long Statement,Nop.Web.Framework.Themes,ThemeableVirtualPathProviderViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,GetPath,The length of the statement  "		return this.GetPathFromGeneralName (controllerContext' viewLocations' name' controllerName' areaName' theme' key' ref searchedLocations); " is 137.
Long Statement,Nop.Web.Framework.Themes,ThemeableVirtualPathProviderViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,FindThemeableView,The length of the statement  "	string str2 = this.GetPath (controllerContext' this.ViewLocationFormats' this.AreaViewLocationFormats' "ViewLocationFormats"' viewName' requiredString' theme' "View"' useCache' out strArray); " is 191.
Long Statement,Nop.Web.Framework.Themes,ThemeableVirtualPathProviderViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,FindThemeableView,The length of the statement  "	string str3 = this.GetPath (controllerContext' this.MasterLocationFormats' this.AreaMasterLocationFormats' "MasterLocationFormats"' masterName' requiredString' theme' "Master"' useCache' out strArray2); " is 202.
Long Statement,Nop.Web.Framework.Themes,ThemeableVirtualPathProviderViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,FindThemeablePartialView,The length of the statement  "	string str2 = this.GetPath (controllerContext' this.PartialViewLocationFormats' this.AreaPartialViewLocationFormats' "PartialViewLocationFormats"' partialViewName' requiredString' theme' "Partial"' useCache' out strArray); " is 222.
Long Statement,Nop.Web.Framework.Themes,AreaAwareViewLocation,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableVirtualPathProviderViewEngine.cs,Format,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' _virtualPathFormatString' viewName' controllerName' areaName' theme); " is 121.
Long Statement,Nop.Web.Framework.Themes,ThemeableRazorViewEngine,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeableRazorViewEngine.cs,CreatePartialView,The length of the statement  "	//return new RazorView(controllerContext' partialPath' layoutPath' runViewStartPages' fileExtensions' base.ViewPageActivator); " is 126.
Long Statement,Nop.Web.Framework.Themes,ThemeProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeProvider.cs,GetThemeConfiguration,The length of the statement  "	return _themeConfigurations.SingleOrDefault (x => x.ThemeName.Equals (themeName' StringComparison.InvariantCultureIgnoreCase)); " is 127.
Long Statement,Nop.Web.Framework.Themes,ThemeProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Themes\ThemeProvider.cs,ThemeConfigurationExists,The length of the statement  "	return GetThemeConfigurations ().Any (configuration => configuration.ThemeName.Equals (themeName' StringComparison.InvariantCultureIgnoreCase)); " is 144.
Long Statement,Nop.Web.Framework.UI,PageHeadBuilder,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\PageHeadBuilder.cs,GenerateScripts,The length of the statement  "		var partsToBundle = _scriptParts [location].Where (x => !x.ExcludeFromBundle).Select (x => x.Part).Distinct ().ToArray (); " is 122.
Long Statement,Nop.Web.Framework.UI,PageHeadBuilder,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\PageHeadBuilder.cs,GenerateScripts,The length of the statement  "		var partsToDontBundle = _scriptParts [location].Where (x => x.ExcludeFromBundle).Select (x => x.Part).Distinct ().ToArray (); " is 125.
Long Statement,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The length of the statement  "		links.Append (string.Format (localizationService.GetResource ("Pager.CurrentPage")' model.PageIndex + 1' model.TotalPages' model.TotalItems)); " is 142.
Long Statement,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,GetFirstIndividualPageIndex,The length of the statement  "	if ((model.TotalPages < individualPagesDisplayedCount) || ((model.PageIndex - (individualPagesDisplayedCount / 2)) < 0)) { " is 122.
Complex Conditional,Nop.Web.Framework,PublicStoreAllowNavigationAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\PublicStoreAllowNavigationAttribute.cs,OnActionExecuting,The conditional expression  "!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Login"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Logout page  !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Logout"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Register page  !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Register"' StringComparison.InvariantCultureIgnoreCase)) && !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("RegisterResult"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Password recovery page  !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("PasswordRecovery"' StringComparison.InvariantCultureIgnoreCase)) && !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("PasswordRecoveryConfirm"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Account activation page  !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("AccountActivation"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Register page  !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("CheckUsernameAvailability"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the GetStatesByCountryId ajax method (can be used during registration)  !(controllerName.Equals ("Nop.Web.Controllers.CountryController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("GetStatesByCountryId"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the method (AJAX) for accepting EU Cookie law  !(controllerName.Equals ("Nop.Web.Controllers.CommonController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("EuCookieLawAccept"' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,Nop.Web.Framework,StoreClosedAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\StoreClosedAttribute.cs,OnActionExecuting,The conditional expression  "!(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Login"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the Logout page  !(controllerName.Equals ("Nop.Web.Controllers.CustomerController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("Logout"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the method (AJAX) for accepting EU Cookie law  !(controllerName.Equals ("Nop.Web.Controllers.CommonController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("EuCookieLawAccept"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the store closed page  !(controllerName.Equals ("Nop.Web.Controllers.CommonController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("StoreClosed"' StringComparison.InvariantCultureIgnoreCase)) && //ensure it's not the change language page (request)  !(controllerName.Equals ("Nop.Web.Controllers.CommonController"' StringComparison.InvariantCultureIgnoreCase) && actionName.Equals ("SetLanguage"' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType (exprType) || IsEnumType (exprType)) && (IsNumericType (type)) || IsEnumType (type)"  is complex.
Complex Conditional,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom (type) || type.IsAssignableFrom (exprType) || exprType.IsInterface || type.IsInterface"  is complex.
Empty Catch Block,Nop.Web.Framework.Security,FilePermissionHelper,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Security\FilePermissionHelper.cs,CheckPermissions,The method has an empty catch block.
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta > 0) {  	if (delta < 60)// 60 (seconds)  	 {  		result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  	}  	else if (delta < 120)//2 (minutes) * 60 (seconds)  	 {  		result = "a minute ago";  	}  	else if (delta < 2700)// 45 (minutes) * 60 (seconds)  	 {  		result = ts.Minutes + " minutes ago";  	}  	else if (delta < 5400)// 90 (minutes) * 60 (seconds)  	 {  		result = "an hour ago";  	}  	else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int hours = ts.Hours;  		if (hours == 1)  			hours = 2;  		result = hours + " hours ago";  	}  	else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = "yesterday";  	}  	else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		result = ts.Days + " days ago";  	}  	else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)  	 {  		int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  		result = months <= 1 ? "one month ago" : months + " months ago";  	}  	else {  		int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  		result = years <= 1 ? "one year ago" : years + " years ago";  	}  }  else {  	DateTime tmp1 = source;  	if (convertToUserTime) {  		tmp1 = EngineContext.Current.Resolve<IDateTimeHelper> ().ConvertToUserTime (tmp1' DateTimeKind.Utc);  	}  	//default formatting  	if (!String.IsNullOrEmpty (defaultFormat)) {  		result = tmp1.ToString (defaultFormat);  	}  	else {  		result = tmp1.ToString ();  	}  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 60)// 60 (seconds)   {  	result = ts.Seconds == 1 ? "one second ago" : ts.Seconds + " seconds ago";  }  else if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 120)//2 (minutes) * 60 (seconds)   {  	result = "a minute ago";  }  else if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2700)// 45 (minutes) * 60 (seconds)   {  	result = ts.Minutes + " minutes ago";  }  else if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 5400)// 90 (minutes) * 60 (seconds)   {  	result = "an hour ago";  }  else if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 86400)// 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int hours = ts.Hours;  	if (hours == 1)  		hours = 2;  	result = hours + " hours ago";  }  else if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (hours == 1)  	hours = 2;  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: hours = 2;  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 172800)// 48 (hours) * 60 (minutes) * 60 (seconds)   {  	result = "yesterday";  }  else if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 2592000)// 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	result = ts.Days + " days ago";  }  else if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,Extensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Extensions.cs,RelativeFormat,The following statement contains a magic number: if (delta < 31104000)// 12 (months) * 30 (days) * 24 (hours) * 60 (minutes) * 60 (seconds)   {  	int months = Convert.ToInt32 (Math.Floor ((double)ts.Days / 30));  	result = months <= 1 ? "one month ago" : months + " months ago";  }  else {  	int years = Convert.ToInt32 (Math.Floor ((double)ts.Days / 365));  	result = years <= 1 ? "one year ago" : years + " years ago";  }  
Magic Number,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The following statement contains a magic number: for (int i = 1; i <= 31; i++)  	days.AppendFormat ("<option value='{0}'{1}>{0}</option>"' i' (selectedDay.HasValue && selectedDay.Value == i) ? " selected=\"selected\"" : null);  
Magic Number,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	months.AppendFormat ("<option value='{0}'{1}>{2}</option>"' i' (selectedMonth.HasValue && selectedMonth.Value == i) ? " selected=\"selected\"" : null' CultureInfo.CurrentUICulture.DateTimeFormat.GetMonthName (i));  }  
Magic Number,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The following statement contains a magic number: if (beginYear == null)  	beginYear = DateTime.UtcNow.Year - 100;  
Magic Number,Nop.Web.Framework,HtmlExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\HtmlExtensions.cs,DatePickerDropDowns,The following statement contains a magic number: beginYear = DateTime.UtcNow.Year - 100;  
Magic Number,Nop.Web.Framework,WebWorkContext,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\WebWorkContext.cs,SetCustomerCookie,The following statement contains a magic number: if (_httpContext != null && _httpContext.Response != null) {  	var cookie = new HttpCookie (CustomerCookieName);  	cookie.HttpOnly = true;  	cookie.Value = customerGuid.ToString ();  	if (customerGuid == Guid.Empty) {  		cookie.Expires = DateTime.Now.AddMonths (-1);  	}  	else {  		int cookieExpires = 24 * 365;  		//TODO make configurable  		cookie.Expires = DateTime.Now.AddHours (cookieExpires);  	}  	_httpContext.Response.Cookies.Remove (CustomerCookieName);  	_httpContext.Response.Cookies.Add (cookie);  }  
Magic Number,Nop.Web.Framework,WebWorkContext,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\WebWorkContext.cs,SetCustomerCookie,The following statement contains a magic number: if (_httpContext != null && _httpContext.Response != null) {  	var cookie = new HttpCookie (CustomerCookieName);  	cookie.HttpOnly = true;  	cookie.Value = customerGuid.ToString ();  	if (customerGuid == Guid.Empty) {  		cookie.Expires = DateTime.Now.AddMonths (-1);  	}  	else {  		int cookieExpires = 24 * 365;  		//TODO make configurable  		cookie.Expires = DateTime.Now.AddHours (cookieExpires);  	}  	_httpContext.Response.Cookies.Remove (CustomerCookieName);  	_httpContext.Response.Cookies.Add (cookie);  }  
Magic Number,Nop.Web.Framework,WebWorkContext,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\WebWorkContext.cs,SetCustomerCookie,The following statement contains a magic number: if (customerGuid == Guid.Empty) {  	cookie.Expires = DateTime.Now.AddMonths (-1);  }  else {  	int cookieExpires = 24 * 365;  	//TODO make configurable  	cookie.Expires = DateTime.Now.AddHours (cookieExpires);  }  
Magic Number,Nop.Web.Framework,WebWorkContext,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\WebWorkContext.cs,SetCustomerCookie,The following statement contains a magic number: if (customerGuid == Guid.Empty) {  	cookie.Expires = DateTime.Now.AddMonths (-1);  }  else {  	int cookieExpires = 24 * 365;  	//TODO make configurable  	cookie.Expires = DateTime.Now.AddHours (cookieExpires);  }  
Magic Number,Nop.Web.Framework.Controllers,BaseController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Controllers\BaseController.cs,GetActiveStoreScopeConfiguration,The following statement contains a magic number: if (storeService.GetAllStores ().Count < 2)  	return 0;  
Magic Number,Nop.Web.Framework.Kendoui,DataSourceRequest,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\DataSourceRequest.cs,DataSourceRequest,The following statement contains a magic number: this.PageSize = 10;  
Magic Number,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)  	throw ParseError (errorPos' Res.IifRequiresThreeArgs);  
Magic Number,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional (args [0]' args [1]' args [2]' errorPos);  
Magic Number,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 2;  
Magic Number,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 3;  
Magic Number,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: return 2;  
Magic Number,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: return 3;  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,GetLanguageSeoCodeFromUrl,The following statement contains a magic number: if (isRawPath) {  	if (applicationPath.IsVirtualDirectory ()) {  		//we're in virtual directory. So remove its path  		url = url.RemoveApplicationPathFromRawUrl (applicationPath);  	}  	return url.Substring (1' _seoCodeLength);  }  else {  	return url.Substring (2' _seoCodeLength);  }  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,GetLanguageSeoCodeFromUrl,The following statement contains a magic number: return url.Substring (2' _seoCodeLength);  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,IsLocalizedUrl,The following statement contains a magic number: if (isRawPath) {  	if (applicationPath.IsVirtualDirectory ()) {  		//we're in virtual directory. So remove its path  		url = url.RemoveApplicationPathFromRawUrl (applicationPath);  	}  	int length = url.Length;  	//too short url  	if (length < 1 + _seoCodeLength)  		return false;  	//url like "/en"  	if (length == 1 + _seoCodeLength)  		return true;  	//urls like "/en/" or "/en/somethingelse"  	return (length > 1 + _seoCodeLength) && (url [1 + _seoCodeLength] == '/');  }  else {  	int length = url.Length;  	//too short url  	if (length < 2 + _seoCodeLength)  		return false;  	//url like "/en"  	if (length == 2 + _seoCodeLength)  		return true;  	//urls like "/en/" or "/en/somethingelse"  	return (length > 2 + _seoCodeLength) && (url [2 + _seoCodeLength] == '/');  }  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,IsLocalizedUrl,The following statement contains a magic number: if (isRawPath) {  	if (applicationPath.IsVirtualDirectory ()) {  		//we're in virtual directory. So remove its path  		url = url.RemoveApplicationPathFromRawUrl (applicationPath);  	}  	int length = url.Length;  	//too short url  	if (length < 1 + _seoCodeLength)  		return false;  	//url like "/en"  	if (length == 1 + _seoCodeLength)  		return true;  	//urls like "/en/" or "/en/somethingelse"  	return (length > 1 + _seoCodeLength) && (url [1 + _seoCodeLength] == '/');  }  else {  	int length = url.Length;  	//too short url  	if (length < 2 + _seoCodeLength)  		return false;  	//url like "/en"  	if (length == 2 + _seoCodeLength)  		return true;  	//urls like "/en/" or "/en/somethingelse"  	return (length > 2 + _seoCodeLength) && (url [2 + _seoCodeLength] == '/');  }  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,IsLocalizedUrl,The following statement contains a magic number: if (isRawPath) {  	if (applicationPath.IsVirtualDirectory ()) {  		//we're in virtual directory. So remove its path  		url = url.RemoveApplicationPathFromRawUrl (applicationPath);  	}  	int length = url.Length;  	//too short url  	if (length < 1 + _seoCodeLength)  		return false;  	//url like "/en"  	if (length == 1 + _seoCodeLength)  		return true;  	//urls like "/en/" or "/en/somethingelse"  	return (length > 1 + _seoCodeLength) && (url [1 + _seoCodeLength] == '/');  }  else {  	int length = url.Length;  	//too short url  	if (length < 2 + _seoCodeLength)  		return false;  	//url like "/en"  	if (length == 2 + _seoCodeLength)  		return true;  	//urls like "/en/" or "/en/somethingelse"  	return (length > 2 + _seoCodeLength) && (url [2 + _seoCodeLength] == '/');  }  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,IsLocalizedUrl,The following statement contains a magic number: if (isRawPath) {  	if (applicationPath.IsVirtualDirectory ()) {  		//we're in virtual directory. So remove its path  		url = url.RemoveApplicationPathFromRawUrl (applicationPath);  	}  	int length = url.Length;  	//too short url  	if (length < 1 + _seoCodeLength)  		return false;  	//url like "/en"  	if (length == 1 + _seoCodeLength)  		return true;  	//urls like "/en/" or "/en/somethingelse"  	return (length > 1 + _seoCodeLength) && (url [1 + _seoCodeLength] == '/');  }  else {  	int length = url.Length;  	//too short url  	if (length < 2 + _seoCodeLength)  		return false;  	//url like "/en"  	if (length == 2 + _seoCodeLength)  		return true;  	//urls like "/en/" or "/en/somethingelse"  	return (length > 2 + _seoCodeLength) && (url [2 + _seoCodeLength] == '/');  }  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,IsLocalizedUrl,The following statement contains a magic number: if (length < 2 + _seoCodeLength)  	return false;  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,IsLocalizedUrl,The following statement contains a magic number: if (length == 2 + _seoCodeLength)  	return true;  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,IsLocalizedUrl,The following statement contains a magic number: return (length > 2 + _seoCodeLength) && (url [2 + _seoCodeLength] == '/');  
Magic Number,Nop.Web.Framework.Localization,LocalizedUrlExtenstions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Localization\LocalizedUrlExtenstions.cs,IsLocalizedUrl,The following statement contains a magic number: return (length > 2 + _seoCodeLength) && (url [2 + _seoCodeLength] == '/');  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if (showPagerItems && (model.TotalPages > 1)) {  	if (showFirst) {  		//first page  		if ((model.PageIndex >= 3) && (model.TotalPages > individualPagesDisplayedCount)) {  			links.Append (CreatePageLink (1' localizationService.GetResource ("Pager.First")' "first-page"));  		}  	}  	if (showPrevious) {  		//previous page  		if (model.PageIndex > 0) {  			links.Append (CreatePageLink (model.PageIndex' localizationService.GetResource ("Pager.Previous")' "previous-page"));  		}  	}  	if (showIndividualPages) {  		//individual pages  		int firstIndividualPageIndex = GetFirstIndividualPageIndex ();  		int lastIndividualPageIndex = GetLastIndividualPageIndex ();  		for (int i = firstIndividualPageIndex; i <= lastIndividualPageIndex; i++) {  			if (model.PageIndex == i) {  				links.AppendFormat ("<li class=\"current-page\"><span>{0}</span></li>"' (i + 1));  			}  			else {  				links.Append (CreatePageLink (i + 1' (i + 1).ToString ()' "individual-page"));  			}  		}  	}  	if (showNext) {  		//next page  		if ((model.PageIndex + 1) < model.TotalPages) {  			links.Append (CreatePageLink (model.PageIndex + 2' localizationService.GetResource ("Pager.Next")' "next-page"));  		}  	}  	if (showLast) {  		//last page  		if (((model.PageIndex + 3) < model.TotalPages) && (model.TotalPages > individualPagesDisplayedCount)) {  			links.Append (CreatePageLink (model.TotalPages' localizationService.GetResource ("Pager.Last")' "last-page"));  		}  	}  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if (showPagerItems && (model.TotalPages > 1)) {  	if (showFirst) {  		//first page  		if ((model.PageIndex >= 3) && (model.TotalPages > individualPagesDisplayedCount)) {  			links.Append (CreatePageLink (1' localizationService.GetResource ("Pager.First")' "first-page"));  		}  	}  	if (showPrevious) {  		//previous page  		if (model.PageIndex > 0) {  			links.Append (CreatePageLink (model.PageIndex' localizationService.GetResource ("Pager.Previous")' "previous-page"));  		}  	}  	if (showIndividualPages) {  		//individual pages  		int firstIndividualPageIndex = GetFirstIndividualPageIndex ();  		int lastIndividualPageIndex = GetLastIndividualPageIndex ();  		for (int i = firstIndividualPageIndex; i <= lastIndividualPageIndex; i++) {  			if (model.PageIndex == i) {  				links.AppendFormat ("<li class=\"current-page\"><span>{0}</span></li>"' (i + 1));  			}  			else {  				links.Append (CreatePageLink (i + 1' (i + 1).ToString ()' "individual-page"));  			}  		}  	}  	if (showNext) {  		//next page  		if ((model.PageIndex + 1) < model.TotalPages) {  			links.Append (CreatePageLink (model.PageIndex + 2' localizationService.GetResource ("Pager.Next")' "next-page"));  		}  	}  	if (showLast) {  		//last page  		if (((model.PageIndex + 3) < model.TotalPages) && (model.TotalPages > individualPagesDisplayedCount)) {  			links.Append (CreatePageLink (model.TotalPages' localizationService.GetResource ("Pager.Last")' "last-page"));  		}  	}  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if (showPagerItems && (model.TotalPages > 1)) {  	if (showFirst) {  		//first page  		if ((model.PageIndex >= 3) && (model.TotalPages > individualPagesDisplayedCount)) {  			links.Append (CreatePageLink (1' localizationService.GetResource ("Pager.First")' "first-page"));  		}  	}  	if (showPrevious) {  		//previous page  		if (model.PageIndex > 0) {  			links.Append (CreatePageLink (model.PageIndex' localizationService.GetResource ("Pager.Previous")' "previous-page"));  		}  	}  	if (showIndividualPages) {  		//individual pages  		int firstIndividualPageIndex = GetFirstIndividualPageIndex ();  		int lastIndividualPageIndex = GetLastIndividualPageIndex ();  		for (int i = firstIndividualPageIndex; i <= lastIndividualPageIndex; i++) {  			if (model.PageIndex == i) {  				links.AppendFormat ("<li class=\"current-page\"><span>{0}</span></li>"' (i + 1));  			}  			else {  				links.Append (CreatePageLink (i + 1' (i + 1).ToString ()' "individual-page"));  			}  		}  	}  	if (showNext) {  		//next page  		if ((model.PageIndex + 1) < model.TotalPages) {  			links.Append (CreatePageLink (model.PageIndex + 2' localizationService.GetResource ("Pager.Next")' "next-page"));  		}  	}  	if (showLast) {  		//last page  		if (((model.PageIndex + 3) < model.TotalPages) && (model.TotalPages > individualPagesDisplayedCount)) {  			links.Append (CreatePageLink (model.TotalPages' localizationService.GetResource ("Pager.Last")' "last-page"));  		}  	}  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if (showFirst) {  	//first page  	if ((model.PageIndex >= 3) && (model.TotalPages > individualPagesDisplayedCount)) {  		links.Append (CreatePageLink (1' localizationService.GetResource ("Pager.First")' "first-page"));  	}  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if ((model.PageIndex >= 3) && (model.TotalPages > individualPagesDisplayedCount)) {  	links.Append (CreatePageLink (1' localizationService.GetResource ("Pager.First")' "first-page"));  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if (showNext) {  	//next page  	if ((model.PageIndex + 1) < model.TotalPages) {  		links.Append (CreatePageLink (model.PageIndex + 2' localizationService.GetResource ("Pager.Next")' "next-page"));  	}  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if ((model.PageIndex + 1) < model.TotalPages) {  	links.Append (CreatePageLink (model.PageIndex + 2' localizationService.GetResource ("Pager.Next")' "next-page"));  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: links.Append (CreatePageLink (model.PageIndex + 2' localizationService.GetResource ("Pager.Next")' "next-page"));  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if (showLast) {  	//last page  	if (((model.PageIndex + 3) < model.TotalPages) && (model.TotalPages > individualPagesDisplayedCount)) {  		links.Append (CreatePageLink (model.TotalPages' localizationService.GetResource ("Pager.Last")' "last-page"));  	}  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,ToHtmlString,The following statement contains a magic number: if (((model.PageIndex + 3) < model.TotalPages) && (model.TotalPages > individualPagesDisplayedCount)) {  	links.Append (CreatePageLink (model.TotalPages' localizationService.GetResource ("Pager.Last")' "last-page"));  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,GetFirstIndividualPageIndex,The following statement contains a magic number: if ((model.TotalPages < individualPagesDisplayedCount) || ((model.PageIndex - (individualPagesDisplayedCount / 2)) < 0)) {  	return 0;  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,GetFirstIndividualPageIndex,The following statement contains a magic number: if ((model.PageIndex + (individualPagesDisplayedCount / 2)) >= model.TotalPages) {  	return (model.TotalPages - individualPagesDisplayedCount);  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,GetFirstIndividualPageIndex,The following statement contains a magic number: return (model.PageIndex - (individualPagesDisplayedCount / 2));  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,GetLastIndividualPageIndex,The following statement contains a magic number: if ((individualPagesDisplayedCount % 2) == 0) {  	num--;  }  
Magic Number,Nop.Web.Framework.UI.Paging,Pager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\UI\Paging\Pager.cs,GetLastIndividualPageIndex,The following statement contains a magic number: if ((model.PageIndex - (individualPagesDisplayedCount / 2)) < 0) {  	return (individualPagesDisplayedCount - 1);  }  
Magic Number,Nop.Web.Framework.Validators,CreditCardPropertyValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Validators\CreditCardPropertyValidator.cs,IsValid,The following statement contains a magic number: foreach (char digit in ccValue.Reverse ()) {  	if (!Char.IsDigit (digit))  		return false;  	int digitValue = (digit - '0') * (evenDigit ? 2 : 1);  	evenDigit = !evenDigit;  	while (digitValue > 0) {  		checksum += digitValue % 10;  		digitValue /= 10;  	}  }  
Magic Number,Nop.Web.Framework.Validators,CreditCardPropertyValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Validators\CreditCardPropertyValidator.cs,IsValid,The following statement contains a magic number: foreach (char digit in ccValue.Reverse ()) {  	if (!Char.IsDigit (digit))  		return false;  	int digitValue = (digit - '0') * (evenDigit ? 2 : 1);  	evenDigit = !evenDigit;  	while (digitValue > 0) {  		checksum += digitValue % 10;  		digitValue /= 10;  	}  }  
Magic Number,Nop.Web.Framework.Validators,CreditCardPropertyValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Validators\CreditCardPropertyValidator.cs,IsValid,The following statement contains a magic number: foreach (char digit in ccValue.Reverse ()) {  	if (!Char.IsDigit (digit))  		return false;  	int digitValue = (digit - '0') * (evenDigit ? 2 : 1);  	evenDigit = !evenDigit;  	while (digitValue > 0) {  		checksum += digitValue % 10;  		digitValue /= 10;  	}  }  
Magic Number,Nop.Web.Framework.Validators,CreditCardPropertyValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Validators\CreditCardPropertyValidator.cs,IsValid,The following statement contains a magic number: while (digitValue > 0) {  	checksum += digitValue % 10;  	digitValue /= 10;  }  
Magic Number,Nop.Web.Framework.Validators,CreditCardPropertyValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Validators\CreditCardPropertyValidator.cs,IsValid,The following statement contains a magic number: while (digitValue > 0) {  	checksum += digitValue % 10;  	digitValue /= 10;  }  
Magic Number,Nop.Web.Framework.Validators,CreditCardPropertyValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Validators\CreditCardPropertyValidator.cs,IsValid,The following statement contains a magic number: checksum += digitValue % 10;  
Magic Number,Nop.Web.Framework.Validators,CreditCardPropertyValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Validators\CreditCardPropertyValidator.cs,IsValid,The following statement contains a magic number: digitValue /= 10;  
Magic Number,Nop.Web.Framework.Validators,CreditCardPropertyValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Validators\CreditCardPropertyValidator.cs,IsValid,The following statement contains a magic number: return (checksum % 10) == 0;  
Missing Default,Nop.Web.Framework.Controllers,FormValueRequiredAttribute,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Controllers\FormValueRequiredAttribute.cs,IsValidForRequest,The following switch statement is missing a default case: switch (this._requirement) {  case FormValueRequirement.Equal:  	{  		//do not iterate because "Invalid request" exception can be thrown  		value = controllerContext.HttpContext.Request.Form [buttonName];  	}  	break;  case FormValueRequirement.StartsWith:  	{  		foreach (var formValue in controllerContext.HttpContext.Request.Form.AllKeys) {  			if (formValue.StartsWith (buttonName' StringComparison.InvariantCultureIgnoreCase)) {  				value = controllerContext.HttpContext.Request.Form [formValue];  				break;  			}  		}  	}  	break;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Equal:  case TokenId.DoubleEqual:  	left = GenerateEqual (left' right);  	break;  case TokenId.ExclamationEqual:  case TokenId.LessGreater:  	left = GenerateNotEqual (left' right);  	break;  case TokenId.GreaterThan:  	left = GenerateGreaterThan (left' right);  	break;  case TokenId.GreaterThanEqual:  	left = GenerateGreaterThanEqual (left' right);  	break;  case TokenId.LessThan:  	left = GenerateLessThan (left' right);  	break;  case TokenId.LessThanEqual:  	left = GenerateLessThanEqual (left' right);  	break;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Plus:  	if (left.Type == typeof(string) || right.Type == typeof(string))  		goto case TokenId.Amphersand;  	CheckAndPromoteOperands (typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateAdd (left' right);  	break;  case TokenId.Minus:  	CheckAndPromoteOperands (typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateSubtract (left' right);  	break;  case TokenId.Amphersand:  	left = GenerateStringConcat (left' right);  	break;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Asterisk:  	left = Expression.Multiply (left' right);  	break;  case TokenId.Slash:  	left = Expression.Divide (left' right);  	break;  case TokenId.Percent:  case TokenId.Identifier:  	left = Expression.Modulo (left' right);  	break;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode (ce.Type)) {  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  	value = ParseNumber (text' target);  	break;  case TypeCode.Double:  	if (target == typeof(decimal))  		value = ParseNumber (text' target);  	break;  case TypeCode.String:  	value = ParseEnum (text' target);  	break;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode (GetNonNullableType (type))) {  case TypeCode.SByte:  	sbyte sb;  	if (sbyte.TryParse (text' out sb))  		return sb;  	break;  case TypeCode.Byte:  	byte b;  	if (byte.TryParse (text' out b))  		return b;  	break;  case TypeCode.Int16:  	short s;  	if (short.TryParse (text' out s))  		return s;  	break;  case TypeCode.UInt16:  	ushort us;  	if (ushort.TryParse (text' out us))  		return us;  	break;  case TypeCode.Int32:  	int i;  	if (int.TryParse (text' out i))  		return i;  	break;  case TypeCode.UInt32:  	uint ui;  	if (uint.TryParse (text' out ui))  		return ui;  	break;  case TypeCode.Int64:  	long l;  	if (long.TryParse (text' out l))  		return l;  	break;  case TypeCode.UInt64:  	ulong ul;  	if (ulong.TryParse (text' out ul))  		return ul;  	break;  case TypeCode.Single:  	float f;  	if (float.TryParse (text' out f))  		return f;  	break;  case TypeCode.Double:  	double d;  	if (double.TryParse (text' out d))  		return d;  	break;  case TypeCode.Decimal:  	decimal e;  	if (decimal.TryParse (text' out e))  		return e;  	break;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,Nop.Web.Framework.Kendoui,ExpressionParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Presentation\Nop.Web.Framework\Kendoui\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
