Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,Cyclomatic complexity of the method is 13
Complex Method,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,Cyclomatic complexity of the method is 19
Complex Method,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,Cyclomatic complexity of the method is 12
Complex Method,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,Cyclomatic complexity of the method is 12
Complex Method,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,Cyclomatic complexity of the method is 11
Complex Method,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,Cyclomatic complexity of the method is 27
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,The method has 6 parameters.
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,The method has 13 parameters.
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,AuthorizeNetPaymentProcessor,The method has 8 parameters.
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet.Validators,PaymentInfoValidator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Validators\PaymentInfoValidator.cs,PaymentInfoValidator,The method has 6 parameters.
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,CreateCustomerPaymentProfileAsync,The method has 5 parameters.
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,UpdateCustomerPaymentProfileAsync,The method has 5 parameters.
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ValidateCustomerPaymentProfile,The method has 6 parameters.
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ValidateCustomerPaymentProfileAsync,The method has 6 parameters.
Long Parameter List,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ValidateCustomerPaymentProfileAsync,The method has 7 parameters.
Long Identifier,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The length of the parameter maskedCreditCardNumberDecrypted is 31.
Long Identifier,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The length of the parameter maskedCreditCardNumberDecrypted is 31.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,The length of the statement  "		model.UseSandbox_OverrideForStore = _settingService.SettingExists (authorizeNetPaymentSettings' x => x.UseSandbox' storeScope); " is 127.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,The length of the statement  "		model.TransactModeId_OverrideForStore = _settingService.SettingExists (authorizeNetPaymentSettings' x => x.TransactMode' storeScope); " is 133.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,The length of the statement  "		model.TransactionKey_OverrideForStore = _settingService.SettingExists (authorizeNetPaymentSettings' x => x.TransactionKey' storeScope); " is 135.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,The length of the statement  "		model.LoginId_OverrideForStore = _settingService.SettingExists (authorizeNetPaymentSettings' x => x.LoginId' storeScope); " is 121.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,The length of the statement  "		model.AdditionalFee_OverrideForStore = _settingService.SettingExists (authorizeNetPaymentSettings' x => x.AdditionalFee' storeScope); " is 133.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,Configure,The length of the statement  "		model.AdditionalFeePercentage_OverrideForStore = _settingService.SettingExists (authorizeNetPaymentSettings' x => x.AdditionalFeePercentage' storeScope); " is 153.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,PaymentInfo,The length of the statement  "	var selectedCcType = model.CreditCardTypes.FirstOrDefault (x => x.Value.Equals (form ["CreditCardType"]' StringComparison.InvariantCultureIgnoreCase)); " is 151.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,PaymentInfo,The length of the statement  "	var selectedMonth = model.ExpireMonths.FirstOrDefault (x => x.Value.Equals (form ["ExpireMonth"]' StringComparison.InvariantCultureIgnoreCase)); " is 144.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,PaymentInfo,The length of the statement  "	var selectedYear = model.ExpireYears.FirstOrDefault (x => x.Value.Equals (form ["ExpireYear"]' StringComparison.InvariantCultureIgnoreCase)); " is 141.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,GetAuthorizeNETUrl,The length of the statement  "	return _authorizeNetPaymentSettings.UseSandbox ? "https://test.authorize.net/gateway/transact.dll" : "https://secure.authorize.net/gateway/transact.dll"; " is 153.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The length of the statement  "	form.Add ("x_exp_date"' processPaymentRequest.CreditCardExpireMonth.ToString ("D2") + processPaymentRequest.CreditCardExpireYear.ToString ()); " is 142.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,GetAdditionalHandlingFee,The length of the statement  "	var result = this.CalculateAdditionalFee (_orderTotalCalculationService' cart' _authorizeNetPaymentSettings.AdditionalFee' _authorizeNetPaymentSettings.AdditionalFeePercentage); " is 177.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The length of the statement  "	string[] codes = refundPaymentRequest.Order.CaptureTransactionId == null ? refundPaymentRequest.Order.AuthorizationTransactionCode.Split (''') : refundPaymentRequest.Order.CaptureTransactionId.Split ('''); " is 205.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The length of the statement  "	string maskedCreditCardNumberDecrypted = _encryptionService.DecryptText (refundPaymentRequest.Order.MaskedCreditCardNumber); " is 124.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The length of the statement  "			var isOrderFullyRefunded = (refundPaymentRequest.AmountToRefund + refundPaymentRequest.Order.RefundedAmount == refundPaymentRequest.Order.OrderTotal); " is 150.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The length of the statement  "	string[] codes = voidPaymentRequest.Order.CaptureTransactionId == null ? voidPaymentRequest.Order.AuthorizationTransactionCode.Split (''') : voidPaymentRequest.Order.CaptureTransactionId.Split ('''); " is 199.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The length of the statement  "	string maskedCreditCardNumberDecrypted = _encryptionService.DecryptText (voidPaymentRequest.Order.MaskedCreditCardNumber); " is 122.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The length of the statement  "		creditCard.expirationDate = processPaymentRequest.CreditCardExpireYear + "-" + processPaymentRequest.CreditCardExpireMonth; " is 123.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The length of the statement  "				result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' response.resultCode.ToString ()' response.subscriptionId.ToString ()); " is 148.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.AuthorizeNet.Notes"' "If you're using this gateway' ensure that your primary store currency is supported by Authorize.NET."); " is 181.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.AuthorizeNet.Fields.UseSandbox.Hint"' "Check to enable Sandbox (testing environment)."); " is 144.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.AuthorizeNet.Fields.TransactModeValues.Hint"' "Choose transaction mode"); " is 129.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.AuthorizeNet.Fields.TransactionKey.Hint"' "Specify transaction key"); " is 125.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.AuthorizeNet.Fields.LoginId.Hint"' "Specify login identifier."); " is 120.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.AuthorizeNet.Fields.AdditionalFee.Hint"' "Enter additional fee to charge your customers."); " is 147.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.AuthorizeNet.Fields.AdditionalFeePercentage"' "Additional fee. Use percentage"); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Install,The length of the statement  "	this.AddOrUpdatePluginLocaleResource ("Plugins.Payments.AuthorizeNet.Fields.AdditionalFeePercentage.Hint"' "Determines whether to apply a percentage additional fee to the order total. If not enabled' a fixed value is used."); " is 225.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnIsAliveOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnIsAliveOperationCompleted,The length of the statement  "		this.IsAliveCompleted (this' new IsAliveCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 143.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,AuthenticateTestAsync,The length of the statement  "		this.AuthenticateTestOperationCompleted = new System.Threading.SendOrPostCallback (this.OnAuthenticateTestOperationCompleted); " is 126.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnAuthenticateTestOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnAuthenticateTestOperationCompleted,The length of the statement  "		this.AuthenticateTestCompleted (this' new AuthenticateTestCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 161.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ARBCreateSubscriptionAsync,The length of the statement  "		this.ARBCreateSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback (this.OnARBCreateSubscriptionOperationCompleted); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnARBCreateSubscriptionOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnARBCreateSubscriptionOperationCompleted,The length of the statement  "		this.ARBCreateSubscriptionCompleted (this' new ARBCreateSubscriptionCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ARBUpdateSubscriptionAsync,The length of the statement  "		this.ARBUpdateSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback (this.OnARBUpdateSubscriptionOperationCompleted); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnARBUpdateSubscriptionOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnARBUpdateSubscriptionOperationCompleted,The length of the statement  "		this.ARBUpdateSubscriptionCompleted (this' new ARBUpdateSubscriptionCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ARBCancelSubscriptionAsync,The length of the statement  "		this.ARBCancelSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback (this.OnARBCancelSubscriptionOperationCompleted); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnARBCancelSubscriptionOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnARBCancelSubscriptionOperationCompleted,The length of the statement  "		this.ARBCancelSubscriptionCompleted (this' new ARBCancelSubscriptionCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ARBGetSubscriptionStatusAsync,The length of the statement  "		this.ARBGetSubscriptionStatusOperationCompleted = new System.Threading.SendOrPostCallback (this.OnARBGetSubscriptionStatusOperationCompleted); " is 142.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnARBGetSubscriptionStatusOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnARBGetSubscriptionStatusOperationCompleted,The length of the statement  "		this.ARBGetSubscriptionStatusCompleted (this' new ARBGetSubscriptionStatusCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 177.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,CreateCustomerProfileAsync,The length of the statement  "		this.CreateCustomerProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnCreateCustomerProfileOperationCompleted); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnCreateCustomerProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnCreateCustomerProfileOperationCompleted,The length of the statement  "		this.CreateCustomerProfileCompleted (this' new CreateCustomerProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,CreateCustomerPaymentProfileAsync,The length of the statement  "	this.CreateCustomerPaymentProfileAsync (merchantAuthentication' customerProfileId' paymentProfile' validationMode' null); " is 121.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,CreateCustomerPaymentProfileAsync,The length of the statement  "		this.CreateCustomerPaymentProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnCreateCustomerPaymentProfileOperationCompleted); " is 150.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnCreateCustomerPaymentProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnCreateCustomerPaymentProfileOperationCompleted,The length of the statement  "		this.CreateCustomerPaymentProfileCompleted (this' new CreateCustomerPaymentProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 185.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,CreateCustomerShippingAddressAsync,The length of the statement  "		this.CreateCustomerShippingAddressOperationCompleted = new System.Threading.SendOrPostCallback (this.OnCreateCustomerShippingAddressOperationCompleted); " is 152.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnCreateCustomerShippingAddressOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnCreateCustomerShippingAddressOperationCompleted,The length of the statement  "		this.CreateCustomerShippingAddressCompleted (this' new CreateCustomerShippingAddressCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 187.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetCustomerProfileAsync,The length of the statement  "		this.GetCustomerProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetCustomerProfileOperationCompleted); " is 130.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetCustomerProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetCustomerProfileOperationCompleted,The length of the statement  "		this.GetCustomerProfileCompleted (this' new GetCustomerProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 165.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetCustomerPaymentProfileAsync,The length of the statement  "		this.GetCustomerPaymentProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetCustomerPaymentProfileOperationCompleted); " is 144.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetCustomerPaymentProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetCustomerPaymentProfileOperationCompleted,The length of the statement  "		this.GetCustomerPaymentProfileCompleted (this' new GetCustomerPaymentProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 179.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetCustomerShippingAddressAsync,The length of the statement  "		this.GetCustomerShippingAddressOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetCustomerShippingAddressOperationCompleted); " is 146.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetCustomerShippingAddressOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetCustomerShippingAddressOperationCompleted,The length of the statement  "		this.GetCustomerShippingAddressCompleted (this' new GetCustomerShippingAddressCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 181.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,UpdateCustomerProfileAsync,The length of the statement  "		this.UpdateCustomerProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnUpdateCustomerProfileOperationCompleted); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnUpdateCustomerProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnUpdateCustomerProfileOperationCompleted,The length of the statement  "		this.UpdateCustomerProfileCompleted (this' new UpdateCustomerProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,UpdateCustomerPaymentProfileAsync,The length of the statement  "	this.UpdateCustomerPaymentProfileAsync (merchantAuthentication' customerProfileId' paymentProfile' validationMode' null); " is 121.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,UpdateCustomerPaymentProfileAsync,The length of the statement  "		this.UpdateCustomerPaymentProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnUpdateCustomerPaymentProfileOperationCompleted); " is 150.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnUpdateCustomerPaymentProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnUpdateCustomerPaymentProfileOperationCompleted,The length of the statement  "		this.UpdateCustomerPaymentProfileCompleted (this' new UpdateCustomerPaymentProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 185.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,UpdateCustomerShippingAddressAsync,The length of the statement  "		this.UpdateCustomerShippingAddressOperationCompleted = new System.Threading.SendOrPostCallback (this.OnUpdateCustomerShippingAddressOperationCompleted); " is 152.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnUpdateCustomerShippingAddressOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnUpdateCustomerShippingAddressOperationCompleted,The length of the statement  "		this.UpdateCustomerShippingAddressCompleted (this' new UpdateCustomerShippingAddressCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 187.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,DeleteCustomerProfileAsync,The length of the statement  "		this.DeleteCustomerProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnDeleteCustomerProfileOperationCompleted); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnDeleteCustomerProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnDeleteCustomerProfileOperationCompleted,The length of the statement  "		this.DeleteCustomerProfileCompleted (this' new DeleteCustomerProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,DeleteCustomerPaymentProfileAsync,The length of the statement  "		this.DeleteCustomerPaymentProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnDeleteCustomerPaymentProfileOperationCompleted); " is 150.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnDeleteCustomerPaymentProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnDeleteCustomerPaymentProfileOperationCompleted,The length of the statement  "		this.DeleteCustomerPaymentProfileCompleted (this' new DeleteCustomerPaymentProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 185.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,DeleteCustomerShippingAddressAsync,The length of the statement  "		this.DeleteCustomerShippingAddressOperationCompleted = new System.Threading.SendOrPostCallback (this.OnDeleteCustomerShippingAddressOperationCompleted); " is 152.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnDeleteCustomerShippingAddressOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnDeleteCustomerShippingAddressOperationCompleted,The length of the statement  "		this.DeleteCustomerShippingAddressCompleted (this' new DeleteCustomerShippingAddressCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 187.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,CreateCustomerProfileTransactionAsync,The length of the statement  "		this.CreateCustomerProfileTransactionOperationCompleted = new System.Threading.SendOrPostCallback (this.OnCreateCustomerProfileTransactionOperationCompleted); " is 158.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnCreateCustomerProfileTransactionOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnCreateCustomerProfileTransactionOperationCompleted,The length of the statement  "		this.CreateCustomerProfileTransactionCompleted (this' new CreateCustomerProfileTransactionCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 193.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ValidateCustomerPaymentProfileAsync,The length of the statement  "	this.ValidateCustomerPaymentProfileAsync (merchantAuthentication' customerProfileId' customerPaymentProfileId' customerShippingAddressId' cardCode' validationMode' null); " is 170.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,ValidateCustomerPaymentProfileAsync,The length of the statement  "		this.ValidateCustomerPaymentProfileOperationCompleted = new System.Threading.SendOrPostCallback (this.OnValidateCustomerPaymentProfileOperationCompleted); " is 154.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnValidateCustomerPaymentProfileOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnValidateCustomerPaymentProfileOperationCompleted,The length of the statement  "		this.ValidateCustomerPaymentProfileCompleted (this' new ValidateCustomerPaymentProfileCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 189.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetCustomerProfileIdsAsync,The length of the statement  "		this.GetCustomerProfileIdsOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetCustomerProfileIdsOperationCompleted); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetCustomerProfileIdsOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetCustomerProfileIdsOperationCompleted,The length of the statement  "		this.GetCustomerProfileIdsCompleted (this' new GetCustomerProfileIdsCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetHostedProfilePageAsync,The length of the statement  "		this.GetHostedProfilePageOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetHostedProfilePageOperationCompleted); " is 134.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetHostedProfilePageOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetHostedProfilePageOperationCompleted,The length of the statement  "		this.GetHostedProfilePageCompleted (this' new GetHostedProfilePageCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 169.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,UpdateSplitTenderGroupAsync,The length of the statement  "		this.UpdateSplitTenderGroupOperationCompleted = new System.Threading.SendOrPostCallback (this.OnUpdateSplitTenderGroupOperationCompleted); " is 138.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnUpdateSplitTenderGroupOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnUpdateSplitTenderGroupOperationCompleted,The length of the statement  "		this.UpdateSplitTenderGroupCompleted (this' new UpdateSplitTenderGroupCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 173.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetTransactionDetailsAsync,The length of the statement  "		this.GetTransactionDetailsOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetTransactionDetailsOperationCompleted); " is 136.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetTransactionDetailsOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetTransactionDetailsOperationCompleted,The length of the statement  "		this.GetTransactionDetailsCompleted (this' new GetTransactionDetailsCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 171.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetSettledBatchListAsync,The length of the statement  "		this.GetSettledBatchListOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetSettledBatchListOperationCompleted); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetSettledBatchListOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetSettledBatchListOperationCompleted,The length of the statement  "		this.GetSettledBatchListCompleted (this' new GetSettledBatchListCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 167.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetBatchStatisticsAsync,The length of the statement  "		this.GetBatchStatisticsOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetBatchStatisticsOperationCompleted); " is 130.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetBatchStatisticsOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetBatchStatisticsOperationCompleted,The length of the statement  "		this.GetBatchStatisticsCompleted (this' new GetBatchStatisticsCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 165.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetTransactionListAsync,The length of the statement  "		this.GetTransactionListOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetTransactionListOperationCompleted); " is 130.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetTransactionListOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetTransactionListOperationCompleted,The length of the statement  "		this.GetTransactionListCompleted (this' new GetTransactionListCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 165.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,GetUnsettledTransactionListAsync,The length of the statement  "		this.GetUnsettledTransactionListOperationCompleted = new System.Threading.SendOrPostCallback (this.OnGetUnsettledTransactionListOperationCompleted); " is 148.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetUnsettledTransactionListOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,OnGetUnsettledTransactionListOperationCompleted,The length of the statement  "		this.GetUnsettledTransactionListCompleted (this' new GetUnsettledTransactionListCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 183.
Long Statement,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,IsLocalFileSystemWebService,The length of the statement  "	if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) { " is 123.
Magic Number,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,PaymentInfo,The following statement contains a magic number: for (int i = 0; i < 15; i++) {  	string year = Convert.ToString (DateTime.Now.Year + i);  	model.ExpireYears.Add (new SelectListItem () {  		Text = year'  		Value = year'  	});  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,PaymentInfo,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	string text = (i < 10) ? "0" + i.ToString () : i.ToString ();  	model.ExpireMonths.Add (new SelectListItem () {  		Text = text'  		Value = i.ToString ()'  	});  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet.Controllers,PaymentAuthorizeNetController,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Controllers\PaymentAuthorizeNetController.cs,PaymentInfo,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	string text = (i < 10) ? "0" + i.ToString () : i.ToString ();  	model.ExpireMonths.Add (new SelectListItem () {  		Text = text'  		Value = i.ToString ()'  	});  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: form.Add ("x_invoice_num"' processPaymentRequest.OrderGuid.ToString ().Substring (0' 20));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		result.AvsResult = responseFields [5];  		//responseFields[38];  		if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  			result.NewPaymentStatus = PaymentStatus.Authorized;  		}  		else {  			result.NewPaymentStatus = PaymentStatus.Paid;  		}  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		result.AvsResult = responseFields [5];  		//responseFields[38];  		if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  			result.NewPaymentStatus = PaymentStatus.Authorized;  		}  		else {  			result.NewPaymentStatus = PaymentStatus.Paid;  		}  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		result.AvsResult = responseFields [5];  		//responseFields[38];  		if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  			result.NewPaymentStatus = PaymentStatus.Authorized;  		}  		else {  			result.NewPaymentStatus = PaymentStatus.Paid;  		}  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		result.AvsResult = responseFields [5];  		//responseFields[38];  		if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  			result.NewPaymentStatus = PaymentStatus.Authorized;  		}  		else {  			result.NewPaymentStatus = PaymentStatus.Paid;  		}  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		result.AvsResult = responseFields [5];  		//responseFields[38];  		if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  			result.NewPaymentStatus = PaymentStatus.Authorized;  		}  		else {  			result.NewPaymentStatus = PaymentStatus.Paid;  		}  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		result.AvsResult = responseFields [5];  		//responseFields[38];  		if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  			result.NewPaymentStatus = PaymentStatus.Authorized;  		}  		else {  			result.NewPaymentStatus = PaymentStatus.Paid;  		}  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		result.AvsResult = responseFields [5];  		//responseFields[38];  		if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  			result.NewPaymentStatus = PaymentStatus.Authorized;  		}  		else {  			result.NewPaymentStatus = PaymentStatus.Paid;  		}  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	result.AvsResult = responseFields [5];  	//responseFields[38];  	if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  		result.NewPaymentStatus = PaymentStatus.Authorized;  	}  	else {  		result.NewPaymentStatus = PaymentStatus.Paid;  	}  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	result.AvsResult = responseFields [5];  	//responseFields[38];  	if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  		result.NewPaymentStatus = PaymentStatus.Authorized;  	}  	else {  		result.NewPaymentStatus = PaymentStatus.Paid;  	}  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	result.AvsResult = responseFields [5];  	//responseFields[38];  	if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  		result.NewPaymentStatus = PaymentStatus.Authorized;  	}  	else {  		result.NewPaymentStatus = PaymentStatus.Paid;  	}  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	result.AvsResult = responseFields [5];  	//responseFields[38];  	if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  		result.NewPaymentStatus = PaymentStatus.Authorized;  	}  	else {  		result.NewPaymentStatus = PaymentStatus.Paid;  	}  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	result.AvsResult = responseFields [5];  	//responseFields[38];  	if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  		result.NewPaymentStatus = PaymentStatus.Authorized;  	}  	else {  		result.NewPaymentStatus = PaymentStatus.Paid;  	}  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	result.AvsResult = responseFields [5];  	//responseFields[38];  	if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  		result.NewPaymentStatus = PaymentStatus.Authorized;  	}  	else {  		result.NewPaymentStatus = PaymentStatus.Paid;  	}  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	result.AvsResult = responseFields [5];  	//responseFields[38];  	if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  		result.NewPaymentStatus = PaymentStatus.Authorized;  	}  	else {  		result.NewPaymentStatus = PaymentStatus.Paid;  	}  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: result.AvsResult = responseFields [5];  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following statement contains a magic number: result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		//result.AVSResult = responseFields[5];  		//responseFields[38];  		result.NewPaymentStatus = PaymentStatus.Paid;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		//result.AVSResult = responseFields[5];  		//responseFields[38];  		result.NewPaymentStatus = PaymentStatus.Paid;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		//result.AVSResult = responseFields[5];  		//responseFields[38];  		result.NewPaymentStatus = PaymentStatus.Paid;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		//result.AVSResult = responseFields[5];  		//responseFields[38];  		result.NewPaymentStatus = PaymentStatus.Paid;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		//result.AVSResult = responseFields[5];  		//responseFields[38];  		result.NewPaymentStatus = PaymentStatus.Paid;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  		result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  		//result.AVSResult = responseFields[5];  		//responseFields[38];  		result.NewPaymentStatus = PaymentStatus.Paid;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	//result.AVSResult = responseFields[5];  	//responseFields[38];  	result.NewPaymentStatus = PaymentStatus.Paid;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	//result.AVSResult = responseFields[5];  	//responseFields[38];  	result.NewPaymentStatus = PaymentStatus.Paid;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	//result.AVSResult = responseFields[5];  	//responseFields[38];  	result.NewPaymentStatus = PaymentStatus.Paid;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	//result.AVSResult = responseFields[5];  	//responseFields[38];  	result.NewPaymentStatus = PaymentStatus.Paid;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	//result.AVSResult = responseFields[5];  	//responseFields[38];  	result.NewPaymentStatus = PaymentStatus.Paid;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	//result.AVSResult = responseFields[5];  	//responseFields[38];  	result.NewPaymentStatus = PaymentStatus.Paid;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following statement contains a magic number: result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following statement contains a magic number: if (String.IsNullOrEmpty (maskedCreditCardNumberDecrypted) || maskedCreditCardNumberDecrypted.Length < 4) {  	result.AddError ("Last four digits of Credit Card Not Available");  	return result;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following statement contains a magic number: form.Add ("x_invoice_num"' refundPaymentRequest.Order.OrderGuid.ToString ().Substring (0' 20));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		var isOrderFullyRefunded = (refundPaymentRequest.AmountToRefund + refundPaymentRequest.Order.RefundedAmount == refundPaymentRequest.Order.OrderTotal);  		result.NewPaymentStatus = isOrderFullyRefunded ? PaymentStatus.Refunded : PaymentStatus.PartiallyRefunded;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		var isOrderFullyRefunded = (refundPaymentRequest.AmountToRefund + refundPaymentRequest.Order.RefundedAmount == refundPaymentRequest.Order.OrderTotal);  		result.NewPaymentStatus = isOrderFullyRefunded ? PaymentStatus.Refunded : PaymentStatus.PartiallyRefunded;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	var isOrderFullyRefunded = (refundPaymentRequest.AmountToRefund + refundPaymentRequest.Order.RefundedAmount == refundPaymentRequest.Order.OrderTotal);  	result.NewPaymentStatus = isOrderFullyRefunded ? PaymentStatus.Refunded : PaymentStatus.PartiallyRefunded;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	var isOrderFullyRefunded = (refundPaymentRequest.AmountToRefund + refundPaymentRequest.Order.RefundedAmount == refundPaymentRequest.Order.OrderTotal);  	result.NewPaymentStatus = isOrderFullyRefunded ? PaymentStatus.Refunded : PaymentStatus.PartiallyRefunded;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following statement contains a magic number: result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following statement contains a magic number: result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The following statement contains a magic number: if (String.IsNullOrEmpty (maskedCreditCardNumberDecrypted) || maskedCreditCardNumberDecrypted.Length < 4) {  	result.AddError ("Last four digits of Credit Card Not Available");  	return result;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.NewPaymentStatus = PaymentStatus.Voided;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The following statement contains a magic number: if (!String.IsNullOrEmpty (reply)) {  	string[] responseFields = reply.Split ('|');  	switch (responseFields [0]) {  	case "1":  		result.NewPaymentStatus = PaymentStatus.Voided;  		break;  	case "2":  		result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  		break;  	case "3":  		result.AddError (string.Format ("Error: {0}"' reply));  		break;  	}  }  else {  	result.AddError ("Authorize.NET unknown error");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.NewPaymentStatus = PaymentStatus.Voided;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The following statement contains a magic number: switch (responseFields [0]) {  case "1":  	result.NewPaymentStatus = PaymentStatus.Voided;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The following statement contains a magic number: result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The following statement contains a magic number: result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The following statement contains a magic number: if (!processPaymentRequest.IsRecurringPayment) {  	var customer = _customerService.GetCustomerById (processPaymentRequest.CustomerId);  	var subscription = new ARBSubscriptionType ();  	var creditCard = new net.authorize.api.CreditCardType ();  	subscription.name = processPaymentRequest.OrderGuid.ToString ();  	creditCard.cardNumber = processPaymentRequest.CreditCardNumber;  	creditCard.expirationDate = processPaymentRequest.CreditCardExpireYear + "-" + processPaymentRequest.CreditCardExpireMonth;  	// required format for API is YYYY-MM  	creditCard.cardCode = processPaymentRequest.CreditCardCvv2;  	subscription.payment = new PaymentType ();  	subscription.payment.Item = creditCard;  	subscription.billTo = new NameAndAddressType ();  	subscription.billTo.firstName = customer.BillingAddress.FirstName;  	subscription.billTo.lastName = customer.BillingAddress.LastName;  	subscription.billTo.address = customer.BillingAddress.Address1 + " " + customer.BillingAddress.Address2;  	subscription.billTo.city = customer.BillingAddress.City;  	if (customer.BillingAddress.StateProvince != null) {  		subscription.billTo.state = customer.BillingAddress.StateProvince.Abbreviation;  	}  	subscription.billTo.zip = customer.BillingAddress.ZipPostalCode;  	if (customer.ShippingAddress != null) {  		subscription.shipTo = new NameAndAddressType ();  		subscription.shipTo.firstName = customer.ShippingAddress.FirstName;  		subscription.shipTo.lastName = customer.ShippingAddress.LastName;  		subscription.shipTo.address = customer.ShippingAddress.Address1 + " " + customer.ShippingAddress.Address2;  		subscription.shipTo.city = customer.ShippingAddress.City;  		if (customer.ShippingAddress.StateProvince != null) {  			subscription.shipTo.state = customer.ShippingAddress.StateProvince.Abbreviation;  		}  		subscription.shipTo.zip = customer.ShippingAddress.ZipPostalCode;  	}  	subscription.customer = new CustomerType ();  	subscription.customer.email = customer.BillingAddress.Email;  	subscription.customer.phoneNumber = customer.BillingAddress.PhoneNumber;  	subscription.order = new OrderType ();  	subscription.order.description = "Recurring payment";  	// Create a subscription that is leng of specified occurrences and interval is amount of days ad runs  	subscription.paymentSchedule = new PaymentScheduleType ();  	DateTime dtNow = DateTime.UtcNow;  	subscription.paymentSchedule.startDate = new DateTime (dtNow.Year' dtNow.Month' dtNow.Day);  	subscription.paymentSchedule.startDateSpecified = true;  	subscription.paymentSchedule.totalOccurrences = Convert.ToInt16 (processPaymentRequest.RecurringTotalCycles);  	subscription.paymentSchedule.totalOccurrencesSpecified = true;  	var orderTotal = Math.Round (processPaymentRequest.OrderTotal' 2);  	subscription.amount = orderTotal;  	subscription.amountSpecified = true;  	// Interval can't be updated once a subscription is created.  	subscription.paymentSchedule.interval = new PaymentScheduleTypeInterval ();  	switch (processPaymentRequest.RecurringCyclePeriod) {  	case RecurringProductCyclePeriod.Days:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  		break;  	case RecurringProductCyclePeriod.Weeks:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 7);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  		break;  	case RecurringProductCyclePeriod.Months:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  		break;  	case RecurringProductCyclePeriod.Years:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 12);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  		break;  	default:  		throw new NopException ("Not supported cycle period");  	}  	using (var webService = new net.authorize.api.Service ()) {  		if (_authorizeNetPaymentSettings.UseSandbox)  			webService.Url = "https://apitest.authorize.net/soap/v1/Service.asmx";  		else  			webService.Url = "https://api.authorize.net/soap/v1/Service.asmx";  		var response = webService.ARBCreateSubscription (authentication' subscription);  		if (response.resultCode == MessageTypeEnum.Ok) {  			result.SubscriptionTransactionId = response.subscriptionId.ToString ();  			result.AuthorizationTransactionCode = response.resultCode.ToString ();  			result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' response.resultCode.ToString ()' response.subscriptionId.ToString ());  			if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  				result.NewPaymentStatus = PaymentStatus.Authorized;  			}  			else {  				result.NewPaymentStatus = PaymentStatus.Paid;  			}  		}  		else {  			result.AddError (string.Format ("Error processing recurring payment. {0}"' GetErrors (response)));  		}  	}  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The following statement contains a magic number: if (!processPaymentRequest.IsRecurringPayment) {  	var customer = _customerService.GetCustomerById (processPaymentRequest.CustomerId);  	var subscription = new ARBSubscriptionType ();  	var creditCard = new net.authorize.api.CreditCardType ();  	subscription.name = processPaymentRequest.OrderGuid.ToString ();  	creditCard.cardNumber = processPaymentRequest.CreditCardNumber;  	creditCard.expirationDate = processPaymentRequest.CreditCardExpireYear + "-" + processPaymentRequest.CreditCardExpireMonth;  	// required format for API is YYYY-MM  	creditCard.cardCode = processPaymentRequest.CreditCardCvv2;  	subscription.payment = new PaymentType ();  	subscription.payment.Item = creditCard;  	subscription.billTo = new NameAndAddressType ();  	subscription.billTo.firstName = customer.BillingAddress.FirstName;  	subscription.billTo.lastName = customer.BillingAddress.LastName;  	subscription.billTo.address = customer.BillingAddress.Address1 + " " + customer.BillingAddress.Address2;  	subscription.billTo.city = customer.BillingAddress.City;  	if (customer.BillingAddress.StateProvince != null) {  		subscription.billTo.state = customer.BillingAddress.StateProvince.Abbreviation;  	}  	subscription.billTo.zip = customer.BillingAddress.ZipPostalCode;  	if (customer.ShippingAddress != null) {  		subscription.shipTo = new NameAndAddressType ();  		subscription.shipTo.firstName = customer.ShippingAddress.FirstName;  		subscription.shipTo.lastName = customer.ShippingAddress.LastName;  		subscription.shipTo.address = customer.ShippingAddress.Address1 + " " + customer.ShippingAddress.Address2;  		subscription.shipTo.city = customer.ShippingAddress.City;  		if (customer.ShippingAddress.StateProvince != null) {  			subscription.shipTo.state = customer.ShippingAddress.StateProvince.Abbreviation;  		}  		subscription.shipTo.zip = customer.ShippingAddress.ZipPostalCode;  	}  	subscription.customer = new CustomerType ();  	subscription.customer.email = customer.BillingAddress.Email;  	subscription.customer.phoneNumber = customer.BillingAddress.PhoneNumber;  	subscription.order = new OrderType ();  	subscription.order.description = "Recurring payment";  	// Create a subscription that is leng of specified occurrences and interval is amount of days ad runs  	subscription.paymentSchedule = new PaymentScheduleType ();  	DateTime dtNow = DateTime.UtcNow;  	subscription.paymentSchedule.startDate = new DateTime (dtNow.Year' dtNow.Month' dtNow.Day);  	subscription.paymentSchedule.startDateSpecified = true;  	subscription.paymentSchedule.totalOccurrences = Convert.ToInt16 (processPaymentRequest.RecurringTotalCycles);  	subscription.paymentSchedule.totalOccurrencesSpecified = true;  	var orderTotal = Math.Round (processPaymentRequest.OrderTotal' 2);  	subscription.amount = orderTotal;  	subscription.amountSpecified = true;  	// Interval can't be updated once a subscription is created.  	subscription.paymentSchedule.interval = new PaymentScheduleTypeInterval ();  	switch (processPaymentRequest.RecurringCyclePeriod) {  	case RecurringProductCyclePeriod.Days:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  		break;  	case RecurringProductCyclePeriod.Weeks:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 7);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  		break;  	case RecurringProductCyclePeriod.Months:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  		break;  	case RecurringProductCyclePeriod.Years:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 12);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  		break;  	default:  		throw new NopException ("Not supported cycle period");  	}  	using (var webService = new net.authorize.api.Service ()) {  		if (_authorizeNetPaymentSettings.UseSandbox)  			webService.Url = "https://apitest.authorize.net/soap/v1/Service.asmx";  		else  			webService.Url = "https://api.authorize.net/soap/v1/Service.asmx";  		var response = webService.ARBCreateSubscription (authentication' subscription);  		if (response.resultCode == MessageTypeEnum.Ok) {  			result.SubscriptionTransactionId = response.subscriptionId.ToString ();  			result.AuthorizationTransactionCode = response.resultCode.ToString ();  			result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' response.resultCode.ToString ()' response.subscriptionId.ToString ());  			if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  				result.NewPaymentStatus = PaymentStatus.Authorized;  			}  			else {  				result.NewPaymentStatus = PaymentStatus.Paid;  			}  		}  		else {  			result.AddError (string.Format ("Error processing recurring payment. {0}"' GetErrors (response)));  		}  	}  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The following statement contains a magic number: if (!processPaymentRequest.IsRecurringPayment) {  	var customer = _customerService.GetCustomerById (processPaymentRequest.CustomerId);  	var subscription = new ARBSubscriptionType ();  	var creditCard = new net.authorize.api.CreditCardType ();  	subscription.name = processPaymentRequest.OrderGuid.ToString ();  	creditCard.cardNumber = processPaymentRequest.CreditCardNumber;  	creditCard.expirationDate = processPaymentRequest.CreditCardExpireYear + "-" + processPaymentRequest.CreditCardExpireMonth;  	// required format for API is YYYY-MM  	creditCard.cardCode = processPaymentRequest.CreditCardCvv2;  	subscription.payment = new PaymentType ();  	subscription.payment.Item = creditCard;  	subscription.billTo = new NameAndAddressType ();  	subscription.billTo.firstName = customer.BillingAddress.FirstName;  	subscription.billTo.lastName = customer.BillingAddress.LastName;  	subscription.billTo.address = customer.BillingAddress.Address1 + " " + customer.BillingAddress.Address2;  	subscription.billTo.city = customer.BillingAddress.City;  	if (customer.BillingAddress.StateProvince != null) {  		subscription.billTo.state = customer.BillingAddress.StateProvince.Abbreviation;  	}  	subscription.billTo.zip = customer.BillingAddress.ZipPostalCode;  	if (customer.ShippingAddress != null) {  		subscription.shipTo = new NameAndAddressType ();  		subscription.shipTo.firstName = customer.ShippingAddress.FirstName;  		subscription.shipTo.lastName = customer.ShippingAddress.LastName;  		subscription.shipTo.address = customer.ShippingAddress.Address1 + " " + customer.ShippingAddress.Address2;  		subscription.shipTo.city = customer.ShippingAddress.City;  		if (customer.ShippingAddress.StateProvince != null) {  			subscription.shipTo.state = customer.ShippingAddress.StateProvince.Abbreviation;  		}  		subscription.shipTo.zip = customer.ShippingAddress.ZipPostalCode;  	}  	subscription.customer = new CustomerType ();  	subscription.customer.email = customer.BillingAddress.Email;  	subscription.customer.phoneNumber = customer.BillingAddress.PhoneNumber;  	subscription.order = new OrderType ();  	subscription.order.description = "Recurring payment";  	// Create a subscription that is leng of specified occurrences and interval is amount of days ad runs  	subscription.paymentSchedule = new PaymentScheduleType ();  	DateTime dtNow = DateTime.UtcNow;  	subscription.paymentSchedule.startDate = new DateTime (dtNow.Year' dtNow.Month' dtNow.Day);  	subscription.paymentSchedule.startDateSpecified = true;  	subscription.paymentSchedule.totalOccurrences = Convert.ToInt16 (processPaymentRequest.RecurringTotalCycles);  	subscription.paymentSchedule.totalOccurrencesSpecified = true;  	var orderTotal = Math.Round (processPaymentRequest.OrderTotal' 2);  	subscription.amount = orderTotal;  	subscription.amountSpecified = true;  	// Interval can't be updated once a subscription is created.  	subscription.paymentSchedule.interval = new PaymentScheduleTypeInterval ();  	switch (processPaymentRequest.RecurringCyclePeriod) {  	case RecurringProductCyclePeriod.Days:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  		break;  	case RecurringProductCyclePeriod.Weeks:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 7);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  		break;  	case RecurringProductCyclePeriod.Months:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  		break;  	case RecurringProductCyclePeriod.Years:  		subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 12);  		subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  		break;  	default:  		throw new NopException ("Not supported cycle period");  	}  	using (var webService = new net.authorize.api.Service ()) {  		if (_authorizeNetPaymentSettings.UseSandbox)  			webService.Url = "https://apitest.authorize.net/soap/v1/Service.asmx";  		else  			webService.Url = "https://api.authorize.net/soap/v1/Service.asmx";  		var response = webService.ARBCreateSubscription (authentication' subscription);  		if (response.resultCode == MessageTypeEnum.Ok) {  			result.SubscriptionTransactionId = response.subscriptionId.ToString ();  			result.AuthorizationTransactionCode = response.resultCode.ToString ();  			result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' response.resultCode.ToString ()' response.subscriptionId.ToString ());  			if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  				result.NewPaymentStatus = PaymentStatus.Authorized;  			}  			else {  				result.NewPaymentStatus = PaymentStatus.Paid;  			}  		}  		else {  			result.AddError (string.Format ("Error processing recurring payment. {0}"' GetErrors (response)));  		}  	}  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The following statement contains a magic number: switch (processPaymentRequest.RecurringCyclePeriod) {  case RecurringProductCyclePeriod.Days:  	subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  	subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  	break;  case RecurringProductCyclePeriod.Weeks:  	subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 7);  	subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  	break;  case RecurringProductCyclePeriod.Months:  	subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  	subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  	break;  case RecurringProductCyclePeriod.Years:  	subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 12);  	subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  	break;  default:  	throw new NopException ("Not supported cycle period");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The following statement contains a magic number: switch (processPaymentRequest.RecurringCyclePeriod) {  case RecurringProductCyclePeriod.Days:  	subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  	subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  	break;  case RecurringProductCyclePeriod.Weeks:  	subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 7);  	subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.days;  	break;  case RecurringProductCyclePeriod.Months:  	subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength);  	subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  	break;  case RecurringProductCyclePeriod.Years:  	subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 12);  	subscription.paymentSchedule.interval.unit = ARBSubscriptionUnitEnum.months;  	break;  default:  	throw new NopException ("Not supported cycle period");  }  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The following statement contains a magic number: subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 7);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessRecurringPayment,The following statement contains a magic number: subscription.paymentSchedule.interval.length = Convert.ToInt16 (processPaymentRequest.RecurringCycleLength * 12);  
Magic Number,Nop.Plugin.Payments.AuthorizeNet.net.authorize.api,Service,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\Web References\net.authorize.api\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {  	return true;  }  
Missing Default,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,ProcessPayment,The following switch statement is missing a default case: switch (responseFields [0]) {  case "1":  	result.AuthorizationTransactionCode = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.AuthorizationTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	result.AvsResult = responseFields [5];  	//responseFields[38];  	if (_authorizeNetPaymentSettings.TransactMode == TransactMode.Authorize) {  		result.NewPaymentStatus = PaymentStatus.Authorized;  	}  	else {  		result.NewPaymentStatus = PaymentStatus.Paid;  	}  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Missing Default,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Capture,The following switch statement is missing a default case: switch (responseFields [0]) {  case "1":  	result.CaptureTransactionId = string.Format ("{0}'{1}"' responseFields [6]' responseFields [4]);  	result.CaptureTransactionResult = string.Format ("Approved ({0}: {1})"' responseFields [2]' responseFields [3]);  	//result.AVSResult = responseFields[5];  	//responseFields[38];  	result.NewPaymentStatus = PaymentStatus.Paid;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Missing Default,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Refund,The following switch statement is missing a default case: switch (responseFields [0]) {  case "1":  	var isOrderFullyRefunded = (refundPaymentRequest.AmountToRefund + refundPaymentRequest.Order.RefundedAmount == refundPaymentRequest.Order.OrderTotal);  	result.NewPaymentStatus = isOrderFullyRefunded ? PaymentStatus.Refunded : PaymentStatus.PartiallyRefunded;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
Missing Default,Nop.Plugin.Payments.AuthorizeNet,AuthorizeNetPaymentProcessor,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Plugins\Nop.Plugin.Payments.AuthorizeNet\AuthorizeNetPaymentProcessor.cs,Void,The following switch statement is missing a default case: switch (responseFields [0]) {  case "1":  	result.NewPaymentStatus = PaymentStatus.Voided;  	break;  case "2":  	result.AddError (string.Format ("Declined ({0}: {1})"' responseFields [2]' responseFields [3]));  	break;  case "3":  	result.AddError (string.Format ("Error: {0}"' reply));  	break;  }  
