Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nop.Services.Catalog,CopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CopyProductService.cs,CopyProduct,The method has 352 lines of code.
Long Method,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The method has 129 lines of code.
Long Method,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The method has 366 lines of code.
Long Method,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The method has 586 lines of code.
Long Method,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The method has 126 lines of code.
Long Method,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The method has 114 lines of code.
Long Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCurrencies,The method has 127 lines of code.
Long Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCountriesAndStates,The method has 3065 lines of code.
Long Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCustomersAndUsers,The method has 105 lines of code.
Long Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The method has 213 lines of code.
Long Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The method has 439 lines of code.
Long Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The method has 226 lines of code.
Long Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The method has 2961 lines of code.
Long Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallActivityLogTypes,The method has 302 lines of code.
Long Method,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The method has 229 lines of code.
Long Method,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The method has 217 lines of code.
Long Method,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The method has 311 lines of code.
Long Method,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXml,The method has 109 lines of code.
Long Method,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The method has 212 lines of code.
Long Method,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The method has 160 lines of code.
Long Method,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The method has 362 lines of code.
Long Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The method has 323 lines of code.
Long Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The method has 747 lines of code.
Long Method,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The method has 108 lines of code.
Long Method,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The method has 114 lines of code.
Long Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The method has 130 lines of code.
Long Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The method has 100 lines of code.
Long Method,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,InitializeSeoCharacterTable,The method has 2011 lines of code.
Complex Method,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,Authorize,Cyclomatic complexity of the method is 21
Complex Method,Nop.Services.Authentication.External,RegistrationDetails,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\RegistrationDetails.cs,RegistrationDetails,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Catalog,CopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CopyProductService.cs,CopyProduct,Cyclomatic complexity of the method is 40
Complex Method,Nop.Services.Catalog,RecentlyViewedProductsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\RecentlyViewedProductsService.cs,AddProductToRecentlyViewedList,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Catalog,TierPriceExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\TierPriceExtensions.cs,FilterForCustomer,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Catalog,ProductExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductExtensions.cs,FormatStockMessage,Cyclomatic complexity of the method is 20
Complex Method,Nop.Services.Catalog,ProductExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductExtensions.cs,GetSkuMpnGtin,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetAllowedDiscounts,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetUnitPrice,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetProductCost,Cyclomatic complexity of the method is 11
Complex Method,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetProductVariantAttributeValuePriceAdjustment,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,Cyclomatic complexity of the method is 27
Complex Method,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,AddProductAttribute,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,AreProductAttributesEqual,Cyclomatic complexity of the method is 11
Complex Method,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,GenerateAllCombinations,Cyclomatic complexity of the method is 26
Complex Method,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,Cyclomatic complexity of the method is 41
Complex Method,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,AdjustInventory,Cyclomatic complexity of the method is 29
Complex Method,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,Cyclomatic complexity of the method is 63
Complex Method,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,Cyclomatic complexity of the method is 23
Complex Method,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,Cyclomatic complexity of the method is 20
Complex Method,Nop.Services.Customers,CustomerAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerAttributeParser.cs,AddCustomerAttribute,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Customers,CustomerAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerAttributeParser.cs,GetAttributeWarnings,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,ValidateCustomer,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,RegisterCustomer,Cyclomatic complexity of the method is 27
Complex Method,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,ChangePassword,Cyclomatic complexity of the method is 27
Complex Method,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,SetEmail,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Customers,CustomerReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerReportService.cs,GetBestCustomersReport,Cyclomatic complexity of the method is 11
Complex Method,Nop.Services.Customers,CustomerExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerExtensions.cs,FormatUserName,Cyclomatic complexity of the method is 16
Complex Method,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,Cyclomatic complexity of the method is 18
Complex Method,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,DeleteGuestCustomers,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Media,DownloadService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\DownloadService.cs,IsDownloadAllowed,Cyclomatic complexity of the method is 14
Complex Method,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,CalculateDimensions,Cyclomatic complexity of the method is 17
Complex Method,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetFileExtensionFromMimeType,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetDefaultPictureUrl,Cyclomatic complexity of the method is 14
Complex Method,Nop.Services.Shipping,ShipmentService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShipmentService.cs,GetAllShipments,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShoppingCartItemWeight,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetDimensions,Cyclomatic complexity of the method is 18
Complex Method,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,CreateShippingOptionRequests,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,Cyclomatic complexity of the method is 16
Complex Method,Nop.Services.Forums,ForumExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumExtensions.cs,FormatPostText,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,GetAllPrivateMessages,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Installation,SqlFileInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\SqlFileInstallationService.cs,ExecuteSqlFile,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,Cyclomatic complexity of the method is 31
Complex Method,Nop.Services.Messages,EmailSender,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailSender.cs,SendEmail,Cyclomatic complexity of the method is 11
Complex Method,Nop.Services.Messages,MessageTemplateService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTemplateService.cs,CopyMessageTemplate,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Messages,Tokenizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\Tokenizer.cs,Replace,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,CheckDiscountLimitations,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,IsDiscountValid,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,Cyclomatic complexity of the method is 18
Complex Method,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,Cyclomatic complexity of the method is 17
Complex Method,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,Cyclomatic complexity of the method is 29
Complex Method,Nop.Services.Localization,LocalizationExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationExtensions.cs,GetLocalized,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Localization,LocalizationExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationExtensions.cs,SaveLocalizedFriendlyName,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Localization,LocalizedEntityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizedEntityService.cs,SaveLocalizedValue,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Localization,LocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationService.cs,GetResource,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Localization,LocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationService.cs,ImportResourcesFromXml,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Orders,CheckoutAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeFormatter.cs,FormatAttributes,Cyclomatic complexity of the method is 19
Complex Method,Nop.Services.Orders,CheckoutAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeParser.cs,AddCheckoutAttribute,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,CheckoutAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeParser.cs,EnsureOnlyActiveAttributes,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,GetCountryReport,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,GetOrderAverageReportLine,Cyclomatic complexity of the method is 13
Complex Method,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,BestSellersReport,Cyclomatic complexity of the method is 11
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetActivatedValueForPurchasedGiftCards,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,Cyclomatic complexity of the method is 32
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,CheckOrderStatus,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,Cyclomatic complexity of the method is 127
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessNextRecurringPayment,Cyclomatic complexity of the method is 11
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,Deliver,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,Capture,Cyclomatic complexity of the method is 10
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,Refund,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PartiallyRefund,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,Void,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,SearchOrders,Cyclomatic complexity of the method is 17
Complex Method,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShippingDiscount,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetOrderTotalDiscount,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,Cyclomatic complexity of the method is 21
Complex Method,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,Cyclomatic complexity of the method is 14
Complex Method,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,Cyclomatic complexity of the method is 18
Complex Method,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,Cyclomatic complexity of the method is 22
Complex Method,Nop.Services.Orders,ShoppingCartExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartExtensions.cs,GetRecurringCycleInfo,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetRequiredProductWarnings,Cyclomatic complexity of the method is 13
Complex Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,Cyclomatic complexity of the method is 38
Complex Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,Cyclomatic complexity of the method is 26
Complex Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemGiftCardWarnings,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,Cyclomatic complexity of the method is 24
Complex Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,Cyclomatic complexity of the method is 18
Complex Method,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,MigrateShoppingCart,Cyclomatic complexity of the method is 9
Complex Method,Nop.Services.Seo,UrlRecordService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\UrlRecordService.cs,SaveSlug,Cyclomatic complexity of the method is 8
Complex Method,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,GetSeName,Cyclomatic complexity of the method is 13
Complex Method,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,CreateCalculateTaxRequest,Cyclomatic complexity of the method is 16
Complex Method,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,GetProductPrice,Cyclomatic complexity of the method is 8
Long Parameter List,Nop.Services.Affiliates,AffiliateService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Affiliates\AffiliateService.cs,GetAllAffiliates,The method has 6 parameters.
Long Parameter List,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,ExternalAuthorizer,The method has 12 parameters.
Long Parameter List,Nop.Services.Blogs,BlogService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Blogs\BlogService.cs,BlogService,The method has 5 parameters.
Long Parameter List,Nop.Services.Blogs,BlogService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Blogs\BlogService.cs,GetAllBlogPosts,The method has 13 parameters.
Long Parameter List,Nop.Services.Blogs,BlogService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Blogs\BlogService.cs,GetAllBlogPostsByTag,The method has 7 parameters.
Long Parameter List,Nop.Services.Blogs,IBlogService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Blogs\IBlogService.cs,GetAllBlogPosts,The method has 7 parameters.
Long Parameter List,Nop.Services.Blogs,IBlogService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Blogs\IBlogService.cs,GetAllBlogPostsByTag,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,BackInStockSubscriptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\BackInStockSubscriptionService.cs,GetAllSubscriptionsByCustomerId,The method has 8 parameters.
Long Parameter List,Nop.Services.Catalog,BackInStockSubscriptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\BackInStockSubscriptionService.cs,GetAllSubscriptionsByProductId,The method has 8 parameters.
Long Parameter List,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,CategoryService,The method has 12 parameters.
Long Parameter List,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetAllCategories,The method has 13 parameters.
Long Parameter List,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetAllCategoriesByParentCategoryId,The method has 9 parameters.
Long Parameter List,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetProductCategoriesByCategoryId,The method has 7 parameters.
Long Parameter List,Nop.Services.Catalog,CategoryExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryExtensions.cs,SortCategoriesForTree,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,CategoryExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryExtensions.cs,GetCategoryBreadCrumb,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,ICopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ICopyProductService.cs,CopyProduct,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,CopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CopyProductService.cs,CopyProductService,The method has 13 parameters.
Long Parameter List,Nop.Services.Catalog,CopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CopyProductService.cs,CopyProduct,The method has 19 parameters.
Long Parameter List,Nop.Services.Catalog,ProductTagService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductTagService.cs,ProductTagService,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,ProductExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductExtensions.cs,GetSkuMpnGtin,The method has 7 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,PriceFormatter,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPrice,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatShippingPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatShippingPrice,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatShippingPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPaymentMethodAdditionalFee,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPaymentMethodAdditionalFee,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPaymentMethodAdditionalFee,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceCalculationService.cs,GetFinalPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceCalculationService.cs,GetDiscountAmount,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceCalculationService.cs,GetUnitPrice,The method has 7 parameters.
Long Parameter List,Nop.Services.Catalog,IProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductAttributeFormatter.cs,FormatAttributes,The method has 9 parameters.
Long Parameter List,Nop.Services.Catalog,IProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductAttributeParser.cs,AddGiftCardAttribute,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,IProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductAttributeParser.cs,GetGiftCardAttribute,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,PriceCalculationService,The method has 9 parameters.
Long Parameter List,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetFinalPrice,The method has 7 parameters.
Long Parameter List,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetDiscountAmount,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetUnitPrice,The method has 10 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatPrice,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatShippingPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatShippingPrice,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatShippingPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatPaymentMethodAdditionalFee,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatPaymentMethodAdditionalFee,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,IPriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IPriceFormatter.cs,FormatPaymentMethodAdditionalFee,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,ProductAttributeFormatter,The method has 11 parameters.
Long Parameter List,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The method has 14 parameters.
Long Parameter List,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,AddGiftCardAttribute,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,GetGiftCardAttribute,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,IProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductService.cs,SearchProducts,The method has 22 parameters.
Long Parameter List,Nop.Services.Catalog,IProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductService.cs,SearchProducts,The method has 24 parameters.
Long Parameter List,Nop.Services.Catalog,IProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductService.cs,GetAllProductReviews,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,ManufacturerService,The method has 10 parameters.
Long Parameter List,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,GetAllManufacturers,The method has 11 parameters.
Long Parameter List,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,GetProductManufacturersByManufacturerId,The method has 7 parameters.
Long Parameter List,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,GetProductManufacturersByProductId,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,ProductAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeService.cs,ProductAttributeService,The method has 6 parameters.
Long Parameter List,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,ProductService,The method has 25 parameters.
Long Parameter List,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,GetCategoryProductNumber,The method has 7 parameters.
Long Parameter List,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The method has 22 parameters.
Long Parameter List,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The method has 54 parameters.
Long Parameter List,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,GetAssociatedProducts,The method has 10 parameters.
Long Parameter List,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,GetAllProductReviews,The method has 11 parameters.
Long Parameter List,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,SpecificationAttributeService,The method has 5 parameters.
Long Parameter List,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,GetProductSpecificationAttributesByProductId,The method has 7 parameters.
Long Parameter List,Nop.Services.Common,SearchTermService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\SearchTermService.cs,GetStats,The method has 5 parameters.
Long Parameter List,Nop.Services.Common,AddressService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\AddressService.cs,AddressService,The method has 6 parameters.
Long Parameter List,Nop.Services.Common,AddressExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\AddressExtensions.cs,FindAddress,The method has 14 parameters.
Long Parameter List,Nop.Services.Common,GenericAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\GenericAttributeService.cs,SaveAttribute,The method has 6 parameters.
Long Parameter List,Nop.Services.Common,GenericAttributeExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\GenericAttributeExtensions.cs,GetAttribute,The method has 6 parameters.
Long Parameter List,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PdfService,The method has 22 parameters.
Long Parameter List,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The method has 10 parameters.
Long Parameter List,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The method has 6 parameters.
Long Parameter List,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The method has 5 parameters.
Long Parameter List,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,CustomerRegistrationService,The method has 7 parameters.
Long Parameter List,Nop.Services.Customers,ICustomerReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\ICustomerReportService.cs,GetBestCustomersReport,The method has 6 parameters.
Long Parameter List,Nop.Services.Customers,CustomerReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerReportService.cs,GetBestCustomersReport,The method has 10 parameters.
Long Parameter List,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,CustomerService,The method has 15 parameters.
Long Parameter List,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The method has 79 parameters.
Long Parameter List,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetOnlineCustomers,The method has 9 parameters.
Long Parameter List,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The method has 7 parameters.
Long Parameter List,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,DeleteGuestCustomers,The method has 11 parameters.
Long Parameter List,Nop.Services.Customers,ICustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\ICustomerService.cs,GetAllCustomers,The method has 18 parameters.
Long Parameter List,Nop.Services.Customers,ICustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\ICustomerService.cs,ResetCheckoutData,The method has 7 parameters.
Long Parameter List,Nop.Services.Customers,ChangePasswordRequest,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\ChangePasswordRequest.cs,ChangePasswordRequest,The method has 5 parameters.
Long Parameter List,Nop.Services.Customers,CustomerRegistrationRequest,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationRequest.cs,CustomerRegistrationRequest,The method has 6 parameters.
Long Parameter List,Nop.Services.Logging,CustomerActivityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\CustomerActivityService.cs,CustomerActivityService,The method has 7 parameters.
Long Parameter List,Nop.Services.Logging,CustomerActivityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\CustomerActivityService.cs,InsertActivity,The method has 5 parameters.
Long Parameter List,Nop.Services.Logging,CustomerActivityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\CustomerActivityService.cs,GetAllActivities,The method has 11 parameters.
Long Parameter List,Nop.Services.Logging,ICustomerActivityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\ICustomerActivityService.cs,GetAllActivities,The method has 6 parameters.
Long Parameter List,Nop.Services.Logging,LoggingExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\LoggingExtensions.cs,FilteredLog,The method has 5 parameters.
Long Parameter List,Nop.Services.Logging,NullLogger,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\NullLogger.cs,GetAllLogs,The method has 6 parameters.
Long Parameter List,Nop.Services.Logging,ILogger,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\ILogger.cs,GetAllLogs,The method has 6 parameters.
Long Parameter List,Nop.Services.Logging,DefaultLogger,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\DefaultLogger.cs,DefaultLogger,The method has 5 parameters.
Long Parameter List,Nop.Services.Logging,DefaultLogger,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\DefaultLogger.cs,GetAllLogs,The method has 11 parameters.
Long Parameter List,Nop.Services.Media,IPictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\IPictureService.cs,GetPictureUrl,The method has 5 parameters.
Long Parameter List,Nop.Services.Media,IPictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\IPictureService.cs,GetPictureUrl,The method has 5 parameters.
Long Parameter List,Nop.Services.Media,IPictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\IPictureService.cs,InsertPicture,The method has 5 parameters.
Long Parameter List,Nop.Services.Media,IPictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\IPictureService.cs,UpdatePicture,The method has 6 parameters.
Long Parameter List,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,PictureService,The method has 7 parameters.
Long Parameter List,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetPictureUrl,The method has 5 parameters.
Long Parameter List,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetPictureUrl,The method has 5 parameters.
Long Parameter List,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,InsertPicture,The method has 5 parameters.
Long Parameter List,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,UpdatePicture,The method has 6 parameters.
Long Parameter List,Nop.Services.Shipping,IShipmentService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\IShipmentService.cs,GetAllShipments,The method has 10 parameters.
Long Parameter List,Nop.Services.Shipping,ShipmentService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShipmentService.cs,GetAllShipments,The method has 20 parameters.
Long Parameter List,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,ShippingService,The method has 16 parameters.
Long Parameter List,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetDimensions,The method has 6 parameters.
Long Parameter List,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The method has 8 parameters.
Long Parameter List,Nop.Services.Vendors,VendorService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Vendors\VendorService.cs,GetAllVendors,The method has 7 parameters.
Long Parameter List,Nop.Services.Directory,CountryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\CountryService.cs,CountryService,The method has 6 parameters.
Long Parameter List,Nop.Services.Directory,CountryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\CountryService.cs,GetAllCountries,The method has 6 parameters.
Long Parameter List,Nop.Services.Directory,CurrencyService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\CurrencyService.cs,CurrencyService,The method has 6 parameters.
Long Parameter List,Nop.Services.Directory,CurrencyService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\CurrencyService.cs,GetAllCurrencies,The method has 5 parameters.
Long Parameter List,Nop.Services.Directory,MeasureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\MeasureService.cs,MeasureService,The method has 5 parameters.
Long Parameter List,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,ForumService,The method has 14 parameters.
Long Parameter List,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,GetAllTopics,The method has 7 parameters.
Long Parameter List,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,GetAllPosts,The method has 5 parameters.
Long Parameter List,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,GetAllPosts,The method has 13 parameters.
Long Parameter List,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,GetAllPrivateMessages,The method has 18 parameters.
Long Parameter List,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,GetAllSubscriptions,The method has 5 parameters.
Long Parameter List,Nop.Services.Forums,IForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\IForumService.cs,GetAllTopics,The method has 7 parameters.
Long Parameter List,Nop.Services.Forums,IForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\IForumService.cs,GetAllPosts,The method has 5 parameters.
Long Parameter List,Nop.Services.Forums,IForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\IForumService.cs,GetAllPosts,The method has 6 parameters.
Long Parameter List,Nop.Services.Forums,IForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\IForumService.cs,GetAllPrivateMessages,The method has 9 parameters.
Long Parameter List,Nop.Services.Forums,IForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\IForumService.cs,GetAllSubscriptions,The method has 5 parameters.
Long Parameter List,Nop.Services.Installation,SqlFileInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\SqlFileInstallationService.cs,SqlFileInstallationService,The method has 5 parameters.
Long Parameter List,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,CodeFirstInstallationService,The method has 37 parameters.
Long Parameter List,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCustomersAndUsers,The method has 5 parameters.
Long Parameter List,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The method has 5 parameters.
Long Parameter List,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The method has 161 parameters.
Long Parameter List,Nop.Services.Messages,NewsLetterSubscriptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\NewsLetterSubscriptionService.cs,GetAllNewsLetterSubscriptions,The method has 9 parameters.
Long Parameter List,Nop.Services.Messages,CampaignService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\CampaignService.cs,CampaignService,The method has 8 parameters.
Long Parameter List,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,MessageTokenProvider,The method has 16 parameters.
Long Parameter List,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The method has 8 parameters.
Long Parameter List,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddProductTokens,The method has 5 parameters.
Long Parameter List,Nop.Services.Messages,EmailSender,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailSender.cs,SendEmail,The method has 15 parameters.
Long Parameter List,Nop.Services.Messages,IEmailSender,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\IEmailSender.cs,SendEmail,The method has 13 parameters.
Long Parameter List,Nop.Services.Messages,INewsLetterSubscriptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\INewsLetterSubscriptionService.cs,GetAllNewsLetterSubscriptions,The method has 5 parameters.
Long Parameter List,Nop.Services.Messages,IQueuedEmailService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\IQueuedEmailService.cs,SearchEmails,The method has 9 parameters.
Long Parameter List,Nop.Services.Messages,IWorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\IWorkflowMessageService.cs,SendProductEmailAFriendMessage,The method has 6 parameters.
Long Parameter List,Nop.Services.Messages,IWorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\IWorkflowMessageService.cs,SendWishlistEmailAFriendMessage,The method has 5 parameters.
Long Parameter List,Nop.Services.Messages,IWorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\IWorkflowMessageService.cs,SendNewForumPostMessage,The method has 6 parameters.
Long Parameter List,Nop.Services.Messages,MessageTemplateService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTemplateService.cs,MessageTemplateService,The method has 8 parameters.
Long Parameter List,Nop.Services.Messages,MessageTemplateService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTemplateService.cs,GetMessageTemplateByName,The method has 6 parameters.
Long Parameter List,Nop.Services.Messages,MessageTemplateService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTemplateService.cs,CopyMessageTemplate,The method has 9 parameters.
Long Parameter List,Nop.Services.Messages,QueuedEmailService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\QueuedEmailService.cs,QueuedEmailService,The method has 5 parameters.
Long Parameter List,Nop.Services.Messages,QueuedEmailService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\QueuedEmailService.cs,SearchEmails,The method has 18 parameters.
Long Parameter List,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,WorkflowMessageService,The method has 10 parameters.
Long Parameter List,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,SendNotification,The method has 13 parameters.
Long Parameter List,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,SendProductEmailAFriendMessage,The method has 6 parameters.
Long Parameter List,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,SendWishlistEmailAFriendMessage,The method has 5 parameters.
Long Parameter List,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,SendNewForumPostMessage,The method has 6 parameters.
Long Parameter List,Nop.Services.News,NewsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\News\NewsService.cs,NewsService,The method has 5 parameters.
Long Parameter List,Nop.Services.News,NewsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\News\NewsService.cs,GetAllNews,The method has 11 parameters.
Long Parameter List,Nop.Services.News,INewsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\News\INewsService.cs,GetAllNews,The method has 5 parameters.
Long Parameter List,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,DiscountService,The method has 8 parameters.
Long Parameter List,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,GetAllDiscounts,The method has 7 parameters.
Long Parameter List,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,GetAllDiscountUsageHistory,The method has 9 parameters.
Long Parameter List,Nop.Services.Discounts,IDiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\IDiscountService.cs,GetAllDiscountUsageHistory,The method has 5 parameters.
Long Parameter List,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportManager,The method has 6 parameters.
Long Parameter List,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportManager,The method has 5 parameters.
Long Parameter List,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The method has 5 parameters.
Long Parameter List,Nop.Services.Localization,LocalizationExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationExtensions.cs,GetLocalized,The method has 5 parameters.
Long Parameter List,Nop.Services.Localization,LocalizationExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationExtensions.cs,GetLocalized,The method has 5 parameters.
Long Parameter List,Nop.Services.Localization,LocalizationExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationExtensions.cs,AddOrUpdatePluginLocaleResource,The method has 5 parameters.
Long Parameter List,Nop.Services.Localization,LocalizedEntityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizedEntityService.cs,SaveLocalizedValue,The method has 5 parameters.
Long Parameter List,Nop.Services.Localization,ILocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\ILocalizationService.cs,GetResource,The method has 5 parameters.
Long Parameter List,Nop.Services.Localization,LanguageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LanguageService.cs,LanguageService,The method has 6 parameters.
Long Parameter List,Nop.Services.Localization,LanguageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LanguageService.cs,GetAllLanguages,The method has 5 parameters.
Long Parameter List,Nop.Services.Localization,LocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationService.cs,LocalizationService,The method has 10 parameters.
Long Parameter List,Nop.Services.Localization,LocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationService.cs,GetResource,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,CheckoutAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeFormatter.cs,CheckoutAttributeFormatter,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,CheckoutAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeFormatter.cs,FormatAttributes,The method has 11 parameters.
Long Parameter List,Nop.Services.Orders,CheckoutAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeService.cs,CheckoutAttributeService,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,IOrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderReportService.cs,GetCountryReport,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,IOrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderReportService.cs,GetOrderAverageReportLine,The method has 9 parameters.
Long Parameter List,Nop.Services.Orders,IOrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderReportService.cs,BestSellersReport,The method has 14 parameters.
Long Parameter List,Nop.Services.Orders,IOrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderReportService.cs,ProductsNeverSold,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,IOrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderReportService.cs,ProfitReport,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,OrderReportService,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,GetCountryReport,The method has 16 parameters.
Long Parameter List,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,GetOrderAverageReportLine,The method has 24 parameters.
Long Parameter List,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,BestSellersReport,The method has 20 parameters.
Long Parameter List,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,GetAlsoPurchasedProductsIds,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,ProductsNeverSold,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,ProfitReport,The method has 9 parameters.
Long Parameter List,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,OrderProcessingService,The method has 35 parameters.
Long Parameter List,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessCustomerRolesWithPurchasedProductSpecified,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The method has 7 parameters.
Long Parameter List,Nop.Services.Orders,IOrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderService.cs,SearchOrders,The method has 15 parameters.
Long Parameter List,Nop.Services.Orders,IOrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderService.cs,GetAllOrderItems,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,IOrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderService.cs,SearchRecurringPayments,The method has 7 parameters.
Long Parameter List,Nop.Services.Orders,IOrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderService.cs,SearchReturnRequests,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,IOrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderTotalCalculationService.cs,GetShoppingCartSubTotal,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,IOrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderTotalCalculationService.cs,GetShoppingCartSubTotal,The method has 7 parameters.
Long Parameter List,Nop.Services.Orders,IOrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IOrderTotalCalculationService.cs,GetShoppingCartTotal,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,IGiftCardService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IGiftCardService.cs,GetAllGiftCards,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,GetRequiredProductWarnings,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,GetStandardWarnings,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,GetShoppingCartItemWarnings,The method has 12 parameters.
Long Parameter List,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,FindShoppingCartItemInTheCart,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,AddToCart,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,UpdateShoppingCartItem,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,ICheckoutAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ICheckoutAttributeFormatter.cs,FormatAttributes,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,GiftCardService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\GiftCardService.cs,GetAllGiftCards,The method has 15 parameters.
Long Parameter List,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,OrderService,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,SearchOrders,The method has 33 parameters.
Long Parameter List,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,GetOrderByAuthorizationTransactionIdAndPaymentMethod,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,GetAllOrderItems,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,SearchRecurringPayments,The method has 7 parameters.
Long Parameter List,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,SearchReturnRequests,The method has 12 parameters.
Long Parameter List,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,OrderTotalCalculationService,The method has 15 parameters.
Long Parameter List,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The method has 7 parameters.
Long Parameter List,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartExtensions.cs,GetRecurringCycleInfo,The method has 5 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,ShoppingCartService,The method has 18 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetRequiredProductWarnings,The method has 9 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The method has 7 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The method has 14 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemWarnings,The method has 12 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,The method has 8 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The method has 6 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The method has 9 parameters.
Long Parameter List,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,UpdateShoppingCartItem,The method has 7 parameters.
Long Parameter List,Nop.Services.Payments,PaymentExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Payments\PaymentExtensions.cs,CalculateAdditionalFee,The method has 5 parameters.
Long Parameter List,Nop.Services.Polls,IPollService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Polls\IPollService.cs,GetPolls,The method has 5 parameters.
Long Parameter List,Nop.Services.Polls,PollService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Polls\PollService.cs,GetPolls,The method has 11 parameters.
Long Parameter List,Nop.Services.Security,PermissionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\PermissionService.cs,PermissionService,The method has 6 parameters.
Long Parameter List,Nop.Services.Seo,UrlRecordService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\UrlRecordService.cs,GetAllUrlRecords,The method has 5 parameters.
Long Parameter List,Nop.Services.Seo,UrlRecordService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\UrlRecordService.cs,SaveSlug,The method has 6 parameters.
Long Parameter List,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,GetSeName,The method has 5 parameters.
Long Parameter List,Nop.Services.Seo,SitemapGenerator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SitemapGenerator.cs,SitemapGenerator,The method has 6 parameters.
Long Parameter List,Nop.Services.Tax,ITaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\ITaxService.cs,GetProductPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Tax,ITaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\ITaxService.cs,GetProductPrice,The method has 7 parameters.
Long Parameter List,Nop.Services.Tax,ITaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\ITaxService.cs,DoVatCheck,The method has 5 parameters.
Long Parameter List,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,GetTaxRate,The method has 5 parameters.
Long Parameter List,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,GetProductPrice,The method has 5 parameters.
Long Parameter List,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,GetProductPrice,The method has 7 parameters.
Long Parameter List,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,DoVatCheck,The method has 5 parameters.
Long Parameter List,Nop.Services.Topics,TopicService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Topics\TopicService.cs,TopicService,The method has 5 parameters.
Long Parameter List,Nop.Services.Topics,TopicService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Topics\TopicService.cs,GetTopicBySystemName,The method has 5 parameters.
Long Parameter List,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVat,The method has 5 parameters.
Long Parameter List,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The method has 22 parameters.
Long Parameter List,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApproxAsync,The method has 9 parameters.
Long Parameter List,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApproxAsync,The method has 10 parameters.
Long Parameter List,Nop.Services.Configuration,SettingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Configuration\SettingService.cs,GetSettingByKey,The method has 6 parameters.
Long Parameter List,Nop.Services.Configuration,SettingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Configuration\SettingService.cs,SetSetting,The method has 5 parameters.
Long Identifier,Nop.Services.Authentication.External,OpenAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\OpenAuthenticationService.cs,OpenAuthenticationService,The length of the parameter externalAuthenticationRecordRepository is 38.
Long Identifier,Nop.Services.Authentication.External,OpenAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\OpenAuthenticationService.cs,OpenAuthenticationService,The length of the parameter externalAuthenticationSettings is 30.
Long Identifier,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,ExternalAuthorizer,The length of the parameter externalAuthenticationSettings is 30.
Long Identifier,Nop.Services.Catalog,BackInStockSubscriptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\BackInStockSubscriptionService.cs,BackInStockSubscriptionService,The length of the parameter backInStockSubscriptionRepository is 33.
Long Identifier,Nop.Services.Catalog,CategoryExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryExtensions.cs,SortCategoriesForTree,The length of the parameter ignoreCategoriesWithoutExistingParent is 37.
Long Identifier,Nop.Services.Catalog,ManufacturerTemplateService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerTemplateService.cs,ManufacturerTemplateService,The length of the parameter manufacturerTemplateRepository is 30.
Long Identifier,Nop.Services.Catalog,CopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CopyProductService.cs,CopyProduct,The length of the parameter parsedProductVariantAttributes is 30.
Long Identifier,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,ParseValues,The length of the parameter selectedProductVariantAttributeValues is 37.
Long Identifier,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,GenerateAllCombinations,The length of the parameter allPossibleAttributeCombinations is 32.
Long Identifier,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,GenerateAllCombinations,The length of the parameter allPossibleCheckboxCombinations is 31.
Long Identifier,Nop.Services.Catalog,IProductAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductAttributeService.cs,GetProductVariantAttributeValueById,The length of the parameter productVariantAttributeValueId is 30.
Long Identifier,Nop.Services.Catalog,IProductAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductAttributeService.cs,GetProductVariantAttributeCombinationById,The length of the parameter productVariantAttributeCombinationId is 36.
Long Identifier,Nop.Services.Catalog,ISpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ISpecificationAttributeService.cs,GetSpecificationAttributeOptionsByIds,The length of the parameter specificationAttributeOptionIds is 31.
Long Identifier,Nop.Services.Catalog,ISpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ISpecificationAttributeService.cs,GetProductSpecificationAttributeById,The length of the parameter productSpecificationAttributeId is 31.
Long Identifier,Nop.Services.Catalog,IProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductService.cs,SearchProducts,The length of the parameter filterableSpecificationAttributeOptionIds is 41.
Long Identifier,Nop.Services.Catalog,IProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\IProductService.cs,SearchProducts,The length of the parameter loadFilterableSpecificationAttributeOptionIds is 45.
Long Identifier,Nop.Services.Catalog,ProductAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeService.cs,ProductAttributeService,The length of the parameter productVariantAttributeRepository is 33.
Long Identifier,Nop.Services.Catalog,ProductAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeService.cs,ProductAttributeService,The length of the parameter productVariantAttributeCombinationRepository is 44.
Long Identifier,Nop.Services.Catalog,ProductAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeService.cs,ProductAttributeService,The length of the parameter productVariantAttributeValueRepository is 38.
Long Identifier,Nop.Services.Catalog,ProductAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeService.cs,GetProductVariantAttributeValueById,The length of the parameter productVariantAttributeValueId is 30.
Long Identifier,Nop.Services.Catalog,ProductAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeService.cs,GetProductVariantAttributeCombinationById,The length of the parameter productVariantAttributeCombinationId is 36.
Long Identifier,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,ProductService,The length of the parameter productSpecificationAttributeRepository is 39.
Long Identifier,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the parameter filterableSpecificationAttributeOptionIds is 41.
Long Identifier,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the parameter filterableSpecificationAttributeOptionIds is 41.
Long Identifier,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the parameter loadFilterableSpecificationAttributeOptionIds is 45.
Long Identifier,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the parameter commaSeparatedAllowedCustomerRoleIds is 36.
Long Identifier,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the parameter pLoadFilterableSpecificationAttributeOptionIds is 46.
Long Identifier,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the parameter pFilterableSpecificationAttributeOptionIds is 42.
Long Identifier,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the parameter filterableSpecificationAttributeOptionIdsStr is 44.
Long Identifier,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,SpecificationAttributeService,The length of the parameter specificationAttributeRepository is 32.
Long Identifier,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,SpecificationAttributeService,The length of the parameter specificationAttributeOptionRepository is 38.
Long Identifier,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,SpecificationAttributeService,The length of the parameter productSpecificationAttributeRepository is 39.
Long Identifier,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,GetSpecificationAttributeOptionById,The length of the parameter specificationAttributeOptionId is 30.
Long Identifier,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,GetSpecificationAttributeOptionsByIds,The length of the parameter specificationAttributeOptionIds is 31.
Long Identifier,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,GetSpecificationAttributeOptionsByIds,The length of the parameter sortedSpecificationAttributeOptions is 35.
Long Identifier,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,GetProductSpecificationAttributesByProductId,The length of the parameter productSpecificationAttributes is 30.
Long Identifier,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,GetProductSpecificationAttributeById,The length of the parameter productSpecificationAttributeId is 31.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter unitPriceInclTaxInCustomerCurrency is 34.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter unitPriceExclTaxInCustomerCurrency is 34.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter priceInclTaxInCustomerCurrency is 30.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter priceExclTaxInCustomerCurrency is 30.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderSubtotalInclTaxInCustomerCurrency is 38.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderSubtotalExclTaxInCustomerCurrency is 38.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderSubTotalDiscountInclTaxInCustomerCurrency is 46.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderSubTotalDiscountInCustomerCurrencyStr is 42.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderSubTotalDiscountExclTaxInCustomerCurrency is 46.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderSubTotalDiscountInCustomerCurrencyStr is 42.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderShippingInclTaxInCustomerCurrency is 38.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderShippingExclTaxInCustomerCurrency is 38.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter paymentMethodAdditionalFeeInclTaxInCustomerCurrency is 51.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter paymentMethodAdditionalFeeInclTaxStr is 36.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter paymentMethodAdditionalFeeExclTaxInCustomerCurrency is 51.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter paymentMethodAdditionalFeeExclTaxStr is 36.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderDiscountInCustomerCurrency is 31.
Long Identifier,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the parameter orderDiscountInCustomerCurrencyStr is 34.
Long Identifier,Nop.Services.Customers,CustomerAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerAttributeParser.cs,ParseValues,The length of the parameter selectedCustomerAttributeValues is 31.
Long Identifier,Nop.Services.Customers,CustomerAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerAttributeService.cs,CustomerAttributeService,The length of the parameter customerAttributeValueRepository is 32.
Long Identifier,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,CustomerService,The length of the parameter productReviewHelpfulnessRepository is 34.
Long Identifier,Nop.Services.Shipping,IShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\IShippingService.cs,GetShippingOptions,The length of the parameter allowedShippingRateComputationMethodSystemName is 46.
Long Identifier,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The length of the parameter allowedShippingRateComputationMethodSystemName is 46.
Long Identifier,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The length of the parameter shippingRateComputationMethods is 30.
Long Identifier,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,CodeFirstInstallationService,The length of the parameter specificationAttributeRepository is 32.
Long Identifier,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,CodeFirstInstallationService,The length of the parameter manufacturerTemplateRepository is 30.
Long Identifier,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the parameter categoryTemplateInGridAndLines is 30.
Long Identifier,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallManufacturers,The length of the parameter manufacturerTemplateInGridAndLines is 34.
Long Identifier,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the parameter productCanonCamera_associated_1 is 31.
Long Identifier,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the parameter productCanonCamera_associated_2 is 31.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter unitPriceInclTaxInCustomerCurrency is 34.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter unitPriceExclTaxInCustomerCurrency is 34.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter priceInclTaxInCustomerCurrency is 30.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter priceExclTaxInCustomerCurrency is 30.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter orderSubtotalInclTaxInCustomerCurrency is 38.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter orderSubTotalDiscountInclTaxInCustomerCurrency is 46.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter orderSubtotalExclTaxInCustomerCurrency is 38.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter orderSubTotalDiscountExclTaxInCustomerCurrency is 46.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter orderShippingInclTaxInCustomerCurrency is 38.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter paymentMethodAdditionalFeeInclTaxInCustomerCurrency is 51.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter orderShippingExclTaxInCustomerCurrency is 38.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter paymentMethodAdditionalFeeExclTaxInCustomerCurrency is 51.
Long Identifier,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the parameter orderDiscountInCustomerCurrency is 31.
Long Identifier,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,DiscountService,The length of the parameter discountUsageHistoryRepository is 30.
Long Identifier,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the parameter productSpecificationAttributes is 30.
Long Identifier,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the parameter automaticallyAddRequiredProducts is 32.
Long Identifier,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the parameter allowAddingOnlyExistingAttributeCombinations is 44.
Long Identifier,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the parameter preOrderAvailabilityStartDateTimeUtc is 36.
Long Identifier,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the parameter preOrderAvailabilityStartDateTimeUtcExcel is 41.
Long Identifier,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the parameter specialPriceStartDateTimeUtcExcel is 33.
Long Identifier,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the parameter specialPriceEndDateTimeUtcExcel is 31.
Long Identifier,Nop.Services.Orders,CheckoutAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeParser.cs,ParseValues,The length of the parameter selectedCheckoutAttributeValues is 31.
Long Identifier,Nop.Services.Orders,CheckoutAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeService.cs,CheckoutAttributeService,The length of the parameter checkoutAttributeValueRepository is 32.
Long Identifier,Nop.Services.Orders,OrderExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderExtensions.cs,HasItemsToAddToShipment,The length of the parameter totalNumberOfItemsCanBeAddedToShipment is 38.
Long Identifier,Nop.Services.Orders,OrderExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderExtensions.cs,HasItemsToShip,The length of the parameter totalNumberOfNotYetShippedItems is 31.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the parameter orderCompletedAttachmentFilePath is 32.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the parameter orderCompletedAttachmentFileName is 32.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the parameter orderCompletedCustomerNotificationQueuedEmailId is 47.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the parameter orderCancelledCustomerNotificationQueuedEmailId is 47.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the parameter orderPlacedStoreOwnerNotificationQueuedEmailId is 46.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the parameter orderPlacedCustomerNotificationQueuedEmailId is 44.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the parameter orderPlacedVendorNotificationQueuedEmailId is 42.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the parameter shippingRateComputationMethodSystemName is 39.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the parameter orderPlacedStoreOwnerNotificationQueuedEmailId is 46.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the parameter orderPlacedCustomerNotificationQueuedEmailId is 44.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the parameter orderPlacedVendorNotificationQueuedEmailId is 42.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,IsReturnRequestAllowed,The length of the parameter numberOfDaysReturnRequestAvailableValid is 39.
Long Identifier,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ValidateMinOrderSubtotalAmount,The length of the parameter orderSubTotalDiscountAmountBase is 31.
Long Identifier,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,DeleteShoppingCartItem,The length of the parameter ensureOnlyActiveCheckoutAttributes is 34.
Long Identifier,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,GetRequiredProductWarnings,The length of the parameter automaticallyAddRequiredProductsIfEnabled is 41.
Long Identifier,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,GetShoppingCartItemWarnings,The length of the parameter automaticallyAddRequiredProductsIfEnabled is 41.
Long Identifier,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,GetShoppingCartItemWarnings,The length of the parameter getRequiredProductVariantWarnings is 33.
Long Identifier,Nop.Services.Orders,IShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\IShoppingCartService.cs,AddToCart,The length of the parameter automaticallyAddRequiredProductsIfEnabled is 41.
Long Identifier,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The length of the parameter subTotalExclTaxWithoutDiscount is 30.
Long Identifier,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The length of the parameter subTotalInclTaxWithoutDiscount is 30.
Long Identifier,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The length of the parameter shippingRateComputationMethods is 30.
Long Identifier,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,The length of the parameter paymentMethodAdditionalFeeExclTax is 33.
Long Identifier,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,The length of the parameter paymentMethodAdditionalFeeInclTax is 33.
Long Identifier,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The length of the parameter paymentMethodAdditionalFeeWithoutTax is 36.
Long Identifier,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,DeleteShoppingCartItem,The length of the parameter ensureOnlyActiveCheckoutAttributes is 34.
Long Identifier,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetRequiredProductWarnings,The length of the parameter automaticallyAddRequiredProductsIfEnabled is 41.
Long Identifier,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemWarnings,The length of the parameter automaticallyAddRequiredProductsIfEnabled is 41.
Long Identifier,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemWarnings,The length of the parameter getRequiredProductVariantWarnings is 33.
Long Identifier,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the parameter automaticallyAddRequiredProductsIfEnabled is 41.
Long Identifier,Nop.Services.Seo,UrlRecordService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\UrlRecordService.cs,SaveSlug,The length of the parameter nonActiveRecordWithSpecifiedSlug is 32.
Long Identifier,Nop.Services.Seo,UrlRecordService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\UrlRecordService.cs,SaveSlug,The length of the parameter nonActiveRecordWithSpecifiedSlug is 32.
Long Identifier,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The length of the parameter traderCompanyTypeMatchSpecified is 31.
Long Statement,Nop.Services.Authentication.External,OpenAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\OpenAuthenticationService.cs,LoadActiveExternalAuthenticationMethods,The length of the statement  "	return LoadAllExternalAuthenticationMethods (storeId).Where (provider => _externalAuthenticationSettings.ActiveAuthenticationMethodSystemNames.Contains (provider.PluginDescriptor.SystemName' StringComparer.InvariantCultureIgnoreCase)).ToList (); " is 245.
Long Statement,Nop.Services.Authentication.External,OpenAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\OpenAuthenticationService.cs,AssociateExternalAccountWithUser,The length of the statement  "		foreach (var userClaim in parameters.UserClaims.Where (x => x.Contact != null && !String.IsNullOrEmpty (x.Contact.Email))) { " is 124.
Long Statement,Nop.Services.Authentication.External,OpenAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\OpenAuthenticationService.cs,GetUser,The length of the statement  "	var record = _externalAuthenticationRecordRepository.Table.FirstOrDefault (o => o.ExternalIdentifier == parameters.ExternalIdentifier && o.ProviderSystemName == parameters.ProviderSystemName); " is 192.
Long Statement,Nop.Services.Authentication.External,OpenAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\OpenAuthenticationService.cs,RemoveAssociation,The length of the statement  "	var record = _externalAuthenticationRecordRepository.Table.FirstOrDefault (o => o.ExternalIdentifier == parameters.ExternalIdentifier && o.ProviderSystemName == parameters.ProviderSystemName); " is 192.
Long Statement,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,RegistrationIsEnabled,The length of the statement  "	return _customerSettings.UserRegistrationType != UserRegistrationType.Disabled && !_externalAuthenticationSettings.AutoRegisterEnabled; " is 135.
Long Statement,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,AutoRegistrationIsEnabled,The length of the statement  "	return _customerSettings.UserRegistrationType != UserRegistrationType.Disabled && _externalAuthenticationSettings.AutoRegisterEnabled; " is 134.
Long Statement,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,Authorize,The length of the statement  "			var registrationRequest = new CustomerRegistrationRequest (currentCustomer' details.EmailAddress' _customerSettings.UsernamesEnabled ? details.UserName : details.EmailAddress' randomPassword' PasswordFormat.Clear' isApproved); " is 226.
Long Statement,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,Authorize,The length of the statement  "					_workflowMessageService.SendCustomerRegisteredNotificationMessage (currentCustomer' _localizationSettings.DefaultAdminLanguageId); " is 130.
Long Statement,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,Authorize,The length of the statement  "					_genericAttributeService.SaveAttribute (currentCustomer' SystemCustomerAttributeNames.AccountActivationToken' Guid.NewGuid ().ToString ()); " is 139.
Long Statement,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,Authorize,The length of the statement  "	_customerActivityService.InsertActivity ("PublicStore.Login"' _localizationService.GetResource ("ActivityLog.PublicStore.Login")' userFound ?? userLoggedIn); " is 157.
Long Statement,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetAllCategories,The length of the statement  "			var allowedCustomerRolesIds = _workContext.CurrentCustomer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList (); " is 128.
Long Statement,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetAllCategoriesByParentCategoryId,The length of the statement  "	string key = string.Format (CATEGORIES_BY_PARENT_CATEGORY_ID_KEY' parentCategoryId' showHidden' _workContext.CurrentCustomer.Id' _storeContext.CurrentStore.Id); " is 160.
Long Statement,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetAllCategoriesByParentCategoryId,The length of the statement  "				var allowedCustomerRolesIds = _workContext.CurrentCustomer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList (); " is 128.
Long Statement,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetProductCategoriesByCategoryId,The length of the statement  "	string key = string.Format (PRODUCTCATEGORIES_ALLBYCATEGORYID_KEY' showHidden' categoryId' pageIndex' pageSize' _workContext.CurrentCustomer.Id' _storeContext.CurrentStore.Id); " is 176.
Long Statement,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetProductCategoriesByCategoryId,The length of the statement  "				var allowedCustomerRolesIds = _workContext.CurrentCustomer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList (); " is 128.
Long Statement,Nop.Services.Catalog,CategoryService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CategoryService.cs,GetProductCategoriesByProductId,The length of the statement  "	string key = string.Format (PRODUCTCATEGORIES_ALLBYPRODUCTID_KEY' showHidden' productId' _workContext.CurrentCustomer.Id' _storeContext.CurrentStore.Id); " is 153.
Long Statement,Nop.Services.Catalog,CopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CopyProductService.cs,CopyProduct,The length of the statement  "			var pictureCopy = _pictureService.InsertPicture (_pictureService.LoadPictureBinary (picture)' picture.MimeType' _pictureService.GetPictureSeName (newName)' true); " is 162.
Long Statement,Nop.Services.Catalog,CopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CopyProductService.cs,CopyProduct,The length of the statement  "		var productVariantAttributeValues = _productAttributeService.GetProductVariantAttributeValues (productVariantAttribute.Id); " is 123.
Long Statement,Nop.Services.Catalog,CopyProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CopyProductService.cs,CopyProduct,The length of the statement  "			var associatedProductCopy = CopyProduct (associatedProduct' string.Format ("Copy of {0}"' associatedProduct.Name)' isPublished' copyImages' false); " is 147.
Long Statement,Nop.Services.Catalog,ProductExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductExtensions.cs,FormatStockMessage,The length of the statement  "						stockMessage = string.Format (localizationService.GetResource ("Products.Availability.InStockWithQuantity")' product.StockQuantity); " is 132.
Long Statement,Nop.Services.Catalog,ProductExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductExtensions.cs,FormatStockMessage,The length of the statement  "						stockMessage = string.Format (localizationService.GetResource ("Products.Availability.InStockWithQuantity")' product.StockQuantity); " is 132.
Long Statement,Nop.Services.Catalog,ProductExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductExtensions.cs,FormatStockMessage,The length of the statement  "						stockMessage = string.Format (localizationService.GetResource ("Products.Availability.InStockWithQuantity")' product.StockQuantity); " is 132.
Long Statement,Nop.Services.Catalog,ProductExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductExtensions.cs,GetSkuMpnGtin,The length of the statement  "		var combination = product.ProductVariantAttributeCombinations.FirstOrDefault (x => productAttributeParser.AreProductAttributesEqual (x.AttributesXml' selectedAttributes)); " is 171.
Long Statement,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPrice,The length of the statement  "	return FormatPrice (price' showCurrency' _workContext.WorkingCurrency' _workContext.WorkingLanguage' priceIncludesTax' showTax); " is 128.
Long Statement,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatShippingPrice,The length of the statement  "	return FormatShippingPrice (price' showCurrency' _workContext.WorkingCurrency' _workContext.WorkingLanguage' priceIncludesTax); " is 127.
Long Statement,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPaymentMethodAdditionalFee,The length of the statement  "	return FormatPaymentMethodAdditionalFee (price' showCurrency' _workContext.WorkingCurrency' _workContext.WorkingLanguage' priceIncludesTax); " is 140.
Long Statement,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetAllowedDiscounts,The length of the statement  "			if (_discountService.IsDiscountValid (discount' customer) && discount.DiscountType == DiscountType.AssignedToSkus && !allowedDiscounts.ContainsDiscount (discount)) " is 163.
Long Statement,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetAllowedDiscounts,The length of the statement  "						if (_discountService.IsDiscountValid (discount' customer) && discount.DiscountType == DiscountType.AssignedToCategories && !allowedDiscounts.ContainsDiscount (discount)) " is 169.
Long Statement,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetMinimumTierPrice,The length of the statement  "	var tierPrices = product.TierPrices.OrderBy (tp => tp.Quantity).ToList ().FilterByStore (_storeContext.CurrentStore.Id).FilterForCustomer (customer).RemoveDuplicatedQuantities (); " is 179.
Long Statement,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetFinalPrice,The length of the statement  "	var cacheKey = string.Format (PriceCacheEventConsumer.PRODUCT_PRICE_MODEL_KEY' product.Id' additionalCharge.ToString (CultureInfo.InvariantCulture)' includeDiscounts' quantity' string.Join ("'"' customer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList ())' _storeContext.CurrentStore.Id); " is 306.
Long Statement,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetUnitPrice,The length of the statement  "	return GetUnitPrice (shoppingCartItem.Product' shoppingCartItem.Customer' shoppingCartItem.ShoppingCartType' shoppingCartItem.Quantity' shoppingCartItem.AttributesXml' shoppingCartItem.CustomerEnteredPrice' includeDiscounts); " is 225.
Long Statement,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetUnitPrice,The length of the statement  "				qty = customer.ShoppingCartItems.Where (x => x.ProductId == product.Id).Where (x => x.ShoppingCartType == shoppingCartType).Sum (x => x.Quantity); " is 146.
Long Statement,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetDiscountAmount,The length of the statement  "		decimal productDiscountAmount = GetDiscountAmount (product' customer' attributesTotalPrice' shoppingCartItem.Quantity' out appliedDiscount); " is 140.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "						pvaAttribute = string.Format ("{0}: {1}"' attributeName' HtmlHelper.FormatText (valueStr' false' true' false' false' false' false)); " is 132.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "								var downloadLink = string.Format ("{0}download/getfileupload/?downloadId={1}"' _webHelper.GetStoreLocation (false)' download.DownloadGuid); " is 139.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "						pvaAttribute = string.Format ("{0}: {1}"' pva.ProductAttribute.GetLocalized (a => a.Name' _workContext.WorkingLanguage.Id)' valueStr); " is 134.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "							pvaAttribute = string.Format ("{0}: {1}"' pva.ProductAttribute.GetLocalized (a => a.Name' _workContext.WorkingLanguage.Id)' pvaValue.GetLocalized (a => a.Name' _workContext.WorkingLanguage.Id)); " is 194.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "								decimal priceAdjustment = _currencyService.ConvertFromPrimaryStoreCurrency (priceAdjustmentBase' _workContext.WorkingCurrency); " is 127.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "							if (_shoppingCartSettings.RenderAssociatedAttributeValueQuantity && pvaValue.AttributeValueType == AttributeValueType.AssociatedToProduct) { " is 140.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "			_productAttributeParser.GetGiftCardAttribute (attributes' out giftCardRecipientName' out giftCardRecipientEmail' out giftCardSenderName' out giftCardSenderEmail' out giftCardMessage); " is 183.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "			var giftCardFrom = product.GiftCardType == GiftCardType.Virtual ? string.Format (_localizationService.GetResource ("GiftCardAttribute.From.Virtual")' giftCardSenderName' giftCardSenderEmail) : string.Format (_localizationService.GetResource ("GiftCardAttribute.From.Physical")' giftCardSenderName); " is 298.
Long Statement,Nop.Services.Catalog,ProductAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeFormatter.cs,FormatAttributes,The length of the statement  "			var giftCardFor = product.GiftCardType == GiftCardType.Virtual ? string.Format (_localizationService.GetResource ("GiftCardAttribute.For.Virtual")' giftCardRecipientName' giftCardRecipientEmail) : string.Format (_localizationService.GetResource ("GiftCardAttribute.For.Physical")' giftCardRecipientName); " is 304.
Long Statement,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,GenerateAllCombinations,The length of the statement  "			if (pva.AttributeControlType == AttributeControlType.Checkboxes || pva.AttributeControlType == AttributeControlType.ReadonlyCheckboxes) { " is 137.
Long Statement,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,GenerateAllCombinations,The length of the statement  "				if (pva.AttributeControlType == AttributeControlType.Checkboxes || pva.AttributeControlType == AttributeControlType.ReadonlyCheckboxes) { " is 137.
Long Statement,Nop.Services.Catalog,ProductAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeParser.cs,GenerateAllCombinations,The length of the statement  "				if (pva.AttributeControlType == AttributeControlType.Checkboxes || pva.AttributeControlType == AttributeControlType.ReadonlyCheckboxes) { " is 137.
Long Statement,Nop.Services.Catalog,ProductAttributeExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeExtensions.cs,ShouldHaveValues,The length of the statement  "	if (productVariantAttribute.AttributeControlType == AttributeControlType.TextBox || productVariantAttribute.AttributeControlType == AttributeControlType.MultilineTextbox || productVariantAttribute.AttributeControlType == AttributeControlType.Datepicker || productVariantAttribute.AttributeControlType == AttributeControlType.FileUpload) " is 336.
Long Statement,Nop.Services.Catalog,ProductAttributeExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeExtensions.cs,ValidationRulesAllowed,The length of the statement  "	if (productVariantAttribute.AttributeControlType == AttributeControlType.TextBox || productVariantAttribute.AttributeControlType == AttributeControlType.MultilineTextbox || productVariantAttribute.AttributeControlType == AttributeControlType.FileUpload) " is 253.
Long Statement,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,GetAllManufacturers,The length of the statement  "			var allowedCustomerRolesIds = _workContext.CurrentCustomer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList (); " is 128.
Long Statement,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,GetProductManufacturersByManufacturerId,The length of the statement  "	string key = string.Format (PRODUCTMANUFACTURERS_ALLBYMANUFACTURERID_KEY' showHidden' manufacturerId' pageIndex' pageSize' _workContext.CurrentCustomer.Id' _storeContext.CurrentStore.Id); " is 187.
Long Statement,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,GetProductManufacturersByManufacturerId,The length of the statement  "				var allowedCustomerRolesIds = _workContext.CurrentCustomer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList (); " is 128.
Long Statement,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,GetProductManufacturersByProductId,The length of the statement  "	string key = string.Format (PRODUCTMANUFACTURERS_ALLBYPRODUCTID_KEY' showHidden' productId' _workContext.CurrentCustomer.Id' _storeContext.CurrentStore.Id); " is 156.
Long Statement,Nop.Services.Catalog,ManufacturerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ManufacturerService.cs,GetProductManufacturersByProductId,The length of the statement  "				var allowedCustomerRolesIds = _workContext.CurrentCustomer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList (); " is 128.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,GetCategoryProductNumber,The length of the statement  "		var allowedCustomerRolesIds = _workContext.CurrentCustomer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList (); " is 128.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "	return SearchProducts (out filterableSpecificationAttributeOptionIds' false' pageIndex' pageSize' categoryIds' manufacturerId' storeId' vendorId' warehouseId' parentGroupedProductId' productType' visibleIndividuallyOnly' featuredProducts' priceMin' priceMax' productTagId' keywords' searchDescriptions' searchSku' searchProductTags' languageId' filteredSpecs' orderBy' showHidden); " is 381.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "	var allowedCustomerRolesIds = _workContext.CurrentCustomer.CustomerRoles.Where (cr => cr.Active).Select (cr => cr.Id).ToList (); " is 128.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "		var products = _dbContext.ExecuteStoredProcedureList<Product> ("ProductLoadAllPaged"' pCategoryIds' pManufacturerId' pStoreId' pVendorId' pWarehouseId' pParentGroupedProductId' pProductTypeId' pVisibleIndividuallyOnly' pProductTagId' pFeaturedProducts' pPriceMin' pPriceMax' pKeywords' pSearchDescriptions' pSearchSku' pSearchProductTags' pUseFullTextSearch' pFullTextMode' pFilteredSpecs' pLanguageId' pOrderBy' pAllowedCustomerRoleIds' pPageIndex' pPageSize' pShowHidden' pLoadFilterableSpecificationAttributeOptionIds' pFilterableSpecificationAttributeOptionIds' pTotalRecords); " is 581.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "		string filterableSpecificationAttributeOptionIdsStr = (pFilterableSpecificationAttributeOptionIds.Value != DBNull.Value) ? (string)pFilterableSpecificationAttributeOptionIds.Value : ""; " is 185.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "		if (loadFilterableSpecificationAttributeOptionIds && !string.IsNullOrWhiteSpace (filterableSpecificationAttributeOptionIdsStr)) { " is 129.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			((p.SpecialPrice.HasValue && ((!p.SpecialPriceStartDateTimeUtc.HasValue || p.SpecialPriceStartDateTimeUtc.Value < nowUtc) && (!p.SpecialPriceEndDateTimeUtc.HasValue || p.SpecialPriceEndDateTimeUtc.Value > nowUtc))) && (p.SpecialPrice >= priceMin.Value)) || //regular price (price isn't specified or date range isn't valid) " is 322.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			((!p.SpecialPrice.HasValue || ((p.SpecialPriceStartDateTimeUtc.HasValue && p.SpecialPriceStartDateTimeUtc.Value > nowUtc) || (p.SpecialPriceEndDateTimeUtc.HasValue && p.SpecialPriceEndDateTimeUtc.Value < nowUtc))) && (p.Price >= priceMin.Value))); " is 247.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			((p.SpecialPrice.HasValue && ((!p.SpecialPriceStartDateTimeUtc.HasValue || p.SpecialPriceStartDateTimeUtc.Value < nowUtc) && (!p.SpecialPriceEndDateTimeUtc.HasValue || p.SpecialPriceEndDateTimeUtc.Value > nowUtc))) && (p.SpecialPrice <= priceMax.Value)) || //regular price (price isn't specified or date range isn't valid) " is 322.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			((!p.SpecialPrice.HasValue || ((p.SpecialPriceStartDateTimeUtc.HasValue && p.SpecialPriceStartDateTimeUtc.Value > nowUtc) || (p.SpecialPriceEndDateTimeUtc.HasValue && p.SpecialPriceEndDateTimeUtc.Value < nowUtc))) && (p.Price <= priceMax.Value))); " is 247.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			query = query.Where (p => (!p.AvailableStartDateTimeUtc.HasValue || p.AvailableStartDateTimeUtc.Value < nowUtc) && (!p.AvailableEndDateTimeUtc.HasValue || p.AvailableEndDateTimeUtc.Value > nowUtc)); " is 198.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			where (p.Name.Contains (keywords)) || (searchDescriptions && p.ShortDescription.Contains (keywords)) || (searchDescriptions && p.FullDescription.Contains (keywords)) || (searchProductTags && pt.Name.Contains (keywords)) || //localized values " is 241.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			(searchLocalizedValue && lp.LanguageId == languageId && lp.LocaleKeyGroup == "Product" && lp.LocaleKey == "Name" && lp.LocaleValue.Contains (keywords)) || (searchDescriptions && searchLocalizedValue && lp.LanguageId == languageId && lp.LocaleKeyGroup == "Product" && lp.LocaleKey == "ShortDescription" && lp.LocaleValue.Contains (keywords)) || (searchDescriptions && searchLocalizedValue && lp.LanguageId == languageId && lp.LocaleKeyGroup == "Product" && lp.LocaleKey == "FullDescription" && lp.LocaleValue.Contains (keywords)) " is 528.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			where !filteredSpecs.Except (p.ProductSpecificationAttributes.Where (psa => psa.AllowFiltering).Select (psa => psa.SpecificationAttributeOptionId)).Any () " is 154.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The length of the statement  "			query = query.OrderBy (p => p.ProductManufacturers.FirstOrDefault (pm => pm.ManufacturerId == manufacturerId).DisplayOrder); " is 124.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,GetAssociatedProducts,The length of the statement  "		query = query.Where (p => (!p.AvailableStartDateTimeUtc.HasValue || p.AvailableStartDateTimeUtc.Value < nowUtc) && (!p.AvailableEndDateTimeUtc.HasValue || p.AvailableEndDateTimeUtc.Value > nowUtc)); " is 198.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,GetLowStockProducts,The length of the statement  "	where !p.Deleted && p.ManageInventoryMethodId == (int)ManageInventoryMethod.ManageStock && p.MinStockQuantity >= p.StockQuantity && (vendorId == 0 || p.VendorId == vendorId) " is 173.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,GetLowStockProducts,The length of the statement  "	where !p.Deleted && p.ManageInventoryMethodId == (int)ManageInventoryMethod.ManageStockByAttributes && pvac.StockQuantity <= 0 && (vendorId == 0 || p.VendorId == vendorId) " is 171.
Long Statement,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,AdjustInventory,The length of the statement  "				_workflowMessageService.SendQuantityBelowStoreOwnerNotification (product' _localizationSettings.DefaultAdminLanguageId); " is 120.
Long Statement,Nop.Services.Catalog,SpecificationAttributeService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\SpecificationAttributeService.cs,GetProductSpecificationAttributesByProductId,The length of the statement  "	string key = string.Format (PRODUCTSPECIFICATIONATTRIBUTE_ALLBYPRODUCTID_KEY' productId' allowFilteringCacheStr' showOnProductPageCacheStr); " is 140.
Long Statement,Nop.Services.Cms,WidgetService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Cms\WidgetService.cs,LoadActiveWidgets,The length of the statement  "	return LoadAllWidgets (storeId).Where (x => _widgetSettings.ActiveWidgetSystemNames.Contains (x.PluginDescriptor.SystemName' StringComparer.InvariantCultureIgnoreCase)).ToList (); " is 179.
Long Statement,Nop.Services.Cms,WidgetService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Cms\WidgetService.cs,LoadActiveWidgetsByWidgetZone,The length of the statement  "	return LoadActiveWidgets (storeId).Where (x => x.GetWidgetZones ().Contains (widgetZone' StringComparer.InvariantCultureIgnoreCase)).ToList (); " is 143.
Long Statement,Nop.Services.Common,AddressService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\AddressService.cs,IsAddressValid,The length of the statement  "	if (_addressSettings.StreetAddressEnabled && _addressSettings.StreetAddressRequired && String.IsNullOrWhiteSpace (address.Address1)) " is 132.
Long Statement,Nop.Services.Common,AddressService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\AddressService.cs,IsAddressValid,The length of the statement  "	if (_addressSettings.StreetAddress2Enabled && _addressSettings.StreetAddress2Required && String.IsNullOrWhiteSpace (address.Address2)) " is 134.
Long Statement,Nop.Services.Common,AddressService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\AddressService.cs,IsAddressValid,The length of the statement  "	if (_addressSettings.ZipPostalCodeEnabled && _addressSettings.ZipPostalCodeRequired && String.IsNullOrWhiteSpace (address.ZipPostalCode)) " is 137.
Long Statement,Nop.Services.Common,AddressExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\AddressExtensions.cs,FindAddress,The length of the statement  "	return source.Find (a => ((String.IsNullOrEmpty (a.FirstName) && String.IsNullOrEmpty (firstName)) || a.FirstName == firstName) && ((String.IsNullOrEmpty (a.LastName) && String.IsNullOrEmpty (lastName)) || a.LastName == lastName) && ((String.IsNullOrEmpty (a.PhoneNumber) && String.IsNullOrEmpty (phoneNumber)) || a.PhoneNumber == phoneNumber) && ((String.IsNullOrEmpty (a.Email) && String.IsNullOrEmpty (email)) || a.Email == email) && ((String.IsNullOrEmpty (a.FaxNumber) && String.IsNullOrEmpty (faxNumber)) || a.FaxNumber == faxNumber) && ((String.IsNullOrEmpty (a.Company) && String.IsNullOrEmpty (company)) || a.Company == company) && ((String.IsNullOrEmpty (a.Address1) && String.IsNullOrEmpty (address1)) || a.Address1 == address1) && ((String.IsNullOrEmpty (a.Address2) && String.IsNullOrEmpty (address2)) || a.Address2 == address2) && ((String.IsNullOrEmpty (a.City) && String.IsNullOrEmpty (city)) || a.City == city) && ((a.StateProvinceId.IsNullOrDefault () && stateProvinceId.IsNullOrDefault ()) || a.StateProvinceId == stateProvinceId) && ((String.IsNullOrEmpty (a.ZipPostalCode) && String.IsNullOrEmpty (zipPostalCode)) || a.ZipPostalCode == zipPostalCode) && ((a.CountryId.IsNullOrDefault () && countryId.IsNullOrDefault ()) || a.CountryId == countryId)); " is 1271.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont)); " is 146.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font)); " is 255.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont)); " is 128.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font)); " is 166.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font)); " is 203.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font)); " is 168.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font)); " is 164.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font)); " is 167.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font)); " is 168.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font)); " is 271.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font)); " is 187.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font)); " is 155.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName; " is 153.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font)); " is 160.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) { " is 152.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font)); " is 175.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id)); " is 120.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont)); " is 130.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font)); " is 168.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font)); " is 206.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font)); " is 170.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font)); " is 166.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font)); " is 169.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font)); " is 170.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font)); " is 276.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font)); " is 190.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font)); " is 166.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont)); " is 126.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font)); " is 125.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font)); " is 122.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font)); " is 125.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font)); " is 122.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont); " is 137.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate); " is 123.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true); " is 123.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate); " is 123.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false); " is 124.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate); " is 127.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true); " is 148.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font)); " is 164.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate); " is 127.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false); " is 149.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font)); " is 164.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate); " is 143.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true); " is 176.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font)); " is 182.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate); " is 143.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false); " is 177.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font)); " is 182.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate); " is 127.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true); " is 156.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font)); " is 163.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate); " is 127.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false); " is 157.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font)); " is 163.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate); " is 153.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true); " is 195.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font)); " is 194.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate); " is 153.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false); " is 196.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font)); " is 194.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font)); " is 141.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key)); " is 140.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang); " is 161.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang); " is 154.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font)); " is 174.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode); " is 137.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang); " is 171.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points); " is 144.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang); " is 196.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang); " is 129.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont)); " is 165.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList (); " is 121.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont)); " is 127.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font)); " is 128.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font)); " is 123.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font)); " is 139.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "					cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font)); " is 131.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "		if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) { " is 145.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] { " is 168.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "			var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] { " is 168.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The length of the statement  "				footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent); " is 132.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Shipment"' lang.Id)' shipment.Id)' titleFont)); " is 151.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Order"' lang.Id)' order.Id)' titleFont)); " is 145.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id)); " is 120.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "				addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Company"' lang.Id)' order.ShippingAddress.Company)' font)); " is 163.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font)); " is 201.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "				addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font)); " is 165.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "				addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address"' lang.Id)' order.ShippingAddress.Address1)' font)); " is 164.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "				addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address2"' lang.Id)' order.ShippingAddress.Address2)' font)); " is 165.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "				addressTable.AddCell (new Paragraph (String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font)); " is 265.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "				addressTable.AddCell (new Paragraph (String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font)); " is 179.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.ShippingMethod"' lang.Id)' order.ShippingMethod)' font)); " is 161.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "		var cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.ProductName"' lang.Id)' font)); " is 120.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The length of the statement  "				var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont); " is 137.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "		productTable.AddCell (new Paragraph (HtmlHelper.StripTags (HtmlHelper.ConvertHtmlToPlainText (productDescription' decode: true))' font)); " is 137.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "			productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Price"' lang.Id)' product.Price.ToString ("0.00")' _currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode)' font)); " is 270.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "			productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.SKU"' lang.Id)' product.Sku)' font)); " is 154.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "				productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Weight"' lang.Id)' product.Weight.ToString ("0.00")' _measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).Name)' font)); " is 257.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "				productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.StockQuantity"' lang.Id)' product.StockQuantity)' font)); " is 174.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "				productTable.AddCell (new Paragraph (String.Format ("{0}-{1}. {2}"' productNumber' pvNum' associatedProduct.GetLocalized (x => x.Name' lang.Id))' font)); " is 153.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "				//    productTable.AddCell(new Paragraph(HtmlHelper.StripTags(HtmlHelper.ConvertHtmlToPlainText(apDescription))' font)); " is 120.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "				productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Price"' lang.Id)' associatedProduct.Price.ToString ("0.00")' _currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode)' font)); " is 280.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "				productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.SKU"' lang.Id)' associatedProduct.Sku)' font)); " is 164.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "					productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Weight"' lang.Id)' associatedProduct.Weight.ToString ("0.00")' _measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).Name)' font)); " is 267.
Long Statement,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The length of the statement  "					productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.StockQuantity"' lang.Id)' associatedProduct.StockQuantity)' font)); " is 184.
Long Statement,Nop.Services.Customers,CustomerAttributeParser,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerAttributeParser.cs,GetAttributeWarnings,The length of the statement  "				var notFoundWarning = string.Format (_localizationService.GetResource ("ShoppingCart.SelectAttribute")' cva2.GetLocalized (a => a.Name)); " is 137.
Long Statement,Nop.Services.Customers,CustomerAttributeExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerAttributeExtensions.cs,ShouldHaveValues,The length of the statement  "	if (customerAttribute.AttributeControlType == AttributeControlType.TextBox || customerAttribute.AttributeControlType == AttributeControlType.MultilineTextbox || customerAttribute.AttributeControlType == AttributeControlType.Datepicker || customerAttribute.AttributeControlType == AttributeControlType.FileUpload) " is 312.
Long Statement,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,RegisterCustomer,The length of the statement  "			request.Customer.Password = _encryptionService.CreatePasswordHash (request.Password' saltKey' _customerSettings.HashedPasswordFormat); " is 134.
Long Statement,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,RegisterCustomer,The length of the statement  "		request.Customer.AddRewardPointsHistoryEntry (_rewardPointsSettings.PointsForRegistration' _localizationService.GetResource ("RewardPoints.Message.EarnedForRegistration")); " is 172.
Long Statement,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,ChangePassword,The length of the statement  "			oldPwd = _encryptionService.CreatePasswordHash (request.OldPassword' customer.PasswordSalt' _customerSettings.HashedPasswordFormat); " is 132.
Long Statement,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,ChangePassword,The length of the statement  "				customer.Password = _encryptionService.CreatePasswordHash (request.NewPassword' saltKey' _customerSettings.HashedPasswordFormat); " is 129.
Long Statement,Nop.Services.Customers,CustomerReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerReportService.cs,GetBestCustomersReport,The length of the statement  "	where (!createdFromUtc.HasValue || createdFromUtc.Value <= o.CreatedOnUtc) && (!createdToUtc.HasValue || createdToUtc.Value >= o.CreatedOnUtc) && (!orderStatusId.HasValue || orderStatusId == o.OrderStatusId) && (!paymentStatusId.HasValue || paymentStatusId == o.PaymentStatusId) && (!shippingStatusId.HasValue || shippingStatusId == o.ShippingStatusId) && (!o.Deleted) && (!c.Deleted) " is 384.
Long Statement,Nop.Services.Customers,CustomerExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerExtensions.cs,ParseAppliedGiftCardCouponCodes,The length of the statement  "	string existingGiftCartCouponCodes = customer.GetAttribute<string> (SystemCustomerAttributeNames.GiftCardCouponCodes' genericAttributeService); " is 143.
Long Statement,Nop.Services.Customers,CustomerExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerExtensions.cs,ApplyGiftCardCouponCode,The length of the statement  "		string existingGiftCartCouponCodes = customer.GetAttribute<string> (SystemCustomerAttributeNames.GiftCardCouponCodes' genericAttributeService); " is 143.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.FirstName && z.Attribute.Value.Contains (firstName))).Select (z => z.Customer); " is 181.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.LastName && z.Attribute.Value.Contains (lastName))).Select (z => z.Customer); " is 179.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		string dateOfBirthStr = monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-" + dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture); " is 148.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00 " is 132.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (5' 5) == dateOfBirthStr)).Select (z => z.Customer); " is 197.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00 " is 132.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer); " is 197.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Contains (dateOfBirthStr))).Select (z => z.Customer); " is 188.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.Company && z.Attribute.Value.Contains (company))).Select (z => z.Customer); " is 177.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.Phone && z.Attribute.Value.Contains (phone))).Select (z => z.Customer); " is 173.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.ZipPostalCode && z.Attribute.Value.Contains (zipPostalCode))).Select (z => z.Customer); " is 189.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The length of the statement  "		query = sct.HasValue ? query.Where (c => c.ShoppingCartItems.Any (x => x.ShoppingCartTypeId == sctId)) : query.Where (c => c.ShoppingCartItems.Any ()); " is 151.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The length of the statement  "		_genericAttributeService.SaveAttribute<ShippingOption> (customer' SystemCustomerAttributeNames.DiscountCouponCode' null); " is 121.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The length of the statement  "		_genericAttributeService.SaveAttribute<ShippingOption> (customer' SystemCustomerAttributeNames.GiftCardCouponCodes' null); " is 122.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The length of the statement  "		_genericAttributeService.SaveAttribute<ShippingOption> (customer' SystemCustomerAttributeNames.CheckoutAttributes' null' storeId); " is 130.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The length of the statement  "		_genericAttributeService.SaveAttribute<bool> (customer' SystemCustomerAttributeNames.UseRewardPointsDuringCheckout' false' storeId); " is 132.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The length of the statement  "		_genericAttributeService.SaveAttribute<ShippingOption> (customer' SystemCustomerAttributeNames.SelectedShippingOption' null' storeId); " is 134.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The length of the statement  "		_genericAttributeService.SaveAttribute<ShippingOption> (customer' SystemCustomerAttributeNames.OfferedShippingOptions' null' storeId); " is 134.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The length of the statement  "		_genericAttributeService.SaveAttribute<bool> (customer' SystemCustomerAttributeNames.SelectedPickUpInStore' false' storeId); " is 124.
Long Statement,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,ResetCheckoutData,The length of the statement  "		_genericAttributeService.SaveAttribute<string> (customer' SystemCustomerAttributeNames.SelectedPaymentMethod' null' storeId); " is 125.
Long Statement,Nop.Services.Helpers,UserAgentHelper,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Helpers\UserAgentHelper.cs,IsSearchEngine,The length of the statement  "	//more info: http://www.nopcommerce.com/boards/t/17711/unhandled-exception-request-is-not-available-in-this-context.aspx " is 120.
Long Statement,Nop.Services.Logging,CustomerActivityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\CustomerActivityService.cs,ClearAllActivities,The length of the statement  "		//we cannot wait until EF team has it implemented - http://data.uservoice.com/forums/72025-entity-framework-feature-suggestions/suggestions/1015357-batch-cud-support " is 165.
Long Statement,Nop.Services.Logging,DefaultLogger,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\DefaultLogger.cs,ClearLog,The length of the statement  "		//we cannot wait until EF team has it implemented - http://data.uservoice.com/forums/72025-entity-framework-feature-suggestions/suggestions/1015357-batch-cud-support " is 165.
Long Statement,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetDefaultPictureUrl,The length of the statement  "		string url = (!String.IsNullOrEmpty (storeLocation) ? storeLocation : _webHelper.GetStoreLocation ()) + "content/images/" + defaultImageFileName; " is 145.
Long Statement,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetDefaultPictureUrl,The length of the statement  "		string thumbFileName = string.Format ("{0}_{1}{2}"' Path.GetFileNameWithoutExtension (filePath)' targetSize' fileExtension); " is 124.
Long Statement,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetPictureUrl,The length of the statement  "			thumbFileName = !String.IsNullOrEmpty (seoFileName) ? string.Format ("{0}_{1}.{2}"' picture.Id.ToString ("0000000")' seoFileName' lastPart) : string.Format ("{0}.{1}"' picture.Id.ToString ("0000000")' lastPart); " is 211.
Long Statement,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetPictureUrl,The length of the statement  "			thumbFileName = !String.IsNullOrEmpty (seoFileName) ? string.Format ("{0}_{1}_{2}.{3}"' picture.Id.ToString ("0000000")' seoFileName' targetSize' lastPart) : string.Format ("{0}_{1}.{2}"' picture.Id.ToString ("0000000")' targetSize' lastPart); " is 243.
Long Statement,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetPictureUrl,The length of the statement  "						//try-catch to ensure that picture binary is really OK. Otherwise' we can get "Parameter is not valid" exception if binary is corrupted for some reasons " is 152.
Long Statement,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,LoadActiveShippingRateComputationMethods,The length of the statement  "	return LoadAllShippingRateComputationMethods (storeId).Where (provider => _shippingSettings.ActiveShippingRateComputationMethodSystemNames.Contains (provider.PluginDescriptor.SystemName' StringComparer.InvariantCultureIgnoreCase)).ToList (); " is 241.
Long Statement,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetTotalWeight,The length of the statement  "		var checkoutAttributesXml = customer.GetAttribute<string> (SystemCustomerAttributeNames.CheckoutAttributes' _genericAttributeService' _storeContext.CurrentStore.Id); " is 165.
Long Statement,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetDimensions,The length of the statement  "					var pvaValues = _productAttributeParser.ParseProductVariantAttributeValues (shoppingCartItem.AttributesXml).Where (x => x.AttributeValueType == AttributeValueType.AssociatedToProduct).ToList (); " is 194.
Long Statement,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetDimensions,The length of the statement  "					var pvaValues = _productAttributeParser.ParseProductVariantAttributeValues (shoppingCartItem.AttributesXml).Where (x => x.AttributeValueType == AttributeValueType.AssociatedToProduct).ToList (); " is 194.
Long Statement,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The length of the statement  "		shippingRateComputationMethods = shippingRateComputationMethods.Where (srcm => allowedShippingRateComputationMethodSystemName.Equals (srcm.PluginDescriptor.SystemName' StringComparison.InvariantCultureIgnoreCase)).ToList (); " is 224.
Long Statement,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The length of the statement  "					srcmShippingOptions = srcmShippingOptions.Where (existingso => getShippingOptionResponse.ShippingOptions.Any (newso => newso.Name == existingso.Name)).ToList (); " is 161.
Long Statement,Nop.Services.Directory,UpdateExchangeRateTask,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\UpdateExchangeRateTask.cs,Execute,The length of the statement  "		var exchangeRates = _currencyService.GetCurrencyLiveRates (_currencyService.GetCurrencyById (_currencySettings.PrimaryExchangeRateCurrencyId).CurrencyCode); " is 156.
Long Statement,Nop.Services.Directory,CurrencyService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\CurrencyService.cs,LoadActiveExchangeRateProvider,The length of the statement  "	var exchangeRateProvider = LoadExchangeRateProviderBySystemName (_currencySettings.ActiveExchangeRateProviderSystemName); " is 121.
Long Statement,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,GetAllTopics,The length of the statement  "	where (forumId == 0 || ft.ForumId == forumId) && (customerId == 0 || ft.CustomerId == customerId) && (!searchKeywords || (searchTopicTitles && ft.Subject.Contains (keywords)) || (searchPostText && fp.Text.Contains (keywords))) && (!limitDate.HasValue || limitDate.Value <= ft.LastPostTime) " is 289.
Long Statement,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,InsertPost,The length of the statement  "		int friendlyTopicPageIndex = CalculateTopicPageIndex (forumPost.TopicId' _forumSettings.PostsPageSize > 0 ? _forumSettings.PostsPageSize : 10' forumPost.Id) + 1; " is 161.
Long Statement,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,InsertPost,The length of the statement  "				_workflowMessageService.SendNewForumPostMessage (subscription.Customer' forumPost' forumTopic' forum' friendlyTopicPageIndex' languageId); " is 138.
Long Statement,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,InsertPrivateMessage,The length of the statement  "	_genericAttributeService.SaveAttribute (customerTo' SystemCustomerAttributeNames.NotifiedAboutNewPrivateMessages' false' privateMessage.StoreId); " is 145.
Long Statement,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,GetAllSubscriptions,The length of the statement  "	where (customerId == 0 || fs.CustomerId == customerId) && (forumId == 0 || fs.ForumId == forumId) && (topicId == 0 || fs.TopicId == topicId) && (c.Active && !c.Deleted) " is 168.
Long Statement,Nop.Services.Installation,SqlFileInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\SqlFileInstallationService.cs,InstallLocaleResources,The length of the statement  "	foreach (var filePath in System.IO.Directory.EnumerateFiles (_webHelper.MapPath ("~/App_Data/Localization/")' "*.nopres.xml"' SearchOption.TopDirectoryOnly)) { " is 159.
Long Statement,Nop.Services.Installation,SqlFileInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\SqlFileInstallationService.cs,UpdateDefaultCustomer,The length of the statement  "	customerRegistrationService.ChangePassword (new ChangePasswordRequest (defaultUserEmail' false' PasswordFormat.Hashed' defaultUserPassword)); " is 141.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallLocaleResources,The length of the statement  "	foreach (var filePath in System.IO.Directory.EnumerateFiles (_webHelper.MapPath ("~/App_Data/Localization/")' "*.nopres.xml"' SearchOption.TopDirectoryOnly)) { " is 159.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallShippingMethods,The length of the statement  "			Description = "Compared to other shipping methods' like by flight or over seas' ground shipping is carried out closer to the earth"' " is 132.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,HashDefaultCustomerPassword,The length of the statement  "	customerRegistrationService.ChangePassword (new ChangePasswordRequest (defaultUserEmail' false' PasswordFormat.Hashed' defaultUserPassword)); " is 141.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />A new blog comment has been created for blog post \"%BlogComment.BlogPostTitle%\".</p>"' " is 152.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />Hello %Customer.FullName%' <br />Product <a target=\"_blank\" href=\"%BackInStockSubscription.ProductUrl%\">%BackInStockSubscription.ProductName%</a> is in stock.</p>"' " is 232.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<a href=\"%Store.URL%\">%Store.Name%</a>  <br />  <br />  To activate your account <a href=\"%Customer.AccountActivationURL%\">click here</a>.     <br />  <br />  %Store.Name%"' " is 185.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<a href=\"%Store.URL%\">%Store.Name%</a>  <br />  <br />  To change your password <a href=\"%Customer.PasswordRecoveryURL%\">click here</a>.     <br />  <br />  %Store.Name%"' " is 183.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "We welcome you to <a href=\"%Store.URL%\"> %Store.Name%</a>.<br /><br />You can now take part in the various services we have to offer you. Some of these services include:<br /><br />Permanent Cart - Any products added to your online cart remain there until you remove them' or check them out.<br />Address Book - We can now deliver your products to another address other than yours! This is perfect to send birthday gifts direct to the birthday-person themselves.<br />Order History - View your history of purchases that you have made with us.<br />Products Reviews - Share your opinions on products with our other customers.<br /><br />For help with any of our online services' please email the store-owner: <a href=\"mailto:%Store.Email%\">%Store.Email%</a>.<br /><br />Note: This email address was provided on our registration page. If you own the email and did not register on our site' please send an email to <a href=\"mailto:%Store.Email%\">%Store.Email%</a>."' " is 977.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />A new post has been created in the topic <a href=\"%Forums.TopicURL%\">\"%Forums.TopicName%\"</a> at <a href=\"%Forums.ForumURL%\">\"%Forums.ForumName%\"</a> forum.<br /><br />Click <a href=\"%Forums.TopicURL%\">here</a> for more info.<br /><br />Post author: %Forums.PostAuthor%<br />Post body: %Forums.PostBody%</p>"' " is 383.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />A new topic <a href=\"%Forums.TopicURL%\">\"%Forums.TopicName%\"</a> has been created at <a href=\"%Forums.ForumURL%\">\"%Forums.ForumName%\"</a> forum.<br /><br />Click <a href=\"%Forums.TopicURL%\">here</a> for more info.</p>"' " is 293.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p>You have received a gift card for %Store.Name%</p><p>Dear %GiftCard.RecipientName%' <br /><br />%GiftCard.SenderName% (%GiftCard.SenderEmail%) has sent you a %GiftCard.Amount% gift cart for <a href=\"%Store.URL%\"> %Store.Name%</a></p><p>You gift card code is %GiftCard.CouponCode%</p><p>%GiftCard.Message%</p>"' " is 323.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />A new customer registered with your store. Below are the customer's details:<br />Full name: %Customer.FullName%<br />Email: %Customer.Email%</p>"' " is 211.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />%Customer.FullName% has just submitted a new return request. Details are below:<br />Request ID: %ReturnRequest.ID%<br />Product: %ReturnRequest.Product.Quantity% x Product: %ReturnRequest.Product.Name%<br />Reason for return: %ReturnRequest.Reason%<br />Requested action: %ReturnRequest.RequestedAction%<br />Customer comments:<br />%ReturnRequest.CustomerComment%</p>"' " is 435.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />A new news comment has been created for news \"%NewsComment.NewsTitle%\".</p>"' " is 143.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%NewsLetterSubscription.ActivationUrl%\">Click here to confirm your subscription to our list.</a></p><p>If you received this email by mistake' simply delete it.</p>"' " is 187.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />%Customer.FullName% (%Customer.Email%) has just submitted a new VAT number. Details are below:<br />VAT number: %Customer.VatNumber%<br />VAT number status: %Customer.VatNumberStatus%<br />Received name: %VatValidationResult.Name%<br />Received address: %VatValidationResult.Address%</p>"' " is 353.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />Hello %Order.CustomerFullName%' <br />Your order has been cancelled. Below is the summary of the order. <br /><br />Order Number: %Order.OrderNumber%<br />Order Details: <a target=\"_blank\" href=\"%Order.OrderURLForCustomer%\">%Order.OrderURLForCustomer%</a><br />Date Ordered: %Order.CreatedOn%<br /><br /><br /><br />Billing Address<br />%Order.BillingFirstName% %Order.BillingLastName%<br />%Order.BillingAddress1%<br />%Order.BillingCity% %Order.BillingZipPostalCode%<br />%Order.BillingStateProvince% %Order.BillingCountry%<br /><br /><br /><br />Shipping Address<br />%Order.ShippingFirstName% %Order.ShippingLastName%<br />%Order.ShippingAddress1%<br />%Order.ShippingCity% %Order.ShippingZipPostalCode%<br />%Order.ShippingStateProvince% %Order.ShippingCountry%<br /><br />Shipping Method: %Order.ShippingMethod%<br /><br />%Order.Product(s)%</p>"' " is 921.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />Hello %Order.CustomerFullName%' <br />Your order has been completed. Below is the summary of the order. <br /><br />Order Number: %Order.OrderNumber%<br />Order Details: <a target=\"_blank\" href=\"%Order.OrderURLForCustomer%\">%Order.OrderURLForCustomer%</a><br />Date Ordered: %Order.CreatedOn%<br /><br /><br /><br />Billing Address<br />%Order.BillingFirstName% %Order.BillingLastName%<br />%Order.BillingAddress1%<br />%Order.BillingCity% %Order.BillingZipPostalCode%<br />%Order.BillingStateProvince% %Order.BillingCountry%<br /><br /><br /><br />Shipping Address<br />%Order.ShippingFirstName% %Order.ShippingLastName%<br />%Order.ShippingAddress1%<br />%Order.ShippingCity% %Order.ShippingZipPostalCode%<br />%Order.ShippingStateProvince% %Order.ShippingCountry%<br /><br />Shipping Method: %Order.ShippingMethod%<br /><br />%Order.Product(s)%</p>"' " is 921.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\"> %Store.Name%</a> <br /> <br /> Hello %Order.CustomerFullName%' <br /> Good news! You order has been delivered. <br /> Order Number: %Order.OrderNumber%<br /> Order Details: <a href=\"%Order.OrderURLForCustomer%\" target=\"_blank\">%Order.OrderURLForCustomer%</a><br /> Date Ordered: %Order.CreatedOn%<br /> <br /> <br /> <br /> Billing Address<br /> %Order.BillingFirstName% %Order.BillingLastName%<br /> %Order.BillingAddress1%<br /> %Order.BillingCity% %Order.BillingZipPostalCode%<br /> %Order.BillingStateProvince% %Order.BillingCountry%<br /> <br /> <br /> <br /> Shipping Address<br /> %Order.ShippingFirstName% %Order.ShippingLastName%<br /> %Order.ShippingAddress1%<br /> %Order.ShippingCity% %Order.ShippingZipPostalCode%<br /> %Order.ShippingStateProvince% %Order.ShippingCountry%<br /> <br /> Shipping Method: %Order.ShippingMethod% <br /> <br /> Delivered Products: <br /> <br /> %Shipment.Product(s)%</p>"' " is 955.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />Hello %Order.CustomerFullName%' <br />Thanks for buying from <a href=\"%Store.URL%\">%Store.Name%</a>. Below is the summary of the order. <br /><br />Order Number: %Order.OrderNumber%<br />Order Details: <a target=\"_blank\" href=\"%Order.OrderURLForCustomer%\">%Order.OrderURLForCustomer%</a><br />Date Ordered: %Order.CreatedOn%<br /><br /><br /><br />Billing Address<br />%Order.BillingFirstName% %Order.BillingLastName%<br />%Order.BillingAddress1%<br />%Order.BillingCity% %Order.BillingZipPostalCode%<br />%Order.BillingStateProvince% %Order.BillingCountry%<br /><br /><br /><br />Shipping Address<br />%Order.ShippingFirstName% %Order.ShippingLastName%<br />%Order.ShippingAddress1%<br />%Order.ShippingCity% %Order.ShippingZipPostalCode%<br />%Order.ShippingStateProvince% %Order.ShippingCountry%<br /><br />Shipping Method: %Order.ShippingMethod%<br /><br />%Order.Product(s)%</p>"' " is 955.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />%Order.CustomerFullName% (%Order.CustomerEmail%) has just placed an order from your store. Below is the summary of the order. <br /><br />Order Number: %Order.OrderNumber%<br />Date Ordered: %Order.CreatedOn%<br /><br /><br /><br />Billing Address<br />%Order.BillingFirstName% %Order.BillingLastName%<br />%Order.BillingAddress1%<br />%Order.BillingCity% %Order.BillingZipPostalCode%<br />%Order.BillingStateProvince% %Order.BillingCountry%<br /><br /><br /><br />Shipping Address<br />%Order.ShippingFirstName% %Order.ShippingLastName%<br />%Order.ShippingAddress1%<br />%Order.ShippingCity% %Order.ShippingZipPostalCode%<br />%Order.ShippingStateProvince% %Order.ShippingCountry%<br /><br />Shipping Method: %Order.ShippingMethod%<br /><br />%Order.Product(s)%</p>"' " is 833.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\"> %Store.Name%</a> <br /><br />Hello %Order.CustomerFullName%!' <br />Good news! You order has been shipped. <br />Order Number: %Order.OrderNumber%<br />Order Details: <a href=\"%Order.OrderURLForCustomer%\" target=\"_blank\">%Order.OrderURLForCustomer%</a><br />Date Ordered: %Order.CreatedOn%<br /><br /><br /><br />Billing Address<br />%Order.BillingFirstName% %Order.BillingLastName%<br />%Order.BillingAddress1%<br />%Order.BillingCity% %Order.BillingZipPostalCode%<br />%Order.BillingStateProvince% %Order.BillingCountry%<br /><br /><br /><br />Shipping Address<br />%Order.ShippingFirstName% %Order.ShippingLastName%<br />%Order.ShippingAddress1%<br />%Order.ShippingCity% %Order.ShippingZipPostalCode%<br />%Order.ShippingStateProvince% %Order.ShippingCountry%<br /><br />Shipping Method: %Order.ShippingMethod% <br /> <br /> Shipped Products: <br /> <br /> %Shipment.Product(s)%</p>"' " is 928.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />A new product review has been written for product \"%ProductReview.ProductName%\".</p>"' " is 152.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />%Product.Name% (ID: %Product.ID%) low quantity. <br /><br />Quantity: %Product.StockQuantity%<br /></p>"' " is 169.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />Hello %Customer.FullName%'<br />Your return request #%ReturnRequest.ID% status has been changed.</p>"' " is 166.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\"> %Store.Name%</a> <br /><br />%EmailAFriend.Email% was shopping on %Store.Name% and wanted to share the following item with you. <br /><br /><b><a target=\"_blank\" href=\"%Product.ProductURLForCustomer%\">%Product.Name%</a></b> <br />%Product.ShortDescription% <br /><br />For more info click <a target=\"_blank\" href=\"%Product.ProductURLForCustomer%\">here</a> <br /><br /><br />%EmailAFriend.PersonalMessage%<br /><br />%Store.Name%</p>"' " is 478.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\"> %Store.Name%</a> <br /><br />%Wishlist.Email% was shopping on %Store.Name% and wanted to share a wishlist with you. <br /><br /><br />For more info click <a target=\"_blank\" href=\"%Wishlist.URLForCustomer%\">here</a> <br /><br /><br />%Wishlist.PersonalMessage%<br /><br />%Store.Name%</p>"' " is 329.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />Hello %Customer.FullName%' <br />New order note has been added to your account:<br />\"%Order.NewNoteText%\".<br /><a target=\"_blank\" href=\"%Order.OrderURLForCustomer%\">%Order.OrderURLForCustomer%</a></p>"' " is 274.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />%Customer.FullName% (%Customer.Email%) has just cancelled a recurring payment ID=%RecurringPayment.ID%.</p>"' " is 173.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />%Customer.FullName% (%Customer.Email%) has just placed an order. <br /><br />Order Number: %Order.OrderNumber%<br />Date Ordered: %Order.CreatedOn%</p>"' " is 217.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallMessageTemplates,The length of the statement  "			Body = "<p><a href=\"%Store.URL%\">%Store.Name%</a> <br /><br />Order #%Order.OrderNumber% has been just paid<br />Date Ordered: %Order.CreatedOn%</p>"' " is 152.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallTopics,The length of the statement  "			Body = "<p><strong>Register and save time!</strong><br />Register with us for future convenience:</p><ul><li>Fast and easy check out</li><li>Easy access to your order history and status</li></ul>" " is 196.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallTopics,The length of the statement  "			Body = "<p>Online shopping is the process consumers go through to purchase products or services over the Internet. You can edit this in the admin site.</p><p>If you have questions' see the <a href=\"http://www.nopcommerce.com/documentation.aspx\">Documentation</a>' or post in the <a href=\"http://www.nopcommerce.com/boards/\">Forums</a> at <a href=\"http://www.nopcommerce.com\">nopCommerce.com</a></p>" " is 405.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallTopics,The length of the statement  "			Body = "<p><strong>The page you requested was not found' and we have a fine guess why.</strong></p><ul><li>If you typed the URL directly' please make sure the spelling is correct.</li><li>The page no longer exists. In this case' we profusely apologize for the inconvenience and for any damage this may cause.</li></ul>" " is 319.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The length of the statement  "		PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"' " is 521.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "	var categoryTemplateInGridAndLines = _categoryTemplateRepository.Table.FirstOrDefault (pt => pt.Name == "Products in Grid or Lines"); " is 133.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_book.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Book")' true).Id' " is 168.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_computers.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Computers")' true).Id' " is 178.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_desktops.jpg")' "image/pjpeg"' pictureService.GetPictureSeName ("Desktops")' true).Id' " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_notebooks.jpg")' "image/pjpeg"' pictureService.GetPictureSeName ("Notebooks")' true).Id' " is 178.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_accessories.jpg")' "image/pjpeg"' pictureService.GetPictureSeName ("Accessories")' true).Id' " is 182.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_software.jpg")' "image/pjpeg"' pictureService.GetPictureSeName ("Software")' true).Id' " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_electronics.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Electronics")' true).Id' " is 182.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_camera_photo.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Camera' photo")' true).Id' " is 185.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_cell_phones.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Cell phones")' true).Id' " is 182.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_apparel_shoes.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Apparel & Shoes")' true).Id' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_digital_downloads.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Digital downloads")' true).Id' " is 194.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_jewelry.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Jewelry")' true).Id' " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCategories,The length of the statement  "		PictureId = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "category_gift_cards.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Gift Cards")' true).Id' " is 180.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallManufacturers,The length of the statement  "	var manufacturerTemplateInGridAndLines = _manufacturerTemplateRepository.Table.FirstOrDefault (pt => pt.Name == "Products in Grid or Lines"); " is 141.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "$5 Gift Card. Gift Cards must be redeemed through our site Web site toward the purchase of eligible products."' " is 131.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Gift Cards must be redeemed through our site Web site toward the purchase of eligible products. Purchases are deducted from the GiftCard balance. Any unused balance will be placed in the recipient's GiftCard account when redeemed. If an order exceeds the amount of the GiftCard' the balance must be paid with a credit card or other available payment method.</p>"' " is 385.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_5giftcart.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (product5GiftCard.Name)' true)' " is 182.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "$25 Gift Card. Gift Cards must be redeemed through our site Web site toward the purchase of eligible products."' " is 132.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Gift Cards must be redeemed through our site Web site toward the purchase of eligible products. Purchases are deducted from the GiftCard balance. Any unused balance will be placed in the recipient's GiftCard account when redeemed. If an order exceeds the amount of the GiftCard' the balance must be paid with a credit card or other available payment method.</p>"' " is 385.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_25giftcart.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (product25GiftCard.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "$50 Gift Card. Gift Cards must be redeemed through our site Web site toward the purchase of eligible products."' " is 132.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Gift Cards must be redeemed through our site Web site toward the purchase of eligible products. Purchases are deducted from the GiftCard balance. Any unused balance will be placed in the recipient's GiftCard account when redeemed. If an order exceeds the amount of the GiftCard' the balance must be paid with a credit card or other available payment method.</p>"' " is 385.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_50giftcart.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (product50GiftCard.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "$100 Gift Card. Gift Cards must be redeemed through our site Web site toward the purchase of eligible products."' " is 133.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Gift Cards must be redeemed through our site Web site toward the purchase of eligible products. Purchases are deducted from the GiftCard balance. Any unused balance will be placed in the recipient's GiftCard account when redeemed. If an order exceeds the amount of the GiftCard' the balance must be paid with a credit card or other available payment method.</p>"' " is 385.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_100giftcart.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (product100GiftCard.Name)' true)' " is 186.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_RockabillyPolka.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productRockabillyPolka.Name)' true)' " is 194.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Acer Aspire One 8.9&quot; Memory Foam Pouch is the perfect fit for Acer Aspire One 8.9&quot;. This pouch is made out of premium quality shock absorbing memory form and it provides extra protection even though case is very light and slim. This pouch is water resistant and has internal supporting bands for Acer Aspire One 8.9&quot;. Made In Korea.</p>"' " is 375.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_AcerAspireOne_1.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productAcerAspireOne.Name)' true)' " is 192.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_AcerAspireOne_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productAcerAspireOne.Name)' true)' " is 192.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "Now there are even more reasons to love this training favorite. An improved last' new step-in sockliner and the smooth control of 3-D ForMotion� deliver a natural' balanced touchdown that feels better than ever."' " is 233.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Built to take you far and fast' Adidas Supernova Cushion 7 road-running shoes offer incredible cushioning and comfort with low weight. * Abrasion-resistant nylon mesh uppers are lightweight and highly breathable; synthetic leather overlays create structure and support * GeoFit construction at ankles provides an anatomically correct fit and extra comfort * Nylon linings and molded' antimicrobial dual-layer EVA footbeds dry quickly and fight odor * adiPRENE&reg; midsoles absorb shock in the heels and help maximize heel protection and stability * adiPRENE&reg;+ under forefeet retains natural propulsive forces for improved efficiency * Torsion&reg; system at the midfoot allows natural rotation between the rearfoot and the forefoot' helping improve surface adaptability * ForMotion&reg; freely moving' decoupled heel system allows your feet to adapt to the ground strike and adjust for forward momentum * adiWEAR&reg; rubber outsoles give ample durability in high-wear areas and offer lightweight grip and cushion Mens shoes ' men's shoes ' running shoes ' adidas shoes ' adidas running shoes ' mens running shoes ' snova running shoes ' snova mens adidas ' snova adidas running ' snova shoes ' sport shoes mens ' sport shoes adidas ' mens shoes ' men's shoes ' running ' adidas</p>"' " is 1311.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_AdidasShoe_1.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productAdidasShoe.Name)' true)' " is 186.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_AdidasShoe_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productAdidasShoe.Name)' true)' " is 186.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Adobe Photoshop Elements 7 software combines power and simplicity so you can make ordinary photos extraordinary; tell engaging stories in beautiful' personalized creations for print and web; and easily find and view all your photos. New Photoshop.com membership* works with Photoshop Elements so you can protect your photos with automatic online backup and 2 GB of storage; view your photos anywhere you are; and share your photos in fun' interactive ways with invitation-only Online Albums.</p>"' " is 519.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_AdobePhotoshop.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productAdobePhotoshop.Name)' true)' " is 192.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>The Back-UPS RS offers high performance protection for your business and office computer systems. It provides abundant battery backup power' allowing you to work through medium and extended length power outages. It also safeguards your equipment from damaging surges and spikes that travel along utility' phone and network lines. A distinguishing feature of the Back-UPS RS is automatic voltage regulation (AVR). AVR instantly adjusts both low and high voltages to safe levels' so you can work indefinitely during brownouts and overvoltage situations' saving the battery for power outages when you need it most. Award-winning shutdown software automatically powers down your computer system in the event of an extended power outage.</p>"' " is 760.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_ApcUps.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productApcUps.Name)' true)' " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>This Wrinkle Free Pinpoint Long Sleeve Dress Shirt needs minimum ironing. It is a great product at a great value!</p>"' " is 141.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_arrow.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productArrow.Name)' true)' " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "Super Hybrid Engine offers a choice of performance and power consumption modes for easy adjustments according to various needs"' " is 148.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Much more compact than a standard-sized notebook and weighing just over 3 pounds' the Eee PC 1000HA is perfect for students toting to school or road warriors packing away to Wi-Fi hotspots. The Eee PC 1000HA also features a 160 GB hard disk drive (HDD)' 1 GB of RAM' 1.3-megapixel webcam integrated into the bezel above the LCD' 54g Wi-Fi networking (802.11b/g)' Secure Digital memory card slot' multiple USB ports' a VGA output for connecting to a monitor.</p><p>It comes preinstalled with the Microsoft Windows XP Home operating system' which offers more experienced users an enhanced and innovative experience that incorporates Windows Live features like Windows Live Messenger for instant messaging and Windows Live Mail for consolidated email accounts on your desktop. Complementing this is Microsoft Works' which equips the user with numerous office applications to work efficiently.</p><p>The new Eee PC 1000HA has a customized' cutting-edge Infusion casing technology in Fine Ebony. Inlaid within the chassis itself' the motifs are an integral part of the entire cover and will not fade with time. The Infusion surface also provides a new level of resilience' providing scratch resistance and a beautiful style while out and about.</p>"' " is 1267.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_asuspc1000.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productAsusPc1000.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Screensize").SpecificationAttributeOptions.Single (sao => sao.Name == "10.0''") " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "AMD") " is 171.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "1 GB") " is 170.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "160 GB") " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Much more compact than a standard-sized notebook and weighing just 2.5 pounds' the Eee PC 900HA is perfect for students toting to school or road warriors packing away to Wi-Fi hotspots. In addition to the 160 GB hard disk drive (HDD)' the Eee PC 900HA also features 1 GB of RAM' VGA-resolution webcam integrated into the bezel above the LCD' 54g Wi-Fi networking (802.11b/g)' multiple USB ports' SD memory card slot' a VGA output for connecting to a monitor' and up to 10 GB of online storage (complimentary for 18 months).</p><p>It comes preinstalled with the Microsoft Windows XP Home operating system' which offers more experienced users an enhanced and innovative experience that incorporates Windows Live features like Windows Live Messenger for instant messaging and Windows Live Mail for consolidated email accounts on your desktop. Complementing this is Microsoft Works' which equips the user with numerous office applications to work efficiently.</p>"' " is 983.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_asuspc900.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productAsusPc900.Name)' true)' " is 182.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "AMD") " is 171.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "1 GB") " is 170.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "160 GB") " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Take a winding cross-country trip and you'll discover barbecue shacks with offerings like tender-smoky Baltimore pit beef and saucy St. Louis pork steaks. To bring you the best of these hidden gems' along with all the classics' the editors of Cook's Country magazine scoured the country' then tested and perfected their favorites. HEre traditions large and small are brought into the backyard' from Hawaii's rotisserie favorite' the golden-hued Huli Huli Chicken' to fall-off-the-bone Chicago Barbecued Ribs. In Kansas City' they're all about the sauce' and for our saucy Kansas City Sticky Ribs' we found a surprise ingredient-root beer. We also tackle all the best sides. <br /><br />Not sure where or how to start? This cookbook kicks off with an easy-to-follow primer that will get newcomers all fired up. Whether you want to entertain a crowd or just want to learn to make perfect burgers' Best Grilling Recipes shows you the way.</p>"' " is 963.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_BestGrillingRecipes.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBestGrillingRecipes.Name)' true)' " is 202.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Bold black diamonds alternate with sparkling white diamonds along a crisp sterling silver heart to create a look that is simple and beautiful. This sleek and stunning 1/4 carat (ctw) diamond heart pendant which includes an 18 inch silver chain' and a free box of godiva chocolates makes the perfect Valentine's Day gift.</p>"' " is 348.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_DiamondHeart.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productDiamondHeart.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Keep yourself on track for your next meeting with turn-by-turn directions via the AT&amp;T Navigator service' which is powered by TeleNav and provides spoken or text-based turn-by-turn directions with automatic missed turn rerouting and a local business finder service in 20 countries. It also supports AT&amp;T mobile music services and access to thousands of video clips via Cellular Video. Other features include a 2-megapixel camera/camcorder' Bluetooth for handsfree communication' 1 GB of internal memory with MicroSD expansion (up to 32 GB)' multi-format audio/video playback' and up to 4.5 hours of talk time.</p><p>The Blackberry Bold also comes with free access to AT&amp;T Wi-Fi Hotspots' available at more than 17'000 locations nationwide including Starbucks. The best part is that you do'nt need to sign up for anything new to use this service--Wi-Fi access for is included in all Blackberry Personal and Enterprise Rate Plans. (You must subscribe to a Blackberry Data Rate Plan to access AT&amp;T Wi-Fi Hotspots.) Additionally' the Blackberry Bold is the first RIM device that supports AT&amp;T Cellular Video (CV).</p>"' " is 1157.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_BlackBerry.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBlackBerry.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Fight back against cluttered workspaces with the stylish Sony VAIO JS All-in-One desktop PC' featuring powerful computing resources and a stunning 20.1-inch widescreen display with stunning XBRITE-HiColor LCD technology. The silver Sony VAIO VGC-JS110J/S has a built-in microphone and MOTION EYE camera with face-tracking technology that allows for easy communication with friends and family. And it has a built-in DVD burner and Sony's Movie Store software so you can create a digital entertainment library for personal viewing at your convenience. Easy to setup and even easier to use' this JS-series All-in-One includes an elegantly designed keyboard and a USB mouse.</p>"' " is 698.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Desktops_1.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBuildComputer.Name)' true)' " is 187.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Desktops_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBuildComputer.Name)' true)' " is 187.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Desktops_3.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBuildComputer.Name)' true)' " is 187.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>For stunning photography with point and shoot ease' look no further than Canon&rsquo;s EOS Rebel XSi. The EOS Rebel XSi brings staggering technological innovation to the masses. It features Canon&rsquo;s EOS Integrated Cleaning System' Live View Function' a powerful DIGIC III Image Processor' plus a new 12.2-megapixel CMOS sensor and is available in a kit with the new EF-S 18-55mm f/3.5-5.6 IS lens with Optical Image Stabilizer. The EOS Rebel XSi&rsquo;s refined' ergonomic design includes a new 3.0-inch LCD monitor' compatibility with SD and SDHC memory cards and new accessories that enhance every aspect of the photographic experience.</p>"' " is 671.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_CanonCamera_1.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productCanonCamera.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_CanonCamera_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productCanonCamera.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_CanonCamera_black.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Canon Digital SLR Camera - Black")' true)' " is 203.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_CanonCamera_silver.jpeg")' "image/jpeg"' pictureService.GetPictureSeName ("Canon Digital SLR Camera - Silver")' true)' " is 205.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>From Canon's long history of optical excellence' advanced image processing' superb performance and technological innovation in photographic and broadcast television cameras comes the latest in high definition camcorders. <br /><br />Now' with the light' compact Canon VIXIA HF100' you can have stunning AVCHD (Advanced Video Codec High Definition) format recording with the ease and numerous benefits of Flash Memory. It's used in some of the world's most innovative electronic products such as laptop computers' MP3 players' PDAs and cell phones. <br /><br />Add to that the VIXIA HF100's Canon Exclusive features such as our own 3.3 Megapixel Full HD CMOS sensor and advanced DIGIC DV II Image Processor' SuperRange Optical Image Stabilization' Instant Auto Focus' our 2.7-inch Widescreen Multi-Angle Vivid LCD and the Genuine Canon 12x HD video zoom lens and you have a Flash Memory camcorder that's hard to beat.</p>"' " is 944.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_CanonCamcoder.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productCanonCamcoder.Name)' true)' " is 190.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Compaq Presario PCs give you solid performance' ease of use' and deliver just what you need so you can do more with less effort. Whether you are e-mailing family' balancing your online checkbook or creating school projects' the Presario is the right PC for you.</p>"' " is 289.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Compaq.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productCompaq.Name)' true)' " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Hardcover: 352 pages<br />Publisher: America's Test Kitchen (May 2009)<br />Language: English<br />ISBN-10: 1933615435<br />ISBN-13: 978-1933615431</p>"' " is 175.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_CookingForTwo.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productCookingForTwo.Name)' true)' " is 190.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Corel Paint Shop Pro Photo X2 is the ideal choice for any aspiring photographer's digital darkroom. Fix brightness' color' and photo flaws in a few clicks; use precision editing tools to create the picture you want; give photos a unique' exciting look using hundreds of special effects' and much more! Plus' the NEW one-of-a-kind Express Lab helps you quickly view and fix dozens of photos in the time it used to take to edit a few. Paint Shop Pro Photo X2 even includes a built-in Learning Center to help you get started' it's the easiest way to get professional-looking photos - fast!</p>"' " is 614.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Corel.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productCorel.Name)' true)' " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Comfort comes in all shapes and forms' yet this tee out does it all. Rising above the rest' our classic cotton crew provides the simple practicality you need to make it through the day. Tag-free' relaxed fit wears well under dress shirts or stands alone in laid-back style. Reinforced collar and lightweight feel give way to long-lasting shape and breathability. One less thing to worry about' rely on this tee to provide comfort and ease with every wear.</p>"' " is 483.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_CustomTShirt.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productCustomTShirt.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Perfect for both a professional look as well as perhaps something more sensual' these 10 karat white gold huggie earrings boast 86 sparkling round diamonds set in a pave arrangement that total 1/2 carat (ctw).</p>"' " is 237.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_DiamondEarrings.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productDiamondEarrings.Name)' true)' " is 194.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Jazz up any outfit with this classic diamond tennis bracelet. This piece has one full carat of diamonds uniquely set in brilliant 10 karat white gold.</p>"' " is 178.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_DiamondBracelet_1.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productDiamondBracelet.Name)' true)' " is 196.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_DiamondBracelet_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productDiamondBracelet.Name)' true)' " is 196.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Trying to get big chocolate flavor into a crisp holiday cookie is no easy feat. Any decent baker can get a soft' chewy cookie to scream &ldquo;chocolate'&rdquo; but a dough that can withstand a rolling pin and cookie cutters simply can&rsquo;t be too soft. Most chocolate butter cookies skimp on the gooey chocolate and their chocolate flavor is quite modest.</p>"' " is 387.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_EatingWell.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productEatingWell.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "This sleek shoe has all you need--from the padded tongue and collar and internal EVA midsole' to the STI Level 2 cushioning for impact absorption and stability."' " is 182.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Established in 1986' etnies is the first skateboarder-owned and skateboarder-operated global action sports footwear and apparel company. etnies not only pushed the envelope by creating the first pro model skate shoe' but it pioneered technological advances and changed the face of skateboard footwear forever. Today' etnies' vision is to remain the leading action sports company committed to creating functional products that provide the most style' comfort' durability and protection possible. etnies stays true to its roots by sponsoring a world-class team of skateboarding' surfing' snowboarding' moto-x' and BMX athletes and continues its dedication by giving back to each of these communities.</p>"' " is 726.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Etnies.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productEtnies.Name)' true)' " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>This fine leather handbag will quickly become your favorite bag. It has a zipper organizer on the front that includes a notepad pocket' pen holder' credit card slots and zipper pocket divider. On top of this is a zipper pocket and another flap closure pocket. The main compartment is fully lined and includes a side zipper pocket. On the back is another zipper pocket. And don't forget the convenient built in cell phone holder on the side! The long strap is fully adjustable so you can wear it crossbody or over the shoulder. This is a very well-made' quality leather bag that is not too big' but not too small.</p>"' " is 640.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_LeatherHandbag_1.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productLeatherHandbag.Name)' true)' " is 194.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_LeatherHandbag_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productLeatherHandbag.Name)' true)' " is 194.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Redesigned with a next-generation' touch-enabled 22-inch high-definition LCD screen' the HP TouchSmart IQ506 all-in-one desktop PC is designed to fit wherever life happens: in the kitchen' family room' or living room. With one touch you can check the weather' download your e-mail' or watch your favorite TV show. It's also designed to maximize energy' with a power-saving Intel Core 2 Duo processor and advanced power management technology' as well as material efficiency--right down to the packaging. It has a sleek piano black design with elegant espresso side-panel highlights' and the HP Ambient Light lets you set a mood--or see your keyboard in the dark.</p>"' " is 689.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Hp506.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productHp506.Name)' true)' " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Optimize your mobility with a BrightView 14.1-inch display that has the same viewable area as a 15.4-inch screen--in a notebook that weighs a pound less. Encouraging more direct interaction' the backlit media control panel responds to the touch or sweep of a finger. Control settings for audio and video playback from up to 10 feet away with the included HP remote' then store it conveniently in the PC card slot. Enjoy movies or music in seconds with the external DVD or music buttons to launch HP QuickPlay (which bypasses the boot process).</p><p>It's powered by the 1.83 GHz Intel Core 2 Duo T5550 processor' which provides an optimized' multithreaded architecture for improved gaming and multitasking performance' as well as excellent battery management. It also includes Intel's 4965 AGN wireless LAN' which will connect to draft 802.11n routers and offers compatibility with 802.11a/b/g networks as well. It also features a 250 GB hard drive' 3 GB of installed RAM (4 GB maximum)' LighScribe dual-layer DVD&plusmn;R burner' HDMI port for connecting to an HDTV' and Nvidia GeForce Go 8400M GS video/graphics card with up to 1407 MB of total allocated video memory (128 MB dedicated). It also includes an integrated Webcam in the LCD's bezel and an omnidirectional microphone for easy video chats.</p>"' " is 1330.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_HpPavilion1.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productHpPavilion1.Name)' true)' " is 186.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Screensize").SpecificationAttributeOptions.Single (sao => sao.Name == "14.1''") " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "Intel") " is 173.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "3 GB") " is 170.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "250 GB") " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "Top-of-the-line multimedia desktop featuring 2.4 GHz Intel Core 2 Quad Processor Q6600 with four lightning fast execution cores"' " is 149.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>The updated chassis with sleek piano black paneling and components is far from the most significant improvements in the multimedia powerhouse HP Pavilion Elite m9150f desktop PC. It's powered by Intel's newest processor--the 2.4 GHz Intel Core 2 Quad Q6600--which delivers four complete execution cores within a single processor for unprecedented performance and responsiveness in multi-threaded and multi-tasking business/home environments. You can also go wireless and clutter-free with wireless keyboard' mouse' and remote control' and it includes the next step in Wi-Fi networking with a 54g wireless LAN (802.11b/g).</p>"' " is 649.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_HpPavilion2_1.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productHpPavilion2.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_HpPavilion2_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productHpPavilion2.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "Streamlined multimedia laptop with 16-inch screen for basic computing' entertainment and online communication"' " is 131.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Chat face to face' or take pictures and video clips with the webcam and integrated digital microphone. Play games and enhance multimedia with the Intel GMA 4500M with up to 1309 MB of total available graphics memory. And enjoy movies or music in seconds with the external DVD or music buttons to launch HP QuickPlay (which bypasses the boot process).  It offers dual-core productivity from its 2.0 GHz Intel Pentium T4200 processor for excellent multitasking. Other features include a 320 GB hard drive' 3 GB of installed RAM (4 GB maximum capacity)' dual-layer DVD&plusmn;RW drive (which also burns CDs)' quad-mode Wi-Fi (802.11a/b/g/n)' 5-in-1 memory card reader' and pre-installed Windows Vista Home Premium (SP1).</p>"' " is 745.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_HpPavilion3.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productHpPavilion3.Name)' true)' " is 186.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Screensize").SpecificationAttributeOptions.Single (sao => sao.Name == "16.0''") " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "Intel") " is 173.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "3 GB") " is 170.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "320 GB") " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Wear some adventure with the same hat Indiana Jones&reg; wears in his movies. Easy to shape to fit your personal style. Wool. Import. Please Note - Due to new UPS shipping rules and the size of the box' if you choose to expedite your hat order (UPS 3-day' 2-day or Overnight)' an additional non-refundable $20 shipping charge per hat will be added at the time your order is processed.</p>"' " is 412.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_hat.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productHat.Name)' true)' " is 170.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>The Kensington 33117 Travel Plug Adapter is a pocket-sized power adapter for go-anywhere convenience. This all-in-one unit provides plug adapters for use in more than 150 countries' so you never need to be at a loss for power again. The Kensington 33117 is easy to use' with slide-out power plugs that ensure you won't lose any vital pieces' in a compact' self-contained unit that eliminates any hassles. This all-in-one plug adapts power outlets for laptops' chargers' and similar devices' and features a safety release button and built-in fuse to ensure safe operation. The Kensington 33117 does not reduce or convert electrical voltage' is suitable for most consumer electronics ranging from 110-volts to Mac 275-watts' to 220-volts to Mac 550-watts. Backed by Kensington's one-year warranty' this unit weighs 0.5' and measures 1.875 x 2 x 2.25 inches (WxDxH). Please note that this adapter is not designed for use with high-watt devices such as hairdryers and irons' so users should check electronic device specifications before using.</p>"' " is 1067.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Kensington.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productKensington.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_LeviJeans_1.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productLeviJeans.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_LeviJeans_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productLeviJeans.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Major League Baseball 2K9 captures the essence of baseball down to some of the most minute' player- specific details including batting stances' pitching windups and signature swings. 2K Sports has gone above and beyond the call of duty to deliver this in true major league fashion. Additionally' gameplay enhancements in pitching' batting' fielding and base running promise this year's installment to be user-friendly and enjoyable for rookies or veterans. New commentary and presentation provide the icing to this ultimate baseball experience. If you really want to Play Ball this is the game for you.</p>"' " is 630.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Baseball.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBaseball.Name)' true)' " is 180.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "One of the great pioneers in military simulations returns to gaming as the Medal of Honor series depicts modern warfare for the first time' with a harrowing tour of duty in current day Afghanistan."' " is 219.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "You'll take control of both ordinary U.S. Army Rangers and Tier 1 Elite Ops Special Forces as you fight enemy insurgents in the most dangerous theatre of war of the modern age. The intense first person combat has been created with input from U.S. military consultants and based on real-life descriptions from veteran soldiers. This allows you to use genuine military tactics and advanced technology including combat drones and targeted air strikes."' " is 469.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_MedalOfHonor.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productMedalOfHonor.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Enjoy wireless freedom with the Microsoft&reg; Bluetooth&reg; Notebook Mouse 5000 &mdash; no transceiver to connect or lose! Keep USB ports free for other devices. And' take it with you in a convenient carrying case (included)</p>"' " is 254.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Mouse.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productMouse.Name)' true)' " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>NIKE Golf Casual Belt is a great look for in the clubhouse after a round of golf. The belt strap is made of full grain oil tanned leather. The buckle is made of antique brushed metal with an embossed Swoosh design on it. This belt features an English beveled edge with rivets on the tab and tip of the 38mm wide strap. Size: 32; Color: Black.</p>"' " is 370.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_GolfBelt.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productGolfBelt.Name)' true)' " is 180.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Unlike previous 3D images that required complex' professional equipment to create' now you can shoot your own. Simply attach the 3D Conversion Lens to the SDT750 for quick and easy 3D shooting. And because the SDT750 features the Advanced 3MOS System' which has gained worldwide popularity' colors are vivid and 3D images are extremely realistic. Let the SDT750 save precious moments for you in true-to-life images.</p>"' " is 443.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_productPanasonic.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productPanasonic.Name)' true)' " is 189.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Since 1937' Ray-Ban can genuinely claim the title as the world's leading sunglasses and optical eyewear brand. Combining the best of fashion and sports performance' the Ray-Ban line of Sunglasses delivers a truly classic style that will have you looking great today and for years to come.</p>"' " is 316.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Sunglasses.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productSunglasses.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Ideal for on-site field services' the ruggedized Samsung Rugby for AT&amp;T can take just about anything you can throw at it. This highly durable handset is certified to Military Standard MIL-STD 810F standards that's perfect for users like construction foremen and landscape designers. In addition to access to AT&amp;T Navigation turn-by-turn direction service' the Rugby also features compatibility with Push to Talk communication' Enterprise Paging' and AT&amp;T's breakthrough Video Share calling services. This quad-band GSM phone runs on AT&amp;T's dual-band 3G (HSDPA/UMTS) network' for fast downloads and seamless video calls. It also offers a 1.3-megapixel camera' microSD memory expansion to 8 GB' Bluetooth for handsfree communication and stereo music streaming' access to personal email and instant messaging' and up to 5 hours of talk time.</p>"' " is 882.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_SamsungPhone_1.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productSamsungPhone.Name)' true)' " is 190.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_SamsungPhone_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productSamsungPhone.Name)' true)' " is 190.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>You&rsquo;ll never miss a moment because of switching tapes or discs with the DCR-SR85. Its built-in 60GB hard disk drive offers plenty of storage as you zero in on your subjects with the professional-quality Carl Zeiss Vario-Tessar lens and a powerful 25x optical/2000x digital zoom. Compose shots using the 2.7-inch wide (16:9) touch-panel LCD display' and maintain total control and clarity with the Super SteadyShot image stabilization system. Hybrid recording technology even gives you the choice to record video to either the internal hard disk drive or removable Memory Stick Pro Duo media.</p>"' " is 625.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_SonyCamcoder.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productSonyCamcoder.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "What's the Best Way to Make Lasagna With Rich' Meaty Flavor' Chunks of Tomato' and Gooey Cheese' Without Ever Turning on the Oven or Boiling a Pot of (Hardcover)"' " is 183.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>In this latest addition of the Best Recipe Classic series' <em>Cooks Illustrated</em> editor Christopher Kimball and his team of kitchen scientists celebrate the untold versatility of that ordinary workhorse' the 12-inch skillet. An indispensable tool for eggs' pan-seared meats and saut&eacute;ed vegetables' the skillet can also be used for stovetop-to-oven dishes such as All-American Mini Meatloaves; layered dishes such as tamale pie and Tuscan bean casserole; and even desserts such as hot fudge pudding cake. In the trademark style of other America's Test Kitchen publications' the cookbook contains plenty of variations on basic themes (you can make chicken and rice with peas and scallions' broccoli and cheddar' or coconut milk and pistachios); ingredient and equipment roundups; and helpful illustrations for preparing mango and stringing snowpeas. Yet the true strength of the series lies in the sheer thoughtfulness and detail of the recipes. Whether or not you properly appreciate your skillet' this book will at least teach you to wield it gracefully. <i>(Mar.)</i>   <br />Copyright &copy; Reed Business Information' a division of Reed Elsevier Inc. All rights reserved.</p>"' " is 1214.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_BestSkilletRecipes.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBestSkilletRecipes.Name)' true)' " is 200.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		ShortDescription = "Stylish' highly versatile laptop with 15.4-inch LCD' webcam integrated into bezel' and high-gloss finish"' " is 126.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>It's powered by the 2.0 GHz Intel Core 2 Duo T6400 processor' which boosts speed' reduces power requirements' and saves on battery life. It also offers a fast 800 MHz front-side bus speed and 2 MB L2 cache. It also includes Intel's 5100AGN wireless LAN' which will connect to draft 802.11n routers and offers compatibility with 802.11a/b/g networks as well. Other features include an enormous 250 GB hard drive'&nbsp;1 GB of installed RAM (max capacity)' dual-layer DVD&plusmn;RW burner (with Labelflash disc printing)' ExpressCard 54/34 slot' a combo USB/eSATA port' SPDIF digital audio output for surround sound' and a 5-in-1 memory card adapter.</p><p>This PC comes preinstalled with the 64-bit version of Microsoft Windows Vista Home Premium (SP1)' which includes all of the Windows Media Center capabilities for turning your PC into an all-in-one home entertainment center. In addition to easily playing your DVD movies and managing your digital audio library' you'll be able to record and watch your favorite TV shows (even HDTV). Vista also integrates new search tools throughout the operating system' includes new parental control features' and offers new tools that can warn you of impending hardware failures</p>"' " is 1246.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Notebooks.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productSatellite.Name)' true)' " is 182.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Screensize").SpecificationAttributeOptions.Single (sao => sao.Name == "15.4''") " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "Intel") " is 173.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "1 GB") " is 170.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "250 GB") " is 174.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_DenimShort.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productDenimShort.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Dazzle her with this gleaming 14 karat white gold vintage proposal. A ravishing collection of 11 decadent diamonds come together to invigorate a superbly ornate gold shank. Total diamond weight on this antique style engagement ring equals 1 1/4 carat (ctw). Item includes diamond certificate.</p>"' " is 320.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_EngagementRing_1.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productEngagementRing.Name)' true)' " is 194.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_EngagementRing_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productEngagementRing.Name)' true)' " is 194.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Fans of World of Warcraft' prepare for Blizzard Entertainment's next installment -- World of Warcraft: Wrath of King Lich. In this latest expansion' something is afoot in the cold' harsh northlands. The Lich King Arthas has set in motion events that could lead to the extinction of all life on Azeroth. The necromantic power of the plague and legions of undead armies threaten to sweep across the land. Only the mightiest heroes can oppose the Lich King and end his reign of terror.</p><p>This expansion adds a host of content to the already massive existing game world. Players will achieve soaring levels of power' explore Northrend (the vast icy continent of the Lich King)' and battle high-level heroes to determine the ultimate fate of Azeroth. As you face the dangers of the frigid' harsh north' prepare to master the dark necromantic powers of the Death Night -- World of Warcraft's first Hero class. No longer servants of the Lich King' the Death Knights begin their new calling as experienced' formidable adversaries. Each is heavily armed' armored' and in possession of a deadly arsenal of forbidden magic.</p><p>If you have a World of Warcraft account with a character of at least level 55' you will be able to create a new level-55 Death Knight of any race (if on a PvP realm' the Death Knight must be the same faction as your existing character). And upon entering the new world' your Death Knight will begin to quest to level 80' gaining potent new abilities and talents along the way. This expansion allows for only one Death Knight per realm' per account.</p>"' " is 1599.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_wow.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productWoW.Name)' true)' " is 170.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Worldwide Soccer Manager 2009 from Sega for the PC or Mac is an in-depth soccer management game. At the helm' you'll enter the new season with a wide array of all-new features. The most impressive update is the first-time-ever' real-time 3D match engine with motion captured animations. With over 5'000 playable teams and every management decision in the palm of your hand' you'll love watching your matches and decisions unfold from multiple camera angles as you compete in leagues around the world and major international tournaments.</p><p>Watch your match in real-time' or use the Match Time Bar to fast-forward through sluggish minutes or rewind key moments in the game. With this customization at your fingertips you can also choose the information you'd like to see during the match' such as latest scores or player performance stats for the match.</p>"' " is 883.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Soccer.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productSoccer.Name)' true)' " is 176.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Original Release Date: October 28' 2008</p><p>Release Date: October 28' 2008</p><p>Label: Streamline/Interscoope/KonLive/Cherrytree</p><p>Copyright: (C) 2008 Interscope Records</p>"' " is 204.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_PokerFace.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productPokerFace.Name)' true)' " is 182.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p>Original Release Date: November 18' 2008</p><p>Label: Music World Music/Columbia</p><p>Copyright: (P) 2008 SONY BMG MUSIC ENTERTAINMENT</p><p>Song Length: 3:13 minutes</p>"' " is 195.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_SingleLadies.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productSingleLadies.Name)' true)' " is 188.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		FullDescription = "<p># Original Release Date: November 2' 1999<br /># Label: Epic<br /># Copyright: 1999 Sony Music Entertainment Inc. (c) 1999 Sony Music Entertainment Inc.</p>"' " is 180.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "		Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_BattleOfLA.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBattleOfLa.Name)' true)' " is 184.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The length of the statement  "			ReviewText = string.Format ("This sample review is for the {0}. I've been waiting for this product to be available. It is priced just right."' product.Name)' " is 157.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallBlogPosts,The length of the statement  "			Body = "<p>Online discount coupons enable access to great offers from some of the world&rsquo;s best sites for Internet shopping. The online coupons are designed to allow compulsive online shoppers to access massive discounts on a variety of products. The regular shopper accesses the coupons in bulk and avails of great festive offers and freebies thrown in from time to time.  The coupon code option is most commonly used when using a shopping cart. The coupon code is entered on the order page just before checking out. Every online shopping resource has a discount coupon submission option to confirm the coupon code. The dedicated web sites allow the shopper to check whether or not a discount is still applicable. If it is' the sites also enable the shopper to calculate the total cost after deducting the coupon amount like in the case of grocery coupons.  Online discount coupons are very convenient to use. They offer great deals and professionally negotiated rates if bought from special online coupon outlets. With a little research and at times' insider knowledge the online discount coupons are a real steal. They are designed to promote products by offering &lsquo;real value for money&rsquo; packages. The coupons are legitimate and help with budgeting' in the case of a compulsive shopper. They are available for special trade show promotions' nightlife' sporting events and dinner shows and just about anything that could be associated with the promotion of a product. The coupons enable the online shopper to optimize net access more effectively. Getting a &lsquo;big deal&rsquo; is not more utopian amidst rising prices. The online coupons offer internet access to the best and cheapest products displayed online. Big discounts are only a code away! By Gaynor Borade (buzzle.com)</p>"' " is 1804.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallBlogPosts,The length of the statement  "			Body = "<p>Managing online business requires different skills and abilities than managing a business in the &lsquo;real world.&rsquo; Customers can easily detect the size and determine the prestige of a business when they have the ability to walk in and take a look around. Not only do &lsquo;real-world&rsquo; furnishings and location tell the customer what level of professionalism to expect' but &quot;real world&quot; personal encounters allow first impressions to be determined by how the business approaches its customer service. When a customer walks into a retail business just about anywhere in the world' that customer expects prompt and personal service' especially with regards to questions that they may have about products they wish to purchase.<br /><br />Customer service or the client service is the service provided to the customer for his satisfaction during and after the purchase. It is necessary to every business organization to understand the customer needs for value added service. So customer data collection is essential. For this' a good customer service is important. The easiest way to lose a client is because of the poor customer service. The importance of customer service changes by product' industry and customer. Client service is an important part of every business organization. Each organization is different in its attitude towards customer service. Customer service requires a superior quality service through a careful design and execution of a series of activities which include people' technology and processes. Good customer service starts with the design and communication between the company and the staff.<br /><br />In some ways' the lack of a physical business location allows the online business some leeway that their &lsquo;real world&rsquo; counterparts do not enjoy. Location is not important' furnishings are not an issue' and most of the visual first impression is made through the professional design of the business website.<br /><br />However' one thing still remains true. Customers will make their first impressions on the customer service they encounter. Unfortunately' in online business there is no opportunity for front- line staff to make a good impression. Every interaction the customer has with the website will be their primary means of making their first impression towards the business and its client service. Good customer service in any online business is a direct result of good website design and planning.</p><p>By Jayashree Pakhare (buzzle.com)</p>"' " is 2529.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallNews,The length of the statement  "			Short = "nopCommerce includes everything you need to begin your e-commerce online store. We have thought of everything and it's all included!<br /><br />nopCommerce is a fully customizable shopping cart. It's stable and highly usable. From downloads to documentation' www.nopCommerce.com offers a comprehensive base of information' resources' and support to the nopCommerce community."' " is 386.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallNews,The length of the statement  "			Full = "<p>nopCommerce includes everything you need to begin your e-commerce online store. We have thought of everything and it's all included!</p><p>For full feature list go to <a href=\"http://www.nopCommerce.com\">nopCommerce.com</a></p><p>Providing outstanding custom search engine optimization' web development services and e-commerce development solutions to our clients at a fair price in a professional manner.</p>"' " is 424.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallNews,The length of the statement  "			Short = "The new nopCommerce store is open now! We are very excited to offer our new range of products. We will be constantly adding to our range so please register on our site' this will enable you to keep up to date with any new products."' " is 242.
Long Statement,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallNews,The length of the statement  "			Full = "<p>Our online store is officially up and running. Stock up for the holiday season! We have a great selection of items. We will be constantly adding to our range so please register on our site' this will enable you to keep up to date with any new products.</p><p>All shipping is worldwide and will leave the same day an order is placed! Happy Shopping and spread the word!!</p>"' " is 386.
Long Statement,Nop.Services.Messages,NewsLetterSubscriptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\NewsLetterSubscriptionService.cs,UpdateNewsLetterSubscription,The length of the statement  "	if ((originalSubscription.Active == false && newsLetterSubscription.Active) || (newsLetterSubscription.Active && (originalSubscription.Email != newsLetterSubscription.Email))) { " is 177.
Long Statement,Nop.Services.Messages,NewsLetterSubscriptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\NewsLetterSubscriptionService.cs,UpdateNewsLetterSubscription,The length of the statement  "	if ((originalSubscription.Active && newsLetterSubscription.Active) && (originalSubscription.Email != newsLetterSubscription.Email)) { " is 133.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "	sb.AppendLine (string.Format ("<th>{0}</th>"' _localizationService.GetResource ("Messages.Order.Product(s).Name"' languageId))); " is 128.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "	sb.AppendLine (string.Format ("<th>{0}</th>"' _localizationService.GetResource ("Messages.Order.Product(s).Price"' languageId))); " is 129.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "	sb.AppendLine (string.Format ("<th>{0}</th>"' _localizationService.GetResource ("Messages.Order.Product(s).Quantity"' languageId))); " is 132.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "	sb.AppendLine (string.Format ("<th>{0}</th>"' _localizationService.GetResource ("Messages.Order.Product(s).Total"' languageId))); " is 129.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			string downloadUrl = string.Format ("{0}download/getdownload/{1}"' GetStoreUrl (order.StoreId)' orderItem.OrderItemGuid); " is 121.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			string downloadLink = string.Format ("<a class=\"link\" href=\"{0}\">{1}</a>"' downloadUrl' _localizationService.GetResource ("Messages.Order.Product(s).Download"' languageId)); " is 177.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "				sb.AppendLine (string.Format (_localizationService.GetResource ("Messages.Order.Product(s).SKU"' languageId)' HttpUtility.HtmlEncode (sku))); " is 141.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate); " is 123.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			unitPriceStr = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' true); " is 130.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate); " is 123.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			unitPriceStr = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' false); " is 131.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			priceStr = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' true); " is 122.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			priceStr = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' false); " is 123.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			sb.AppendLine ("<tr><td style=\"text-align:right;\" colspan=\"1\">&nbsp;</td><td colspan=\"3\" style=\"text-align:right\">"); " is 125.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate); " is 127.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			cusSubTotal = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' true); " is 133.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate); " is 143.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "				cusSubTotalDiscount = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' true); " is 150.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate); " is 127.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			cusSubTotal = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' false); " is 134.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate); " is 143.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "				cusSubTotalDiscount = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' false); " is 151.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate); " is 127.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			cusShipTotal = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' true); " is 142.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate); " is 153.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			cusPaymentMethodAdditionalFee = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' true); " is 185.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate); " is 127.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			cusShipTotal = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' false); " is 143.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate); " is 153.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			cusPaymentMethodAdditionalFee = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' language' false); " is 186.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "				string taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' language); " is 124.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			cusDiscount = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' language); " is 128.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "		cusTotal = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' language); " is 121.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "		sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' _localizationService.GetResource ("Messages.Order.SubTotal"' languageId)' cusSubTotal)); " is 382.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' _localizationService.GetResource ("Messages.Order.SubTotalDiscount"' languageId)' cusSubTotalDiscount)); " is 398.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' _localizationService.GetResource ("Messages.Order.Shipping"' languageId)' cusShipTotal)); " is 383.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			string paymentMethodFeeTitle = _localizationService.GetResource ("Messages.Order.PaymentMethodAdditionalFee"' languageId); " is 122.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' paymentMethodFeeTitle' cusPaymentMethodAdditionalFee)); " is 349.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' _localizationService.GetResource ("Messages.Order.Tax"' languageId)' cusTaxTotal)); " is 377.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "				string taxRate = String.Format (_localizationService.GetResource ("Messages.Order.TaxRateLine")' _priceFormatter.FormatTaxRate (item.Key)); " is 139.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "				sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' taxRate' taxValue)); " is 314.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' _localizationService.GetResource ("Messages.Order.TotalDiscount"' languageId)' cusDiscount)); " is 387.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			string giftCardText = String.Format (_localizationService.GetResource ("Messages.Order.GiftCardInfo"' languageId)' HttpUtility.HtmlEncode (gcuh.GiftCard.GiftCardCouponCode)); " is 174.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			string giftCardAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' language); " is 178.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' giftCardText' giftCardAmount)); " is 325.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			string rpTitle = string.Format (_localizationService.GetResource ("Messages.Order.RewardPoints"' languageId)' -order.RedeemedRewardPointsEntry.Points); " is 151.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' language); " is 200.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "			sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' rpTitle' rpAmount)); " is 314.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "		sb.AppendLine (string.Format ("<tr style=\"text-align:right;\"><td>&nbsp;</td><td colspan=\"2\" style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{1}</strong></td> <td style=\"background-color: {0};padding:0.6em 0.4 em;\"><strong>{2}</strong></td></tr>"' _templatesSettings.Color3' _localizationService.GetResource ("Messages.Order.OrderTotal"' languageId)' cusTotal)); " is 381.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "	sb.AppendLine (string.Format ("<th>{0}</th>"' _localizationService.GetResource ("Messages.Order.Product(s).Name"' languageId))); " is 128.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "	sb.AppendLine (string.Format ("<th>{0}</th>"' _localizationService.GetResource ("Messages.Order.Product(s).Quantity"' languageId))); " is 132.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,ProductListToHtmlTable,The length of the statement  "				sb.AppendLine (string.Format (_localizationService.GetResource ("Messages.Order.Product(s).SKU"' languageId)' HttpUtility.HtmlEncode (sku))); " is 141.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.CustomerFullName"' string.Format ("{0} {1}"' order.BillingAddress.FirstName' order.BillingAddress.LastName))); " is 140.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.BillingStateProvince"' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name) : "")); " is 167.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.BillingCountry"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name) : "")); " is 149.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.ShippingFirstName"' order.ShippingAddress != null ? order.ShippingAddress.FirstName : "")); " is 121.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.ShippingPhoneNumber"' order.ShippingAddress != null ? order.ShippingAddress.PhoneNumber : "")); " is 125.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.ShippingFaxNumber"' order.ShippingAddress != null ? order.ShippingAddress.FaxNumber : "")); " is 121.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.ShippingStateProvince"' order.ShippingAddress != null && order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name) : "")); " is 203.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.ShippingZipPostalCode"' order.ShippingAddress != null ? order.ShippingAddress.ZipPostalCode : "")); " is 129.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.ShippingCountry"' order.ShippingAddress != null && order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name) : "")); " is 185.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	var paymentMethodName = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' _workContext.WorkingLanguage.Id) : order.PaymentMethodSystemName; " is 175.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "		DateTime createdOn = _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' TimeZoneInfo.Utc' _dateTimeHelper.GetCustomerTimeZone (order.Customer)); " is 148.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddOrderTokens,The length of the statement  "	tokens.Add (new Token ("Order.OrderURLForCustomer"' string.Format ("{0}orderdetails/{1}"' GetStoreUrl (order.StoreId)' order.Id)' true)); " is 137.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddShipmentTokens,The length of the statement  "	tokens.Add (new Token ("Shipment.URLForCustomer"' string.Format ("{0}orderdetails/shipment/{1}"' GetStoreUrl (shipment.Order.StoreId)' shipment.Id)' true)); " is 156.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddReturnRequestTokens,The length of the statement  "	tokens.Add (new Token ("ReturnRequest.CustomerComment"' HtmlHelper.FormatText (returnRequest.CustomerComments' false' true' false' false' false' false)' true)); " is 160.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddReturnRequestTokens,The length of the statement  "	tokens.Add (new Token ("ReturnRequest.StaffNotes"' HtmlHelper.FormatText (returnRequest.StaffNotes' false' true' false' false' false' false)' true)); " is 149.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddReturnRequestTokens,The length of the statement  "	tokens.Add (new Token ("ReturnRequest.Status"' returnRequest.ReturnRequestStatus.GetLocalizedEnum (_localizationService' _workContext))); " is 137.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddGiftCardTokens,The length of the statement  "	var giftCardMesage = !String.IsNullOrWhiteSpace (giftCard.Message) ? HtmlHelper.FormatText (giftCard.Message' false' true' false' false' false' false) : ""; " is 156.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddCustomerTokens,The length of the statement  "	tokens.Add (new Token ("Customer.VatNumberStatus"' ((VatNumberStatus)customer.GetAttribute<int> (SystemCustomerAttributeNames.VatNumberStatusId)).ToString ())); " is 160.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddCustomerTokens,The length of the statement  "	//note: we do not use SEO friendly URLS because we can get errors caused by having .(dot) in the URL (from the email address) " is 125.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddCustomerTokens,The length of the statement  "	string passwordRecoveryUrl = string.Format ("{0}passwordrecovery/confirm?token={1}&email={2}"' GetStoreUrl ()' customer.GetAttribute<string> (SystemCustomerAttributeNames.PasswordRecoveryToken)' HttpUtility.UrlEncode (customer.Email)); " is 235.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddCustomerTokens,The length of the statement  "	string accountActivationUrl = string.Format ("{0}customer/activation?token={1}&email={2}"' GetStoreUrl ()' customer.GetAttribute<string> (SystemCustomerAttributeNames.AccountActivationToken)' HttpUtility.UrlEncode (customer.Email)); " is 232.
Long Statement,Nop.Services.Messages,MessageTokenProvider,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\MessageTokenProvider.cs,AddForumTopicTokens,The length of the statement  "		topicUrl = string.Format ("{0}boards/topic/{1}/{2}/page/{3}"' GetStoreUrl ()' forumTopic.Id' forumTopic.GetSeName ()' friendlyForumTopicPageIndex.Value); " is 153.
Long Statement,Nop.Services.Messages,QueuedEmailService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\QueuedEmailService.cs,SearchEmails,The length of the statement  "	query = loadNewest ? ((IOrderedQueryable<QueuedEmail>)query).ThenByDescending (qe => qe.CreatedOnUtc) : ((IOrderedQueryable<QueuedEmail>)query).ThenBy (qe => qe.CreatedOnUtc); " is 175.
Long Statement,Nop.Services.Messages,QueuedEmailService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\QueuedEmailService.cs,DeleteAllEmails,The length of the statement  "		//we cannot wait until EF team has it implemented - http://data.uservoice.com/forums/72025-entity-framework-feature-suggestions/suggestions/1015357-batch-cud-support " is 165.
Long Statement,Nop.Services.Messages,QueuedMessagesSendTask,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\QueuedMessagesSendTask.cs,Execute,The length of the statement  "			_emailSender.SendEmail (queuedEmail.EmailAccount' queuedEmail.Subject' queuedEmail.Body' queuedEmail.From' queuedEmail.FromName' queuedEmail.To' queuedEmail.ToName' queuedEmail.ReplyTo' queuedEmail.ReplyToName' bcc' cc' queuedEmail.AttachmentFilePath' queuedEmail.AttachmentFileName); " is 284.
Long Statement,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,SendOrderPlacedCustomerNotification,The length of the statement  "	return SendNotification (messageTemplate' emailAccount' languageId' tokens' toEmail' toName' attachmentFilePath' attachmentFileName); " is 133.
Long Statement,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,SendOrderCompletedCustomerNotification,The length of the statement  "	return SendNotification (messageTemplate' emailAccount' languageId' tokens' toEmail' toName' attachmentFilePath' attachmentFileName); " is 133.
Long Statement,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,SendReturnRequestStatusChangedCustomerNotification,The length of the statement  "	string toEmail = returnRequest.Customer.IsGuest () ? orderItem.Order.BillingAddress.Email : returnRequest.Customer.Email; " is 121.
Long Statement,Nop.Services.Messages,WorkflowMessageService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\WorkflowMessageService.cs,SendReturnRequestStatusChangedCustomerNotification,The length of the statement  "	var toName = returnRequest.Customer.IsGuest () ? orderItem.Order.BillingAddress.FirstName : returnRequest.Customer.GetFullName (); " is 130.
Long Statement,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,GetAllDiscounts,The length of the statement  "	//we do it because we know that this method is invoked several times per HTTP request with distinct "discountType" parameter " is 124.
Long Statement,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,GetAllDiscounts,The length of the statement  "			query = query.Where (d => (!d.StartDateUtc.HasValue || d.StartDateUtc <= nowUtc) && (!d.EndDateUtc.HasValue || d.EndDateUtc >= nowUtc)); " is 136.
Long Statement,Nop.Services.Discounts,DiscountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Discounts\DiscountService.cs,IsDiscountValid,The length of the statement  "		couponCodeToValidate = customer.GetAttribute<string> (SystemCustomerAttributeNames.DiscountCouponCode' _genericAttributeService); " is 129.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,WriteCategories,The length of the statement  "			xmlWriter.WriteElementString ("AllowCustomersToSelectPageSize"' null' category.AllowCustomersToSelectPageSize.ToString ()); " is 123.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportManufacturersToXml,The length of the statement  "		xmlWriter.WriteElementString ("AllowCustomersToSelectPageSize"' null' manufacturer.AllowCustomersToSelectPageSize.ToString ()); " is 127.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportManufacturersToXml,The length of the statement  "		var productManufacturers = _manufacturerService.GetProductManufacturersByManufacturerId (manufacturer.Id' 0' int.MaxValue' true); " is 129.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "		xmlWriter.WriteElementString ("AutomaticallyAddRequiredProducts"' null' product.AutomaticallyAddRequiredProducts.ToString ()); " is 126.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "		xmlWriter.WriteElementString ("AllowBackInStockSubscriptions"' null' product.AllowBackInStockSubscriptions.ToString ()); " is 120.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "		xmlWriter.WriteElementString ("AllowAddingOnlyExistingAttributeCombinations"' null' product.AllowAddingOnlyExistingAttributeCombinations.ToString ()); " is 150.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "		xmlWriter.WriteElementString ("PreOrderAvailabilityStartDateTimeUtc"' null' product.PreOrderAvailabilityStartDateTimeUtc.HasValue ? product.PreOrderAvailabilityStartDateTimeUtc.ToString () : ""); " is 195.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "		xmlWriter.WriteElementString ("SpecialPrice"' null' product.SpecialPrice.HasValue ? product.SpecialPrice.ToString () : ""); " is 123.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "		xmlWriter.WriteElementString ("SpecialPriceStartDateTimeUtc"' null' product.SpecialPriceStartDateTimeUtc.HasValue ? product.SpecialPriceStartDateTimeUtc.ToString () : ""); " is 171.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "		xmlWriter.WriteElementString ("SpecialPriceEndDateTimeUtc"' null' product.SpecialPriceEndDateTimeUtc.HasValue ? product.SpecialPriceEndDateTimeUtc.ToString () : ""); " is 165.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "			xmlWriter.WriteElementString ("CustomerRoleId"' null' tierPrice.CustomerRoleId.HasValue ? tierPrice.CustomerRoleId.ToString () : "0"); " is 134.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "			xmlWriter.WriteElementString ("AttributeControlTypeId"' null' productVariantAttribute.AttributeControlTypeId.ToString ()); " is 122.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "					xmlWriter.WriteElementString ("ValidationMinLength"' null' productVariantAttribute.ValidationMinLength.Value.ToString ()); " is 122.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "					xmlWriter.WriteElementString ("ValidationMaxLength"' null' productVariantAttribute.ValidationMaxLength.Value.ToString ()); " is 122.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "					xmlWriter.WriteElementString ("ValidationFileAllowedExtensions"' null' productVariantAttribute.ValidationFileAllowedExtensions); " is 128.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "					xmlWriter.WriteElementString ("ValidationFileMaximumSize"' null' productVariantAttribute.ValidationFileMaximumSize.Value.ToString ()); " is 134.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "				xmlWriter.WriteElementString ("AttributeValueTypeId"' null' productVariantAttributeValue.AttributeValueTypeId.ToString ()); " is 123.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "				xmlWriter.WriteElementString ("AssociatedProductId"' null' productVariantAttributeValue.AssociatedProductId.ToString ()); " is 121.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXml,The length of the statement  "			xmlWriter.WriteElementString ("SpecificationAttributeOptionId"' null' productSpecificationAttribute.SpecificationAttributeOptionId.ToString ()); " is 144.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXml,The length of the statement  "		xmlWriter.WriteElementString ("PaymentMethodAdditionalFeeInclTax"' null' order.PaymentMethodAdditionalFeeInclTax.ToString ()); " is 126.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXml,The length of the statement  "		xmlWriter.WriteElementString ("PaymentMethodAdditionalFeeExclTax"' null' order.PaymentMethodAdditionalFeeExclTax.ToString ()); " is 126.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXml,The length of the statement  "		xmlWriter.WriteElementString ("PaidDateUtc"' null' (order.PaidDateUtc == null) ? string.Empty : order.PaidDateUtc.Value.ToString ()); " is 133.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXml,The length of the statement  "		xmlWriter.WriteElementString ("ShippingRateComputationMethodSystemName"' null' order.ShippingRateComputationMethodSystemName); " is 126.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXml,The length of the statement  "				xmlWriter.WriteElementString ("TotalWeight"' null' shipment.TotalWeight.HasValue ? shipment.TotalWeight.Value.ToString () : ""); " is 128.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXml,The length of the statement  "				xmlWriter.WriteElementString ("ShippedDateUtc"' null' shipment.ShippedDateUtc.HasValue ? shipment.ShippedDateUtc.ToString () : ""); " is 131.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXml,The length of the statement  "				xmlWriter.WriteElementString ("DeliveryDateUtc"' null' shipment.DeliveryDateUtc.HasValue ? shipment.DeliveryDateUtc.Value.ToString () : ""); " is 140.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The length of the statement  "			worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.Country != null ? order.BillingAddress.Country.Name : ""; " is 145.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The length of the statement  "			worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.Name : ""; " is 157.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The length of the statement  "			worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.Country != null ? order.ShippingAddress.Country.Name : ""; " is 148.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The length of the statement  "			worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.Name : ""; " is 160.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("FirstName"' null' customer.GetAttribute<string> (SystemCustomerAttributeNames.FirstName)); " is 121.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("CountryId"' null' customer.GetAttribute<int> (SystemCustomerAttributeNames.CountryId).ToString ()); " is 130.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("StreetAddress"' null' customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress)); " is 129.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("StreetAddress2"' null' customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress2)); " is 131.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("ZipPostalCode"' null' customer.GetAttribute<string> (SystemCustomerAttributeNames.ZipPostalCode)); " is 129.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("CountryId"' null' customer.GetAttribute<int> (SystemCustomerAttributeNames.CountryId).ToString ()); " is 130.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("StateProvinceId"' null' customer.GetAttribute<int> (SystemCustomerAttributeNames.StateProvinceId).ToString ()); " is 142.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("VatNumber"' null' customer.GetAttribute<string> (SystemCustomerAttributeNames.VatNumber)); " is 121.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("VatNumberStatusId"' null' customer.GetAttribute<int> (SystemCustomerAttributeNames.VatNumberStatusId).ToString ()); " is 146.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("TimeZoneId"' null' customer.GetAttribute<string> (SystemCustomerAttributeNames.TimeZoneId)); " is 123.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "			xmlWriter.WriteElementString (string.Format ("Newsletter-in-store-{0}"' store.Id)' null' subscribedToNewsletters.ToString ()); " is 126.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("AvatarPictureId"' null' customer.GetAttribute<int> (SystemCustomerAttributeNames.AvatarPictureId).ToString ()); " is 142.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("ForumPostCount"' null' customer.GetAttribute<int> (SystemCustomerAttributeNames.ForumPostCount).ToString ()); " is 140.
Long Statement,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXml,The length of the statement  "		xmlWriter.WriteElementString ("Signature"' null' customer.GetAttribute<string> (SystemCustomerAttributeNames.Signature)); " is 121.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int parentGroupedProductId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "ParentGroupedProductId")].Value); " is 131.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool visibleIndividually = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "VisibleIndividually")].Value); " is 128.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string shortDescription = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "ShortDescription")].Value); " is 128.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string fullDescription = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "FullDescription")].Value); " is 126.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int productTemplateId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "ProductTemplateId")].Value); " is 121.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string metaKeywords = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "MetaKeywords")].Value); " is 120.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string metaDescription = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "MetaDescription")].Value); " is 126.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool allowCustomerReviews = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AllowCustomerReviews")].Value); " is 130.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string manufacturerPartNumber = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "ManufacturerPartNumber")].Value); " is 140.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool requireOtherProducts = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "RequireOtherProducts")].Value); " is 130.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string requiredProductIds = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "RequiredProductIds")].Value); " is 132.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool automaticallyAddRequiredProducts = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AutomaticallyAddRequiredProducts")].Value); " is 154.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool unlimitedDownloads = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "UnlimitedDownloads")].Value); " is 126.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int maxNumberOfDownloads = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "MaxNumberOfDownloads")].Value); " is 127.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int downloadActivationTypeId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "DownloadActivationTypeId")].Value); " is 135.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool hasSampleDownload = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "HasSampleDownload")].Value); " is 124.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool hasUserAgreement = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "HasUserAgreement")].Value); " is 122.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string userAgreementText = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "UserAgreementText")].Value); " is 130.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int recurringCycleLength = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "RecurringCycleLength")].Value); " is 127.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int recurringCyclePeriodId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "RecurringCyclePeriodId")].Value); " is 131.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int recurringTotalCycles = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "RecurringTotalCycles")].Value); " is 127.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			decimal additionalShippingCharge = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "AdditionalShippingCharge")].Value); " is 141.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int manageInventoryMethodId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "ManageInventoryMethodId")].Value); " is 133.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool displayStockAvailability = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "DisplayStockAvailability")].Value); " is 138.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool displayStockQuantity = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "DisplayStockQuantity")].Value); " is 130.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int lowStockActivityId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "LowStockActivityId")].Value); " is 123.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int notifyAdminForQuantityBelow = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "NotifyAdminForQuantityBelow")].Value); " is 141.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool allowBackInStockSubscriptions = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AllowBackInStockSubscriptions")].Value); " is 148.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int orderMinimumQuantity = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "OrderMinimumQuantity")].Value); " is 127.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			int orderMaximumQuantity = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "OrderMaximumQuantity")].Value); " is 127.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string allowedQuantities = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "AllowedQuantities")].Value); " is 130.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool allowAddingOnlyExistingAttributeCombinations = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AllowAddingOnlyExistingAttributeCombinations")].Value); " is 178.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool disableBuyButton = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "DisableBuyButton")].Value); " is 122.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool disableWishlistButton = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "DisableWishlistButton")].Value); " is 132.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool availableForPreOrder = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AvailableForPreOrder")].Value); " is 130.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			var preOrderAvailabilityStartDateTimeUtcExcel = worksheet.Cells [iRow' GetColumnIndex (properties' "PreOrderAvailabilityStartDateTimeUtc")].Value; " is 146.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "				preOrderAvailabilityStartDateTimeUtc = DateTime.FromOADate (Convert.ToDouble (preOrderAvailabilityStartDateTimeUtcExcel)); " is 122.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			var specialPriceStartDateTimeUtcExcel = worksheet.Cells [iRow' GetColumnIndex (properties' "SpecialPriceStartDateTimeUtc")].Value; " is 130.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			var specialPriceEndDateTimeUtcExcel = worksheet.Cells [iRow' GetColumnIndex (properties' "SpecialPriceEndDateTimeUtc")].Value; " is 126.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			bool customerEntersPrice = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "CustomerEntersPrice")].Value); " is 128.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			decimal minimumCustomerEnteredPrice = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "MinimumCustomerEnteredPrice")].Value); " is 147.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			decimal maximumCustomerEnteredPrice = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "MaximumCustomerEnteredPrice")].Value); " is 147.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			DateTime createdOnUtc = DateTime.FromOADate (Convert.ToDouble (worksheet.Cells [iRow' GetColumnIndex (properties' "CreatedOnUtc")].Value)); " is 139.
Long Statement,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The length of the statement  "			string manufacturerIds = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "ManufacturerIds")].Value); " is 126.
Long Statement,Nop.Services.Authentication,FormsAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\FormsAuthenticationService.cs,SignIn,The length of the statement  "	var ticket = new FormsAuthenticationTicket (1/*version*/' _customerSettings.UsernamesEnabled ? customer.Username : customer.Email' now' now.Add (_expirationTimeSpan)' createPersistentCookie' _customerSettings.UsernamesEnabled ? customer.Username : customer.Email' FormsAuthentication.FormsCookiePath); " is 301.
Long Statement,Nop.Services.Authentication,FormsAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\FormsAuthenticationService.cs,GetAuthenticatedCustomer,The length of the statement  "	if (_httpContext == null || _httpContext.Request == null || !_httpContext.Request.IsAuthenticated || !(_httpContext.User.Identity is FormsIdentity)) { " is 150.
Long Statement,Nop.Services.Authentication,FormsAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\FormsAuthenticationService.cs,GetAuthenticatedCustomerFromTicket,The length of the statement  "	var customer = _customerSettings.UsernamesEnabled ? _customerService.GetCustomerByUsername (usernameOrEmail) : _customerService.GetCustomerByEmail (usernameOrEmail); " is 165.
Long Statement,Nop.Services.Localization,LocalizedEntityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizedEntityService.cs,GetLocalizedValue,The length of the statement  "			where lp.LanguageId == languageId && lp.EntityId == entityId && lp.LocaleKeyGroup == localeKeyGroup && lp.LocaleKey == localeKey " is 128.
Long Statement,Nop.Services.Localization,LocalizedEntityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizedEntityService.cs,GetLocalizedValue,The length of the statement  "			where lp.LanguageId == languageId && lp.EntityId == entityId && lp.LocaleKeyGroup == localeKeyGroup && lp.LocaleKey == localeKey " is 128.
Long Statement,Nop.Services.Localization,LocalizedEntityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizedEntityService.cs,SaveLocalizedValue,The length of the statement  "	var prop = props.FirstOrDefault (lp => lp.LanguageId == languageId && lp.LocaleKey.Equals (localeKey' StringComparison.InvariantCultureIgnoreCase)); " is 148.
Long Statement,Nop.Services.Localization,LocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationService.cs,ImportResourcesFromXml,The length of the statement  "		_dbContext.ExecuteSqlCommand ("EXEC [LanguagePackImport] @LanguageId' @XmlPackage"' false' 600' pLanguageId' pXmlPackage); " is 122.
Long Statement,Nop.Services.Localization,LocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationService.cs,ImportResourcesFromXml,The length of the statement  "			var resource = language.LocaleStringResources.FirstOrDefault (x => x.ResourceName.Equals (name' StringComparison.InvariantCultureIgnoreCase)); " is 142.
Long Statement,Nop.Services.Orders,CheckoutAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeFormatter.cs,FormatAttributes,The length of the statement  "					caAttribute = string.Format ("{0}: {1}"' attributeName' HtmlHelper.FormatText (valueStr' false' true' false' false' false' false)); " is 131.
Long Statement,Nop.Services.Orders,CheckoutAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeFormatter.cs,FormatAttributes,The length of the statement  "							var downloadLink = string.Format ("{0}download/getfileupload/?downloadId={1}"' _webHelper.GetStoreLocation (false)' download.DownloadGuid); " is 139.
Long Statement,Nop.Services.Orders,CheckoutAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeFormatter.cs,FormatAttributes,The length of the statement  "						caAttribute = string.Format ("{0}: {1}"' ca.GetLocalized (a => a.Name' _workContext.WorkingLanguage.Id)' caValue.GetLocalized (a => a.Name' _workContext.WorkingLanguage.Id)); " is 174.
Long Statement,Nop.Services.Orders,CheckoutAttributeFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeFormatter.cs,FormatAttributes,The length of the statement  "							decimal priceAdjustment = _currencyService.ConvertFromPrimaryStoreCurrency (priceAdjustmentBase' _workContext.WorkingCurrency); " is 127.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,GetOrderAverageReportLine,The length of the statement  "		query = query.Where (o => o.BillingAddress != null && !String.IsNullOrEmpty (o.BillingAddress.Email) && o.BillingAddress.Email.Contains (billingEmail)); " is 152.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,BestSellersReport,The length of the statement  "	//join pm in _productManufacturerRepository.Table on p.Id equals pm.ProductId into p_pm from pm in p_pm.DefaultIfEmpty() " is 120.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,BestSellersReport,The length of the statement  "	where (storeId == 0 || storeId == o.StoreId) && (!createdFromUtc.HasValue || createdFromUtc.Value <= o.CreatedOnUtc) && (!createdToUtc.HasValue || createdToUtc.Value >= o.CreatedOnUtc) && (!orderStatusId.HasValue || orderStatusId == o.OrderStatusId) && (!paymentStatusId.HasValue || paymentStatusId == o.PaymentStatusId) && (!shippingStatusId.HasValue || shippingStatusId == o.ShippingStatusId) && (!o.Deleted) && (!p.Deleted) && (vendorId == 0 || p.VendorId == vendorId) && //(categoryId == 0 || pc.CategoryId == categoryId) && " is 528.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,BestSellersReport,The length of the statement  "	(categoryId == 0 || p.ProductCategories.Count (pc => pc.CategoryId == categoryId) > 0) && (manufacturerId == 0 || p.ProductManufacturers.Count (pm => pm.ManufacturerId == manufacturerId) > 0) && (billingCountryId == 0 || o.BillingAddress.CountryId == billingCountryId) && (showHidden || p.Published) " is 299.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,GetAlsoPurchasedProductsIds,The length of the statement  "	where (query1.Contains (orderItem.OrderId)) && (p.Id != productId) && (showHidden || p.Published) && (!orderItem.Order.Deleted) && (storeId == 0 || orderItem.Order.StoreId == storeId) && (!p.Deleted) && (showHidden || p.Published) " is 230.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,ProductsNeverSold,The length of the statement  "	where (!createdFromUtc.HasValue || createdFromUtc.Value <= o.CreatedOnUtc) && (!createdToUtc.HasValue || createdToUtc.Value >= o.CreatedOnUtc) && (!o.Deleted) " is 158.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,ProductsNeverSold,The length of the statement  "	(p.ProductTypeId == simpleProductTypeId) && (!p.Deleted) && (vendorId == 0 || p.VendorId == vendorId) && (showHidden || p.Published) " is 132.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,ProfitReport,The length of the statement  "	where (storeId == 0 || storeId == o.StoreId) && (!startTimeUtc.HasValue || startTimeUtc.Value <= o.CreatedOnUtc) && (!endTimeUtc.HasValue || endTimeUtc.Value >= o.CreatedOnUtc) && (!orderStatusId.HasValue || orderStatusId == o.OrderStatusId) && (!paymentStatusId.HasValue || paymentStatusId == o.PaymentStatusId) && (!shippingStatusId.HasValue || shippingStatusId == o.ShippingStatusId) && (!o.Deleted) && (vendorId == 0 || orderItem.Product.VendorId == vendorId) && //we do not ignore deleted products when calculating order reports " is 533.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,ProfitReport,The length of the statement  "	(dontSearchEmail || (o.BillingAddress != null && !String.IsNullOrEmpty (o.BillingAddress.Email) && o.BillingAddress.Email.Contains (billingEmail))) " is 147.
Long Statement,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,ProfitReport,The length of the statement  "	var productCost = Convert.ToDecimal (query.Sum (orderItem => (decimal?)orderItem.OriginalProductCost * orderItem.Quantity)); " is 124.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,AwardRewardPoints,The length of the statement  "	int points = (int)Math.Truncate (order.OrderTotal / _rewardPointsSettings.PointsForPurchases_Amount * _rewardPointsSettings.PointsForPurchases_Points); " is 151.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,AwardRewardPoints,The length of the statement  "	//Ensure that reward points were not added before. We should not add reward points if they were already earned for this order " is 125.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,AwardRewardPoints,The length of the statement  "	order.Customer.AddRewardPointsHistoryEntry (points' string.Format (_localizationService.GetResource ("RewardPoints.Message.EarnedForOrder")' order.Id)); " is 152.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ReduceRewardPoints,The length of the statement  "	int points = (int)Math.Truncate (order.OrderTotal / _rewardPointsSettings.PointsForPurchases_Amount * _rewardPointsSettings.PointsForPurchases_Points); " is 151.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ReduceRewardPoints,The length of the statement  "	order.Customer.AddRewardPointsHistoryEntry (-points' string.Format (_localizationService.GetResource ("RewardPoints.Message.ReducedForOrder")' order.Id)); " is 154.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the statement  "		var orderCompletedAttachmentFilePath = _orderSettings.AttachPdfInvoiceToOrderCompletedEmail ? _pdfService.PrintOrderToPdf (order' 0) : null; " is 140.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the statement  "		int orderCompletedCustomerNotificationQueuedEmailId = _workflowMessageService.SendOrderCompletedCustomerNotification (order' order.CustomerLanguageId' orderCompletedAttachmentFilePath' orderCompletedAttachmentFileName); " is 219.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the statement  "				Note = string.Format ("\"Order completed\" email (to customer) has been queued. Queued email identifier: {0}."' orderCompletedCustomerNotificationQueuedEmailId)' " is 161.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the statement  "		int orderCancelledCustomerNotificationQueuedEmailId = _workflowMessageService.SendOrderCancelledCustomerNotification (order' order.CustomerLanguageId); " is 151.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the statement  "				Note = string.Format ("\"Order cancelled\" email (to customer) has been queued. Queued email identifier: {0}."' orderCancelledCustomerNotificationQueuedEmailId)' " is 161.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the statement  "	if (_orderSettings.GiftCards_Activated_OrderStatusId > 0 && _orderSettings.GiftCards_Activated_OrderStatusId == (int)order.OrderStatus) { " is 137.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,SetOrderStatus,The length of the statement  "	if (_orderSettings.GiftCards_Deactivated_OrderStatusId > 0 && _orderSettings.GiftCards_Deactivated_OrderStatusId == (int)order.OrderStatus) { " is 141.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessCustomerRolesWithPurchasedProductSpecified,The length of the statement  "	var customerRoles = _customerService.GetAllCustomerRoles (true).Where (cr => purchasedProductIds.Contains (cr.PurchasedWithProductId)).ToList (); " is 145.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "			var shippingOption = _workContext.CurrentCustomer.GetAttribute<ShippingOption> (SystemCustomerAttributeNames.SelectedShippingOption' processPaymentRequest.StoreId); " is 164.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				_orderTotalCalculationService.GetShoppingCartSubTotal (cart' true' out orderSubTotalDiscountAmount1' out orderSubTotalAppliedDiscount1' out subTotalWithoutDiscountBase1' out subTotalWithDiscountBase1); " is 201.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				_orderTotalCalculationService.GetShoppingCartSubTotal (cart' false' out orderSubTotalDiscountAmount2' out orderSubTotalAppliedDiscount2' out subTotalWithoutDiscountBase2' out subTotalWithDiscountBase2); " is 202.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				var customerVatStatus = (VatNumberStatus)_workContext.CurrentCustomer.GetAttribute<int> (SystemCustomerAttributeNames.VatNumberStatusId); " is 137.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					taxRates += string.Format ("{0}:{1};   "' taxRate.ToString (CultureInfo.InvariantCulture)' taxValue.ToString (CultureInfo.InvariantCulture)); " is 141.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				orderTotal = _orderTotalCalculationService.GetShoppingCartTotal (cart' out orderDiscountAmount' out orderAppliedDiscount' out appliedGiftCards' out redeemedRewardPoints' out redeemedRewardPointsAmount); " is 202.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				var currencyTmp = _currencyService.GetCurrencyById (customer.GetAttribute<int> (SystemCustomerAttributeNames.CurrencyId' processPaymentRequest.StoreId)); " is 153.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				customerLanguage = _languageService.GetLanguageById (customer.GetAttribute<int> (SystemCustomerAttributeNames.LanguageId' processPaymentRequest.StoreId)); " is 154.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				checkoutAttributesXml = customer.GetAttribute<string> (SystemCustomerAttributeNames.CheckoutAttributes' processPaymentRequest.StoreId); " is 135.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					customerTaxDisplayType = (TaxDisplayType)customer.GetAttribute<int> (SystemCustomerAttributeNames.TaxDisplayTypeId' processPaymentRequest.StoreId); " is 147.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				MaskedCreditCardNumber = _encryptionService.EncryptText (_paymentService.GetMaskedCreditCardNumber (processPaymentRequest.CreditCardNumber))' " is 141.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					decimal scUnitPriceInclTax = _taxService.GetProductPrice (sc.Product' scUnitPrice' true' _workContext.CurrentCustomer' out taxRate); " is 132.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					decimal scUnitPriceExclTax = _taxService.GetProductPrice (sc.Product' scUnitPrice' false' _workContext.CurrentCustomer' out taxRate); " is 133.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					decimal scSubTotalInclTax = _taxService.GetProductPrice (sc.Product' scSubTotal' true' _workContext.CurrentCustomer' out taxRate); " is 130.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					decimal scSubTotalExclTax = _taxService.GetProductPrice (sc.Product' scSubTotal' false' _workContext.CurrentCustomer' out taxRate); " is 131.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					string attributeDescription = _productAttributeFormatter.FormatAttributes (sc.Product' sc.AttributesXml' _workContext.CurrentCustomer); " is 135.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					Note = string.Format ("Order placed by a store owner ('{0}'. ID = {1}) impersonating the customer."' _workContext.OriginalCustomerIfImpersonated.Email' _workContext.OriginalCustomerIfImpersonated.Id)' " is 200.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "			int orderPlacedStoreOwnerNotificationQueuedEmailId = _workflowMessageService.SendOrderPlacedStoreOwnerNotification (order' _localizationSettings.DefaultAdminLanguageId); " is 169.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					Note = string.Format ("\"Order placed\" email (to store owner) has been queued. Queued email identifier: {0}."' orderPlacedStoreOwnerNotificationQueuedEmailId)' " is 160.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "			var orderPlacedAttachmentFilePath = _orderSettings.AttachPdfInvoiceToOrderPlacedEmail ? _pdfService.PrintOrderToPdf (order' 0) : null; " is 134.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "			int orderPlacedCustomerNotificationQueuedEmailId = _workflowMessageService.SendOrderPlacedCustomerNotification (order' order.CustomerLanguageId' orderPlacedAttachmentFilePath' orderPlacedAttachmentFileName); " is 207.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "					Note = string.Format ("\"Order placed\" email (to customer) has been queued. Queued email identifier: {0}."' orderPlacedCustomerNotificationQueuedEmailId)' " is 155.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				int orderPlacedVendorNotificationQueuedEmailId = _workflowMessageService.SendOrderPlacedVendorNotification (order' vendor' order.CustomerLanguageId); " is 149.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "						Note = string.Format ("\"Order placed\" email (to vendor) has been queued. Queued email identifier: {0}."' orderPlacedVendorNotificationQueuedEmailId)' " is 151.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				_customerService.ResetCheckoutData (_workContext.CurrentCustomer' processPaymentRequest.StoreId' clearCouponCodes: true' clearCheckoutAttributes: true); " is 152.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ProcessPaymentM,The length of the statement  "				_customerActivityService.InsertActivity ("PublicStore.PlaceOrder"' _localizationService.GetResource ("ActivityLog.PublicStore.PlaceOrder")' order.Id); " is 150.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,CheckOrderStatus,The length of the statement  "		if (order.ShippingStatus == ShippingStatus.PartiallyShipped || order.ShippingStatus == ShippingStatus.Shipped || order.ShippingStatus == ShippingStatus.Delivered) { " is 164.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "	//think about moving functionality of processing recurring orders (after the initial order was placed) to ProcessNextRecurringPayment() method " is 142.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			var currencyTmp = _currencyService.GetCurrencyById (customer.GetAttribute<int> (SystemCustomerAttributeNames.CurrencyId' processPaymentRequest.StoreId)); " is 153.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			customerLanguage = _languageService.GetLanguageById (customer.GetAttribute<int> (SystemCustomerAttributeNames.LanguageId' processPaymentRequest.StoreId)); " is 154.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			checkoutAttributesXml = customer.GetAttribute<string> (SystemCustomerAttributeNames.CheckoutAttributes' processPaymentRequest.StoreId); " is 135.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			cart = customer.ShoppingCartItems.Where (sci => sci.ShoppingCartType == ShoppingCartType.ShoppingCart).LimitPerStore (processPaymentRequest.StoreId).ToList (); " is 159.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				var sciWarnings = _shoppingCartService.GetShoppingCartItemWarnings (customer' sci.ShoppingCartType' sci.Product' processPaymentRequest.StoreId' sci.AttributesXml' sci.CustomerEnteredPrice' sci.Quantity' false); " is 210.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				decimal minOrderSubtotalAmount = _currencyService.ConvertFromPrimaryStoreCurrency (_orderSettings.MinOrderSubtotalAmount' _workContext.WorkingCurrency); " is 152.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				throw new NopException (string.Format (_localizationService.GetResource ("Checkout.MinOrderSubtotalAmount")' _priceFormatter.FormatPrice (minOrderSubtotalAmount' true' false))); " is 177.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				decimal minOrderTotalAmount = _currencyService.ConvertFromPrimaryStoreCurrency (_orderSettings.MinOrderTotalAmount' _workContext.WorkingCurrency); " is 146.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				throw new NopException (string.Format (_localizationService.GetResource ("Checkout.MinOrderTotalAmount")' _priceFormatter.FormatPrice (minOrderTotalAmount' true' false))); " is 171.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				customerTaxDisplayType = (TaxDisplayType)customer.GetAttribute<int> (SystemCustomerAttributeNames.TaxDisplayTypeId' processPaymentRequest.StoreId); " is 147.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			_orderTotalCalculationService.GetShoppingCartSubTotal (cart' true' out orderSubTotalDiscountAmount1' out orderSubTotalAppliedDiscount1' out subTotalWithoutDiscountBase1' out subTotalWithDiscountBase1); " is 201.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			_orderTotalCalculationService.GetShoppingCartSubTotal (cart' false' out orderSubTotalDiscountAmount2' out orderSubTotalAppliedDiscount2' out subTotalWithoutDiscountBase2' out subTotalWithDiscountBase2); " is 202.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				pickUpInStore = customer.GetAttribute<bool> (SystemCustomerAttributeNames.SelectedPickUpInStore' processPaymentRequest.StoreId); " is 128.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				var shippingOption = customer.GetAttribute<ShippingOption> (SystemCustomerAttributeNames.SelectedShippingOption' processPaymentRequest.StoreId); " is 144.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			orderShippingTotalInclTax = _orderTotalCalculationService.GetShoppingCartShippingTotal (cart' true' out taxRate' out shippingTotalDiscount); " is 140.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			decimal paymentAdditionalFee = _paymentService.GetAdditionalHandlingFee (cart' processPaymentRequest.PaymentMethodSystemName); " is 126.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				taxRates += string.Format ("{0}:{1};   "' taxRate.ToString (CultureInfo.InvariantCulture)' taxValue.ToString (CultureInfo.InvariantCulture)); " is 141.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "			orderTotal = _orderTotalCalculationService.GetShoppingCartTotal (cart' out orderDiscountAmount' out orderAppliedDiscount' out appliedGiftCards' out redeemedRewardPoints' out redeemedRewardPointsAmount); " is 202.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				string recurringCyclesError = cart.GetRecurringCycleInfo (_localizationService' out recurringCycleLength' out recurringCyclePeriod' out recurringTotalCycles); " is 158.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					processPaymentRequest.CreditCardType = initialOrder.AllowStoringCreditCardNumber ? _encryptionService.DecryptText (initialOrder.CardType) : ""; " is 143.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					processPaymentRequest.CreditCardName = initialOrder.AllowStoringCreditCardNumber ? _encryptionService.DecryptText (initialOrder.CardName) : ""; " is 143.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					processPaymentRequest.CreditCardNumber = initialOrder.AllowStoringCreditCardNumber ? _encryptionService.DecryptText (initialOrder.CardNumber) : ""; " is 147.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					processPaymentRequest.CreditCardCvv2 = initialOrder.AllowStoringCreditCardNumber ? _encryptionService.DecryptText (initialOrder.CardCvv2) : ""; " is 143.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "						processPaymentRequest.CreditCardExpireMonth = initialOrder.AllowStoringCreditCardNumber ? Convert.ToInt32 (_encryptionService.DecryptText (initialOrder.CardExpirationMonth)) : 0; " is 178.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "						processPaymentRequest.CreditCardExpireYear = initialOrder.AllowStoringCreditCardNumber ? Convert.ToInt32 (_encryptionService.DecryptText (initialOrder.CardExpirationYear)) : 0; " is 176.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					CardType = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText (processPaymentRequest.CreditCardType) : string.Empty' " is 148.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					CardName = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText (processPaymentRequest.CreditCardName) : string.Empty' " is 148.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					CardNumber = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText (processPaymentRequest.CreditCardNumber) : string.Empty' " is 152.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					MaskedCreditCardNumber = _encryptionService.EncryptText (_paymentService.GetMaskedCreditCardNumber (processPaymentRequest.CreditCardNumber))' " is 141.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					CardCvv2 = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText (processPaymentRequest.CreditCardCvv2) : string.Empty' " is 148.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					CardExpirationMonth = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText (processPaymentRequest.CreditCardExpireMonth.ToString ()) : string.Empty' " is 178.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					CardExpirationYear = processPaymentResult.AllowStoringCreditCardNumber ? _encryptionService.EncryptText (processPaymentRequest.CreditCardExpireYear.ToString ()) : string.Empty' " is 176.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "							_productAttributeParser.GetGiftCardAttribute (sc.AttributesXml' out giftCardRecipientName' out giftCardRecipientEmail' out giftCardSenderName' out giftCardSenderEmail' out giftCardMessage); " is 189.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "							_productAttributeParser.GetGiftCardAttribute (orderItem.AttributesXml' out giftCardRecipientName' out giftCardRecipientEmail' out giftCardSenderName' out giftCardSenderEmail' out giftCardMessage); " is 196.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					customer.AddRewardPointsHistoryEntry (-redeemedRewardPoints' string.Format (_localizationService.GetResource ("RewardPoints.Message.RedeemedForOrder"' order.CustomerLanguageId)' order.Id)' order' redeemedRewardPointsAmount); " is 224.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "						Note = string.Format ("Order placed by a store owner ('{0}'. ID = {1}) impersonating the customer."' _workContext.OriginalCustomerIfImpersonated.Email' _workContext.OriginalCustomerIfImpersonated.Id)' " is 200.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				int orderPlacedStoreOwnerNotificationQueuedEmailId = _workflowMessageService.SendOrderPlacedStoreOwnerNotification (order' _localizationSettings.DefaultAdminLanguageId); " is 169.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "						Note = string.Format ("\"Order placed\" email (to store owner) has been queued. Queued email identifier: {0}."' orderPlacedStoreOwnerNotificationQueuedEmailId)' " is 160.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				var orderPlacedAttachmentFilePath = _orderSettings.AttachPdfInvoiceToOrderPlacedEmail ? _pdfService.PrintOrderToPdf (order' 0) : null; " is 134.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "				int orderPlacedCustomerNotificationQueuedEmailId = _workflowMessageService.SendOrderPlacedCustomerNotification (order' order.CustomerLanguageId' orderPlacedAttachmentFilePath' orderPlacedAttachmentFileName); " is 207.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "						Note = string.Format ("\"Order placed\" email (to customer) has been queued. Queued email identifier: {0}."' orderPlacedCustomerNotificationQueuedEmailId)' " is 155.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					int orderPlacedVendorNotificationQueuedEmailId = _workflowMessageService.SendOrderPlacedVendorNotification (order' vendor' order.CustomerLanguageId); " is 149.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "							Note = string.Format ("\"Order placed\" email (to vendor) has been queued. Queued email identifier: {0}."' orderPlacedVendorNotificationQueuedEmailId)' " is 151.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					_customerService.ResetCheckoutData (customer' processPaymentRequest.StoreId' clearCouponCodes: true' clearCheckoutAttributes: true); " is 132.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The length of the statement  "					_customerActivityService.InsertActivity ("PublicStore.PlaceOrder"' _localizationService.GetResource ("ActivityLog.PublicStore.PlaceOrder")' order.Id); " is 150.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,CancelRecurringPayment,The length of the statement  "			_workflowMessageService.SendRecurringPaymentCancelledStoreOwnerNotification (recurringPayment' _localizationSettings.DefaultAdminLanguageId); " is 141.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,Deliver,The length of the statement  "		int queuedEmailId = _workflowMessageService.SendShipmentDeliveredCustomerNotification (shipment' order.CustomerLanguageId); " is 123.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,Deliver,The length of the statement  "				Note = string.Format ("\"Delivered\" email (to customer) has been queued. Queued email identifier: {0}."' queuedEmailId)' " is 121.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,CanMarkOrderAsPaid,The length of the statement  "	if (order.PaymentStatus == PaymentStatus.Paid || order.PaymentStatus == PaymentStatus.Refunded || order.PaymentStatus == PaymentStatus.Voided) " is 142.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,Refund,The length of the statement  "				Note = string.Format ("Order has been refunded. Amount = {0}"' _priceFormatter.FormatPrice (request.AmountToRefund' true' false))' " is 130.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,RefundOffline,The length of the statement  "		Note = string.Format ("Order has been marked as refunded. Amount = {0}"' _priceFormatter.FormatPrice (amountToRefund' true' false))' " is 132.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,CanPartiallyRefund,The length of the statement  "	if ((order.PaymentStatus == PaymentStatus.Paid || order.PaymentStatus == PaymentStatus.PartiallyRefunded) && _paymentService.SupportPartiallyRefund (order.PaymentMethodSystemName)) " is 180.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PartiallyRefund,The length of the statement  "				Note = string.Format ("Order has been partially refunded. Amount = {0}"' _priceFormatter.FormatPrice (amountToRefund' true' false))' " is 132.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PartiallyRefundOffline,The length of the statement  "		Note = string.Format ("Order has been marked as partially refunded. Amount = {0}"' _priceFormatter.FormatPrice (amountToRefund' true' false))' " is 142.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ReOrder,The length of the statement  "		_shoppingCartService.AddToCart (orderItem.Order.Customer' orderItem.Product' ShoppingCartType.ShoppingCart' orderItem.Order.StoreId' orderItem.AttributesXml' orderItem.UnitPriceExclTax' orderItem.Quantity' false); " is 213.
Long Statement,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,ValidateMinOrderSubtotalAmount,The length of the statement  "		_orderTotalCalculationService.GetShoppingCartSubTotal (cart' false' out orderSubTotalDiscountAmountBase' out orderSubTotalAppliedDiscount' out subTotalWithoutDiscountBase' out subTotalWithDiscountBase); " is 202.
Long Statement,Nop.Services.Orders,CheckoutAttributeExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeExtensions.cs,ShouldHaveValues,The length of the statement  "	if (checkoutAttribute.AttributeControlType == AttributeControlType.TextBox || checkoutAttribute.AttributeControlType == AttributeControlType.MultilineTextbox || checkoutAttribute.AttributeControlType == AttributeControlType.Datepicker || checkoutAttribute.AttributeControlType == AttributeControlType.FileUpload) " is 312.
Long Statement,Nop.Services.Orders,GiftCardService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\GiftCardService.cs,GetAllGiftCards,The length of the statement  "		query = query.Where (gc => gc.PurchasedWithOrderItem != null && gc.PurchasedWithOrderItem.OrderId == purchasedWithOrderId.Value); " is 129.
Long Statement,Nop.Services.Orders,GiftCardService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\GiftCardService.cs,GetGiftCardsByPurchasedWithOrderItemId,The length of the statement  "	query = query.Where (gc => gc.PurchasedWithOrderItemId.HasValue && gc.PurchasedWithOrderItemId.Value == purchasedWithOrderItemId); " is 130.
Long Statement,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,SearchOrders,The length of the statement  "		query = query.Where (o => o.BillingAddress != null && !String.IsNullOrEmpty (o.BillingAddress.Email) && o.BillingAddress.Email.Contains (billingEmail)); " is 152.
Long Statement,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,GetAllOrderItems,The length of the statement  "	where (!orderId.HasValue || orderId.Value == 0 || orderId == o.Id) && (!customerId.HasValue || customerId.Value == 0 || customerId == o.CustomerId) && (!createdFromUtc.HasValue || createdFromUtc.Value <= o.CreatedOnUtc) && (!createdToUtc.HasValue || createdToUtc.Value >= o.CreatedOnUtc) && (!orderStatusId.HasValue || orderStatusId == o.OrderStatusId) && (!paymentStatusId.HasValue || paymentStatusId.Value == o.PaymentStatusId) && (!shippingStatusId.HasValue || shippingStatusId.Value == o.ShippingStatusId) && (!loadDownloableProductsOnly || p.IsDownload) && !o.Deleted " is 572.
Long Statement,Nop.Services.Orders,OrderService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderService.cs,SearchRecurringPayments,The length of the statement  "	where (!rp.Deleted) && (showHidden || !rp.InitialOrder.Deleted) && (showHidden || !c.Deleted) && (showHidden || rp.IsActive) && (customerId == 0 || rp.InitialOrder.CustomerId == customerId) && (storeId == 0 || rp.InitialOrder.StoreId == storeId) && (initialOrderId == 0 || rp.InitialOrder.Id == initialOrderId) && (!initialOrderStatusId.HasValue || initialOrderStatusId.Value == 0 || rp.InitialOrder.OrderStatusId == initialOrderStatusId.Value) " is 444.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetOrderSubtotalDiscount,The length of the statement  "			if (_discountService.IsDiscountValid (discount' customer) && discount.DiscountType == DiscountType.AssignedToOrderSubTotal && !allowedDiscounts.ContainsDiscount (discount)) " is 172.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShippingDiscount,The length of the statement  "			if (_discountService.IsDiscountValid (discount' customer) && discount.DiscountType == DiscountType.AssignedToShipping && !allowedDiscounts.ContainsDiscount (discount)) " is 167.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetOrderTotalDiscount,The length of the statement  "			if (_discountService.IsDiscountValid (discount' customer) && discount.DiscountType == DiscountType.AssignedToOrderTotal && !allowedDiscounts.ContainsDiscount (discount)) " is 169.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The length of the statement  "	GetShoppingCartSubTotal (cart' includingTax' out discountAmount' out appliedDiscount' out subTotalWithoutDiscount' out subTotalWithDiscount' out taxRates); " is 155.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The length of the statement  "		var checkoutAttributesXml = customer.GetAttribute<string> (SystemCustomerAttributeNames.CheckoutAttributes' _genericAttributeService' _storeContext.CurrentStore.Id); " is 165.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The length of the statement  "	/*We calculate discount amount on order subtotal excl tax (discount first)*///calculate discount amount ('Applied to order subtotal' discount) " is 142.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The length of the statement  "	decimal discountAmountExclTax = GetOrderSubtotalDiscount (customer' subTotalExclTaxWithoutDiscount' out appliedDiscount); " is 121.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,IsFreeShipping,The length of the statement  "		GetShoppingCartSubTotal (cart' _shippingSettings.FreeShippingOverXIncludingTax' out subTotalDiscountAmount' out subTotalAppliedDiscount' out subTotalWithoutDiscountBase' out subTotalWithDiscountBase); " is 200.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The length of the statement  "		shippingOption = customer.GetAttribute<ShippingOption> (SystemCustomerAttributeNames.SelectedShippingOption' _genericAttributeService' _storeContext.CurrentStore.Id); " is 166.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The length of the statement  "		var shippingRateComputationMethods = _shippingService.LoadActiveShippingRateComputationMethods (_storeContext.CurrentStore.Id); " is 127.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,The length of the statement  "		paymentMethodSystemName = customer.GetAttribute<string> (SystemCustomerAttributeNames.SelectedPaymentMethod' _genericAttributeService' _storeContext.CurrentStore.Id); " is 166.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,The length of the statement  "	GetShoppingCartSubTotal (cart' false' out orderSubTotalDiscountAmount' out orderSubTotalAppliedDiscount' out subTotalWithoutDiscountBase' out subTotalWithDiscountBase' out orderSubTotalTaxRates); " is 195.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,The length of the statement  "		decimal paymentMethodAdditionalFeeExclTax = _taxService.GetPaymentMethodAdditionalFee (paymentMethodAdditionalFee' false' customer' out taxRate); " is 145.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,The length of the statement  "		decimal paymentMethodAdditionalFeeInclTax = _taxService.GetPaymentMethodAdditionalFee (paymentMethodAdditionalFee' true' customer' out taxRate); " is 144.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The length of the statement  "	return GetShoppingCartTotal (cart' out discountAmount' out appliedDiscount' out appliedGiftCards' out redeemedRewardPoints' out redeemedRewardPointsAmount' ignoreRewardPonts' usePaymentMethodAdditionalFee); " is 206.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The length of the statement  "		paymentMethodSystemName = customer.GetAttribute<string> (SystemCustomerAttributeNames.SelectedPaymentMethod' _genericAttributeService' _storeContext.CurrentStore.Id); " is 166.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The length of the statement  "	GetShoppingCartSubTotal (cart' false' out orderSubTotalDiscountAmount' out orderSubTotalAppliedDiscount' out subTotalWithoutDiscountBase' out subTotalWithDiscountBase); " is 168.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The length of the statement  "		paymentMethodAdditionalFeeWithoutTax = _taxService.GetPaymentMethodAdditionalFee (paymentMethodAdditionalFee' false' customer); " is 127.
Long Statement,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The length of the statement  "	if (_rewardPointsSettings.Enabled && !ignoreRewardPonts && customer.GetAttribute<bool> (SystemCustomerAttributeNames.UseRewardPointsDuringCheckout' _genericAttributeService' _storeContext.CurrentStore.Id)) { " is 207.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,DeleteShoppingCartItem,The length of the statement  "		var cart = customer.ShoppingCartItems.Where (x => x.ShoppingCartType == ShoppingCartType.ShoppingCart).LimitPerStore (storeId).ToList (); " is 137.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,DeleteShoppingCartItem,The length of the statement  "		var checkoutAttributesXml = customer.GetAttribute<string> (SystemCustomerAttributeNames.CheckoutAttributes' _genericAttributeService' storeId); " is 143.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,DeleteShoppingCartItem,The length of the statement  "		_genericAttributeService.SaveAttribute (customer' SystemCustomerAttributeNames.CheckoutAttributes' checkoutAttributesXml' storeId); " is 131.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetRequiredProductWarnings,The length of the statement  "	var cart = customer.ShoppingCartItems.Where (sci => sci.ShoppingCartType == shoppingCartType).LimitPerStore (storeId).ToList (); " is 128.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetRequiredProductWarnings,The length of the statement  "							warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.RequiredProductWarning")' rp.GetLocalized (x => x.Name))); " is 135.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetRequiredProductWarnings,The length of the statement  "						warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.RequiredProductWarning")' rp.GetLocalized (x => x.Name))); " is 135.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetRequiredProductWarnings,The length of the statement  "					warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.RequiredProductWarning")' rp.GetLocalized (x => x.Name))); " is 135.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "		if (customerEnteredPrice < product.MinimumCustomerEnteredPrice || customerEnteredPrice > product.MaximumCustomerEnteredPrice) { " is 127.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "			decimal minimumCustomerEnteredPrice = _currencyService.ConvertFromPrimaryStoreCurrency (product.MinimumCustomerEnteredPrice' _workContext.WorkingCurrency); " is 155.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "			decimal maximumCustomerEnteredPrice = _currencyService.ConvertFromPrimaryStoreCurrency (product.MaximumCustomerEnteredPrice' _workContext.WorkingCurrency); " is 155.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "			warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.CustomerEnteredPrice.RangeError")' _priceFormatter.FormatPrice (minimumCustomerEnteredPrice' false' false)' _priceFormatter.FormatPrice (maximumCustomerEnteredPrice' false' false))); " is 259.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "		warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.MinimumQuantity")' product.OrderMinimumQuantity)); " is 127.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "		warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.MaximumQuantity")' product.OrderMaximumQuantity)); " is 127.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "		warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.AllowedQuantities")' string.Join ("' "' allowedQuantities))); " is 138.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "	var validateOutOfStock = shoppingCartType == ShoppingCartType.ShoppingCart || !_shoppingCartSettings.AllowOutOfStockItemsToBeAddedToWishlist; " is 141.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "							warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.QuantityExceedsStock")' maximumQuantityCanBeAdded)); " is 129.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "				var combination = product.ProductVariantAttributeCombinations.FirstOrDefault (x => _productAttributeParser.AreProductAttributesEqual (x.AttributesXml' selectedAttributes)); " is 172.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetStandardWarnings,The length of the statement  "							warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.QuantityExceedsStock")' maximumQuantityCanBeAdded)); " is 129.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "				var notFoundWarning = !string.IsNullOrEmpty (pva2.TextPrompt) ? pva2.TextPrompt : string.Format (_localizationService.GetResource ("ShoppingCart.SelectAttribute")' pva2.ProductAttribute.GetLocalized (a => a.Name)); " is 214.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "			var allowedReadOnlyValueIds = _productAttributeService.GetProductVariantAttributeValues (pva2.Id).Where (x => x.IsPreSelected).Select (x => x.Id).ToArray (); " is 157.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "			var selectedReadOnlyValueIds = _productAttributeParser.ParseProductVariantAttributeValues (selectedAttributes).Where (x => x.ProductVariantAttributeId == pva2.Id).Select (x => x.Id).ToArray (); " is 193.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "			if (pva.AttributeControlType == AttributeControlType.TextBox || pva.AttributeControlType == AttributeControlType.MultilineTextbox) { " is 132.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "					warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.TextboxMinimumLength")' pva.ProductAttribute.GetLocalized (a => a.Name)' pva.ValidationMinLength.Value)); " is 182.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "			if (pva.AttributeControlType == AttributeControlType.TextBox || pva.AttributeControlType == AttributeControlType.MultilineTextbox) { " is 132.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "					warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.TextboxMaximumLength")' pva.ProductAttribute.GetLocalized (a => a.Name)' pva.ValidationMaxLength.Value)); " is 182.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "				var associatedProductWarnings = GetShoppingCartItemWarnings (customer' shoppingCartType' associatedProduct' _storeContext.CurrentStore.Id' ""' decimal.Zero' totalQty' false' true' true' true' true); " is 198.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemAttributeWarnings,The length of the statement  "					warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.AssociatedAttributeWarning")' paName' pvavName' associatedProductWarning)); " is 152.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemGiftCardWarnings,The length of the statement  "		_productAttributeParser.GetGiftCardAttribute (selectedAttributes' out giftCardRecipientName' out giftCardRecipientEmail' out giftCardSenderName' out giftCardSenderEmail' out giftCardMessage); " is 191.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemWarnings,The length of the statement  "		warnings.AddRange (GetStandardWarnings (customer' shoppingCartType' product' selectedAttributes' customerEnteredPrice' quantity)); " is 130.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemWarnings,The length of the statement  "		warnings.AddRange (GetShoppingCartItemAttributeWarnings (customer' shoppingCartType' product' quantity' selectedAttributes)); " is 125.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartItemWarnings,The length of the statement  "		warnings.AddRange (GetRequiredProductWarnings (customer' shoppingCartType' product' storeId' automaticallyAddRequiredProductsIfEnabled)); " is 137.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,The length of the statement  "		string cyclesError = shoppingCart.GetRecurringCycleInfo (_localizationService' out cycleLength' out cyclePeriod' out totalCycles); " is 130.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,The length of the statement  "		var ca2Collection = _checkoutAttributeService.GetAllCheckoutAttributes (_storeContext.CurrentStore.Id' !shoppingCart.RequiresShipping ()); " is 138.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,The length of the statement  "						warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.SelectAttribute")' ca2.GetLocalized (a => a.Name))); " is 129.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,The length of the statement  "				if (ca.AttributeControlType == AttributeControlType.TextBox || ca.AttributeControlType == AttributeControlType.MultilineTextbox) { " is 130.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,The length of the statement  "						warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.TextboxMinimumLength")' ca.GetLocalized (a => a.Name)' ca.ValidationMinLength.Value)); " is 163.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,The length of the statement  "				if (ca.AttributeControlType == AttributeControlType.TextBox || ca.AttributeControlType == AttributeControlType.MultilineTextbox) { " is 130.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,GetShoppingCartWarnings,The length of the statement  "						warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.TextboxMaximumLength")' ca.GetLocalized (a => a.Name)' ca.ValidationMaxLength.Value)); " is 163.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The length of the statement  "				_productAttributeParser.GetGiftCardAttribute (selectedAttributes' out giftCardRecipientName1' out giftCardRecipientEmail1' out giftCardSenderName1' out giftCardSenderEmail1' out giftCardMessage1); " is 196.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The length of the statement  "				_productAttributeParser.GetGiftCardAttribute (sci.AttributesXml' out giftCardRecipientName2' out giftCardRecipientEmail2' out giftCardSenderName2' out giftCardSenderEmail2' out giftCardMessage2); " is 195.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The length of the statement  "				if (giftCardRecipientName1.ToLowerInvariant () != giftCardRecipientName2.ToLowerInvariant () || giftCardSenderName1.ToLowerInvariant () != giftCardSenderName2.ToLowerInvariant ()) " is 179.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the statement  "	if (shoppingCartType == ShoppingCartType.ShoppingCart && !_permissionService.Authorize (StandardPermissionProvider.EnableShoppingCart' customer)) { " is 147.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the statement  "	if (shoppingCartType == ShoppingCartType.Wishlist && !_permissionService.Authorize (StandardPermissionProvider.EnableWishlist' customer)) { " is 139.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the statement  "	var cart = customer.ShoppingCartItems.Where (sci => sci.ShoppingCartType == shoppingCartType).LimitPerStore (storeId).ToList (); " is 128.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the statement  "	var shoppingCartItem = FindShoppingCartItemInTheCart (cart' shoppingCartType' product' selectedAttributes' customerEnteredPrice); " is 129.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the statement  "		warnings.AddRange (GetShoppingCartItemWarnings (customer' shoppingCartType' product' storeId' selectedAttributes' customerEnteredPrice' newQuantity' automaticallyAddRequiredProductsIfEnabled)); " is 193.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the statement  "		warnings.AddRange (GetShoppingCartItemWarnings (customer' shoppingCartType' product' storeId' selectedAttributes' customerEnteredPrice' quantity' automaticallyAddRequiredProductsIfEnabled)); " is 190.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the statement  "						warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.MaximumShoppingCartItems")' _shoppingCartSettings.MaximumShoppingCartItems)); " is 154.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,AddToCart,The length of the statement  "						warnings.Add (string.Format (_localizationService.GetResource ("ShoppingCart.MaximumWishlistItems")' _shoppingCartSettings.MaximumWishlistItems)); " is 146.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,UpdateShoppingCartItem,The length of the statement  "			warnings.AddRange (GetShoppingCartItemWarnings (customer' shoppingCartItem.ShoppingCartType' shoppingCartItem.Product' shoppingCartItem.StoreId' selectedAttributes' customerEnteredPrice' quantity' false)); " is 205.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,MigrateShoppingCart,The length of the statement  "		AddToCart (toCustomer' sci.Product' sci.ShoppingCartType' sci.StoreId' sci.AttributesXml' sci.CustomerEnteredPrice' sci.Quantity' false); " is 137.
Long Statement,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,MigrateShoppingCart,The length of the statement  "			_genericAttributeService.SaveAttribute (toCustomer' SystemCustomerAttributeNames.DiscountCouponCode' discountCouponCode); " is 121.
Long Statement,Nop.Services.Payments,PaymentExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Payments\PaymentExtensions.cs,IsPaymentMethodActive,The length of the statement  "		if (paymentMethod.PluginDescriptor.SystemName.Equals (activeMethodSystemName' StringComparison.InvariantCultureIgnoreCase)) " is 123.
Long Statement,Nop.Services.Payments,PaymentExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Payments\PaymentExtensions.cs,CalculateAdditionalFee,The length of the statement  "		var orderTotalWithoutPaymentFee = orderTotalCalculationService.GetShoppingCartTotal (cart' usePaymentMethodAdditionalFee: false); " is 129.
Long Statement,Nop.Services.Payments,PaymentService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Payments\PaymentService.cs,LoadActivePaymentMethods,The length of the statement  "	return LoadAllPaymentMethods (storeId' filterByCountryId).Where (provider => _paymentSettings.ActivePaymentMethodSystemNames.Contains (provider.PluginDescriptor.SystemName' StringComparer.InvariantCultureIgnoreCase)).ToList (); " is 227.
Long Statement,Nop.Services.Security,EncryptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\EncryptionService.cs,EncryptTextToMemory,The length of the statement  "		using (var cs = new CryptoStream (ms' new TripleDESCryptoServiceProvider ().CreateEncryptor (key' iv)' CryptoStreamMode.Write)) { " is 129.
Long Statement,Nop.Services.Security,EncryptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\EncryptionService.cs,DecryptTextFromMemory,The length of the statement  "		using (var cs = new CryptoStream (ms' new TripleDESCryptoServiceProvider ().CreateDecryptor (key' iv)' CryptoStreamMode.Read)) { " is 128.
Long Statement,Nop.Services.Seo,BaseSitemapGenerator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\BaseSitemapGenerator.cs,Generate,The length of the statement  "	_writer.WriteAttributeString ("xsi:schemaLocation"' "http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"); " is 155.
Long Statement,Nop.Services.Seo,UrlRecordService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\UrlRecordService.cs,SaveSlug,The length of the statement  "		var nonActiveRecordWithSpecifiedSlug = allUrlRecords.FirstOrDefault (x => x.Slug.Equals (slug' StringComparison.InvariantCultureIgnoreCase) && !x.IsActive); " is 156.
Long Statement,Nop.Services.Seo,UrlRecordService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\UrlRecordService.cs,SaveSlug,The length of the statement  "			var nonActiveRecordWithSpecifiedSlug = allUrlRecords.FirstOrDefault (x => x.Slug.Equals (slug' StringComparison.InvariantCultureIgnoreCase) && !x.IsActive); " is 156.
Long Statement,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,ValidateSeName,The length of the statement  "	//"the specified path' file name' or both are too long. The fully qualified file name must be less than 260 characters' and the directory name must be less than 248 characters" " is 176.
Long Statement,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,ValidateSeName,The length of the statement  "		var reserved1 = urlRecord != null && !(urlRecord.EntityId == entity.Id && urlRecord.EntityName.Equals (entityName' StringComparison.InvariantCultureIgnoreCase)); " is 161.
Long Statement,Nop.Services.Seo,SitemapGenerator,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SitemapGenerator.cs,WriteProducts,The length of the statement  "	var products = _productService.SearchProducts (storeId: _storeContext.CurrentStore.Id' visibleIndividuallyOnly: true' orderBy: ProductSortingEnum.CreatedOn); " is 157.
Long Statement,Nop.Services.Shipping.Tracking,GeneralShipmentTracker,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\Tracking\GeneralShipmentTracker.cs,GetAllTrackers,The length of the statement  "	.Where (x => x != typeof(GeneralShipmentTracker)).Select (x => EngineContext.Current.ContainerManager.ResolveUnregistered (x) as IShipmentTracker).ToList (); " is 157.
Long Statement,Nop.Services.Tasks,TaskManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tasks\TaskManager.cs,Initialize,The length of the statement  "	var notRunTasks = scheduleTasks.Where (x => x.Seconds >= _notRunTasksInterval).Where (x => !x.LastStartUtc.HasValue || x.LastStartUtc.Value.AddSeconds (_notRunTasksInterval) < DateTime.UtcNow).ToList (); " is 203.
Long Statement,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,IsVatExempt,The length of the statement  "		// returns true if this customer is VAT exempt because they are shipping within the EU but outside our shop country' they have supplied a validated VAT number' and the shop is configured to allow VAT exemption " is 209.
Long Statement,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,IsVatExempt,The length of the statement  "		return address.CountryId != _taxSettings.EuVatShopCountryId && customerVatStatus == VatNumberStatus.Valid && _taxSettings.EuVatAllowVatExemption; " is 145.
Long Statement,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,OncheckVatOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,OncheckVatOperationCompleted,The length of the statement  "		this.checkVatCompleted (this' new checkVatCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 145.
Long Statement,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApproxAsync,The length of the statement  "	this.checkVatApproxAsync (countryCode' vatNumber' traderName' traderCompanyType' traderStreet' traderPostcode' traderCity' requesterCountryCode' requesterVatNumber' null); " is 171.
Long Statement,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApproxAsync,The length of the statement  "		this.checkVatApproxOperationCompleted = new System.Threading.SendOrPostCallback (this.OncheckVatApproxOperationCompleted); " is 122.
Long Statement,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,OncheckVatApproxOperationCompleted,The length of the statement  "		System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,OncheckVatApproxOperationCompleted,The length of the statement  "		this.checkVatApproxCompleted (this' new checkVatApproxCompletedEventArgs (invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 157.
Long Statement,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,IsLocalFileSystemWebService,The length of the statement  "	if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) { " is 123.
Long Statement,Nop.Services.Configuration,SettingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Configuration\SettingService.cs,SetSetting,The length of the statement  "	var settingForCaching = allSettings.ContainsKey (key) ? allSettings [key].FirstOrDefault (x => x.StoreId == storeId) : null; " is 124.
Long Statement,Nop.Services.Configuration,SettingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Configuration\SettingService.cs,DeleteSetting,The length of the statement  "	var settingForCaching = allSettings.ContainsKey (key) ? allSettings [key].FirstOrDefault (x => x.StoreId == storeId) : null; " is 124.
Complex Conditional,Nop.Services.Catalog,ProductAttributeExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductAttributeExtensions.cs,ShouldHaveValues,The conditional expression  "productVariantAttribute.AttributeControlType == AttributeControlType.TextBox || productVariantAttribute.AttributeControlType == AttributeControlType.MultilineTextbox || productVariantAttribute.AttributeControlType == AttributeControlType.Datepicker || productVariantAttribute.AttributeControlType == AttributeControlType.FileUpload"  is complex.
Complex Conditional,Nop.Services.Customers,CustomerAttributeExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerAttributeExtensions.cs,ShouldHaveValues,The conditional expression  "customerAttribute.AttributeControlType == AttributeControlType.TextBox || customerAttribute.AttributeControlType == AttributeControlType.MultilineTextbox || customerAttribute.AttributeControlType == AttributeControlType.Datepicker || customerAttribute.AttributeControlType == AttributeControlType.FileUpload"  is complex.
Complex Conditional,Nop.Services.Messages,NewsLetterSubscriptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\NewsLetterSubscriptionService.cs,UpdateNewsLetterSubscription,The conditional expression  "(originalSubscription.Active == false && newsLetterSubscription.Active) || (newsLetterSubscription.Active && (originalSubscription.Email != newsLetterSubscription.Email))"  is complex.
Complex Conditional,Nop.Services.Authentication,FormsAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\FormsAuthenticationService.cs,GetAuthenticatedCustomer,The conditional expression  "_httpContext == null || _httpContext.Request == null || !_httpContext.Request.IsAuthenticated || !(_httpContext.User.Identity is FormsIdentity)"  is complex.
Complex Conditional,Nop.Services.Authentication,FormsAuthenticationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\FormsAuthenticationService.cs,GetAuthenticatedCustomer,The conditional expression  "customer != null && customer.Active && !customer.Deleted && customer.IsRegistered ()"  is complex.
Complex Conditional,Nop.Services.Orders,CheckoutAttributeExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\CheckoutAttributeExtensions.cs,ShouldHaveValues,The conditional expression  "checkoutAttribute.AttributeControlType == AttributeControlType.TextBox || checkoutAttribute.AttributeControlType == AttributeControlType.MultilineTextbox || checkoutAttribute.AttributeControlType == AttributeControlType.Datepicker || checkoutAttribute.AttributeControlType == AttributeControlType.FileUpload"  is complex.
Empty Catch Block,Nop.Services.Events,EventPublisher,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Events\EventPublisher.cs,PublishToConsumer,The method has an empty catch block.
Empty Catch Block,Nop.Services.Orders,OrderProcessingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderProcessingService.cs,PlaceOrder,The method has an empty catch block.
Magic Number,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,Authorize,The following statement contains a magic number: if (AccountDoesNotExistAndUserIsNotLoggedOn (userFound' userLoggedIn)) {  	ExternalAuthorizerHelper.StoreParametersForRoundTrip (parameters);  	if (AutoRegistrationIsEnabled ()) {  		#region Register user  		var currentCustomer = _workContext.CurrentCustomer;  		var details = new RegistrationDetails (parameters);  		var randomPassword = CommonHelper.GenerateRandomDigitCode (20);  		bool isApproved = _customerSettings.UserRegistrationType == UserRegistrationType.Standard;  		var registrationRequest = new CustomerRegistrationRequest (currentCustomer' details.EmailAddress' _customerSettings.UsernamesEnabled ? details.UserName : details.EmailAddress' randomPassword' PasswordFormat.Clear' isApproved);  		var registrationResult = _customerRegistrationService.RegisterCustomer (registrationRequest);  		if (registrationResult.Success) {  			//store other parameters (form fields)  			if (!String.IsNullOrEmpty (details.FirstName))  				_genericAttributeService.SaveAttribute (currentCustomer' SystemCustomerAttributeNames.FirstName' details.FirstName);  			if (!String.IsNullOrEmpty (details.LastName))  				_genericAttributeService.SaveAttribute (currentCustomer' SystemCustomerAttributeNames.LastName' details.LastName);  			userFound = currentCustomer;  			_openAuthenticationService.AssociateExternalAccountWithUser (currentCustomer' parameters);  			ExternalAuthorizerHelper.RemoveParameters ();  			//code below is copied from CustomerController.Register method  			//authenticate  			if (isApproved)  				_authenticationService.SignIn (userFound ?? userLoggedIn' false);  			//notifications  			if (_customerSettings.NotifyNewCustomerRegistration)  				_workflowMessageService.SendCustomerRegisteredNotificationMessage (currentCustomer' _localizationSettings.DefaultAdminLanguageId);  			switch (_customerSettings.UserRegistrationType) {  			case UserRegistrationType.EmailValidation: {  				//email validation message  				_genericAttributeService.SaveAttribute (currentCustomer' SystemCustomerAttributeNames.AccountActivationToken' Guid.NewGuid ().ToString ());  				_workflowMessageService.SendCustomerEmailValidationMessage (currentCustomer' _workContext.WorkingLanguage.Id);  				//result  				return new AuthorizationResult (OpenAuthenticationStatus.AutoRegisteredEmailValidation);  			}  			case UserRegistrationType.AdminApproval: {  				//result  				return new AuthorizationResult (OpenAuthenticationStatus.AutoRegisteredAdminApproval);  			}  			case UserRegistrationType.Standard: {  				//send customer welcome message  				_workflowMessageService.SendCustomerWelcomeMessage (currentCustomer' _workContext.WorkingLanguage.Id);  				//result  				return new AuthorizationResult (OpenAuthenticationStatus.AutoRegisteredStandard);  			}  			default:  				break;  			}  		}  		else {  			ExternalAuthorizerHelper.RemoveParameters ();  			var result = new AuthorizationResult (OpenAuthenticationStatus.Error);  			foreach (var error in registrationResult.Errors)  				result.AddError (string.Format (error));  			return result;  		}  		#endregion  	}  	else if (RegistrationIsEnabled ()) {  		return new AuthorizationResult (OpenAuthenticationStatus.AssociateOnLogon);  	}  	else {  		ExternalAuthorizerHelper.RemoveParameters ();  		var result = new AuthorizationResult (OpenAuthenticationStatus.Error);  		result.AddError ("Registration is disabled");  		return result;  	}  }  
Magic Number,Nop.Services.Authentication.External,ExternalAuthorizer,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Authentication\External\ExternalAuthorizer.cs,Authorize,The following statement contains a magic number: if (AutoRegistrationIsEnabled ()) {  	#region Register user  	var currentCustomer = _workContext.CurrentCustomer;  	var details = new RegistrationDetails (parameters);  	var randomPassword = CommonHelper.GenerateRandomDigitCode (20);  	bool isApproved = _customerSettings.UserRegistrationType == UserRegistrationType.Standard;  	var registrationRequest = new CustomerRegistrationRequest (currentCustomer' details.EmailAddress' _customerSettings.UsernamesEnabled ? details.UserName : details.EmailAddress' randomPassword' PasswordFormat.Clear' isApproved);  	var registrationResult = _customerRegistrationService.RegisterCustomer (registrationRequest);  	if (registrationResult.Success) {  		//store other parameters (form fields)  		if (!String.IsNullOrEmpty (details.FirstName))  			_genericAttributeService.SaveAttribute (currentCustomer' SystemCustomerAttributeNames.FirstName' details.FirstName);  		if (!String.IsNullOrEmpty (details.LastName))  			_genericAttributeService.SaveAttribute (currentCustomer' SystemCustomerAttributeNames.LastName' details.LastName);  		userFound = currentCustomer;  		_openAuthenticationService.AssociateExternalAccountWithUser (currentCustomer' parameters);  		ExternalAuthorizerHelper.RemoveParameters ();  		//code below is copied from CustomerController.Register method  		//authenticate  		if (isApproved)  			_authenticationService.SignIn (userFound ?? userLoggedIn' false);  		//notifications  		if (_customerSettings.NotifyNewCustomerRegistration)  			_workflowMessageService.SendCustomerRegisteredNotificationMessage (currentCustomer' _localizationSettings.DefaultAdminLanguageId);  		switch (_customerSettings.UserRegistrationType) {  		case UserRegistrationType.EmailValidation: {  			//email validation message  			_genericAttributeService.SaveAttribute (currentCustomer' SystemCustomerAttributeNames.AccountActivationToken' Guid.NewGuid ().ToString ());  			_workflowMessageService.SendCustomerEmailValidationMessage (currentCustomer' _workContext.WorkingLanguage.Id);  			//result  			return new AuthorizationResult (OpenAuthenticationStatus.AutoRegisteredEmailValidation);  		}  		case UserRegistrationType.AdminApproval: {  			//result  			return new AuthorizationResult (OpenAuthenticationStatus.AutoRegisteredAdminApproval);  		}  		case UserRegistrationType.Standard: {  			//send customer welcome message  			_workflowMessageService.SendCustomerWelcomeMessage (currentCustomer' _workContext.WorkingLanguage.Id);  			//result  			return new AuthorizationResult (OpenAuthenticationStatus.AutoRegisteredStandard);  		}  		default:  			break;  		}  	}  	else {  		ExternalAuthorizerHelper.RemoveParameters ();  		var result = new AuthorizationResult (OpenAuthenticationStatus.Error);  		foreach (var error in registrationResult.Errors)  			result.AddError (string.Format (error));  		return result;  	}  	#endregion  }  else if (RegistrationIsEnabled ()) {  	return new AuthorizationResult (OpenAuthenticationStatus.AssociateOnLogon);  }  else {  	ExternalAuthorizerHelper.RemoveParameters ();  	var result = new AuthorizationResult (OpenAuthenticationStatus.Error);  	result.AddError ("Registration is disabled");  	return result;  }  
Magic Number,Nop.Services.Catalog,CompareProductsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CompareProductsService.cs,RemoveProductFromCompareList,The following statement contains a magic number: compareCookie.Expires = DateTime.Now.AddDays (10.0);  
Magic Number,Nop.Services.Catalog,CompareProductsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\CompareProductsService.cs,AddProductToCompareList,The following statement contains a magic number: compareCookie.Expires = DateTime.Now.AddDays (10.0);  
Magic Number,Nop.Services.Catalog,RecentlyViewedProductsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\RecentlyViewedProductsService.cs,AddProductToRecentlyViewedList,The following statement contains a magic number: if (maxProducts <= 0)  	maxProducts = 10;  
Magic Number,Nop.Services.Catalog,RecentlyViewedProductsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\RecentlyViewedProductsService.cs,AddProductToRecentlyViewedList,The following statement contains a magic number: maxProducts = 10;  
Magic Number,Nop.Services.Catalog,RecentlyViewedProductsService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\RecentlyViewedProductsService.cs,AddProductToRecentlyViewedList,The following statement contains a magic number: recentlyViewedCookie.Expires = DateTime.Now.AddDays (10.0);  
Magic Number,Nop.Services.Catalog,PriceFormatter,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceFormatter.cs,FormatPrice,The following statement contains a magic number: price = Math.Round (price' 2);  
Magic Number,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetUnitPrice,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	finalPrice = Math.Round (finalPrice' 2);  
Magic Number,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetUnitPrice,The following statement contains a magic number: finalPrice = Math.Round (finalPrice' 2);  
Magic Number,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetDiscountAmount,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	totalDiscountAmount = Math.Round (totalDiscountAmount' 2);  
Magic Number,Nop.Services.Catalog,PriceCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\PriceCalculationService.cs,GetDiscountAmount,The following statement contains a magic number: totalDiscountAmount = Math.Round (totalDiscountAmount' 2);  
Magic Number,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The following statement contains a magic number: if (languageId > 0) {  	if (showHidden) {  		searchLocalizedValue = true;  	}  	else {  		//ensure that we have at least two published languages  		var totalPublishedLanguages = _languageService.GetAllLanguages (storeId: _storeContext.CurrentStore.Id).Count;  		searchLocalizedValue = totalPublishedLanguages >= 2;  	}  }  
Magic Number,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The following statement contains a magic number: if (showHidden) {  	searchLocalizedValue = true;  }  else {  	//ensure that we have at least two published languages  	var totalPublishedLanguages = _languageService.GetAllLanguages (storeId: _storeContext.CurrentStore.Id).Count;  	searchLocalizedValue = totalPublishedLanguages >= 2;  }  
Magic Number,Nop.Services.Catalog,ProductService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Catalog\ProductService.cs,SearchProducts,The following statement contains a magic number: searchLocalizedValue = totalPublishedLanguages >= 2;  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: foreach (var order in orders) {  	//by default _pdfSettings contains settings for the current active store  	//and we need PdfSettings for the store which was used to place an order  	//so let's load it based on a store of the current order  	var pdfSettingsByStore = _settingContext.LoadSetting<PdfSettings> (order.StoreId);  	var lang = _languageService.GetLanguageById (languageId == 0 ? order.CustomerLanguageId : languageId);  	if (lang == null || !lang.Published)  		lang = _workContext.WorkingLanguage;  	#region Header  	//logo  	var logoPicture = _pictureService.GetPictureById (pdfSettingsByStore.LogoPictureId);  	var logoExists = logoPicture != null;  	//header  	PdfPTable headerTable = new PdfPTable (logoExists ? 2 : 1);  	headerTable.RunDirection = GetDirection (lang);  	headerTable.DefaultCell.Border = Rectangle.NO_BORDER;  	//store info  	var store = _storeService.GetStoreById (order.StoreId) ?? _storeContext.CurrentStore;  	var anchor = new Anchor (store.Url.Trim (new char[] {  		'/'  	})' font);  	anchor.Reference = store.Url;  	var cellHeader = new PdfPCell (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.Order#"' lang.Id)' order.Id)' titleFont));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (anchor));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (String.Format (_localizationService.GetResource ("PDFInvoice.OrderDate"' lang.Id)' _dateTimeHelper.ConvertToUserTime (order.CreatedOnUtc' DateTimeKind.Utc).ToString ("D"' new CultureInfo (lang.LanguageCulture)))' font));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.Phrase.Add (new Phrase (Environment.NewLine));  	cellHeader.HorizontalAlignment = Element.ALIGN_LEFT;  	cellHeader.Border = Rectangle.NO_BORDER;  	headerTable.AddCell (cellHeader);  	if (logoExists)  		if (lang.Rtl)  			headerTable.SetWidths (new[] {  				0.2f'  				0.8f  			});  		else  			headerTable.SetWidths (new[] {  				0.8f'  				0.2f  			});  	headerTable.WidthPercentage = 100f;  	//logo                 	if (logoExists) {  		var logoFilePath = _pictureService.GetThumbLocalPath (logoPicture' 0' false);  		Image Logo = Image.GetInstance (logoFilePath);  		Logo.Alignment = GetAlignment (lang' true);  		Logo.ScaleToFit (65f' 65f);  		var cellLogo = new PdfPCell ();  		cellLogo.Border = Rectangle.NO_BORDER;  		cellLogo.AddElement (Logo);  		headerTable.AddCell (cellLogo);  	}  	doc.Add (headerTable);  	#endregion  	#region Addresses  	var addressTable = new PdfPTable (2);  	addressTable.RunDirection = GetDirection (lang);  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.SetWidths (new[] {  		50'  		50  	});  	//billing info  	var billingAddress = new PdfPTable (1);  	billingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	billingAddress.RunDirection = GetDirection (lang);  	billingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.BillingInformation"' lang.Id)' titleFont));  	if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.BillingAddress.Company))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.BillingAddress.Company)' font));  	billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.BillingAddress.FirstName + " " + order.BillingAddress.LastName)' font));  	if (_addressSettings.PhoneEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.BillingAddress.PhoneNumber)' font));  	if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.BillingAddress.FaxNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.BillingAddress.FaxNumber)' font));  	if (_addressSettings.StreetAddressEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.BillingAddress.Address1)' font));  	if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.BillingAddress.Address2))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.BillingAddress.Address2)' font));  	if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.BillingAddress.City' order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.BillingAddress.ZipPostalCode)' font));  	if (_addressSettings.CountryEnabled && order.BillingAddress.Country != null)  		billingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.BillingAddress.Country != null ? order.BillingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	//VAT number  	if (!String.IsNullOrEmpty (order.VatNumber))  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.VATNumber"' lang.Id)' order.VatNumber)' font));  	//payment method  	var paymentMethod = _paymentService.LoadPaymentMethodBySystemName (order.PaymentMethodSystemName);  	string paymentMethodStr = paymentMethod != null ? paymentMethod.GetLocalizedFriendlyName (_localizationService' lang.Id) : order.PaymentMethodSystemName;  	if (!String.IsNullOrEmpty (paymentMethodStr)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PaymentMethod"' lang.Id)' paymentMethodStr)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	//purchase order number (we have to find a better to inject this information because it's related to a certain plugin)  	if (paymentMethod != null && paymentMethod.PluginDescriptor.SystemName.Equals ("Payments.PurchaseOrder"' StringComparison.InvariantCultureIgnoreCase)) {  		billingAddress.AddCell (new Paragraph (" "));  		billingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.PurchaseOrderNumber"' lang.Id)' order.PurchaseOrderNumber)' font));  		billingAddress.AddCell (new Paragraph ());  	}  	addressTable.AddCell (billingAddress);  	//shipping info  	var shippingAddress = new PdfPTable (1);  	shippingAddress.DefaultCell.Border = Rectangle.NO_BORDER;  	shippingAddress.RunDirection = GetDirection (lang);  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		//cell = new PdfPCell();  		//cell.Border = Rectangle.NO_BORDER;  		if (!order.PickUpInStore) {  			if (order.ShippingAddress == null)  				throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  			shippingAddress.AddCell (new Paragraph (_localizationService.GetResource ("PDFInvoice.ShippingInformation"' lang.Id)' titleFont));  			if (!String.IsNullOrEmpty (order.ShippingAddress.Company))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Company"' lang.Id)' order.ShippingAddress.Company)' font));  			shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  			if (_addressSettings.PhoneEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  			if (_addressSettings.FaxEnabled && !String.IsNullOrEmpty (order.ShippingAddress.FaxNumber))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Fax"' lang.Id)' order.ShippingAddress.FaxNumber)' font));  			if (_addressSettings.StreetAddressEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  			if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  				shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  			if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  			if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  				shippingAddress.AddCell (new Paragraph ("   " + String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  			shippingAddress.AddCell (new Paragraph (" "));  		}  		shippingAddress.AddCell (new Paragraph ("   " + String.Format (_localizationService.GetResource ("PDFInvoice.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	else {  		shippingAddress.AddCell (new Paragraph ());  		addressTable.AddCell (shippingAddress);  	}  	doc.Add (addressTable);  	doc.Add (new Paragraph (" "));  	#endregion  	#region Products  	//products  	PdfPTable productsHeader = new PdfPTable (1);  	productsHeader.RunDirection = GetDirection (lang);  	productsHeader.WidthPercentage = 100f;  	var cellProducts = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.Product(s)"' lang.Id)' titleFont));  	cellProducts.Border = Rectangle.NO_BORDER;  	productsHeader.AddCell (cellProducts);  	doc.Add (productsHeader);  	doc.Add (new Paragraph (" "));  	var orderItems = _orderService.GetAllOrderItems (order.Id' null' null' null' null' null' null);  	var productsTable = new PdfPTable (_catalogSettings.ShowProductSku ? 5 : 4);  	productsTable.RunDirection = GetDirection (lang);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			15'  			10'  			15'  			15'  			45  		} : new[] {  			20'  			10'  			20'  			50  		});  	}  	else {  		productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  			45'  			15'  			15'  			10'  			15  		} : new[] {  			50'  			20'  			10'  			20  		});  	}  	//product name  	var cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductName"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//SKU  	if (_catalogSettings.ShowProductSku) {  		cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.SKU"' lang.Id)' font));  		cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cellProductItem);  	}  	//price  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductPrice"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//qty  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductQuantity"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	//total  	cellProductItem = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.ProductTotal"' lang.Id)' font));  	cellProductItem.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cellProductItem);  	for (int i = 0; i < orderItems.Count; i++) {  		var pAttribTable = new PdfPTable (1);  		pAttribTable.RunDirection = GetDirection (lang);  		pAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		var orderItem = orderItems [i];  		var p = orderItem.Product;  		//product name  		string name = p.GetLocalized (x => x.Name' lang.Id);  		pAttribTable.AddCell (new Paragraph (name' font));  		cellProductItem.AddElement (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			pAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (pAttribTable);  		//SKU  		if (_catalogSettings.ShowProductSku) {  			var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  			cellProductItem = new PdfPCell (new Phrase (sku ?? String.Empty' font));  			cellProductItem.HorizontalAlignment = Element.ALIGN_CENTER;  			productsTable.AddCell (cellProductItem);  		}  		//price  		string unitPrice = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var unitPriceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceInclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var unitPriceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.UnitPriceExclTax' order.CurrencyRate);  			unitPrice = _priceFormatter.FormatPrice (unitPriceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (unitPrice' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//qty  		cellProductItem = new PdfPCell (new Phrase (orderItem.Quantity.ToString ()' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  		//total  		string subTotal = string.Empty;  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var priceInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceInclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		}  		else {  			//excluding tax  			var priceExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (orderItem.PriceExclTax' order.CurrencyRate);  			subTotal = _priceFormatter.FormatPrice (priceExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		}  		cellProductItem = new PdfPCell (new Phrase (subTotal' font));  		cellProductItem.HorizontalAlignment = Element.ALIGN_LEFT;  		productsTable.AddCell (cellProductItem);  	}  	doc.Add (productsTable);  	#endregion  	#region Checkout attributes  	if (!String.IsNullOrEmpty (order.CheckoutAttributeDescription)) {  		doc.Add (new Paragraph (" "));  		PdfPTable attribTable = new PdfPTable (1);  		attribTable.RunDirection = GetDirection (lang);  		attribTable.WidthPercentage = 100f;  		string attributes = HtmlHelper.ConvertHtmlToPlainText (order.CheckoutAttributeDescription' true' true);  		PdfPCell cCheckoutAttributes = new PdfPCell (new Phrase (attributes' font));  		cCheckoutAttributes.Border = Rectangle.NO_BORDER;  		cCheckoutAttributes.HorizontalAlignment = Element.ALIGN_RIGHT;  		attribTable.AddCell (cCheckoutAttributes);  		doc.Add (attribTable);  	}  	#endregion  	#region Totals  	//subtotal  	PdfPTable totalsTable = new PdfPTable (1);  	totalsTable.RunDirection = GetDirection (lang);  	totalsTable.DefaultCell.Border = Rectangle.NO_BORDER;  	totalsTable.WidthPercentage = 100f;  	//order subtotal  	if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  		//including tax  		var orderSubtotalInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalInclTax' order.CurrencyRate);  		string orderSubtotalInclTaxStr = _priceFormatter.FormatPrice (orderSubtotalInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalInclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	else {  		//excluding tax  		var orderSubtotalExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubtotalExclTax' order.CurrencyRate);  		string orderSubtotalExclTaxStr = _priceFormatter.FormatPrice (orderSubtotalExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Sub-Total"' lang.Id)' orderSubtotalExclTaxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//discount (applied to order subtotal)  	if (order.OrderSubTotalDiscountExclTax > decimal.Zero) {  		//order subtotal  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax && !_taxSettings.ForceTaxExclusionFromOrderSubtotal) {  			//including tax  			var orderSubTotalDiscountInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountInclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderSubTotalDiscountExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderSubTotalDiscountExclTax' order.CurrencyRate);  			string orderSubTotalDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderSubTotalDiscountExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderSubTotalDiscountInCustomerCurrencyStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//shipping  	if (order.ShippingStatus != ShippingStatus.ShippingNotRequired) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var orderShippingInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingInclTax' order.CurrencyRate);  			string orderShippingInclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var orderShippingExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderShippingExclTax' order.CurrencyRate);  			string orderShippingExclTaxStr = _priceFormatter.FormatShippingPrice (orderShippingExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Shipping"' lang.Id)' orderShippingExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//payment fee  	if (order.PaymentMethodAdditionalFeeExclTax > decimal.Zero) {  		if (order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  			//including tax  			var paymentMethodAdditionalFeeInclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeInclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeInclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeInclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' true);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeInclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  		else {  			//excluding tax  			var paymentMethodAdditionalFeeExclTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.PaymentMethodAdditionalFeeExclTax' order.CurrencyRate);  			string paymentMethodAdditionalFeeExclTaxStr = _priceFormatter.FormatPaymentMethodAdditionalFee (paymentMethodAdditionalFeeExclTaxInCustomerCurrency' true' order.CustomerCurrencyCode' lang' false);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.PaymentMethodAdditionalFee"' lang.Id)' paymentMethodAdditionalFeeExclTaxStr)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//tax  	string taxStr = string.Empty;  	var taxRates = new SortedDictionary<decimal' decimal> ();  	bool displayTax = true;  	bool displayTaxRates = true;  	if (_taxSettings.HideTaxInOrderSummary && order.CustomerTaxDisplayType == TaxDisplayType.IncludingTax) {  		displayTax = false;  	}  	else {  		if (order.OrderTax == 0 && _taxSettings.HideZeroTax) {  			displayTax = false;  			displayTaxRates = false;  		}  		else {  			taxRates = order.TaxRatesDictionary;  			displayTaxRates = _taxSettings.DisplayTaxRates && taxRates.Count > 0;  			displayTax = !displayTaxRates;  			var orderTaxInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTax' order.CurrencyRate);  			taxStr = _priceFormatter.FormatPrice (orderTaxInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		}  	}  	if (displayTax) {  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Tax"' lang.Id)' taxStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	if (displayTaxRates) {  		foreach (var item in taxRates) {  			string taxRate = String.Format (_localizationService.GetResource ("PDFInvoice.TaxRate"' lang.Id)' _priceFormatter.FormatTaxRate (item.Key));  			string taxValue = _priceFormatter.FormatPrice (_currencyService.ConvertCurrency (item.Value' order.CurrencyRate)' true' order.CustomerCurrencyCode' false' lang);  			var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' taxRate' taxValue)' font));  			p.HorizontalAlignment = Element.ALIGN_RIGHT;  			p.Border = Rectangle.NO_BORDER;  			totalsTable.AddCell (p);  		}  	}  	//discount (applied to order total)  	if (order.OrderDiscount > decimal.Zero) {  		var orderDiscountInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderDiscount' order.CurrencyRate);  		string orderDiscountInCustomerCurrencyStr = _priceFormatter.FormatPrice (-orderDiscountInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.Discount"' lang.Id)' orderDiscountInCustomerCurrencyStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//gift cards  	foreach (var gcuh in order.GiftCardUsageHistory) {  		string gcTitle = string.Format (_localizationService.GetResource ("PDFInvoice.GiftCardInfo"' lang.Id)' gcuh.GiftCard.GiftCardCouponCode);  		string gcAmountStr = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (gcuh.UsedValue' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' gcTitle' gcAmountStr)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//reward points  	if (order.RedeemedRewardPointsEntry != null) {  		string rpTitle = string.Format (_localizationService.GetResource ("PDFInvoice.RewardPoints"' lang.Id)' -order.RedeemedRewardPointsEntry.Points);  		string rpAmount = _priceFormatter.FormatPrice (-(_currencyService.ConvertCurrency (order.RedeemedRewardPointsEntry.UsedAmount' order.CurrencyRate))' true' order.CustomerCurrencyCode' false' lang);  		var p = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' rpTitle' rpAmount)' font));  		p.HorizontalAlignment = Element.ALIGN_RIGHT;  		p.Border = Rectangle.NO_BORDER;  		totalsTable.AddCell (p);  	}  	//order total  	var orderTotalInCustomerCurrency = _currencyService.ConvertCurrency (order.OrderTotal' order.CurrencyRate);  	string orderTotalStr = _priceFormatter.FormatPrice (orderTotalInCustomerCurrency' true' order.CustomerCurrencyCode' false' lang);  	var pTotal = new PdfPCell (new Paragraph (String.Format ("{0} {1}"' _localizationService.GetResource ("PDFInvoice.OrderTotal"' lang.Id)' orderTotalStr)' titleFont));  	pTotal.HorizontalAlignment = Element.ALIGN_RIGHT;  	pTotal.Border = Rectangle.NO_BORDER;  	totalsTable.AddCell (pTotal);  	doc.Add (totalsTable);  	#endregion  	#region Order notes  	if (pdfSettingsByStore.RenderOrderNotes) {  		var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  		if (orderNotes.Count > 0) {  			PdfPTable notesHeader = new PdfPTable (1);  			notesHeader.RunDirection = GetDirection (lang);  			notesHeader.WidthPercentage = 100f;  			var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  			cellOrderNote.Border = Rectangle.NO_BORDER;  			notesHeader.AddCell (cellOrderNote);  			doc.Add (notesHeader);  			doc.Add (new Paragraph (" "));  			var notesTable = new PdfPTable (2);  			notesTable.RunDirection = GetDirection (lang);  			if (lang.Rtl) {  				notesTable.SetWidths (new[] {  					70'  					30  				});  			}  			else {  				notesTable.SetWidths (new[] {  					30'  					70  				});  			}  			notesTable.WidthPercentage = 100f;  			//created on  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			//note  			cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  			cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  			cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  			notesTable.AddCell (cellOrderNote);  			foreach (var orderNote in orderNotes) {  				cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  				cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  				notesTable.AddCell (cellOrderNote);  				//should we display a link to downloadable files here?  				//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  			}  			doc.Add (notesTable);  		}  	}  	#endregion  	#region Footer  	if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  		var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  			Environment.NewLine  		}' StringSplitOptions.RemoveEmptyEntries).ToList ();  		if (column1Lines.Count > 0 || column2Lines.Count > 0) {  			var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  			const float margin = 43;  			//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  			int footerHeight = totalLines * 9;  			var directContent = pdfWriter.DirectContent;  			directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  			directContent.Stroke ();  			var footerTable = new PdfPTable (2);  			footerTable.WidthPercentage = 100f;  			footerTable.SetTotalWidth (new float[] {  				250'  				250  			});  			footerTable.RunDirection = GetDirection (lang);  			//column 1  			if (column1Lines.Count > 0) {  				var column1 = new PdfPCell (new Phrase ());  				column1.Border = Rectangle.NO_BORDER;  				column1.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column1Lines) {  					column1.Phrase.Add (new Phrase (footerLine' font));  					column1.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column1);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			//column 2  			if (column2Lines.Count > 0) {  				var column2 = new PdfPCell (new Phrase ());  				column2.Border = Rectangle.NO_BORDER;  				column2.HorizontalAlignment = Element.ALIGN_LEFT;  				foreach (var footerLine in column2Lines) {  					column2.Phrase.Add (new Phrase (footerLine' font));  					column2.Phrase.Add (new Phrase (Environment.NewLine));  				}  				footerTable.AddCell (column2);  			}  			else {  				var column = new PdfPCell (new Phrase (" "));  				column.Border = Rectangle.NO_BORDER;  				footerTable.AddCell (column);  			}  			footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  		}  	}  	#endregion  	ordNum++;  	if (ordNum < ordCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: addressTable.SetWidths (new[] {  	50'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: addressTable.SetWidths (new[] {  	50'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		15'  		10'  		15'  		15'  		45  	} : new[] {  		20'  		10'  		20'  		50  	});  }  else {  	productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  		45'  		15'  		15'  		10'  		15  	} : new[] {  		50'  		20'  		10'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	15'  	10'  	15'  	15'  	45  } : new[] {  	20'  	10'  	20'  	50  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: productsTable.SetWidths (_catalogSettings.ShowProductSku ? new[] {  	45'  	15'  	15'  	10'  	15  } : new[] {  	50'  	20'  	10'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (pdfSettingsByStore.RenderOrderNotes) {  	var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  	if (orderNotes.Count > 0) {  		PdfPTable notesHeader = new PdfPTable (1);  		notesHeader.RunDirection = GetDirection (lang);  		notesHeader.WidthPercentage = 100f;  		var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  		cellOrderNote.Border = Rectangle.NO_BORDER;  		notesHeader.AddCell (cellOrderNote);  		doc.Add (notesHeader);  		doc.Add (new Paragraph (" "));  		var notesTable = new PdfPTable (2);  		notesTable.RunDirection = GetDirection (lang);  		if (lang.Rtl) {  			notesTable.SetWidths (new[] {  				70'  				30  			});  		}  		else {  			notesTable.SetWidths (new[] {  				30'  				70  			});  		}  		notesTable.WidthPercentage = 100f;  		//created on  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		//note  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		foreach (var orderNote in orderNotes) {  			cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			//should we display a link to downloadable files here?  			//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  		}  		doc.Add (notesTable);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (pdfSettingsByStore.RenderOrderNotes) {  	var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  	if (orderNotes.Count > 0) {  		PdfPTable notesHeader = new PdfPTable (1);  		notesHeader.RunDirection = GetDirection (lang);  		notesHeader.WidthPercentage = 100f;  		var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  		cellOrderNote.Border = Rectangle.NO_BORDER;  		notesHeader.AddCell (cellOrderNote);  		doc.Add (notesHeader);  		doc.Add (new Paragraph (" "));  		var notesTable = new PdfPTable (2);  		notesTable.RunDirection = GetDirection (lang);  		if (lang.Rtl) {  			notesTable.SetWidths (new[] {  				70'  				30  			});  		}  		else {  			notesTable.SetWidths (new[] {  				30'  				70  			});  		}  		notesTable.WidthPercentage = 100f;  		//created on  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		//note  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		foreach (var orderNote in orderNotes) {  			cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			//should we display a link to downloadable files here?  			//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  		}  		doc.Add (notesTable);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (pdfSettingsByStore.RenderOrderNotes) {  	var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  	if (orderNotes.Count > 0) {  		PdfPTable notesHeader = new PdfPTable (1);  		notesHeader.RunDirection = GetDirection (lang);  		notesHeader.WidthPercentage = 100f;  		var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  		cellOrderNote.Border = Rectangle.NO_BORDER;  		notesHeader.AddCell (cellOrderNote);  		doc.Add (notesHeader);  		doc.Add (new Paragraph (" "));  		var notesTable = new PdfPTable (2);  		notesTable.RunDirection = GetDirection (lang);  		if (lang.Rtl) {  			notesTable.SetWidths (new[] {  				70'  				30  			});  		}  		else {  			notesTable.SetWidths (new[] {  				30'  				70  			});  		}  		notesTable.WidthPercentage = 100f;  		//created on  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		//note  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		foreach (var orderNote in orderNotes) {  			cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			//should we display a link to downloadable files here?  			//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  		}  		doc.Add (notesTable);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (pdfSettingsByStore.RenderOrderNotes) {  	var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  	if (orderNotes.Count > 0) {  		PdfPTable notesHeader = new PdfPTable (1);  		notesHeader.RunDirection = GetDirection (lang);  		notesHeader.WidthPercentage = 100f;  		var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  		cellOrderNote.Border = Rectangle.NO_BORDER;  		notesHeader.AddCell (cellOrderNote);  		doc.Add (notesHeader);  		doc.Add (new Paragraph (" "));  		var notesTable = new PdfPTable (2);  		notesTable.RunDirection = GetDirection (lang);  		if (lang.Rtl) {  			notesTable.SetWidths (new[] {  				70'  				30  			});  		}  		else {  			notesTable.SetWidths (new[] {  				30'  				70  			});  		}  		notesTable.WidthPercentage = 100f;  		//created on  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		//note  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		foreach (var orderNote in orderNotes) {  			cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			//should we display a link to downloadable files here?  			//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  		}  		doc.Add (notesTable);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (pdfSettingsByStore.RenderOrderNotes) {  	var orderNotes = order.OrderNotes.Where (on => on.DisplayToCustomer).OrderByDescending (on => on.CreatedOnUtc).ToList ();  	if (orderNotes.Count > 0) {  		PdfPTable notesHeader = new PdfPTable (1);  		notesHeader.RunDirection = GetDirection (lang);  		notesHeader.WidthPercentage = 100f;  		var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  		cellOrderNote.Border = Rectangle.NO_BORDER;  		notesHeader.AddCell (cellOrderNote);  		doc.Add (notesHeader);  		doc.Add (new Paragraph (" "));  		var notesTable = new PdfPTable (2);  		notesTable.RunDirection = GetDirection (lang);  		if (lang.Rtl) {  			notesTable.SetWidths (new[] {  				70'  				30  			});  		}  		else {  			notesTable.SetWidths (new[] {  				30'  				70  			});  		}  		notesTable.WidthPercentage = 100f;  		//created on  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		//note  		cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  		cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  		cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  		notesTable.AddCell (cellOrderNote);  		foreach (var orderNote in orderNotes) {  			cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  			cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  			notesTable.AddCell (cellOrderNote);  			//should we display a link to downloadable files here?  			//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  		}  		doc.Add (notesTable);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (orderNotes.Count > 0) {  	PdfPTable notesHeader = new PdfPTable (1);  	notesHeader.RunDirection = GetDirection (lang);  	notesHeader.WidthPercentage = 100f;  	var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  	cellOrderNote.Border = Rectangle.NO_BORDER;  	notesHeader.AddCell (cellOrderNote);  	doc.Add (notesHeader);  	doc.Add (new Paragraph (" "));  	var notesTable = new PdfPTable (2);  	notesTable.RunDirection = GetDirection (lang);  	if (lang.Rtl) {  		notesTable.SetWidths (new[] {  			70'  			30  		});  	}  	else {  		notesTable.SetWidths (new[] {  			30'  			70  		});  	}  	notesTable.WidthPercentage = 100f;  	//created on  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	//note  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	foreach (var orderNote in orderNotes) {  		cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		//should we display a link to downloadable files here?  		//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  	}  	doc.Add (notesTable);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (orderNotes.Count > 0) {  	PdfPTable notesHeader = new PdfPTable (1);  	notesHeader.RunDirection = GetDirection (lang);  	notesHeader.WidthPercentage = 100f;  	var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  	cellOrderNote.Border = Rectangle.NO_BORDER;  	notesHeader.AddCell (cellOrderNote);  	doc.Add (notesHeader);  	doc.Add (new Paragraph (" "));  	var notesTable = new PdfPTable (2);  	notesTable.RunDirection = GetDirection (lang);  	if (lang.Rtl) {  		notesTable.SetWidths (new[] {  			70'  			30  		});  	}  	else {  		notesTable.SetWidths (new[] {  			30'  			70  		});  	}  	notesTable.WidthPercentage = 100f;  	//created on  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	//note  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	foreach (var orderNote in orderNotes) {  		cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		//should we display a link to downloadable files here?  		//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  	}  	doc.Add (notesTable);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (orderNotes.Count > 0) {  	PdfPTable notesHeader = new PdfPTable (1);  	notesHeader.RunDirection = GetDirection (lang);  	notesHeader.WidthPercentage = 100f;  	var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  	cellOrderNote.Border = Rectangle.NO_BORDER;  	notesHeader.AddCell (cellOrderNote);  	doc.Add (notesHeader);  	doc.Add (new Paragraph (" "));  	var notesTable = new PdfPTable (2);  	notesTable.RunDirection = GetDirection (lang);  	if (lang.Rtl) {  		notesTable.SetWidths (new[] {  			70'  			30  		});  	}  	else {  		notesTable.SetWidths (new[] {  			30'  			70  		});  	}  	notesTable.WidthPercentage = 100f;  	//created on  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	//note  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	foreach (var orderNote in orderNotes) {  		cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		//should we display a link to downloadable files here?  		//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  	}  	doc.Add (notesTable);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (orderNotes.Count > 0) {  	PdfPTable notesHeader = new PdfPTable (1);  	notesHeader.RunDirection = GetDirection (lang);  	notesHeader.WidthPercentage = 100f;  	var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  	cellOrderNote.Border = Rectangle.NO_BORDER;  	notesHeader.AddCell (cellOrderNote);  	doc.Add (notesHeader);  	doc.Add (new Paragraph (" "));  	var notesTable = new PdfPTable (2);  	notesTable.RunDirection = GetDirection (lang);  	if (lang.Rtl) {  		notesTable.SetWidths (new[] {  			70'  			30  		});  	}  	else {  		notesTable.SetWidths (new[] {  			30'  			70  		});  	}  	notesTable.WidthPercentage = 100f;  	//created on  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	//note  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	foreach (var orderNote in orderNotes) {  		cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		//should we display a link to downloadable files here?  		//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  	}  	doc.Add (notesTable);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (orderNotes.Count > 0) {  	PdfPTable notesHeader = new PdfPTable (1);  	notesHeader.RunDirection = GetDirection (lang);  	notesHeader.WidthPercentage = 100f;  	var cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes"' lang.Id)' titleFont));  	cellOrderNote.Border = Rectangle.NO_BORDER;  	notesHeader.AddCell (cellOrderNote);  	doc.Add (notesHeader);  	doc.Add (new Paragraph (" "));  	var notesTable = new PdfPTable (2);  	notesTable.RunDirection = GetDirection (lang);  	if (lang.Rtl) {  		notesTable.SetWidths (new[] {  			70'  			30  		});  	}  	else {  		notesTable.SetWidths (new[] {  			30'  			70  		});  	}  	notesTable.WidthPercentage = 100f;  	//created on  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.CreatedOn"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	//note  	cellOrderNote = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFInvoice.OrderNotes.Note"' lang.Id)' font));  	cellOrderNote.BackgroundColor = BaseColor.LIGHT_GRAY;  	cellOrderNote.HorizontalAlignment = Element.ALIGN_CENTER;  	notesTable.AddCell (cellOrderNote);  	foreach (var orderNote in orderNotes) {  		cellOrderNote = new PdfPCell (new Phrase (_dateTimeHelper.ConvertToUserTime (orderNote.CreatedOnUtc' DateTimeKind.Utc).ToString ()' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		cellOrderNote = new PdfPCell (new Phrase (HtmlHelper.ConvertHtmlToPlainText (orderNote.FormatOrderNoteText ()' true' true)' font));  		cellOrderNote.HorizontalAlignment = Element.ALIGN_LEFT;  		notesTable.AddCell (cellOrderNote);  		//should we display a link to downloadable files here?  		//I think' no. Onyway' PDFs are printable documents and links (files) are useful here  	}  	doc.Add (notesTable);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	notesTable.SetWidths (new[] {  		70'  		30  	});  }  else {  	notesTable.SetWidths (new[] {  		30'  		70  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	notesTable.SetWidths (new[] {  		70'  		30  	});  }  else {  	notesTable.SetWidths (new[] {  		30'  		70  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	notesTable.SetWidths (new[] {  		70'  		30  	});  }  else {  	notesTable.SetWidths (new[] {  		30'  		70  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (lang.Rtl) {  	notesTable.SetWidths (new[] {  		70'  		30  	});  }  else {  	notesTable.SetWidths (new[] {  		30'  		70  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: notesTable.SetWidths (new[] {  	70'  	30  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: notesTable.SetWidths (new[] {  	70'  	30  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: notesTable.SetWidths (new[] {  	30'  	70  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: notesTable.SetWidths (new[] {  	30'  	70  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  	var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	if (column1Lines.Count > 0 || column2Lines.Count > 0) {  		var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  		const float margin = 43;  		//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  		int footerHeight = totalLines * 9;  		var directContent = pdfWriter.DirectContent;  		directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.Stroke ();  		var footerTable = new PdfPTable (2);  		footerTable.WidthPercentage = 100f;  		footerTable.SetTotalWidth (new float[] {  			250'  			250  		});  		footerTable.RunDirection = GetDirection (lang);  		//column 1  		if (column1Lines.Count > 0) {  			var column1 = new PdfPCell (new Phrase ());  			column1.Border = Rectangle.NO_BORDER;  			column1.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column1Lines) {  				column1.Phrase.Add (new Phrase (footerLine' font));  				column1.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column1);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		//column 2  		if (column2Lines.Count > 0) {  			var column2 = new PdfPCell (new Phrase ());  			column2.Border = Rectangle.NO_BORDER;  			column2.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column2Lines) {  				column2.Phrase.Add (new Phrase (footerLine' font));  				column2.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column2);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  	var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	if (column1Lines.Count > 0 || column2Lines.Count > 0) {  		var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  		const float margin = 43;  		//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  		int footerHeight = totalLines * 9;  		var directContent = pdfWriter.DirectContent;  		directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.Stroke ();  		var footerTable = new PdfPTable (2);  		footerTable.WidthPercentage = 100f;  		footerTable.SetTotalWidth (new float[] {  			250'  			250  		});  		footerTable.RunDirection = GetDirection (lang);  		//column 1  		if (column1Lines.Count > 0) {  			var column1 = new PdfPCell (new Phrase ());  			column1.Border = Rectangle.NO_BORDER;  			column1.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column1Lines) {  				column1.Phrase.Add (new Phrase (footerLine' font));  				column1.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column1);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		//column 2  		if (column2Lines.Count > 0) {  			var column2 = new PdfPCell (new Phrase ());  			column2.Border = Rectangle.NO_BORDER;  			column2.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column2Lines) {  				column2.Phrase.Add (new Phrase (footerLine' font));  				column2.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column2);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  	var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	if (column1Lines.Count > 0 || column2Lines.Count > 0) {  		var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  		const float margin = 43;  		//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  		int footerHeight = totalLines * 9;  		var directContent = pdfWriter.DirectContent;  		directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.Stroke ();  		var footerTable = new PdfPTable (2);  		footerTable.WidthPercentage = 100f;  		footerTable.SetTotalWidth (new float[] {  			250'  			250  		});  		footerTable.RunDirection = GetDirection (lang);  		//column 1  		if (column1Lines.Count > 0) {  			var column1 = new PdfPCell (new Phrase ());  			column1.Border = Rectangle.NO_BORDER;  			column1.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column1Lines) {  				column1.Phrase.Add (new Phrase (footerLine' font));  				column1.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column1);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		//column 2  		if (column2Lines.Count > 0) {  			var column2 = new PdfPCell (new Phrase ());  			column2.Border = Rectangle.NO_BORDER;  			column2.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column2Lines) {  				column2.Phrase.Add (new Phrase (footerLine' font));  				column2.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column2);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  	var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	if (column1Lines.Count > 0 || column2Lines.Count > 0) {  		var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  		const float margin = 43;  		//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  		int footerHeight = totalLines * 9;  		var directContent = pdfWriter.DirectContent;  		directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.Stroke ();  		var footerTable = new PdfPTable (2);  		footerTable.WidthPercentage = 100f;  		footerTable.SetTotalWidth (new float[] {  			250'  			250  		});  		footerTable.RunDirection = GetDirection (lang);  		//column 1  		if (column1Lines.Count > 0) {  			var column1 = new PdfPCell (new Phrase ());  			column1.Border = Rectangle.NO_BORDER;  			column1.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column1Lines) {  				column1.Phrase.Add (new Phrase (footerLine' font));  				column1.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column1);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		//column 2  		if (column2Lines.Count > 0) {  			var column2 = new PdfPCell (new Phrase ());  			column2.Border = Rectangle.NO_BORDER;  			column2.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column2Lines) {  				column2.Phrase.Add (new Phrase (footerLine' font));  				column2.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column2);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (!String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) || !String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2)) {  	var column1Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn1) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn1.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	var column2Lines = String.IsNullOrEmpty (pdfSettingsByStore.InvoiceFooterTextColumn2) ? new List<string> () : pdfSettingsByStore.InvoiceFooterTextColumn2.Split (new[] {  		Environment.NewLine  	}' StringSplitOptions.RemoveEmptyEntries).ToList ();  	if (column1Lines.Count > 0 || column2Lines.Count > 0) {  		var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  		const float margin = 43;  		//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  		int footerHeight = totalLines * 9;  		var directContent = pdfWriter.DirectContent;  		directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  		directContent.Stroke ();  		var footerTable = new PdfPTable (2);  		footerTable.WidthPercentage = 100f;  		footerTable.SetTotalWidth (new float[] {  			250'  			250  		});  		footerTable.RunDirection = GetDirection (lang);  		//column 1  		if (column1Lines.Count > 0) {  			var column1 = new PdfPCell (new Phrase ());  			column1.Border = Rectangle.NO_BORDER;  			column1.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column1Lines) {  				column1.Phrase.Add (new Phrase (footerLine' font));  				column1.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column1);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		//column 2  		if (column2Lines.Count > 0) {  			var column2 = new PdfPCell (new Phrase ());  			column2.Border = Rectangle.NO_BORDER;  			column2.HorizontalAlignment = Element.ALIGN_LEFT;  			foreach (var footerLine in column2Lines) {  				column2.Phrase.Add (new Phrase (footerLine' font));  				column2.Phrase.Add (new Phrase (Environment.NewLine));  			}  			footerTable.AddCell (column2);  		}  		else {  			var column = new PdfPCell (new Phrase (" "));  			column.Border = Rectangle.NO_BORDER;  			footerTable.AddCell (column);  		}  		footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (column1Lines.Count > 0 || column2Lines.Count > 0) {  	var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  	const float margin = 43;  	//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  	int footerHeight = totalLines * 9;  	var directContent = pdfWriter.DirectContent;  	directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.Stroke ();  	var footerTable = new PdfPTable (2);  	footerTable.WidthPercentage = 100f;  	footerTable.SetTotalWidth (new float[] {  		250'  		250  	});  	footerTable.RunDirection = GetDirection (lang);  	//column 1  	if (column1Lines.Count > 0) {  		var column1 = new PdfPCell (new Phrase ());  		column1.Border = Rectangle.NO_BORDER;  		column1.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column1Lines) {  			column1.Phrase.Add (new Phrase (footerLine' font));  			column1.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column1);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	//column 2  	if (column2Lines.Count > 0) {  		var column2 = new PdfPCell (new Phrase ());  		column2.Border = Rectangle.NO_BORDER;  		column2.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column2Lines) {  			column2.Phrase.Add (new Phrase (footerLine' font));  			column2.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column2);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (column1Lines.Count > 0 || column2Lines.Count > 0) {  	var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  	const float margin = 43;  	//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  	int footerHeight = totalLines * 9;  	var directContent = pdfWriter.DirectContent;  	directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.Stroke ();  	var footerTable = new PdfPTable (2);  	footerTable.WidthPercentage = 100f;  	footerTable.SetTotalWidth (new float[] {  		250'  		250  	});  	footerTable.RunDirection = GetDirection (lang);  	//column 1  	if (column1Lines.Count > 0) {  		var column1 = new PdfPCell (new Phrase ());  		column1.Border = Rectangle.NO_BORDER;  		column1.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column1Lines) {  			column1.Phrase.Add (new Phrase (footerLine' font));  			column1.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column1);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	//column 2  	if (column2Lines.Count > 0) {  		var column2 = new PdfPCell (new Phrase ());  		column2.Border = Rectangle.NO_BORDER;  		column2.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column2Lines) {  			column2.Phrase.Add (new Phrase (footerLine' font));  			column2.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column2);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (column1Lines.Count > 0 || column2Lines.Count > 0) {  	var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  	const float margin = 43;  	//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  	int footerHeight = totalLines * 9;  	var directContent = pdfWriter.DirectContent;  	directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.Stroke ();  	var footerTable = new PdfPTable (2);  	footerTable.WidthPercentage = 100f;  	footerTable.SetTotalWidth (new float[] {  		250'  		250  	});  	footerTable.RunDirection = GetDirection (lang);  	//column 1  	if (column1Lines.Count > 0) {  		var column1 = new PdfPCell (new Phrase ());  		column1.Border = Rectangle.NO_BORDER;  		column1.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column1Lines) {  			column1.Phrase.Add (new Phrase (footerLine' font));  			column1.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column1);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	//column 2  	if (column2Lines.Count > 0) {  		var column2 = new PdfPCell (new Phrase ());  		column2.Border = Rectangle.NO_BORDER;  		column2.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column2Lines) {  			column2.Phrase.Add (new Phrase (footerLine' font));  			column2.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column2);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (column1Lines.Count > 0 || column2Lines.Count > 0) {  	var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  	const float margin = 43;  	//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  	int footerHeight = totalLines * 9;  	var directContent = pdfWriter.DirectContent;  	directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.Stroke ();  	var footerTable = new PdfPTable (2);  	footerTable.WidthPercentage = 100f;  	footerTable.SetTotalWidth (new float[] {  		250'  		250  	});  	footerTable.RunDirection = GetDirection (lang);  	//column 1  	if (column1Lines.Count > 0) {  		var column1 = new PdfPCell (new Phrase ());  		column1.Border = Rectangle.NO_BORDER;  		column1.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column1Lines) {  			column1.Phrase.Add (new Phrase (footerLine' font));  			column1.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column1);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	//column 2  	if (column2Lines.Count > 0) {  		var column2 = new PdfPCell (new Phrase ());  		column2.Border = Rectangle.NO_BORDER;  		column2.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column2Lines) {  			column2.Phrase.Add (new Phrase (footerLine' font));  			column2.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column2);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: if (column1Lines.Count > 0 || column2Lines.Count > 0) {  	var totalLines = Math.Max (column1Lines.Count' column2Lines.Count);  	const float margin = 43;  	//if you have really a lot of lines in the footer' then replace 9 with 10 or 11  	int footerHeight = totalLines * 9;  	var directContent = pdfWriter.DirectContent;  	directContent.MoveTo (pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.LineTo (pageSize.GetRight (margin)' pageSize.GetBottom (margin) + footerHeight);  	directContent.Stroke ();  	var footerTable = new PdfPTable (2);  	footerTable.WidthPercentage = 100f;  	footerTable.SetTotalWidth (new float[] {  		250'  		250  	});  	footerTable.RunDirection = GetDirection (lang);  	//column 1  	if (column1Lines.Count > 0) {  		var column1 = new PdfPCell (new Phrase ());  		column1.Border = Rectangle.NO_BORDER;  		column1.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column1Lines) {  			column1.Phrase.Add (new Phrase (footerLine' font));  			column1.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column1);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	//column 2  	if (column2Lines.Count > 0) {  		var column2 = new PdfPCell (new Phrase ());  		column2.Border = Rectangle.NO_BORDER;  		column2.HorizontalAlignment = Element.ALIGN_LEFT;  		foreach (var footerLine in column2Lines) {  			column2.Phrase.Add (new Phrase (footerLine' font));  			column2.Phrase.Add (new Phrase (Environment.NewLine));  		}  		footerTable.AddCell (column2);  	}  	else {  		var column = new PdfPCell (new Phrase (" "));  		column.Border = Rectangle.NO_BORDER;  		footerTable.AddCell (column);  	}  	footerTable.WriteSelectedRows (0' totalLines' pageSize.GetLeft (margin)' pageSize.GetBottom (margin) + footerHeight' directContent);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: footerTable.SetTotalWidth (new float[] {  	250'  	250  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintOrdersToPdf,The following statement contains a magic number: footerTable.SetTotalWidth (new float[] {  	250'  	250  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: foreach (var shipment in shipments) {  	var order = shipment.Order;  	if (languageId == 0) {  		lang = _languageService.GetLanguageById (order.CustomerLanguageId);  		if (lang == null || !lang.Published)  			lang = _workContext.WorkingLanguage;  	}  	var addressTable = new PdfPTable (1);  	if (lang.Rtl)  		addressTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Shipment"' lang.Id)' shipment.Id)' titleFont));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Order"' lang.Id)' order.Id)' titleFont));  	if (!order.PickUpInStore) {  		if (order.ShippingAddress == null)  			throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  		if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.ShippingAddress.Company))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Company"' lang.Id)' order.ShippingAddress.Company)' font));  		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  		if (_addressSettings.PhoneEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  		if (_addressSettings.StreetAddressEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  		if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  		if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  			addressTable.AddCell (new Paragraph (String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  		if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  			addressTable.AddCell (new Paragraph (String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	}  	addressTable.AddCell (new Paragraph (" "));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  	addressTable.AddCell (new Paragraph (" "));  	doc.Add (addressTable);  	var productsTable = new PdfPTable (3);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productsTable.SetWidths (new[] {  			20'  			20'  			60  		});  	}  	else {  		productsTable.SetWidths (new[] {  			60'  			20'  			20  		});  	}  	//product name  	var cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.ProductName"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//SKU  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.SKU"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//qty  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.QTY"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	foreach (var si in shipment.ShipmentItems) {  		var productAttribTable = new PdfPTable (1);  		if (lang.Rtl)  			productAttribTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		//product name  		var orderItem = _orderService.GetOrderItemById (si.OrderItemId);  		if (orderItem == null)  			continue;  		var p = orderItem.Product;  		string name = p.GetLocalized (x => x.Name' lang.Id);  		productAttribTable.AddCell (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			productAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (productAttribTable);  		//SKU  		var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  		cell = new PdfPCell (new Phrase (sku ?? String.Empty' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  		//qty  		cell = new PdfPCell (new Phrase (si.Quantity.ToString ()' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  	}  	doc.Add (productsTable);  	shipmentNum++;  	if (shipmentNum < shipmentCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: foreach (var shipment in shipments) {  	var order = shipment.Order;  	if (languageId == 0) {  		lang = _languageService.GetLanguageById (order.CustomerLanguageId);  		if (lang == null || !lang.Published)  			lang = _workContext.WorkingLanguage;  	}  	var addressTable = new PdfPTable (1);  	if (lang.Rtl)  		addressTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Shipment"' lang.Id)' shipment.Id)' titleFont));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Order"' lang.Id)' order.Id)' titleFont));  	if (!order.PickUpInStore) {  		if (order.ShippingAddress == null)  			throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  		if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.ShippingAddress.Company))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Company"' lang.Id)' order.ShippingAddress.Company)' font));  		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  		if (_addressSettings.PhoneEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  		if (_addressSettings.StreetAddressEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  		if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  		if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  			addressTable.AddCell (new Paragraph (String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  		if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  			addressTable.AddCell (new Paragraph (String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	}  	addressTable.AddCell (new Paragraph (" "));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  	addressTable.AddCell (new Paragraph (" "));  	doc.Add (addressTable);  	var productsTable = new PdfPTable (3);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productsTable.SetWidths (new[] {  			20'  			20'  			60  		});  	}  	else {  		productsTable.SetWidths (new[] {  			60'  			20'  			20  		});  	}  	//product name  	var cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.ProductName"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//SKU  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.SKU"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//qty  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.QTY"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	foreach (var si in shipment.ShipmentItems) {  		var productAttribTable = new PdfPTable (1);  		if (lang.Rtl)  			productAttribTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		//product name  		var orderItem = _orderService.GetOrderItemById (si.OrderItemId);  		if (orderItem == null)  			continue;  		var p = orderItem.Product;  		string name = p.GetLocalized (x => x.Name' lang.Id);  		productAttribTable.AddCell (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			productAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (productAttribTable);  		//SKU  		var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  		cell = new PdfPCell (new Phrase (sku ?? String.Empty' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  		//qty  		cell = new PdfPCell (new Phrase (si.Quantity.ToString ()' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  	}  	doc.Add (productsTable);  	shipmentNum++;  	if (shipmentNum < shipmentCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: foreach (var shipment in shipments) {  	var order = shipment.Order;  	if (languageId == 0) {  		lang = _languageService.GetLanguageById (order.CustomerLanguageId);  		if (lang == null || !lang.Published)  			lang = _workContext.WorkingLanguage;  	}  	var addressTable = new PdfPTable (1);  	if (lang.Rtl)  		addressTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Shipment"' lang.Id)' shipment.Id)' titleFont));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Order"' lang.Id)' order.Id)' titleFont));  	if (!order.PickUpInStore) {  		if (order.ShippingAddress == null)  			throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  		if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.ShippingAddress.Company))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Company"' lang.Id)' order.ShippingAddress.Company)' font));  		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  		if (_addressSettings.PhoneEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  		if (_addressSettings.StreetAddressEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  		if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  		if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  			addressTable.AddCell (new Paragraph (String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  		if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  			addressTable.AddCell (new Paragraph (String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	}  	addressTable.AddCell (new Paragraph (" "));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  	addressTable.AddCell (new Paragraph (" "));  	doc.Add (addressTable);  	var productsTable = new PdfPTable (3);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productsTable.SetWidths (new[] {  			20'  			20'  			60  		});  	}  	else {  		productsTable.SetWidths (new[] {  			60'  			20'  			20  		});  	}  	//product name  	var cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.ProductName"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//SKU  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.SKU"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//qty  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.QTY"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	foreach (var si in shipment.ShipmentItems) {  		var productAttribTable = new PdfPTable (1);  		if (lang.Rtl)  			productAttribTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		//product name  		var orderItem = _orderService.GetOrderItemById (si.OrderItemId);  		if (orderItem == null)  			continue;  		var p = orderItem.Product;  		string name = p.GetLocalized (x => x.Name' lang.Id);  		productAttribTable.AddCell (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			productAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (productAttribTable);  		//SKU  		var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  		cell = new PdfPCell (new Phrase (sku ?? String.Empty' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  		//qty  		cell = new PdfPCell (new Phrase (si.Quantity.ToString ()' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  	}  	doc.Add (productsTable);  	shipmentNum++;  	if (shipmentNum < shipmentCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: foreach (var shipment in shipments) {  	var order = shipment.Order;  	if (languageId == 0) {  		lang = _languageService.GetLanguageById (order.CustomerLanguageId);  		if (lang == null || !lang.Published)  			lang = _workContext.WorkingLanguage;  	}  	var addressTable = new PdfPTable (1);  	if (lang.Rtl)  		addressTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Shipment"' lang.Id)' shipment.Id)' titleFont));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Order"' lang.Id)' order.Id)' titleFont));  	if (!order.PickUpInStore) {  		if (order.ShippingAddress == null)  			throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  		if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.ShippingAddress.Company))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Company"' lang.Id)' order.ShippingAddress.Company)' font));  		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  		if (_addressSettings.PhoneEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  		if (_addressSettings.StreetAddressEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  		if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  		if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  			addressTable.AddCell (new Paragraph (String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  		if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  			addressTable.AddCell (new Paragraph (String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	}  	addressTable.AddCell (new Paragraph (" "));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  	addressTable.AddCell (new Paragraph (" "));  	doc.Add (addressTable);  	var productsTable = new PdfPTable (3);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productsTable.SetWidths (new[] {  			20'  			20'  			60  		});  	}  	else {  		productsTable.SetWidths (new[] {  			60'  			20'  			20  		});  	}  	//product name  	var cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.ProductName"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//SKU  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.SKU"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//qty  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.QTY"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	foreach (var si in shipment.ShipmentItems) {  		var productAttribTable = new PdfPTable (1);  		if (lang.Rtl)  			productAttribTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		//product name  		var orderItem = _orderService.GetOrderItemById (si.OrderItemId);  		if (orderItem == null)  			continue;  		var p = orderItem.Product;  		string name = p.GetLocalized (x => x.Name' lang.Id);  		productAttribTable.AddCell (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			productAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (productAttribTable);  		//SKU  		var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  		cell = new PdfPCell (new Phrase (sku ?? String.Empty' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  		//qty  		cell = new PdfPCell (new Phrase (si.Quantity.ToString ()' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  	}  	doc.Add (productsTable);  	shipmentNum++;  	if (shipmentNum < shipmentCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: foreach (var shipment in shipments) {  	var order = shipment.Order;  	if (languageId == 0) {  		lang = _languageService.GetLanguageById (order.CustomerLanguageId);  		if (lang == null || !lang.Published)  			lang = _workContext.WorkingLanguage;  	}  	var addressTable = new PdfPTable (1);  	if (lang.Rtl)  		addressTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Shipment"' lang.Id)' shipment.Id)' titleFont));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Order"' lang.Id)' order.Id)' titleFont));  	if (!order.PickUpInStore) {  		if (order.ShippingAddress == null)  			throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  		if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.ShippingAddress.Company))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Company"' lang.Id)' order.ShippingAddress.Company)' font));  		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  		if (_addressSettings.PhoneEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  		if (_addressSettings.StreetAddressEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  		if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  		if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  			addressTable.AddCell (new Paragraph (String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  		if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  			addressTable.AddCell (new Paragraph (String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	}  	addressTable.AddCell (new Paragraph (" "));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  	addressTable.AddCell (new Paragraph (" "));  	doc.Add (addressTable);  	var productsTable = new PdfPTable (3);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productsTable.SetWidths (new[] {  			20'  			20'  			60  		});  	}  	else {  		productsTable.SetWidths (new[] {  			60'  			20'  			20  		});  	}  	//product name  	var cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.ProductName"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//SKU  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.SKU"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//qty  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.QTY"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	foreach (var si in shipment.ShipmentItems) {  		var productAttribTable = new PdfPTable (1);  		if (lang.Rtl)  			productAttribTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		//product name  		var orderItem = _orderService.GetOrderItemById (si.OrderItemId);  		if (orderItem == null)  			continue;  		var p = orderItem.Product;  		string name = p.GetLocalized (x => x.Name' lang.Id);  		productAttribTable.AddCell (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			productAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (productAttribTable);  		//SKU  		var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  		cell = new PdfPCell (new Phrase (sku ?? String.Empty' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  		//qty  		cell = new PdfPCell (new Phrase (si.Quantity.ToString ()' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  	}  	doc.Add (productsTable);  	shipmentNum++;  	if (shipmentNum < shipmentCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: foreach (var shipment in shipments) {  	var order = shipment.Order;  	if (languageId == 0) {  		lang = _languageService.GetLanguageById (order.CustomerLanguageId);  		if (lang == null || !lang.Published)  			lang = _workContext.WorkingLanguage;  	}  	var addressTable = new PdfPTable (1);  	if (lang.Rtl)  		addressTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Shipment"' lang.Id)' shipment.Id)' titleFont));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Order"' lang.Id)' order.Id)' titleFont));  	if (!order.PickUpInStore) {  		if (order.ShippingAddress == null)  			throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  		if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.ShippingAddress.Company))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Company"' lang.Id)' order.ShippingAddress.Company)' font));  		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  		if (_addressSettings.PhoneEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  		if (_addressSettings.StreetAddressEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  		if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  		if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  			addressTable.AddCell (new Paragraph (String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  		if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  			addressTable.AddCell (new Paragraph (String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	}  	addressTable.AddCell (new Paragraph (" "));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  	addressTable.AddCell (new Paragraph (" "));  	doc.Add (addressTable);  	var productsTable = new PdfPTable (3);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productsTable.SetWidths (new[] {  			20'  			20'  			60  		});  	}  	else {  		productsTable.SetWidths (new[] {  			60'  			20'  			20  		});  	}  	//product name  	var cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.ProductName"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//SKU  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.SKU"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//qty  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.QTY"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	foreach (var si in shipment.ShipmentItems) {  		var productAttribTable = new PdfPTable (1);  		if (lang.Rtl)  			productAttribTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		//product name  		var orderItem = _orderService.GetOrderItemById (si.OrderItemId);  		if (orderItem == null)  			continue;  		var p = orderItem.Product;  		string name = p.GetLocalized (x => x.Name' lang.Id);  		productAttribTable.AddCell (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			productAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (productAttribTable);  		//SKU  		var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  		cell = new PdfPCell (new Phrase (sku ?? String.Empty' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  		//qty  		cell = new PdfPCell (new Phrase (si.Quantity.ToString ()' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  	}  	doc.Add (productsTable);  	shipmentNum++;  	if (shipmentNum < shipmentCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: foreach (var shipment in shipments) {  	var order = shipment.Order;  	if (languageId == 0) {  		lang = _languageService.GetLanguageById (order.CustomerLanguageId);  		if (lang == null || !lang.Published)  			lang = _workContext.WorkingLanguage;  	}  	var addressTable = new PdfPTable (1);  	if (lang.Rtl)  		addressTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	addressTable.DefaultCell.Border = Rectangle.NO_BORDER;  	addressTable.WidthPercentage = 100f;  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Shipment"' lang.Id)' shipment.Id)' titleFont));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Order"' lang.Id)' order.Id)' titleFont));  	if (!order.PickUpInStore) {  		if (order.ShippingAddress == null)  			throw new NopException (string.Format ("Shipping is required' but address is not available. Order ID = {0}"' order.Id));  		if (_addressSettings.CompanyEnabled && !String.IsNullOrEmpty (order.ShippingAddress.Company))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Company"' lang.Id)' order.ShippingAddress.Company)' font));  		addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Name"' lang.Id)' order.ShippingAddress.FirstName + " " + order.ShippingAddress.LastName)' font));  		if (_addressSettings.PhoneEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Phone"' lang.Id)' order.ShippingAddress.PhoneNumber)' font));  		if (_addressSettings.StreetAddressEnabled)  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address"' lang.Id)' order.ShippingAddress.Address1)' font));  		if (_addressSettings.StreetAddress2Enabled && !String.IsNullOrEmpty (order.ShippingAddress.Address2))  			addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.Address2"' lang.Id)' order.ShippingAddress.Address2)' font));  		if (_addressSettings.CityEnabled || _addressSettings.StateProvinceEnabled || _addressSettings.ZipPostalCodeEnabled)  			addressTable.AddCell (new Paragraph (String.Format ("{0}' {1} {2}"' order.ShippingAddress.City' order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.GetLocalized (x => x.Name' lang.Id) : ""' order.ShippingAddress.ZipPostalCode)' font));  		if (_addressSettings.CountryEnabled && order.ShippingAddress.Country != null)  			addressTable.AddCell (new Paragraph (String.Format ("{0}"' order.ShippingAddress.Country != null ? order.ShippingAddress.Country.GetLocalized (x => x.Name' lang.Id) : "")' font));  	}  	addressTable.AddCell (new Paragraph (" "));  	addressTable.AddCell (new Paragraph (String.Format (_localizationService.GetResource ("PDFPackagingSlip.ShippingMethod"' lang.Id)' order.ShippingMethod)' font));  	addressTable.AddCell (new Paragraph (" "));  	doc.Add (addressTable);  	var productsTable = new PdfPTable (3);  	productsTable.WidthPercentage = 100f;  	if (lang.Rtl) {  		productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productsTable.SetWidths (new[] {  			20'  			20'  			60  		});  	}  	else {  		productsTable.SetWidths (new[] {  			60'  			20'  			20  		});  	}  	//product name  	var cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.ProductName"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//SKU  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.SKU"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	//qty  	cell = new PdfPCell (new Phrase (_localizationService.GetResource ("PDFPackagingSlip.QTY"' lang.Id)' font));  	cell.BackgroundColor = BaseColor.LIGHT_GRAY;  	cell.HorizontalAlignment = Element.ALIGN_CENTER;  	productsTable.AddCell (cell);  	foreach (var si in shipment.ShipmentItems) {  		var productAttribTable = new PdfPTable (1);  		if (lang.Rtl)  			productAttribTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		productAttribTable.DefaultCell.Border = Rectangle.NO_BORDER;  		//product name  		var orderItem = _orderService.GetOrderItemById (si.OrderItemId);  		if (orderItem == null)  			continue;  		var p = orderItem.Product;  		string name = p.GetLocalized (x => x.Name' lang.Id);  		productAttribTable.AddCell (new Paragraph (name' font));  		if (!String.IsNullOrEmpty (orderItem.AttributeDescription)) {  			var attributesParagraph = new Paragraph (HtmlHelper.ConvertHtmlToPlainText (orderItem.AttributeDescription' true' true)' attributesFont);  			productAttribTable.AddCell (attributesParagraph);  		}  		productsTable.AddCell (productAttribTable);  		//SKU  		var sku = p.FormatSku (orderItem.AttributesXml' _productAttributeParser);  		cell = new PdfPCell (new Phrase (sku ?? String.Empty' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  		//qty  		cell = new PdfPCell (new Phrase (si.Quantity.ToString ()' font));  		cell.HorizontalAlignment = Element.ALIGN_CENTER;  		productsTable.AddCell (cell);  	}  	doc.Add (productsTable);  	shipmentNum++;  	if (shipmentNum < shipmentCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	productsTable.SetWidths (new[] {  		20'  		20'  		60  	});  }  else {  	productsTable.SetWidths (new[] {  		60'  		20'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	productsTable.SetWidths (new[] {  		20'  		20'  		60  	});  }  else {  	productsTable.SetWidths (new[] {  		60'  		20'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	productsTable.SetWidths (new[] {  		20'  		20'  		60  	});  }  else {  	productsTable.SetWidths (new[] {  		60'  		20'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	productsTable.SetWidths (new[] {  		20'  		20'  		60  	});  }  else {  	productsTable.SetWidths (new[] {  		60'  		20'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	productsTable.SetWidths (new[] {  		20'  		20'  		60  	});  }  else {  	productsTable.SetWidths (new[] {  		60'  		20'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: if (lang.Rtl) {  	productsTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	productsTable.SetWidths (new[] {  		20'  		20'  		60  	});  }  else {  	productsTable.SetWidths (new[] {  		60'  		20'  		20  	});  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: productsTable.SetWidths (new[] {  	20'  	20'  	60  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: productsTable.SetWidths (new[] {  	20'  	20'  	60  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: productsTable.SetWidths (new[] {  	20'  	20'  	60  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: productsTable.SetWidths (new[] {  	60'  	20'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: productsTable.SetWidths (new[] {  	60'  	20'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintPackagingSlipsToPdf,The following statement contains a magic number: productsTable.SetWidths (new[] {  	60'  	20'  	20  });  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: foreach (var product in products) {  	string productName = product.GetLocalized (x => x.Name' lang.Id);  	string productDescription = product.GetLocalized (x => x.FullDescription' lang.Id);  	var productTable = new PdfPTable (1);  	productTable.WidthPercentage = 100f;  	productTable.DefaultCell.Border = Rectangle.NO_BORDER;  	if (lang.Rtl) {  		productTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	}  	productTable.AddCell (new Paragraph (String.Format ("{0}. {1}"' productNumber' productName)' titleFont));  	productTable.AddCell (new Paragraph (" "));  	productTable.AddCell (new Paragraph (HtmlHelper.StripTags (HtmlHelper.ConvertHtmlToPlainText (productDescription' decode: true))' font));  	productTable.AddCell (new Paragraph (" "));  	if (product.ProductType == ProductType.SimpleProduct) {  		//simple product  		//render its properties such as price' weight' etc  		productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Price"' lang.Id)' product.Price.ToString ("0.00")' _currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode)' font));  		productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.SKU"' lang.Id)' product.Sku)' font));  		if (product.IsShipEnabled && product.Weight > Decimal.Zero)  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Weight"' lang.Id)' product.Weight.ToString ("0.00")' _measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).Name)' font));  		if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock)  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.StockQuantity"' lang.Id)' product.StockQuantity)' font));  		productTable.AddCell (new Paragraph (" "));  	}  	var pictures = _pictureService.GetPicturesByProductId (product.Id);  	if (pictures.Count > 0) {  		var table = new PdfPTable (2);  		table.WidthPercentage = 100f;  		if (lang.Rtl) {  			table.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		}  		for (int i = 0; i < pictures.Count; i++) {  			var pic = pictures [i];  			if (pic != null) {  				var picBinary = _pictureService.LoadPictureBinary (pic);  				if (picBinary != null && picBinary.Length > 0) {  					var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  					var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  					cell.HorizontalAlignment = Element.ALIGN_LEFT;  					cell.Border = Rectangle.NO_BORDER;  					table.AddCell (cell);  				}  			}  		}  		if (pictures.Count % 2 > 0) {  			var cell = new PdfPCell (new Phrase (" "));  			cell.Border = Rectangle.NO_BORDER;  			table.AddCell (cell);  		}  		productTable.AddCell (table);  		productTable.AddCell (new Paragraph (" "));  	}  	if (product.ProductType == ProductType.GroupedProduct) {  		//grouped product. render its associated products  		int pvNum = 1;  		foreach (var associatedProduct in _productService.GetAssociatedProducts (product.Id' showHidden: true)) {  			productTable.AddCell (new Paragraph (String.Format ("{0}-{1}. {2}"' productNumber' pvNum' associatedProduct.GetLocalized (x => x.Name' lang.Id))' font));  			productTable.AddCell (new Paragraph (" "));  			//uncomment to render associated product description  			//string apDescription = associatedProduct.GetLocalized(x => x.ShortDescription' lang.Id);  			//if (!String.IsNullOrEmpty(apDescription))  			//{  			//    productTable.AddCell(new Paragraph(HtmlHelper.StripTags(HtmlHelper.ConvertHtmlToPlainText(apDescription))' font));  			//    productTable.AddCell(new Paragraph(" "));  			//}  			//uncomment to render associated product picture  			//var apPicture = _pictureService.GetPicturesByProductId(associatedProduct.Id).FirstOrDefault();  			//if (apPicture != null)  			//{  			//    var picBinary = _pictureService.LoadPictureBinary(apPicture);  			//    if (picBinary != null && picBinary.Length > 0)  			//    {  			//        var pictureLocalPath = _pictureService.GetThumbLocalPath(apPicture' 200' false);  			//        productTable.AddCell(Image.GetInstance(pictureLocalPath));  			//    }  			//}  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Price"' lang.Id)' associatedProduct.Price.ToString ("0.00")' _currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode)' font));  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.SKU"' lang.Id)' associatedProduct.Sku)' font));  			if (associatedProduct.IsShipEnabled && associatedProduct.Weight > Decimal.Zero)  				productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Weight"' lang.Id)' associatedProduct.Weight.ToString ("0.00")' _measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).Name)' font));  			if (associatedProduct.ManageInventoryMethod == ManageInventoryMethod.ManageStock)  				productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.StockQuantity"' lang.Id)' associatedProduct.StockQuantity)' font));  			productTable.AddCell (new Paragraph (" "));  			pvNum++;  		}  	}  	doc.Add (productTable);  	productNumber++;  	if (productNumber <= prodCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: foreach (var product in products) {  	string productName = product.GetLocalized (x => x.Name' lang.Id);  	string productDescription = product.GetLocalized (x => x.FullDescription' lang.Id);  	var productTable = new PdfPTable (1);  	productTable.WidthPercentage = 100f;  	productTable.DefaultCell.Border = Rectangle.NO_BORDER;  	if (lang.Rtl) {  		productTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	}  	productTable.AddCell (new Paragraph (String.Format ("{0}. {1}"' productNumber' productName)' titleFont));  	productTable.AddCell (new Paragraph (" "));  	productTable.AddCell (new Paragraph (HtmlHelper.StripTags (HtmlHelper.ConvertHtmlToPlainText (productDescription' decode: true))' font));  	productTable.AddCell (new Paragraph (" "));  	if (product.ProductType == ProductType.SimpleProduct) {  		//simple product  		//render its properties such as price' weight' etc  		productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Price"' lang.Id)' product.Price.ToString ("0.00")' _currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode)' font));  		productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.SKU"' lang.Id)' product.Sku)' font));  		if (product.IsShipEnabled && product.Weight > Decimal.Zero)  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Weight"' lang.Id)' product.Weight.ToString ("0.00")' _measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).Name)' font));  		if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock)  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.StockQuantity"' lang.Id)' product.StockQuantity)' font));  		productTable.AddCell (new Paragraph (" "));  	}  	var pictures = _pictureService.GetPicturesByProductId (product.Id);  	if (pictures.Count > 0) {  		var table = new PdfPTable (2);  		table.WidthPercentage = 100f;  		if (lang.Rtl) {  			table.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		}  		for (int i = 0; i < pictures.Count; i++) {  			var pic = pictures [i];  			if (pic != null) {  				var picBinary = _pictureService.LoadPictureBinary (pic);  				if (picBinary != null && picBinary.Length > 0) {  					var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  					var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  					cell.HorizontalAlignment = Element.ALIGN_LEFT;  					cell.Border = Rectangle.NO_BORDER;  					table.AddCell (cell);  				}  			}  		}  		if (pictures.Count % 2 > 0) {  			var cell = new PdfPCell (new Phrase (" "));  			cell.Border = Rectangle.NO_BORDER;  			table.AddCell (cell);  		}  		productTable.AddCell (table);  		productTable.AddCell (new Paragraph (" "));  	}  	if (product.ProductType == ProductType.GroupedProduct) {  		//grouped product. render its associated products  		int pvNum = 1;  		foreach (var associatedProduct in _productService.GetAssociatedProducts (product.Id' showHidden: true)) {  			productTable.AddCell (new Paragraph (String.Format ("{0}-{1}. {2}"' productNumber' pvNum' associatedProduct.GetLocalized (x => x.Name' lang.Id))' font));  			productTable.AddCell (new Paragraph (" "));  			//uncomment to render associated product description  			//string apDescription = associatedProduct.GetLocalized(x => x.ShortDescription' lang.Id);  			//if (!String.IsNullOrEmpty(apDescription))  			//{  			//    productTable.AddCell(new Paragraph(HtmlHelper.StripTags(HtmlHelper.ConvertHtmlToPlainText(apDescription))' font));  			//    productTable.AddCell(new Paragraph(" "));  			//}  			//uncomment to render associated product picture  			//var apPicture = _pictureService.GetPicturesByProductId(associatedProduct.Id).FirstOrDefault();  			//if (apPicture != null)  			//{  			//    var picBinary = _pictureService.LoadPictureBinary(apPicture);  			//    if (picBinary != null && picBinary.Length > 0)  			//    {  			//        var pictureLocalPath = _pictureService.GetThumbLocalPath(apPicture' 200' false);  			//        productTable.AddCell(Image.GetInstance(pictureLocalPath));  			//    }  			//}  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Price"' lang.Id)' associatedProduct.Price.ToString ("0.00")' _currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode)' font));  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.SKU"' lang.Id)' associatedProduct.Sku)' font));  			if (associatedProduct.IsShipEnabled && associatedProduct.Weight > Decimal.Zero)  				productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Weight"' lang.Id)' associatedProduct.Weight.ToString ("0.00")' _measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).Name)' font));  			if (associatedProduct.ManageInventoryMethod == ManageInventoryMethod.ManageStock)  				productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.StockQuantity"' lang.Id)' associatedProduct.StockQuantity)' font));  			productTable.AddCell (new Paragraph (" "));  			pvNum++;  		}  	}  	doc.Add (productTable);  	productNumber++;  	if (productNumber <= prodCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: foreach (var product in products) {  	string productName = product.GetLocalized (x => x.Name' lang.Id);  	string productDescription = product.GetLocalized (x => x.FullDescription' lang.Id);  	var productTable = new PdfPTable (1);  	productTable.WidthPercentage = 100f;  	productTable.DefaultCell.Border = Rectangle.NO_BORDER;  	if (lang.Rtl) {  		productTable.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	}  	productTable.AddCell (new Paragraph (String.Format ("{0}. {1}"' productNumber' productName)' titleFont));  	productTable.AddCell (new Paragraph (" "));  	productTable.AddCell (new Paragraph (HtmlHelper.StripTags (HtmlHelper.ConvertHtmlToPlainText (productDescription' decode: true))' font));  	productTable.AddCell (new Paragraph (" "));  	if (product.ProductType == ProductType.SimpleProduct) {  		//simple product  		//render its properties such as price' weight' etc  		productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Price"' lang.Id)' product.Price.ToString ("0.00")' _currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode)' font));  		productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.SKU"' lang.Id)' product.Sku)' font));  		if (product.IsShipEnabled && product.Weight > Decimal.Zero)  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Weight"' lang.Id)' product.Weight.ToString ("0.00")' _measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).Name)' font));  		if (product.ManageInventoryMethod == ManageInventoryMethod.ManageStock)  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.StockQuantity"' lang.Id)' product.StockQuantity)' font));  		productTable.AddCell (new Paragraph (" "));  	}  	var pictures = _pictureService.GetPicturesByProductId (product.Id);  	if (pictures.Count > 0) {  		var table = new PdfPTable (2);  		table.WidthPercentage = 100f;  		if (lang.Rtl) {  			table.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  		}  		for (int i = 0; i < pictures.Count; i++) {  			var pic = pictures [i];  			if (pic != null) {  				var picBinary = _pictureService.LoadPictureBinary (pic);  				if (picBinary != null && picBinary.Length > 0) {  					var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  					var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  					cell.HorizontalAlignment = Element.ALIGN_LEFT;  					cell.Border = Rectangle.NO_BORDER;  					table.AddCell (cell);  				}  			}  		}  		if (pictures.Count % 2 > 0) {  			var cell = new PdfPCell (new Phrase (" "));  			cell.Border = Rectangle.NO_BORDER;  			table.AddCell (cell);  		}  		productTable.AddCell (table);  		productTable.AddCell (new Paragraph (" "));  	}  	if (product.ProductType == ProductType.GroupedProduct) {  		//grouped product. render its associated products  		int pvNum = 1;  		foreach (var associatedProduct in _productService.GetAssociatedProducts (product.Id' showHidden: true)) {  			productTable.AddCell (new Paragraph (String.Format ("{0}-{1}. {2}"' productNumber' pvNum' associatedProduct.GetLocalized (x => x.Name' lang.Id))' font));  			productTable.AddCell (new Paragraph (" "));  			//uncomment to render associated product description  			//string apDescription = associatedProduct.GetLocalized(x => x.ShortDescription' lang.Id);  			//if (!String.IsNullOrEmpty(apDescription))  			//{  			//    productTable.AddCell(new Paragraph(HtmlHelper.StripTags(HtmlHelper.ConvertHtmlToPlainText(apDescription))' font));  			//    productTable.AddCell(new Paragraph(" "));  			//}  			//uncomment to render associated product picture  			//var apPicture = _pictureService.GetPicturesByProductId(associatedProduct.Id).FirstOrDefault();  			//if (apPicture != null)  			//{  			//    var picBinary = _pictureService.LoadPictureBinary(apPicture);  			//    if (picBinary != null && picBinary.Length > 0)  			//    {  			//        var pictureLocalPath = _pictureService.GetThumbLocalPath(apPicture' 200' false);  			//        productTable.AddCell(Image.GetInstance(pictureLocalPath));  			//    }  			//}  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Price"' lang.Id)' associatedProduct.Price.ToString ("0.00")' _currencyService.GetCurrencyById (_currencySettings.PrimaryStoreCurrencyId).CurrencyCode)' font));  			productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.SKU"' lang.Id)' associatedProduct.Sku)' font));  			if (associatedProduct.IsShipEnabled && associatedProduct.Weight > Decimal.Zero)  				productTable.AddCell (new Paragraph (String.Format ("{0}: {1} {2}"' _localizationService.GetResource ("PDFProductCatalog.Weight"' lang.Id)' associatedProduct.Weight.ToString ("0.00")' _measureService.GetMeasureWeightById (_measureSettings.BaseWeightId).Name)' font));  			if (associatedProduct.ManageInventoryMethod == ManageInventoryMethod.ManageStock)  				productTable.AddCell (new Paragraph (String.Format ("{0}: {1}"' _localizationService.GetResource ("PDFProductCatalog.StockQuantity"' lang.Id)' associatedProduct.StockQuantity)' font));  			productTable.AddCell (new Paragraph (" "));  			pvNum++;  		}  	}  	doc.Add (productTable);  	productNumber++;  	if (productNumber <= prodCount) {  		doc.NewPage ();  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: if (pictures.Count > 0) {  	var table = new PdfPTable (2);  	table.WidthPercentage = 100f;  	if (lang.Rtl) {  		table.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	}  	for (int i = 0; i < pictures.Count; i++) {  		var pic = pictures [i];  		if (pic != null) {  			var picBinary = _pictureService.LoadPictureBinary (pic);  			if (picBinary != null && picBinary.Length > 0) {  				var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  				var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  				cell.HorizontalAlignment = Element.ALIGN_LEFT;  				cell.Border = Rectangle.NO_BORDER;  				table.AddCell (cell);  			}  		}  	}  	if (pictures.Count % 2 > 0) {  		var cell = new PdfPCell (new Phrase (" "));  		cell.Border = Rectangle.NO_BORDER;  		table.AddCell (cell);  	}  	productTable.AddCell (table);  	productTable.AddCell (new Paragraph (" "));  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: if (pictures.Count > 0) {  	var table = new PdfPTable (2);  	table.WidthPercentage = 100f;  	if (lang.Rtl) {  		table.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	}  	for (int i = 0; i < pictures.Count; i++) {  		var pic = pictures [i];  		if (pic != null) {  			var picBinary = _pictureService.LoadPictureBinary (pic);  			if (picBinary != null && picBinary.Length > 0) {  				var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  				var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  				cell.HorizontalAlignment = Element.ALIGN_LEFT;  				cell.Border = Rectangle.NO_BORDER;  				table.AddCell (cell);  			}  		}  	}  	if (pictures.Count % 2 > 0) {  		var cell = new PdfPCell (new Phrase (" "));  		cell.Border = Rectangle.NO_BORDER;  		table.AddCell (cell);  	}  	productTable.AddCell (table);  	productTable.AddCell (new Paragraph (" "));  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: if (pictures.Count > 0) {  	var table = new PdfPTable (2);  	table.WidthPercentage = 100f;  	if (lang.Rtl) {  		table.RunDirection = PdfWriter.RUN_DIRECTION_RTL;  	}  	for (int i = 0; i < pictures.Count; i++) {  		var pic = pictures [i];  		if (pic != null) {  			var picBinary = _pictureService.LoadPictureBinary (pic);  			if (picBinary != null && picBinary.Length > 0) {  				var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  				var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  				cell.HorizontalAlignment = Element.ALIGN_LEFT;  				cell.Border = Rectangle.NO_BORDER;  				table.AddCell (cell);  			}  		}  	}  	if (pictures.Count % 2 > 0) {  		var cell = new PdfPCell (new Phrase (" "));  		cell.Border = Rectangle.NO_BORDER;  		table.AddCell (cell);  	}  	productTable.AddCell (table);  	productTable.AddCell (new Paragraph (" "));  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: for (int i = 0; i < pictures.Count; i++) {  	var pic = pictures [i];  	if (pic != null) {  		var picBinary = _pictureService.LoadPictureBinary (pic);  		if (picBinary != null && picBinary.Length > 0) {  			var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  			var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  			cell.HorizontalAlignment = Element.ALIGN_LEFT;  			cell.Border = Rectangle.NO_BORDER;  			table.AddCell (cell);  		}  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: if (pic != null) {  	var picBinary = _pictureService.LoadPictureBinary (pic);  	if (picBinary != null && picBinary.Length > 0) {  		var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  		var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  		cell.HorizontalAlignment = Element.ALIGN_LEFT;  		cell.Border = Rectangle.NO_BORDER;  		table.AddCell (cell);  	}  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: if (picBinary != null && picBinary.Length > 0) {  	var pictureLocalPath = _pictureService.GetThumbLocalPath (pic' 200' false);  	var cell = new PdfPCell (Image.GetInstance (pictureLocalPath));  	cell.HorizontalAlignment = Element.ALIGN_LEFT;  	cell.Border = Rectangle.NO_BORDER;  	table.AddCell (cell);  }  
Magic Number,Nop.Services.Common,PdfService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Common\PdfService.cs,PrintProductsToPdf,The following statement contains a magic number: if (pictures.Count % 2 > 0) {  	var cell = new PdfPCell (new Phrase (" "));  	cell.Border = Rectangle.NO_BORDER;  	table.AddCell (cell);  }  
Magic Number,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,RegisterCustomer,The following statement contains a magic number: switch (request.PasswordFormat) {  case PasswordFormat.Clear:  	{  		request.Customer.Password = request.Password;  	}  	break;  case PasswordFormat.Encrypted:  	{  		request.Customer.Password = _encryptionService.EncryptText (request.Password);  	}  	break;  case PasswordFormat.Hashed:  	{  		string saltKey = _encryptionService.CreateSaltKey (5);  		request.Customer.PasswordSalt = saltKey;  		request.Customer.Password = _encryptionService.CreatePasswordHash (request.Password' saltKey' _customerSettings.HashedPasswordFormat);  	}  	break;  default:  	break;  }  
Magic Number,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,ChangePassword,The following statement contains a magic number: if (requestIsValid) {  	switch (request.NewPasswordFormat) {  	case PasswordFormat.Clear:  		{  			customer.Password = request.NewPassword;  		}  		break;  	case PasswordFormat.Encrypted:  		{  			customer.Password = _encryptionService.EncryptText (request.NewPassword);  		}  		break;  	case PasswordFormat.Hashed:  		{  			string saltKey = _encryptionService.CreateSaltKey (5);  			customer.PasswordSalt = saltKey;  			customer.Password = _encryptionService.CreatePasswordHash (request.NewPassword' saltKey' _customerSettings.HashedPasswordFormat);  		}  		break;  	default:  		break;  	}  	customer.PasswordFormat = request.NewPasswordFormat;  	_customerService.UpdateCustomer (customer);  }  
Magic Number,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,ChangePassword,The following statement contains a magic number: switch (request.NewPasswordFormat) {  case PasswordFormat.Clear:  	{  		customer.Password = request.NewPassword;  	}  	break;  case PasswordFormat.Encrypted:  	{  		customer.Password = _encryptionService.EncryptText (request.NewPassword);  	}  	break;  case PasswordFormat.Hashed:  	{  		string saltKey = _encryptionService.CreateSaltKey (5);  		customer.PasswordSalt = saltKey;  		customer.Password = _encryptionService.CreatePasswordHash (request.NewPassword' saltKey' _customerSettings.HashedPasswordFormat);  	}  	break;  default:  	break;  }  
Magic Number,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,SetEmail,The following statement contains a magic number: if (newEmail.Length > 100)  	throw new NopException (_localizationService.GetResource ("Account.EmailUsernameErrors.EmailTooLong"));  
Magic Number,Nop.Services.Customers,CustomerRegistrationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerRegistrationService.cs,SetUsername,The following statement contains a magic number: if (newUsername.Length > 100)  	throw new NopException (_localizationService.GetResource ("Account.EmailUsernameErrors.UsernameTooLong"));  
Magic Number,Nop.Services.Customers,CustomerReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerReportService.cs,GetBestCustomersReport,The following statement contains a magic number: switch (orderBy) {  case 1:  	{  		query2 = query2.OrderByDescending (x => x.OrderTotal);  	}  	break;  case 2:  	{  		query2 = query2.OrderByDescending (x => x.OrderCount);  	}  	break;  default:  	throw new ArgumentException ("Wrong orderBy parameter"' "orderBy");  }  
Magic Number,Nop.Services.Customers,CustomerReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerReportService.cs,GetBestCustomersReport,The following statement contains a magic number: query2 = query2.Take (20);  
Magic Number,Nop.Services.Customers,DeleteGuestsTask,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\DeleteGuestsTask.cs,Execute,The following statement contains a magic number: _customerService.DeleteGuestCustomers (null' DateTime.UtcNow.AddMinutes (-olderThanMinutes)' true' 1000);  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: if (dayOfBirth > 0 && monthOfBirth > 0) {  	//both are specified  	string dateOfBirthStr = monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-" + dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 5  	//dateOfBirthStr.Length = 5  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (5' 5) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (dayOfBirth > 0) {  	//only day is specified  	string dateOfBirthStr = dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 8  	//dateOfBirthStr.Length = 2  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (monthOfBirth > 0) {  	//only month is specified  	string dateOfBirthStr = "-" + monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-";  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Contains (dateOfBirthStr))).Select (z => z.Customer);  }  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: if (dayOfBirth > 0 && monthOfBirth > 0) {  	//both are specified  	string dateOfBirthStr = monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-" + dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 5  	//dateOfBirthStr.Length = 5  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (5' 5) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (dayOfBirth > 0) {  	//only day is specified  	string dateOfBirthStr = dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 8  	//dateOfBirthStr.Length = 2  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (monthOfBirth > 0) {  	//only month is specified  	string dateOfBirthStr = "-" + monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-";  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Contains (dateOfBirthStr))).Select (z => z.Customer);  }  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: if (dayOfBirth > 0 && monthOfBirth > 0) {  	//both are specified  	string dateOfBirthStr = monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-" + dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 5  	//dateOfBirthStr.Length = 5  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (5' 5) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (dayOfBirth > 0) {  	//only day is specified  	string dateOfBirthStr = dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 8  	//dateOfBirthStr.Length = 2  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (monthOfBirth > 0) {  	//only month is specified  	string dateOfBirthStr = "-" + monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-";  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Contains (dateOfBirthStr))).Select (z => z.Customer);  }  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: if (dayOfBirth > 0 && monthOfBirth > 0) {  	//both are specified  	string dateOfBirthStr = monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-" + dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 5  	//dateOfBirthStr.Length = 5  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (5' 5) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (dayOfBirth > 0) {  	//only day is specified  	string dateOfBirthStr = dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 8  	//dateOfBirthStr.Length = 2  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (monthOfBirth > 0) {  	//only month is specified  	string dateOfBirthStr = "-" + monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-";  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Contains (dateOfBirthStr))).Select (z => z.Customer);  }  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  	Customer = x'  	Attribute = y  }).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (5' 5) == dateOfBirthStr)).Select (z => z.Customer);  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  	Customer = x'  	Attribute = y  }).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (5' 5) == dateOfBirthStr)).Select (z => z.Customer);  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: if (dayOfBirth > 0) {  	//only day is specified  	string dateOfBirthStr = dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 8  	//dateOfBirthStr.Length = 2  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (monthOfBirth > 0) {  	//only month is specified  	string dateOfBirthStr = "-" + monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-";  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Contains (dateOfBirthStr))).Select (z => z.Customer);  }  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: if (dayOfBirth > 0) {  	//only day is specified  	string dateOfBirthStr = dayOfBirth.ToString ("00"' CultureInfo.InvariantCulture);  	//EndsWith is not supported by SQL Server Compact  	//so let's use the following workaround http://social.msdn.microsoft.com/Forums/is/sqlce/thread/0f810be1-2132-4c59-b9ae-8f7013c0cc00  	//we also cannot use Length function in SQL Server Compact (not supported in this context)  	//z.Attribute.Value.Length - dateOfBirthStr.Length = 8  	//dateOfBirthStr.Length = 2  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer);  }  else if (monthOfBirth > 0) {  	//only month is specified  	string dateOfBirthStr = "-" + monthOfBirth.ToString ("00"' CultureInfo.InvariantCulture) + "-";  	query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  		Customer = x'  		Attribute = y  	}).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Contains (dateOfBirthStr))).Select (z => z.Customer);  }  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  	Customer = x'  	Attribute = y  }).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer);  
Magic Number,Nop.Services.Customers,CustomerService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Customers\CustomerService.cs,GetAllCustomers,The following statement contains a magic number: query = query.Join (_gaRepository.Table' x => x.Id' y => y.EntityId' (x' y) => new {  	Customer = x'  	Attribute = y  }).Where ((z => z.Attribute.KeyGroup == "Customer" && z.Attribute.Key == SystemCustomerAttributeNames.DateOfBirth && z.Attribute.Value.Substring (8' 2) == dateOfBirthStr)).Select (z => z.Customer);  
Magic Number,Nop.Services.Logging,CustomerActivityService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Logging\CustomerActivityService.cs,InsertActivity,The following statement contains a magic number: comment = CommonHelper.EnsureMaximumLength (comment' 4000);  
Magic Number,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,InsertPicture,The following statement contains a magic number: mimeType = CommonHelper.EnsureMaximumLength (mimeType' 20);  
Magic Number,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,InsertPicture,The following statement contains a magic number: seoFilename = CommonHelper.EnsureMaximumLength (seoFilename' 100);  
Magic Number,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,UpdatePicture,The following statement contains a magic number: mimeType = CommonHelper.EnsureMaximumLength (mimeType' 20);  
Magic Number,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,UpdatePicture,The following statement contains a magic number: seoFilename = CommonHelper.EnsureMaximumLength (seoFilename' 100);  
Magic Number,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetDimensions,The following statement contains a magic number: if (_shippingSettings.UseCubeRootMethod) {  	//cube root of volume  	decimal totalVolume = 0;  	decimal maxProductWidth = 0;  	decimal maxProductLength = 0;  	decimal maxProductHeight = 0;  	foreach (var shoppingCartItem in cart) {  		var product = shoppingCartItem.Product;  		if (product != null) {  			var productWidth = product.Width;  			var productLength = product.Length;  			var productHeight = product.Height;  			//attributes  			if (!String.IsNullOrEmpty (shoppingCartItem.AttributesXml)) {  				//bundled products (associated attributes)  				var pvaValues = _productAttributeParser.ParseProductVariantAttributeValues (shoppingCartItem.AttributesXml).Where (x => x.AttributeValueType == AttributeValueType.AssociatedToProduct).ToList ();  				foreach (var pvaValue in pvaValues) {  					var associatedProduct = _productService.GetProductById (pvaValue.AssociatedProductId);  					if (associatedProduct != null && associatedProduct.IsShipEnabled) {  						productWidth += associatedProduct.Width * pvaValue.Quantity;  						productLength += associatedProduct.Length * pvaValue.Quantity;  						productHeight += associatedProduct.Height * pvaValue.Quantity;  					}  				}  			}  			totalVolume += shoppingCartItem.Quantity * productHeight * productWidth * productLength;  			if (productWidth > maxProductWidth)  				maxProductWidth = productWidth;  			if (productLength > maxProductLength)  				maxProductLength = productLength;  			if (productHeight > maxProductHeight)  				maxProductHeight = productHeight;  		}  	}  	decimal dimension = Convert.ToDecimal (Math.Pow (Convert.ToDouble (totalVolume)' (double)(1.0 / 3.0)));  	length = width = height = dimension;  	//sometimes we have products with sizes like 1x1x20  	//that's why let's ensure that a maximum dimension is always preserved  	//otherwise' shipping rate computation methods can return low rates  	if (width < maxProductWidth)  		width = maxProductWidth;  	if (length < maxProductLength)  		length = maxProductLength;  	if (height < maxProductHeight)  		height = maxProductHeight;  }  else {  	//summarize all values (very inaccurate with multiple items)  	width = length = height = decimal.Zero;  	foreach (var shoppingCartItem in cart) {  		var product = shoppingCartItem.Product;  		if (product != null) {  			width += product.Width * shoppingCartItem.Quantity;  			length += product.Length * shoppingCartItem.Quantity;  			height += product.Height * shoppingCartItem.Quantity;  			//attributes  			if (!String.IsNullOrEmpty (shoppingCartItem.AttributesXml)) {  				//bundled products (associated attributes)  				var pvaValues = _productAttributeParser.ParseProductVariantAttributeValues (shoppingCartItem.AttributesXml).Where (x => x.AttributeValueType == AttributeValueType.AssociatedToProduct).ToList ();  				foreach (var pvaValue in pvaValues) {  					var associatedProduct = _productService.GetProductById (pvaValue.AssociatedProductId);  					if (associatedProduct != null && associatedProduct.IsShipEnabled) {  						width += associatedProduct.Width * pvaValue.Quantity;  						length += associatedProduct.Length * pvaValue.Quantity;  						height += associatedProduct.Height * pvaValue.Quantity;  					}  				}  			}  		}  	}  }  
Magic Number,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The following statement contains a magic number: foreach (var srcm in shippingRateComputationMethods) {  	//request shipping options (separately for each package-request)  	IList<ShippingOption> srcmShippingOptions = null;  	foreach (var shippingOptionRequest in shippingOptionRequests) {  		var getShippingOptionResponse = srcm.GetShippingOptions (shippingOptionRequest);  		if (getShippingOptionResponse.Success) {  			//success  			if (srcmShippingOptions == null) {  				//first shipping option request  				srcmShippingOptions = getShippingOptionResponse.ShippingOptions;  			}  			else {  				//get shipping options which already exist for prior requested packages for this scrm (i.e. common options)  				srcmShippingOptions = srcmShippingOptions.Where (existingso => getShippingOptionResponse.ShippingOptions.Any (newso => newso.Name == existingso.Name)).ToList ();  				//and sum the rates  				foreach (var existingso in srcmShippingOptions) {  					existingso.Rate += getShippingOptionResponse.ShippingOptions.First (newso => newso.Name == existingso.Name).Rate;  				}  			}  		}  		else {  			//errors  			foreach (string error in getShippingOptionResponse.Errors) {  				result.AddError (error);  				_logger.Warning (string.Format ("Shipping ({0}). {1}"' srcm.PluginDescriptor.FriendlyName' error));  			}  			//clear the shipping options in this case  			srcmShippingOptions = new List<ShippingOption> ();  			break;  		}  	}  	// add this scrm's options to the result  	if (srcmShippingOptions != null) {  		foreach (var so in srcmShippingOptions) {  			so.ShippingRateComputationMethodSystemName = srcm.PluginDescriptor.SystemName;  			if (_shoppingCartSettings.RoundPricesDuringCalculation)  				so.Rate = Math.Round (so.Rate' 2);  			result.ShippingOptions.Add (so);  		}  	}  }  
Magic Number,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The following statement contains a magic number: if (srcmShippingOptions != null) {  	foreach (var so in srcmShippingOptions) {  		so.ShippingRateComputationMethodSystemName = srcm.PluginDescriptor.SystemName;  		if (_shoppingCartSettings.RoundPricesDuringCalculation)  			so.Rate = Math.Round (so.Rate' 2);  		result.ShippingOptions.Add (so);  	}  }  
Magic Number,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The following statement contains a magic number: foreach (var so in srcmShippingOptions) {  	so.ShippingRateComputationMethodSystemName = srcm.PluginDescriptor.SystemName;  	if (_shoppingCartSettings.RoundPricesDuringCalculation)  		so.Rate = Math.Round (so.Rate' 2);  	result.ShippingOptions.Add (so);  }  
Magic Number,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	so.Rate = Math.Round (so.Rate' 2);  
Magic Number,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShippingOptions,The following statement contains a magic number: so.Rate = Math.Round (so.Rate' 2);  
Magic Number,Nop.Services.Directory,MeasureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\MeasureService.cs,ConvertDimension,The following statement contains a magic number: if (round)  	result = Math.Round (result' 2);  
Magic Number,Nop.Services.Directory,MeasureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\MeasureService.cs,ConvertDimension,The following statement contains a magic number: result = Math.Round (result' 2);  
Magic Number,Nop.Services.Directory,MeasureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\MeasureService.cs,ConvertWeight,The following statement contains a magic number: if (round)  	result = Math.Round (result' 2);  
Magic Number,Nop.Services.Directory,MeasureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Directory\MeasureService.cs,ConvertWeight,The following statement contains a magic number: result = Math.Round (result' 2);  
Magic Number,Nop.Services.Forums,ForumService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Forums\ForumService.cs,InsertPost,The following statement contains a magic number: if (sendNotifications) {  	var forum = forumTopic.Forum;  	var subscriptions = GetAllSubscriptions (0' 0' forumTopic.Id' 0' int.MaxValue);  	var languageId = _workContext.WorkingLanguage.Id;  	int friendlyTopicPageIndex = CalculateTopicPageIndex (forumPost.TopicId' _forumSettings.PostsPageSize > 0 ? _forumSettings.PostsPageSize : 10' forumPost.Id) + 1;  	foreach (ForumSubscription subscription in subscriptions) {  		if (subscription.CustomerId == forumPost.CustomerId) {  			continue;  		}  		if (!String.IsNullOrEmpty (subscription.Customer.Email)) {  			_workflowMessageService.SendNewForumPostMessage (subscription.Customer' forumPost' forumTopic' forum' friendlyTopicPageIndex' languageId);  		}  	}  }  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new AdminAreaSettings () {  	DefaultGridPageSize = 15'  	GridPageSizes = "10' 15' 20' 50' 100"'  	DisplayProductPictures = true'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CatalogSettings () {  	ShowProductSku = false'  	ShowManufacturerPartNumber = false'  	ShowGtin = false'  	ShowFreeShippingNotification = true'  	AllowProductSorting = true'  	AllowProductViewModeChanging = true'  	DefaultViewMode = "grid"'  	ShowProductsFromSubcategories = false'  	ShowCategoryProductNumber = false'  	ShowCategoryProductNumberIncludingSubcategories = false'  	CategoryBreadcrumbEnabled = true'  	ShowShareButton = true'  	PageShareCode = "<!-- AddThis Button BEGIN --><div class=\"addthis_toolbox addthis_default_style \"><a class=\"addthis_button_preferred_1\"></a><a class=\"addthis_button_preferred_2\"></a><a class=\"addthis_button_preferred_3\"></a><a class=\"addthis_button_preferred_4\"></a><a class=\"addthis_button_compact\"></a><a class=\"addthis_counter addthis_bubble_style\"></a></div><script type=\"text/javascript\" src=\"http://s7.addthis.com/js/250/addthis_widget.js#pubid=nopsolutions\"></script><!-- AddThis Button END -->"'  	ProductReviewsMustBeApproved = false'  	DefaultProductRatingValue = 5'  	AllowAnonymousUsersToReviewProduct = false'  	NotifyStoreOwnerAboutNewProductReviews = false'  	EmailAFriendEnabled = true'  	AllowAnonymousUsersToEmailAFriend = false'  	RecentlyViewedProductsNumber = 4'  	RecentlyViewedProductsEnabled = true'  	RecentlyAddedProductsNumber = 8'  	RecentlyAddedProductsEnabled = true'  	CompareProductsEnabled = true'  	CompareProductsNumber = 4'  	ProductSearchAutoCompleteEnabled = true'  	ProductSearchAutoCompleteNumberOfProducts = 10'  	ProductSearchTermMinimumLength = 3'  	ShowProductImagesInSearchAutoComplete = false'  	ShowBestsellersOnHomepage = false'  	NumberOfBestsellersOnHomepage = 3'  	SearchPageProductsPerPage = 6'  	SearchPageAllowCustomersToSelectPageSize = true'  	SearchPagePageSizeOptions = "8' 4' 12"'  	ProductsAlsoPurchasedEnabled = true'  	ProductsAlsoPurchasedNumber = 3'  	EnableDynamicPriceUpdate = false'  	DynamicPriceUpdateAjax = false'  	NumberOfProductTags = 15'  	ProductsByTagPageSize = 4'  	IncludeShortDescriptionInCompareProducts = false'  	IncludeFullDescriptionInCompareProducts = false'  	IncludeFeaturedProductsInNormalLists = false'  	DisplayTierPricesWithDiscounts = true'  	IgnoreDiscounts = false'  	IgnoreFeaturedProducts = false'  	IgnoreAcl = false'  	IgnoreStoreLimitations = false'  	CacheProductPrices = false'  	DefaultCategoryPageSizeOptions = "8' 4' 12"'  	DefaultManufacturerPageSizeOptions = "8' 4' 12"'  	ProductsByTagAllowCustomersToSelectPageSize = true'  	ProductsByTagPageSizeOptions = "8' 4' 12"'  	MaximumBackInStockSubscriptions = 200'  	TopCategoryMenuSubcategoryLevelsToDisplay = 1'  	ManufacturersBlockItemsToDisplay = 5'  	DisplayTaxShippingInfoFooter = false'  	DisplayTaxShippingInfoProductDetailsPage = false'  	DisplayTaxShippingInfoProductBoxes = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CustomerSettings () {  	UsernamesEnabled = false'  	CheckUsernameAvailabilityEnabled = false'  	AllowUsersToChangeUsernames = false'  	DefaultPasswordFormat = PasswordFormat.Hashed'  	HashedPasswordFormat = "SHA1"'  	PasswordMinLength = 6'  	UserRegistrationType = UserRegistrationType.Standard'  	AllowCustomersToUploadAvatars = false'  	AvatarMaximumSizeBytes = 20000'  	DefaultAvatarEnabled = true'  	ShowCustomersLocation = false'  	ShowCustomersJoinDate = false'  	AllowViewingProfiles = false'  	NotifyNewCustomerRegistration = false'  	HideDownloadableProductsTab = false'  	HideBackInStockSubscriptionsTab = false'  	DownloadableProductsValidateUser = false'  	CustomerNameFormat = CustomerNameFormat.ShowFirstName'  	GenderEnabled = true'  	DateOfBirthEnabled = true'  	CompanyEnabled = true'  	StreetAddressEnabled = false'  	StreetAddress2Enabled = false'  	ZipPostalCodeEnabled = false'  	CityEnabled = false'  	CountryEnabled = false'  	StateProvinceEnabled = false'  	PhoneEnabled = false'  	FaxEnabled = false'  	AcceptPrivacyPolicyEnabled = false'  	NewsletterEnabled = true'  	NewsletterTickedByDefault = true'  	HideNewsletterBlock = false'  	OnlineCustomerMinutes = 20'  	StoreLastVisitedPage = false'  	SuffixDeletedCustomers = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CustomerSettings () {  	UsernamesEnabled = false'  	CheckUsernameAvailabilityEnabled = false'  	AllowUsersToChangeUsernames = false'  	DefaultPasswordFormat = PasswordFormat.Hashed'  	HashedPasswordFormat = "SHA1"'  	PasswordMinLength = 6'  	UserRegistrationType = UserRegistrationType.Standard'  	AllowCustomersToUploadAvatars = false'  	AvatarMaximumSizeBytes = 20000'  	DefaultAvatarEnabled = true'  	ShowCustomersLocation = false'  	ShowCustomersJoinDate = false'  	AllowViewingProfiles = false'  	NotifyNewCustomerRegistration = false'  	HideDownloadableProductsTab = false'  	HideBackInStockSubscriptionsTab = false'  	DownloadableProductsValidateUser = false'  	CustomerNameFormat = CustomerNameFormat.ShowFirstName'  	GenderEnabled = true'  	DateOfBirthEnabled = true'  	CompanyEnabled = true'  	StreetAddressEnabled = false'  	StreetAddress2Enabled = false'  	ZipPostalCodeEnabled = false'  	CityEnabled = false'  	CountryEnabled = false'  	StateProvinceEnabled = false'  	PhoneEnabled = false'  	FaxEnabled = false'  	AcceptPrivacyPolicyEnabled = false'  	NewsletterEnabled = true'  	NewsletterTickedByDefault = true'  	HideNewsletterBlock = false'  	OnlineCustomerMinutes = 20'  	StoreLastVisitedPage = false'  	SuffixDeletedCustomers = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new CustomerSettings () {  	UsernamesEnabled = false'  	CheckUsernameAvailabilityEnabled = false'  	AllowUsersToChangeUsernames = false'  	DefaultPasswordFormat = PasswordFormat.Hashed'  	HashedPasswordFormat = "SHA1"'  	PasswordMinLength = 6'  	UserRegistrationType = UserRegistrationType.Standard'  	AllowCustomersToUploadAvatars = false'  	AvatarMaximumSizeBytes = 20000'  	DefaultAvatarEnabled = true'  	ShowCustomersLocation = false'  	ShowCustomersJoinDate = false'  	AllowViewingProfiles = false'  	NotifyNewCustomerRegistration = false'  	HideDownloadableProductsTab = false'  	HideBackInStockSubscriptionsTab = false'  	DownloadableProductsValidateUser = false'  	CustomerNameFormat = CustomerNameFormat.ShowFirstName'  	GenderEnabled = true'  	DateOfBirthEnabled = true'  	CompanyEnabled = true'  	StreetAddressEnabled = false'  	StreetAddress2Enabled = false'  	ZipPostalCodeEnabled = false'  	CityEnabled = false'  	CountryEnabled = false'  	StateProvinceEnabled = false'  	PhoneEnabled = false'  	FaxEnabled = false'  	AcceptPrivacyPolicyEnabled = false'  	NewsletterEnabled = true'  	NewsletterTickedByDefault = true'  	HideNewsletterBlock = false'  	OnlineCustomerMinutes = 20'  	StoreLastVisitedPage = false'  	SuffixDeletedCustomers = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new MediaSettings () {  	AvatarPictureSize = 85'  	ProductThumbPictureSize = 125'  	ProductDetailsPictureSize = 300'  	ProductThumbPictureSizeOnProductDetailsPage = 70'  	ProductThumbPerRowOnProductDetailsPage = 4'  	AssociatedProductPictureSize = 125'  	CategoryThumbPictureSize = 125'  	ManufacturerThumbPictureSize = 125'  	CartThumbPictureSize = 80'  	MiniCartThumbPictureSize = 47'  	AutoCompleteSearchThumbPictureSize = 20'  	MaximumImageSize = 1280'  	DefaultPictureZoomEnabled = false'  	DefaultImageQuality = 80'  	MultipleThumbDirectories = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new RewardPointsSettings () {  	Enabled = true'  	ExchangeRate = 1'  	PointsForRegistration = 0'  	PointsForPurchases_Amount = 10'  	PointsForPurchases_Points = 1'  	PointsForPurchases_Awarded = OrderStatus.Complete'  	PointsForPurchases_Canceled = OrderStatus.Cancelled'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ShoppingCartSettings () {  	DisplayCartAfterAddingProduct = false'  	DisplayWishlistAfterAddingProduct = false'  	MaximumShoppingCartItems = 1000'  	MaximumWishlistItems = 1000'  	AllowOutOfStockItemsToBeAddedToWishlist = false'  	MoveItemsFromWishlistToCart = true'  	ShowProductImagesOnShoppingCart = true'  	ShowProductImagesOnWishList = true'  	ShowDiscountBox = true'  	ShowGiftCardBox = true'  	CrossSellsNumber = 5'  	EmailWishlistEnabled = true'  	AllowAnonymousUsersToEmailWishlist = false'  	MiniShoppingCartEnabled = true'  	ShowProductImagesInMiniShoppingCart = true'  	MiniShoppingCartProductNumber = 5'  	RoundPricesDuringCalculation = true'  	GroupTierPricesForDistinctShoppingCartItems = false'  	AllowCartItemEditing = true'  	RenderAssociatedAttributeValueQuantity = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ShoppingCartSettings () {  	DisplayCartAfterAddingProduct = false'  	DisplayWishlistAfterAddingProduct = false'  	MaximumShoppingCartItems = 1000'  	MaximumWishlistItems = 1000'  	AllowOutOfStockItemsToBeAddedToWishlist = false'  	MoveItemsFromWishlistToCart = true'  	ShowProductImagesOnShoppingCart = true'  	ShowProductImagesOnWishList = true'  	ShowDiscountBox = true'  	ShowGiftCardBox = true'  	CrossSellsNumber = 5'  	EmailWishlistEnabled = true'  	AllowAnonymousUsersToEmailWishlist = false'  	MiniShoppingCartEnabled = true'  	ShowProductImagesInMiniShoppingCart = true'  	MiniShoppingCartProductNumber = 5'  	RoundPricesDuringCalculation = true'  	GroupTierPricesForDistinctShoppingCartItems = false'  	AllowCartItemEditing = true'  	RenderAssociatedAttributeValueQuantity = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ShoppingCartSettings () {  	DisplayCartAfterAddingProduct = false'  	DisplayWishlistAfterAddingProduct = false'  	MaximumShoppingCartItems = 1000'  	MaximumWishlistItems = 1000'  	AllowOutOfStockItemsToBeAddedToWishlist = false'  	MoveItemsFromWishlistToCart = true'  	ShowProductImagesOnShoppingCart = true'  	ShowProductImagesOnWishList = true'  	ShowDiscountBox = true'  	ShowGiftCardBox = true'  	CrossSellsNumber = 5'  	EmailWishlistEnabled = true'  	AllowAnonymousUsersToEmailWishlist = false'  	MiniShoppingCartEnabled = true'  	ShowProductImagesInMiniShoppingCart = true'  	MiniShoppingCartProductNumber = 5'  	RoundPricesDuringCalculation = true'  	GroupTierPricesForDistinctShoppingCartItems = false'  	AllowCartItemEditing = true'  	RenderAssociatedAttributeValueQuantity = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ShoppingCartSettings () {  	DisplayCartAfterAddingProduct = false'  	DisplayWishlistAfterAddingProduct = false'  	MaximumShoppingCartItems = 1000'  	MaximumWishlistItems = 1000'  	AllowOutOfStockItemsToBeAddedToWishlist = false'  	MoveItemsFromWishlistToCart = true'  	ShowProductImagesOnShoppingCart = true'  	ShowProductImagesOnWishList = true'  	ShowDiscountBox = true'  	ShowGiftCardBox = true'  	CrossSellsNumber = 5'  	EmailWishlistEnabled = true'  	AllowAnonymousUsersToEmailWishlist = false'  	MiniShoppingCartEnabled = true'  	ShowProductImagesInMiniShoppingCart = true'  	MiniShoppingCartProductNumber = 5'  	RoundPricesDuringCalculation = true'  	GroupTierPricesForDistinctShoppingCartItems = false'  	AllowCartItemEditing = true'  	RenderAssociatedAttributeValueQuantity = false  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new OrderSettings () {  	IsReOrderAllowed = true'  	MinOrderSubtotalAmount = 0'  	MinOrderTotalAmount = 0'  	AnonymousCheckoutAllowed = true'  	TermsOfServiceOnShoppingCartPage = true'  	TermsOfServiceOnOrderConfirmPage = false'  	OnePageCheckoutEnabled = true'  	OnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab = false'  	DisableBillingAddressCheckoutStep = false'  	DisableOrderCompletedPage = false'  	AttachPdfInvoiceToOrderPlacedEmail = false'  	AttachPdfInvoiceToOrderCompletedEmail = false'  	ReturnRequestsEnabled = true'  	ReturnRequestActions = new List<string> () {  		"Repair"'  		"Replacement"'  		"Store Credit"  	}'  	ReturnRequestReasons = new List<string> () {  		"Received Wrong Product"'  		"Wrong Product Ordered"'  		"There Was A Problem With The Product"  	}'  	NumberOfDaysReturnRequestAvailable = 365'  	MinimumOrderPlacementInterval = 30'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new OrderSettings () {  	IsReOrderAllowed = true'  	MinOrderSubtotalAmount = 0'  	MinOrderTotalAmount = 0'  	AnonymousCheckoutAllowed = true'  	TermsOfServiceOnShoppingCartPage = true'  	TermsOfServiceOnOrderConfirmPage = false'  	OnePageCheckoutEnabled = true'  	OnePageCheckoutDisplayOrderTotalsOnPaymentInfoTab = false'  	DisableBillingAddressCheckoutStep = false'  	DisableOrderCompletedPage = false'  	AttachPdfInvoiceToOrderPlacedEmail = false'  	AttachPdfInvoiceToOrderCompletedEmail = false'  	ReturnRequestsEnabled = true'  	ReturnRequestActions = new List<string> () {  		"Repair"'  		"Replacement"'  		"Store Credit"  	}'  	ReturnRequestReasons = new List<string> () {  		"Received Wrong Product"'  		"Wrong Product Ordered"'  		"There Was A Problem With The Product"  	}'  	NumberOfDaysReturnRequestAvailable = 365'  	MinimumOrderPlacementInterval = 30'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new SecuritySettings () {  	ForceSslForAllPages = false'  	EncryptionKey = CommonHelper.GenerateRandomDigitCode (16)'  	AdminAreaAllowedIpAddresses = null'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new BlogSettings () {  	Enabled = true'  	PostsPageSize = 10'  	AllowNotRegisteredUsersToLeaveComments = true'  	NotifyAboutNewBlogComments = false'  	NumberOfTags = 15'  	ShowHeaderRssUrl = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new BlogSettings () {  	Enabled = true'  	PostsPageSize = 10'  	AllowNotRegisteredUsersToLeaveComments = true'  	NotifyAboutNewBlogComments = false'  	NumberOfTags = 15'  	ShowHeaderRssUrl = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new NewsSettings () {  	Enabled = true'  	AllowNotRegisteredUsersToLeaveComments = true'  	NotifyAboutNewNewsComments = false'  	ShowNewsOnMainPage = false'  	MainPageNewsCount = 3'  	NewsArchivePageSize = 10'  	ShowHeaderRssUrl = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new NewsSettings () {  	Enabled = true'  	AllowNotRegisteredUsersToLeaveComments = true'  	NotifyAboutNewNewsComments = false'  	ShowNewsOnMainPage = false'  	MainPageNewsCount = 3'  	NewsArchivePageSize = 10'  	ShowHeaderRssUrl = false'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSettings,The following statement contains a magic number: settingService.SaveSetting (new ForumSettings () {  	ForumsEnabled = false'  	RelativeDateTimeFormattingEnabled = true'  	AllowCustomersToDeletePosts = false'  	AllowCustomersToEditPosts = false'  	AllowCustomersToManageSubscriptions = false'  	AllowGuestsToCreatePosts = false'  	AllowGuestsToCreateTopics = false'  	TopicSubjectMaxLength = 450'  	PostMaxLength = 4000'  	StrippedTopicMaxLength = 45'  	TopicsPageSize = 10'  	PostsPageSize = 10'  	SearchResultsPageSize = 10'  	LatestCustomerPostsPageSize = 10'  	ShowCustomersPostCount = true'  	ForumEditor = EditorType.BBCodeEditor'  	SignaturesEnabled = true'  	AllowPrivateMessages = false'  	ShowAlertForPM = false'  	PrivateMessagesPageSize = 10'  	ForumSubscriptionsPageSize = 10'  	NotifyAboutPrivateMessages = false'  	PMSubjectMaxLength = 450'  	PMTextMaxLength = 4000'  	HomePageActiveDiscussionsTopicCount = 5'  	ActiveDiscussionsPageTopicCount = 50'  	ActiveDiscussionsFeedEnabled = false'  	ActiveDiscussionsFeedCount = 25'  	ForumFeedsEnabled = false'  	ForumFeedCount = 10'  	ForumSearchTermMinimumLength = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCheckoutAttributes,The following statement contains a magic number: ca1.CheckoutAttributeValues.Add (new CheckoutAttributeValue () {  	Name = "Yes"'  	PriceAdjustment = 10'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallCheckoutAttributes,The following statement contains a magic number: ca1.CheckoutAttributeValues.Add (new CheckoutAttributeValue () {  	Name = "Yes"'  	PriceAdjustment = 10'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa1.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "10.0''"'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa1.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "14.1''"'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa1.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "15.4''"'  	DisplayOrder = 5'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa1.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "16.0''"'  	DisplayOrder = 6'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa2.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "Intel"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa3.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "3 GB"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa4.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "320 GB"'  	DisplayOrder = 7'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa4.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "250 GB"'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallSpecificationAttributes,The following statement contains a magic number: sa4.SpecificationAttributeOptions.Add (new SpecificationAttributeOption () {  	Name = "160 GB"'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: product25GiftCard.ProductCategories.Add (new ProductCategory () {  	Category = _categoryRepository.Table.Single (c => c.Name == "Gift Cards")'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: product50GiftCard.ProductCategories.Add (new ProductCategory () {  	Category = _categoryRepository.Table.Single (c => c.Name == "Gift Cards")'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: product100GiftCard.ProductCategories.Add (new ProductCategory () {  	Category = _categoryRepository.Table.Single (c => c.Name == "Gift Cards")'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaRockabillyPolka1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "1X"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaRockabillyPolka1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "2X"'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaRockabillyPolka1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "3X"'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaRockabillyPolka1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "4X"'  	DisplayOrder = 5'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaRockabillyPolka1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "5X"'  	DisplayOrder = 6'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAcerAspireOne.TierPrices.Add (new TierPrice () {  	Quantity = 2'  	Price = 19  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAcerAspireOne.TierPrices.Add (new TierPrice () {  	Quantity = 2'  	Price = 19  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAcerAspireOne.TierPrices.Add (new TierPrice () {  	Quantity = 5'  	Price = 17  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAcerAspireOne.TierPrices.Add (new TierPrice () {  	Quantity = 5'  	Price = 17  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAcerAspireOne.TierPrices.Add (new TierPrice () {  	Quantity = 10'  	Price = 15  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAcerAspireOne.TierPrices.Add (new TierPrice () {  	Quantity = 10'  	Price = 15  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAcerAspireOne.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_AcerAspireOne_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productAcerAspireOne.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaAdidasShoe1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "9"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaAdidasShoe1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "10"'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaAdidasShoe1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "11"'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaAdidasShoe2.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "White/Black"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAdidasShoe.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_AdidasShoe_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productAdidasShoe.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productArrow.TierPrices.Add (new TierPrice () {  	Quantity = 3'  	Price = 21  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productArrow.TierPrices.Add (new TierPrice () {  	Quantity = 3'  	Price = 21  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productArrow.TierPrices.Add (new TierPrice () {  	Quantity = 7'  	Price = 19  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productArrow.TierPrices.Add (new TierPrice () {  	Quantity = 7'  	Price = 19  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productArrow.TierPrices.Add (new TierPrice () {  	Quantity = 10'  	Price = 16  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productArrow.TierPrices.Add (new TierPrice () {  	Quantity = 10'  	Price = 16  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAsusPc1000.ProductManufacturers.Add (new ProductManufacturer () {  	Manufacturer = _manufacturerRepository.Table.Single (c => c.Name == "ASUS")'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAsusPc1000.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 2'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "AMD")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAsusPc1000.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 3'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "1 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAsusPc1000.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = false'  	ShowOnProductPage = true'  	DisplayOrder = 4'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "160 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAsusPc900.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 2'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "AMD")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAsusPc900.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 3'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "1 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productAsusPc900.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = false'  	ShowOnProductPage = true'  	DisplayOrder = 4'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "160 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "2.5 GHz Intel Pentium Dual-Core E2200"'  	IsPreSelected = true'  	PriceAdjustment = 15'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "2.5 GHz Intel Pentium Dual-Core E2200"'  	IsPreSelected = true'  	PriceAdjustment = 15'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer2.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "4GB"'  	PriceAdjustment = 20'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer2.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "4GB"'  	PriceAdjustment = 20'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer2.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "8GB"'  	PriceAdjustment = 60'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer2.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "8GB"'  	PriceAdjustment = 60'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer3.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "400 GB"'  	PriceAdjustment = 100'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer3.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "400 GB"'  	PriceAdjustment = 100'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer4.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Vista Home"'  	PriceAdjustment = 50'  	IsPreSelected = true'  	DisplayOrder = 1'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer4.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Vista Premium"'  	PriceAdjustment = 60'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer4.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Vista Premium"'  	PriceAdjustment = 60'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer5.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Microsoft Office"'  	PriceAdjustment = 50'  	IsPreSelected = true'  	DisplayOrder = 1'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer5.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Acrobat Reader"'  	PriceAdjustment = 10'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer5.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Acrobat Reader"'  	PriceAdjustment = 10'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer5.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Total Commander"'  	PriceAdjustment = 5'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaBuildComputer5.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Total Commander"'  	PriceAdjustment = 5'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productBuildComputer.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Desktops_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBuildComputer.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productBuildComputer.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_Desktops_3.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productBuildComputer.Name)' true)'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productCanonCamera.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_CanonCamera_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productCanonCamera.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productDiamondBracelet.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_DiamondBracelet_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productDiamondBracelet.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaEtnies1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "9"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaEtnies1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "10"'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaEtnies1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "11"'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaEtnies2.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Black"'  	ColorSquaresRgb = "#000000"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaEtnies2.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Green"'  	ColorSquaresRgb = "#1fcb1a"'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productLeatherHandbag.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_LeatherHandbag_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productLeatherHandbag.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion1.ProductManufacturers.Add (new ProductManufacturer () {  	Manufacturer = _manufacturerRepository.Table.Single (c => c.Name == "HP")'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion1.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 2'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "Intel")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion1.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 3'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "3 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion1.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = false'  	ShowOnProductPage = true'  	DisplayOrder = 4'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "250 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion2.ProductManufacturers.Add (new ProductManufacturer () {  	Manufacturer = _manufacturerRepository.Table.Single (c => c.Name == "HP")'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion2.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_HpPavilion2_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productHpPavilion2.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion3.ProductManufacturers.Add (new ProductManufacturer () {  	Manufacturer = _manufacturerRepository.Table.Single (c => c.Name == "HP")'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion3.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 2'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "Intel")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion3.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 3'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "3 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productHpPavilion3.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = false'  	ShowOnProductPage = true'  	DisplayOrder = 4'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "320 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaHat1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Medium"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaHat1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "Large"'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: pvaHat1.ProductVariantAttributeValues.Add (new ProductVariantAttributeValue () {  	AttributeValueType = AttributeValueType.Simple'  	Name = "X-Large"'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productLeviJeans.TierPrices.Add (new TierPrice () {  	Quantity = 3'  	Price = 40  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productLeviJeans.TierPrices.Add (new TierPrice () {  	Quantity = 3'  	Price = 40  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productLeviJeans.TierPrices.Add (new TierPrice () {  	Quantity = 6'  	Price = 38  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productLeviJeans.TierPrices.Add (new TierPrice () {  	Quantity = 6'  	Price = 38  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productLeviJeans.TierPrices.Add (new TierPrice () {  	Quantity = 10'  	Price = 35  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productLeviJeans.TierPrices.Add (new TierPrice () {  	Quantity = 10'  	Price = 35  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productLeviJeans.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_LeviJeans_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productLeviJeans.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productSamsungPhone.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_SamsungPhone_2.jpeg")' "image/jpeg"' pictureService.GetPictureSeName (productSamsungPhone.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productSatellite.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 2'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "CPU Type").SpecificationAttributeOptions.Single (sao => sao.Name == "Intel")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productSatellite.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = true'  	ShowOnProductPage = true'  	DisplayOrder = 3'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Memory").SpecificationAttributeOptions.Single (sao => sao.Name == "1 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productSatellite.ProductSpecificationAttributes.Add (new ProductSpecificationAttribute () {  	AllowFiltering = false'  	ShowOnProductPage = true'  	DisplayOrder = 4'  	SpecificationAttributeOption = _specificationAttributeRepository.Table.Single (sa => sa.Name == "Hardrive").SpecificationAttributeOptions.Single (sao => sao.Name == "250 GB")  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: productEngagementRing.ProductPictures.Add (new ProductPicture () {  	Picture = pictureService.InsertPicture (File.ReadAllBytes (sampleImagesPath + "product_EngagementRing_2.jpg")' "image/pjpeg"' pictureService.GetPictureSeName (productEngagementRing.Name)' true)'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: foreach (var product in allProducts) {  	if (product.ProductType != ProductType.SimpleProduct)  		continue;  	//only 3 of 4 products will have reviews  	if (random.Next (4) == 3)  		continue;  	//rating from 4 to 5  	var rating = random.Next (4' 6);  	product.ProductReviews.Add (new ProductReview () {  		CustomerId = defaultCustomer.Id'  		ProductId = product.Id'  		IsApproved = true'  		Title = "Some sample review"'  		ReviewText = string.Format ("This sample review is for the {0}. I've been waiting for this product to be available. It is priced just right."' product.Name)'  		//random (4 or 5)  		Rating = rating'  		HelpfulYesTotal = 0'  		HelpfulNoTotal = 0'  		CreatedOnUtc = DateTime.UtcNow  	});  	product.ApprovedRatingSum = rating;  	product.ApprovedTotalReviews = product.ProductReviews.Count;  	_productRepository.Update (product);  }  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: foreach (var product in allProducts) {  	if (product.ProductType != ProductType.SimpleProduct)  		continue;  	//only 3 of 4 products will have reviews  	if (random.Next (4) == 3)  		continue;  	//rating from 4 to 5  	var rating = random.Next (4' 6);  	product.ProductReviews.Add (new ProductReview () {  		CustomerId = defaultCustomer.Id'  		ProductId = product.Id'  		IsApproved = true'  		Title = "Some sample review"'  		ReviewText = string.Format ("This sample review is for the {0}. I've been waiting for this product to be available. It is priced just right."' product.Name)'  		//random (4 or 5)  		Rating = rating'  		HelpfulYesTotal = 0'  		HelpfulNoTotal = 0'  		CreatedOnUtc = DateTime.UtcNow  	});  	product.ApprovedRatingSum = rating;  	product.ApprovedTotalReviews = product.ProductReviews.Count;  	_productRepository.Update (product);  }  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: foreach (var product in allProducts) {  	if (product.ProductType != ProductType.SimpleProduct)  		continue;  	//only 3 of 4 products will have reviews  	if (random.Next (4) == 3)  		continue;  	//rating from 4 to 5  	var rating = random.Next (4' 6);  	product.ProductReviews.Add (new ProductReview () {  		CustomerId = defaultCustomer.Id'  		ProductId = product.Id'  		IsApproved = true'  		Title = "Some sample review"'  		ReviewText = string.Format ("This sample review is for the {0}. I've been waiting for this product to be available. It is priced just right."' product.Name)'  		//random (4 or 5)  		Rating = rating'  		HelpfulYesTotal = 0'  		HelpfulNoTotal = 0'  		CreatedOnUtc = DateTime.UtcNow  	});  	product.ApprovedRatingSum = rating;  	product.ApprovedTotalReviews = product.ProductReviews.Count;  	_productRepository.Update (product);  }  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: foreach (var product in allProducts) {  	if (product.ProductType != ProductType.SimpleProduct)  		continue;  	//only 3 of 4 products will have reviews  	if (random.Next (4) == 3)  		continue;  	//rating from 4 to 5  	var rating = random.Next (4' 6);  	product.ProductReviews.Add (new ProductReview () {  		CustomerId = defaultCustomer.Id'  		ProductId = product.Id'  		IsApproved = true'  		Title = "Some sample review"'  		ReviewText = string.Format ("This sample review is for the {0}. I've been waiting for this product to be available. It is priced just right."' product.Name)'  		//random (4 or 5)  		Rating = rating'  		HelpfulYesTotal = 0'  		HelpfulNoTotal = 0'  		CreatedOnUtc = DateTime.UtcNow  	});  	product.ApprovedRatingSum = rating;  	product.ApprovedTotalReviews = product.ProductReviews.Count;  	_productRepository.Update (product);  }  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: if (random.Next (4) == 3)  	continue;  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The following statement contains a magic number: if (random.Next (4) == 3)  	continue;  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallPolls,The following statement contains a magic number: poll1.PollAnswers.Add (new PollAnswer () {  	Name = "Good"'  	DisplayOrder = 2'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallPolls,The following statement contains a magic number: poll1.PollAnswers.Add (new PollAnswer () {  	Name = "Poor"'  	DisplayOrder = 3'  });  
Magic Number,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallPolls,The following statement contains a magic number: poll1.PollAnswers.Add (new PollAnswer () {  	Name = "Very bad"'  	DisplayOrder = 4'  });  
Magic Number,Nop.Services.Messages,CampaignService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\CampaignService.cs,SendCampaign,The following statement contains a magic number: foreach (var subscription in subscriptions) {  	var customer = _customerService.GetCustomerByEmail (subscription.Email);  	//ignore deleted or inactive customers when sending newsletter campaigns  	if (customer != null && (!customer.Active || customer.Deleted))  		continue;  	var tokens = new List<Token> ();  	_messageTokenProvider.AddStoreTokens (tokens' _storeContext.CurrentStore' emailAccount);  	_messageTokenProvider.AddNewsLetterSubscriptionTokens (tokens' subscription);  	if (customer != null)  		_messageTokenProvider.AddCustomerTokens (tokens' customer);  	string subject = _tokenizer.Replace (campaign.Subject' tokens' false);  	string body = _tokenizer.Replace (campaign.Body' tokens' true);  	var email = new QueuedEmail () {  		Priority = 3'  		From = emailAccount.Email'  		FromName = emailAccount.DisplayName'  		To = subscription.Email'  		Subject = subject'  		Body = body'  		CreatedOnUtc = DateTime.UtcNow'  		EmailAccountId = emailAccount.Id  	};  	_queuedEmailService.InsertQueuedEmail (email);  	totalEmailsSent++;  }  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,InsertEmailAccount,The following statement contains a magic number: emailAccount.Email = CommonHelper.EnsureMaximumLength (emailAccount.Email' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,InsertEmailAccount,The following statement contains a magic number: emailAccount.DisplayName = CommonHelper.EnsureMaximumLength (emailAccount.DisplayName' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,InsertEmailAccount,The following statement contains a magic number: emailAccount.Host = CommonHelper.EnsureMaximumLength (emailAccount.Host' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,InsertEmailAccount,The following statement contains a magic number: emailAccount.Username = CommonHelper.EnsureMaximumLength (emailAccount.Username' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,InsertEmailAccount,The following statement contains a magic number: emailAccount.Password = CommonHelper.EnsureMaximumLength (emailAccount.Password' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,UpdateEmailAccount,The following statement contains a magic number: emailAccount.Email = CommonHelper.EnsureMaximumLength (emailAccount.Email' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,UpdateEmailAccount,The following statement contains a magic number: emailAccount.DisplayName = CommonHelper.EnsureMaximumLength (emailAccount.DisplayName' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,UpdateEmailAccount,The following statement contains a magic number: emailAccount.Host = CommonHelper.EnsureMaximumLength (emailAccount.Host' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,UpdateEmailAccount,The following statement contains a magic number: emailAccount.Username = CommonHelper.EnsureMaximumLength (emailAccount.Username' 255);  
Magic Number,Nop.Services.Messages,EmailAccountService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Messages\EmailAccountService.cs,UpdateEmailAccount,The following statement contains a magic number: emailAccount.Password = CommonHelper.EnsureMaximumLength (emailAccount.Password' 255);  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Products");  	//Create Headers and format them   	var properties = new string[] {  		"ProductTypeId"'  		"ParentGroupedProductId"'  		"VisibleIndividually"'  		"Name"'  		"ShortDescription"'  		"FullDescription"'  		"VendorId"'  		"ProductTemplateId"'  		"ShowOnHomePage"'  		"MetaKeywords"'  		"MetaDescription"'  		"MetaTitle"'  		"SeName"'  		"AllowCustomerReviews"'  		"Published"'  		"SKU"'  		"ManufacturerPartNumber"'  		"Gtin"'  		"IsGiftCard"'  		"GiftCardTypeId"'  		"RequireOtherProducts"'  		"RequiredProductIds"'  		"AutomaticallyAddRequiredProducts"'  		"IsDownload"'  		"DownloadId"'  		"UnlimitedDownloads"'  		"MaxNumberOfDownloads"'  		"DownloadActivationTypeId"'  		"HasSampleDownload"'  		"SampleDownloadId"'  		"HasUserAgreement"'  		"UserAgreementText"'  		"IsRecurring"'  		"RecurringCycleLength"'  		"RecurringCyclePeriodId"'  		"RecurringTotalCycles"'  		"IsShipEnabled"'  		"IsFreeShipping"'  		"AdditionalShippingCharge"'  		"DeliveryDateId"'  		"WarehouseId"'  		"IsTaxExempt"'  		"TaxCategoryId"'  		"ManageInventoryMethodId"'  		"StockQuantity"'  		"DisplayStockAvailability"'  		"DisplayStockQuantity"'  		"MinStockQuantity"'  		"LowStockActivityId"'  		"NotifyAdminForQuantityBelow"'  		"BackorderModeId"'  		"AllowBackInStockSubscriptions"'  		"OrderMinimumQuantity"'  		"OrderMaximumQuantity"'  		"AllowedQuantities"'  		"AllowAddingOnlyExistingAttributeCombinations"'  		"DisableBuyButton"'  		"DisableWishlistButton"'  		"AvailableForPreOrder"'  		"PreOrderAvailabilityStartDateTimeUtc"'  		"CallForPrice"'  		"Price"'  		"OldPrice"'  		"ProductCost"'  		"SpecialPrice"'  		"SpecialPriceStartDateTimeUtc"'  		"SpecialPriceEndDateTimeUtc"'  		"CustomerEntersPrice"'  		"MinimumCustomerEnteredPrice"'  		"MaximumCustomerEnteredPrice"'  		"Weight"'  		"Length"'  		"Width"'  		"Height"'  		"CreatedOnUtc"'  		"CategoryIds"'  		"ManufacturerIds"'  		"Picture1"'  		"Picture2"'  		"Picture3"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var p in products) {  		int col = 1;  		worksheet.Cells [row' col].Value = p.ProductTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.ParentGroupedProductId;  		col++;  		worksheet.Cells [row' col].Value = p.VisibleIndividually;  		col++;  		worksheet.Cells [row' col].Value = p.Name;  		col++;  		worksheet.Cells [row' col].Value = p.ShortDescription;  		col++;  		worksheet.Cells [row' col].Value = p.FullDescription;  		col++;  		worksheet.Cells [row' col].Value = p.VendorId;  		col++;  		worksheet.Cells [row' col].Value = p.ProductTemplateId;  		col++;  		worksheet.Cells [row' col].Value = p.ShowOnHomePage;  		col++;  		worksheet.Cells [row' col].Value = p.MetaKeywords;  		col++;  		worksheet.Cells [row' col].Value = p.MetaDescription;  		col++;  		worksheet.Cells [row' col].Value = p.MetaTitle;  		col++;  		worksheet.Cells [row' col].Value = p.GetSeName (0);  		col++;  		worksheet.Cells [row' col].Value = p.AllowCustomerReviews;  		col++;  		worksheet.Cells [row' col].Value = p.Published;  		col++;  		worksheet.Cells [row' col].Value = p.Sku;  		col++;  		worksheet.Cells [row' col].Value = p.ManufacturerPartNumber;  		col++;  		worksheet.Cells [row' col].Value = p.Gtin;  		col++;  		worksheet.Cells [row' col].Value = p.IsGiftCard;  		col++;  		worksheet.Cells [row' col].Value = p.GiftCardTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.RequireOtherProducts;  		col++;  		worksheet.Cells [row' col].Value = p.RequiredProductIds;  		col++;  		worksheet.Cells [row' col].Value = p.AutomaticallyAddRequiredProducts;  		col++;  		worksheet.Cells [row' col].Value = p.IsDownload;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.UnlimitedDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.MaxNumberOfDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadActivationTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.HasSampleDownload;  		col++;  		worksheet.Cells [row' col].Value = p.SampleDownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.HasUserAgreement;  		col++;  		worksheet.Cells [row' col].Value = p.UserAgreementText;  		col++;  		worksheet.Cells [row' col].Value = p.IsRecurring;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCycleLength;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCyclePeriodId;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringTotalCycles;  		col++;  		worksheet.Cells [row' col].Value = p.IsShipEnabled;  		col++;  		worksheet.Cells [row' col].Value = p.IsFreeShipping;  		col++;  		worksheet.Cells [row' col].Value = p.AdditionalShippingCharge;  		col++;  		worksheet.Cells [row' col].Value = p.DeliveryDateId;  		col++;  		worksheet.Cells [row' col].Value = p.WarehouseId;  		col++;  		worksheet.Cells [row' col].Value = p.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = p.TaxCategoryId;  		col++;  		worksheet.Cells [row' col].Value = p.ManageInventoryMethodId;  		col++;  		worksheet.Cells [row' col].Value = p.StockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockAvailability;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.MinStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.LowStockActivityId;  		col++;  		worksheet.Cells [row' col].Value = p.NotifyAdminForQuantityBelow;  		col++;  		worksheet.Cells [row' col].Value = p.BackorderModeId;  		col++;  		worksheet.Cells [row' col].Value = p.AllowBackInStockSubscriptions;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMinimumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMaximumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.AllowedQuantities;  		col++;  		worksheet.Cells [row' col].Value = p.AllowAddingOnlyExistingAttributeCombinations;  		col++;  		worksheet.Cells [row' col].Value = p.DisableBuyButton;  		col++;  		worksheet.Cells [row' col].Value = p.DisableWishlistButton;  		col++;  		worksheet.Cells [row' col].Value = p.AvailableForPreOrder;  		col++;  		worksheet.Cells [row' col].Value = p.PreOrderAvailabilityStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CallForPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Price;  		col++;  		worksheet.Cells [row' col].Value = p.OldPrice;  		col++;  		worksheet.Cells [row' col].Value = p.ProductCost;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPrice;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceEndDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CustomerEntersPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MinimumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MaximumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Weight;  		col++;  		worksheet.Cells [row' col].Value = p.Length;  		col++;  		worksheet.Cells [row' col].Value = p.Width;  		col++;  		worksheet.Cells [row' col].Value = p.Height;  		col++;  		worksheet.Cells [row' col].Value = p.CreatedOnUtc.ToOADate ();  		col++;  		//category identifiers  		string categoryIds = null;  		foreach (var pc in _categoryService.GetProductCategoriesByProductId (p.Id)) {  			categoryIds += pc.CategoryId;  			categoryIds += ";";  		}  		worksheet.Cells [row' col].Value = categoryIds;  		col++;  		//manufacturer identifiers  		string manufacturerIds = null;  		foreach (var pm in _manufacturerService.GetProductManufacturersByProductId (p.Id)) {  			manufacturerIds += pm.ManufacturerId;  			manufacturerIds += ";";  		}  		worksheet.Cells [row' col].Value = manufacturerIds;  		col++;  		//pictures (up to 3 pictures)  		string picture1 = null;  		string picture2 = null;  		string picture3 = null;  		var pictures = _pictureService.GetPicturesByProductId (p.Id' 3);  		for (int i = 0; i < pictures.Count; i++) {  			string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  			switch (i) {  			case 0:  				picture1 = pictureLocalPath;  				break;  			case 1:  				picture2 = pictureLocalPath;  				break;  			case 2:  				picture3 = pictureLocalPath;  				break;  			}  		}  		worksheet.Cells [row' col].Value = picture1;  		col++;  		worksheet.Cells [row' col].Value = picture2;  		col++;  		worksheet.Cells [row' col].Value = picture3;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Category = "Products";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} products"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Products");  	//Create Headers and format them   	var properties = new string[] {  		"ProductTypeId"'  		"ParentGroupedProductId"'  		"VisibleIndividually"'  		"Name"'  		"ShortDescription"'  		"FullDescription"'  		"VendorId"'  		"ProductTemplateId"'  		"ShowOnHomePage"'  		"MetaKeywords"'  		"MetaDescription"'  		"MetaTitle"'  		"SeName"'  		"AllowCustomerReviews"'  		"Published"'  		"SKU"'  		"ManufacturerPartNumber"'  		"Gtin"'  		"IsGiftCard"'  		"GiftCardTypeId"'  		"RequireOtherProducts"'  		"RequiredProductIds"'  		"AutomaticallyAddRequiredProducts"'  		"IsDownload"'  		"DownloadId"'  		"UnlimitedDownloads"'  		"MaxNumberOfDownloads"'  		"DownloadActivationTypeId"'  		"HasSampleDownload"'  		"SampleDownloadId"'  		"HasUserAgreement"'  		"UserAgreementText"'  		"IsRecurring"'  		"RecurringCycleLength"'  		"RecurringCyclePeriodId"'  		"RecurringTotalCycles"'  		"IsShipEnabled"'  		"IsFreeShipping"'  		"AdditionalShippingCharge"'  		"DeliveryDateId"'  		"WarehouseId"'  		"IsTaxExempt"'  		"TaxCategoryId"'  		"ManageInventoryMethodId"'  		"StockQuantity"'  		"DisplayStockAvailability"'  		"DisplayStockQuantity"'  		"MinStockQuantity"'  		"LowStockActivityId"'  		"NotifyAdminForQuantityBelow"'  		"BackorderModeId"'  		"AllowBackInStockSubscriptions"'  		"OrderMinimumQuantity"'  		"OrderMaximumQuantity"'  		"AllowedQuantities"'  		"AllowAddingOnlyExistingAttributeCombinations"'  		"DisableBuyButton"'  		"DisableWishlistButton"'  		"AvailableForPreOrder"'  		"PreOrderAvailabilityStartDateTimeUtc"'  		"CallForPrice"'  		"Price"'  		"OldPrice"'  		"ProductCost"'  		"SpecialPrice"'  		"SpecialPriceStartDateTimeUtc"'  		"SpecialPriceEndDateTimeUtc"'  		"CustomerEntersPrice"'  		"MinimumCustomerEnteredPrice"'  		"MaximumCustomerEnteredPrice"'  		"Weight"'  		"Length"'  		"Width"'  		"Height"'  		"CreatedOnUtc"'  		"CategoryIds"'  		"ManufacturerIds"'  		"Picture1"'  		"Picture2"'  		"Picture3"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var p in products) {  		int col = 1;  		worksheet.Cells [row' col].Value = p.ProductTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.ParentGroupedProductId;  		col++;  		worksheet.Cells [row' col].Value = p.VisibleIndividually;  		col++;  		worksheet.Cells [row' col].Value = p.Name;  		col++;  		worksheet.Cells [row' col].Value = p.ShortDescription;  		col++;  		worksheet.Cells [row' col].Value = p.FullDescription;  		col++;  		worksheet.Cells [row' col].Value = p.VendorId;  		col++;  		worksheet.Cells [row' col].Value = p.ProductTemplateId;  		col++;  		worksheet.Cells [row' col].Value = p.ShowOnHomePage;  		col++;  		worksheet.Cells [row' col].Value = p.MetaKeywords;  		col++;  		worksheet.Cells [row' col].Value = p.MetaDescription;  		col++;  		worksheet.Cells [row' col].Value = p.MetaTitle;  		col++;  		worksheet.Cells [row' col].Value = p.GetSeName (0);  		col++;  		worksheet.Cells [row' col].Value = p.AllowCustomerReviews;  		col++;  		worksheet.Cells [row' col].Value = p.Published;  		col++;  		worksheet.Cells [row' col].Value = p.Sku;  		col++;  		worksheet.Cells [row' col].Value = p.ManufacturerPartNumber;  		col++;  		worksheet.Cells [row' col].Value = p.Gtin;  		col++;  		worksheet.Cells [row' col].Value = p.IsGiftCard;  		col++;  		worksheet.Cells [row' col].Value = p.GiftCardTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.RequireOtherProducts;  		col++;  		worksheet.Cells [row' col].Value = p.RequiredProductIds;  		col++;  		worksheet.Cells [row' col].Value = p.AutomaticallyAddRequiredProducts;  		col++;  		worksheet.Cells [row' col].Value = p.IsDownload;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.UnlimitedDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.MaxNumberOfDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadActivationTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.HasSampleDownload;  		col++;  		worksheet.Cells [row' col].Value = p.SampleDownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.HasUserAgreement;  		col++;  		worksheet.Cells [row' col].Value = p.UserAgreementText;  		col++;  		worksheet.Cells [row' col].Value = p.IsRecurring;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCycleLength;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCyclePeriodId;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringTotalCycles;  		col++;  		worksheet.Cells [row' col].Value = p.IsShipEnabled;  		col++;  		worksheet.Cells [row' col].Value = p.IsFreeShipping;  		col++;  		worksheet.Cells [row' col].Value = p.AdditionalShippingCharge;  		col++;  		worksheet.Cells [row' col].Value = p.DeliveryDateId;  		col++;  		worksheet.Cells [row' col].Value = p.WarehouseId;  		col++;  		worksheet.Cells [row' col].Value = p.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = p.TaxCategoryId;  		col++;  		worksheet.Cells [row' col].Value = p.ManageInventoryMethodId;  		col++;  		worksheet.Cells [row' col].Value = p.StockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockAvailability;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.MinStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.LowStockActivityId;  		col++;  		worksheet.Cells [row' col].Value = p.NotifyAdminForQuantityBelow;  		col++;  		worksheet.Cells [row' col].Value = p.BackorderModeId;  		col++;  		worksheet.Cells [row' col].Value = p.AllowBackInStockSubscriptions;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMinimumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMaximumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.AllowedQuantities;  		col++;  		worksheet.Cells [row' col].Value = p.AllowAddingOnlyExistingAttributeCombinations;  		col++;  		worksheet.Cells [row' col].Value = p.DisableBuyButton;  		col++;  		worksheet.Cells [row' col].Value = p.DisableWishlistButton;  		col++;  		worksheet.Cells [row' col].Value = p.AvailableForPreOrder;  		col++;  		worksheet.Cells [row' col].Value = p.PreOrderAvailabilityStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CallForPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Price;  		col++;  		worksheet.Cells [row' col].Value = p.OldPrice;  		col++;  		worksheet.Cells [row' col].Value = p.ProductCost;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPrice;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceEndDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CustomerEntersPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MinimumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MaximumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Weight;  		col++;  		worksheet.Cells [row' col].Value = p.Length;  		col++;  		worksheet.Cells [row' col].Value = p.Width;  		col++;  		worksheet.Cells [row' col].Value = p.Height;  		col++;  		worksheet.Cells [row' col].Value = p.CreatedOnUtc.ToOADate ();  		col++;  		//category identifiers  		string categoryIds = null;  		foreach (var pc in _categoryService.GetProductCategoriesByProductId (p.Id)) {  			categoryIds += pc.CategoryId;  			categoryIds += ";";  		}  		worksheet.Cells [row' col].Value = categoryIds;  		col++;  		//manufacturer identifiers  		string manufacturerIds = null;  		foreach (var pm in _manufacturerService.GetProductManufacturersByProductId (p.Id)) {  			manufacturerIds += pm.ManufacturerId;  			manufacturerIds += ";";  		}  		worksheet.Cells [row' col].Value = manufacturerIds;  		col++;  		//pictures (up to 3 pictures)  		string picture1 = null;  		string picture2 = null;  		string picture3 = null;  		var pictures = _pictureService.GetPicturesByProductId (p.Id' 3);  		for (int i = 0; i < pictures.Count; i++) {  			string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  			switch (i) {  			case 0:  				picture1 = pictureLocalPath;  				break;  			case 1:  				picture2 = pictureLocalPath;  				break;  			case 2:  				picture3 = pictureLocalPath;  				break;  			}  		}  		worksheet.Cells [row' col].Value = picture1;  		col++;  		worksheet.Cells [row' col].Value = picture2;  		col++;  		worksheet.Cells [row' col].Value = picture3;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Category = "Products";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} products"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Products");  	//Create Headers and format them   	var properties = new string[] {  		"ProductTypeId"'  		"ParentGroupedProductId"'  		"VisibleIndividually"'  		"Name"'  		"ShortDescription"'  		"FullDescription"'  		"VendorId"'  		"ProductTemplateId"'  		"ShowOnHomePage"'  		"MetaKeywords"'  		"MetaDescription"'  		"MetaTitle"'  		"SeName"'  		"AllowCustomerReviews"'  		"Published"'  		"SKU"'  		"ManufacturerPartNumber"'  		"Gtin"'  		"IsGiftCard"'  		"GiftCardTypeId"'  		"RequireOtherProducts"'  		"RequiredProductIds"'  		"AutomaticallyAddRequiredProducts"'  		"IsDownload"'  		"DownloadId"'  		"UnlimitedDownloads"'  		"MaxNumberOfDownloads"'  		"DownloadActivationTypeId"'  		"HasSampleDownload"'  		"SampleDownloadId"'  		"HasUserAgreement"'  		"UserAgreementText"'  		"IsRecurring"'  		"RecurringCycleLength"'  		"RecurringCyclePeriodId"'  		"RecurringTotalCycles"'  		"IsShipEnabled"'  		"IsFreeShipping"'  		"AdditionalShippingCharge"'  		"DeliveryDateId"'  		"WarehouseId"'  		"IsTaxExempt"'  		"TaxCategoryId"'  		"ManageInventoryMethodId"'  		"StockQuantity"'  		"DisplayStockAvailability"'  		"DisplayStockQuantity"'  		"MinStockQuantity"'  		"LowStockActivityId"'  		"NotifyAdminForQuantityBelow"'  		"BackorderModeId"'  		"AllowBackInStockSubscriptions"'  		"OrderMinimumQuantity"'  		"OrderMaximumQuantity"'  		"AllowedQuantities"'  		"AllowAddingOnlyExistingAttributeCombinations"'  		"DisableBuyButton"'  		"DisableWishlistButton"'  		"AvailableForPreOrder"'  		"PreOrderAvailabilityStartDateTimeUtc"'  		"CallForPrice"'  		"Price"'  		"OldPrice"'  		"ProductCost"'  		"SpecialPrice"'  		"SpecialPriceStartDateTimeUtc"'  		"SpecialPriceEndDateTimeUtc"'  		"CustomerEntersPrice"'  		"MinimumCustomerEnteredPrice"'  		"MaximumCustomerEnteredPrice"'  		"Weight"'  		"Length"'  		"Width"'  		"Height"'  		"CreatedOnUtc"'  		"CategoryIds"'  		"ManufacturerIds"'  		"Picture1"'  		"Picture2"'  		"Picture3"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var p in products) {  		int col = 1;  		worksheet.Cells [row' col].Value = p.ProductTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.ParentGroupedProductId;  		col++;  		worksheet.Cells [row' col].Value = p.VisibleIndividually;  		col++;  		worksheet.Cells [row' col].Value = p.Name;  		col++;  		worksheet.Cells [row' col].Value = p.ShortDescription;  		col++;  		worksheet.Cells [row' col].Value = p.FullDescription;  		col++;  		worksheet.Cells [row' col].Value = p.VendorId;  		col++;  		worksheet.Cells [row' col].Value = p.ProductTemplateId;  		col++;  		worksheet.Cells [row' col].Value = p.ShowOnHomePage;  		col++;  		worksheet.Cells [row' col].Value = p.MetaKeywords;  		col++;  		worksheet.Cells [row' col].Value = p.MetaDescription;  		col++;  		worksheet.Cells [row' col].Value = p.MetaTitle;  		col++;  		worksheet.Cells [row' col].Value = p.GetSeName (0);  		col++;  		worksheet.Cells [row' col].Value = p.AllowCustomerReviews;  		col++;  		worksheet.Cells [row' col].Value = p.Published;  		col++;  		worksheet.Cells [row' col].Value = p.Sku;  		col++;  		worksheet.Cells [row' col].Value = p.ManufacturerPartNumber;  		col++;  		worksheet.Cells [row' col].Value = p.Gtin;  		col++;  		worksheet.Cells [row' col].Value = p.IsGiftCard;  		col++;  		worksheet.Cells [row' col].Value = p.GiftCardTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.RequireOtherProducts;  		col++;  		worksheet.Cells [row' col].Value = p.RequiredProductIds;  		col++;  		worksheet.Cells [row' col].Value = p.AutomaticallyAddRequiredProducts;  		col++;  		worksheet.Cells [row' col].Value = p.IsDownload;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.UnlimitedDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.MaxNumberOfDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadActivationTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.HasSampleDownload;  		col++;  		worksheet.Cells [row' col].Value = p.SampleDownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.HasUserAgreement;  		col++;  		worksheet.Cells [row' col].Value = p.UserAgreementText;  		col++;  		worksheet.Cells [row' col].Value = p.IsRecurring;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCycleLength;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCyclePeriodId;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringTotalCycles;  		col++;  		worksheet.Cells [row' col].Value = p.IsShipEnabled;  		col++;  		worksheet.Cells [row' col].Value = p.IsFreeShipping;  		col++;  		worksheet.Cells [row' col].Value = p.AdditionalShippingCharge;  		col++;  		worksheet.Cells [row' col].Value = p.DeliveryDateId;  		col++;  		worksheet.Cells [row' col].Value = p.WarehouseId;  		col++;  		worksheet.Cells [row' col].Value = p.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = p.TaxCategoryId;  		col++;  		worksheet.Cells [row' col].Value = p.ManageInventoryMethodId;  		col++;  		worksheet.Cells [row' col].Value = p.StockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockAvailability;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.MinStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.LowStockActivityId;  		col++;  		worksheet.Cells [row' col].Value = p.NotifyAdminForQuantityBelow;  		col++;  		worksheet.Cells [row' col].Value = p.BackorderModeId;  		col++;  		worksheet.Cells [row' col].Value = p.AllowBackInStockSubscriptions;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMinimumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMaximumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.AllowedQuantities;  		col++;  		worksheet.Cells [row' col].Value = p.AllowAddingOnlyExistingAttributeCombinations;  		col++;  		worksheet.Cells [row' col].Value = p.DisableBuyButton;  		col++;  		worksheet.Cells [row' col].Value = p.DisableWishlistButton;  		col++;  		worksheet.Cells [row' col].Value = p.AvailableForPreOrder;  		col++;  		worksheet.Cells [row' col].Value = p.PreOrderAvailabilityStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CallForPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Price;  		col++;  		worksheet.Cells [row' col].Value = p.OldPrice;  		col++;  		worksheet.Cells [row' col].Value = p.ProductCost;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPrice;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceEndDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CustomerEntersPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MinimumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MaximumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Weight;  		col++;  		worksheet.Cells [row' col].Value = p.Length;  		col++;  		worksheet.Cells [row' col].Value = p.Width;  		col++;  		worksheet.Cells [row' col].Value = p.Height;  		col++;  		worksheet.Cells [row' col].Value = p.CreatedOnUtc.ToOADate ();  		col++;  		//category identifiers  		string categoryIds = null;  		foreach (var pc in _categoryService.GetProductCategoriesByProductId (p.Id)) {  			categoryIds += pc.CategoryId;  			categoryIds += ";";  		}  		worksheet.Cells [row' col].Value = categoryIds;  		col++;  		//manufacturer identifiers  		string manufacturerIds = null;  		foreach (var pm in _manufacturerService.GetProductManufacturersByProductId (p.Id)) {  			manufacturerIds += pm.ManufacturerId;  			manufacturerIds += ";";  		}  		worksheet.Cells [row' col].Value = manufacturerIds;  		col++;  		//pictures (up to 3 pictures)  		string picture1 = null;  		string picture2 = null;  		string picture3 = null;  		var pictures = _pictureService.GetPicturesByProductId (p.Id' 3);  		for (int i = 0; i < pictures.Count; i++) {  			string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  			switch (i) {  			case 0:  				picture1 = pictureLocalPath;  				break;  			case 1:  				picture2 = pictureLocalPath;  				break;  			case 2:  				picture3 = pictureLocalPath;  				break;  			}  		}  		worksheet.Cells [row' col].Value = picture1;  		col++;  		worksheet.Cells [row' col].Value = picture2;  		col++;  		worksheet.Cells [row' col].Value = picture3;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Category = "Products";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} products"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Products");  	//Create Headers and format them   	var properties = new string[] {  		"ProductTypeId"'  		"ParentGroupedProductId"'  		"VisibleIndividually"'  		"Name"'  		"ShortDescription"'  		"FullDescription"'  		"VendorId"'  		"ProductTemplateId"'  		"ShowOnHomePage"'  		"MetaKeywords"'  		"MetaDescription"'  		"MetaTitle"'  		"SeName"'  		"AllowCustomerReviews"'  		"Published"'  		"SKU"'  		"ManufacturerPartNumber"'  		"Gtin"'  		"IsGiftCard"'  		"GiftCardTypeId"'  		"RequireOtherProducts"'  		"RequiredProductIds"'  		"AutomaticallyAddRequiredProducts"'  		"IsDownload"'  		"DownloadId"'  		"UnlimitedDownloads"'  		"MaxNumberOfDownloads"'  		"DownloadActivationTypeId"'  		"HasSampleDownload"'  		"SampleDownloadId"'  		"HasUserAgreement"'  		"UserAgreementText"'  		"IsRecurring"'  		"RecurringCycleLength"'  		"RecurringCyclePeriodId"'  		"RecurringTotalCycles"'  		"IsShipEnabled"'  		"IsFreeShipping"'  		"AdditionalShippingCharge"'  		"DeliveryDateId"'  		"WarehouseId"'  		"IsTaxExempt"'  		"TaxCategoryId"'  		"ManageInventoryMethodId"'  		"StockQuantity"'  		"DisplayStockAvailability"'  		"DisplayStockQuantity"'  		"MinStockQuantity"'  		"LowStockActivityId"'  		"NotifyAdminForQuantityBelow"'  		"BackorderModeId"'  		"AllowBackInStockSubscriptions"'  		"OrderMinimumQuantity"'  		"OrderMaximumQuantity"'  		"AllowedQuantities"'  		"AllowAddingOnlyExistingAttributeCombinations"'  		"DisableBuyButton"'  		"DisableWishlistButton"'  		"AvailableForPreOrder"'  		"PreOrderAvailabilityStartDateTimeUtc"'  		"CallForPrice"'  		"Price"'  		"OldPrice"'  		"ProductCost"'  		"SpecialPrice"'  		"SpecialPriceStartDateTimeUtc"'  		"SpecialPriceEndDateTimeUtc"'  		"CustomerEntersPrice"'  		"MinimumCustomerEnteredPrice"'  		"MaximumCustomerEnteredPrice"'  		"Weight"'  		"Length"'  		"Width"'  		"Height"'  		"CreatedOnUtc"'  		"CategoryIds"'  		"ManufacturerIds"'  		"Picture1"'  		"Picture2"'  		"Picture3"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var p in products) {  		int col = 1;  		worksheet.Cells [row' col].Value = p.ProductTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.ParentGroupedProductId;  		col++;  		worksheet.Cells [row' col].Value = p.VisibleIndividually;  		col++;  		worksheet.Cells [row' col].Value = p.Name;  		col++;  		worksheet.Cells [row' col].Value = p.ShortDescription;  		col++;  		worksheet.Cells [row' col].Value = p.FullDescription;  		col++;  		worksheet.Cells [row' col].Value = p.VendorId;  		col++;  		worksheet.Cells [row' col].Value = p.ProductTemplateId;  		col++;  		worksheet.Cells [row' col].Value = p.ShowOnHomePage;  		col++;  		worksheet.Cells [row' col].Value = p.MetaKeywords;  		col++;  		worksheet.Cells [row' col].Value = p.MetaDescription;  		col++;  		worksheet.Cells [row' col].Value = p.MetaTitle;  		col++;  		worksheet.Cells [row' col].Value = p.GetSeName (0);  		col++;  		worksheet.Cells [row' col].Value = p.AllowCustomerReviews;  		col++;  		worksheet.Cells [row' col].Value = p.Published;  		col++;  		worksheet.Cells [row' col].Value = p.Sku;  		col++;  		worksheet.Cells [row' col].Value = p.ManufacturerPartNumber;  		col++;  		worksheet.Cells [row' col].Value = p.Gtin;  		col++;  		worksheet.Cells [row' col].Value = p.IsGiftCard;  		col++;  		worksheet.Cells [row' col].Value = p.GiftCardTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.RequireOtherProducts;  		col++;  		worksheet.Cells [row' col].Value = p.RequiredProductIds;  		col++;  		worksheet.Cells [row' col].Value = p.AutomaticallyAddRequiredProducts;  		col++;  		worksheet.Cells [row' col].Value = p.IsDownload;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.UnlimitedDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.MaxNumberOfDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadActivationTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.HasSampleDownload;  		col++;  		worksheet.Cells [row' col].Value = p.SampleDownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.HasUserAgreement;  		col++;  		worksheet.Cells [row' col].Value = p.UserAgreementText;  		col++;  		worksheet.Cells [row' col].Value = p.IsRecurring;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCycleLength;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCyclePeriodId;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringTotalCycles;  		col++;  		worksheet.Cells [row' col].Value = p.IsShipEnabled;  		col++;  		worksheet.Cells [row' col].Value = p.IsFreeShipping;  		col++;  		worksheet.Cells [row' col].Value = p.AdditionalShippingCharge;  		col++;  		worksheet.Cells [row' col].Value = p.DeliveryDateId;  		col++;  		worksheet.Cells [row' col].Value = p.WarehouseId;  		col++;  		worksheet.Cells [row' col].Value = p.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = p.TaxCategoryId;  		col++;  		worksheet.Cells [row' col].Value = p.ManageInventoryMethodId;  		col++;  		worksheet.Cells [row' col].Value = p.StockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockAvailability;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.MinStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.LowStockActivityId;  		col++;  		worksheet.Cells [row' col].Value = p.NotifyAdminForQuantityBelow;  		col++;  		worksheet.Cells [row' col].Value = p.BackorderModeId;  		col++;  		worksheet.Cells [row' col].Value = p.AllowBackInStockSubscriptions;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMinimumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMaximumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.AllowedQuantities;  		col++;  		worksheet.Cells [row' col].Value = p.AllowAddingOnlyExistingAttributeCombinations;  		col++;  		worksheet.Cells [row' col].Value = p.DisableBuyButton;  		col++;  		worksheet.Cells [row' col].Value = p.DisableWishlistButton;  		col++;  		worksheet.Cells [row' col].Value = p.AvailableForPreOrder;  		col++;  		worksheet.Cells [row' col].Value = p.PreOrderAvailabilityStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CallForPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Price;  		col++;  		worksheet.Cells [row' col].Value = p.OldPrice;  		col++;  		worksheet.Cells [row' col].Value = p.ProductCost;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPrice;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceEndDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CustomerEntersPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MinimumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MaximumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Weight;  		col++;  		worksheet.Cells [row' col].Value = p.Length;  		col++;  		worksheet.Cells [row' col].Value = p.Width;  		col++;  		worksheet.Cells [row' col].Value = p.Height;  		col++;  		worksheet.Cells [row' col].Value = p.CreatedOnUtc.ToOADate ();  		col++;  		//category identifiers  		string categoryIds = null;  		foreach (var pc in _categoryService.GetProductCategoriesByProductId (p.Id)) {  			categoryIds += pc.CategoryId;  			categoryIds += ";";  		}  		worksheet.Cells [row' col].Value = categoryIds;  		col++;  		//manufacturer identifiers  		string manufacturerIds = null;  		foreach (var pm in _manufacturerService.GetProductManufacturersByProductId (p.Id)) {  			manufacturerIds += pm.ManufacturerId;  			manufacturerIds += ";";  		}  		worksheet.Cells [row' col].Value = manufacturerIds;  		col++;  		//pictures (up to 3 pictures)  		string picture1 = null;  		string picture2 = null;  		string picture3 = null;  		var pictures = _pictureService.GetPicturesByProductId (p.Id' 3);  		for (int i = 0; i < pictures.Count; i++) {  			string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  			switch (i) {  			case 0:  				picture1 = pictureLocalPath;  				break;  			case 1:  				picture2 = pictureLocalPath;  				break;  			case 2:  				picture3 = pictureLocalPath;  				break;  			}  		}  		worksheet.Cells [row' col].Value = picture1;  		col++;  		worksheet.Cells [row' col].Value = picture2;  		col++;  		worksheet.Cells [row' col].Value = picture3;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Category = "Products";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} products"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Products");  	//Create Headers and format them   	var properties = new string[] {  		"ProductTypeId"'  		"ParentGroupedProductId"'  		"VisibleIndividually"'  		"Name"'  		"ShortDescription"'  		"FullDescription"'  		"VendorId"'  		"ProductTemplateId"'  		"ShowOnHomePage"'  		"MetaKeywords"'  		"MetaDescription"'  		"MetaTitle"'  		"SeName"'  		"AllowCustomerReviews"'  		"Published"'  		"SKU"'  		"ManufacturerPartNumber"'  		"Gtin"'  		"IsGiftCard"'  		"GiftCardTypeId"'  		"RequireOtherProducts"'  		"RequiredProductIds"'  		"AutomaticallyAddRequiredProducts"'  		"IsDownload"'  		"DownloadId"'  		"UnlimitedDownloads"'  		"MaxNumberOfDownloads"'  		"DownloadActivationTypeId"'  		"HasSampleDownload"'  		"SampleDownloadId"'  		"HasUserAgreement"'  		"UserAgreementText"'  		"IsRecurring"'  		"RecurringCycleLength"'  		"RecurringCyclePeriodId"'  		"RecurringTotalCycles"'  		"IsShipEnabled"'  		"IsFreeShipping"'  		"AdditionalShippingCharge"'  		"DeliveryDateId"'  		"WarehouseId"'  		"IsTaxExempt"'  		"TaxCategoryId"'  		"ManageInventoryMethodId"'  		"StockQuantity"'  		"DisplayStockAvailability"'  		"DisplayStockQuantity"'  		"MinStockQuantity"'  		"LowStockActivityId"'  		"NotifyAdminForQuantityBelow"'  		"BackorderModeId"'  		"AllowBackInStockSubscriptions"'  		"OrderMinimumQuantity"'  		"OrderMaximumQuantity"'  		"AllowedQuantities"'  		"AllowAddingOnlyExistingAttributeCombinations"'  		"DisableBuyButton"'  		"DisableWishlistButton"'  		"AvailableForPreOrder"'  		"PreOrderAvailabilityStartDateTimeUtc"'  		"CallForPrice"'  		"Price"'  		"OldPrice"'  		"ProductCost"'  		"SpecialPrice"'  		"SpecialPriceStartDateTimeUtc"'  		"SpecialPriceEndDateTimeUtc"'  		"CustomerEntersPrice"'  		"MinimumCustomerEnteredPrice"'  		"MaximumCustomerEnteredPrice"'  		"Weight"'  		"Length"'  		"Width"'  		"Height"'  		"CreatedOnUtc"'  		"CategoryIds"'  		"ManufacturerIds"'  		"Picture1"'  		"Picture2"'  		"Picture3"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var p in products) {  		int col = 1;  		worksheet.Cells [row' col].Value = p.ProductTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.ParentGroupedProductId;  		col++;  		worksheet.Cells [row' col].Value = p.VisibleIndividually;  		col++;  		worksheet.Cells [row' col].Value = p.Name;  		col++;  		worksheet.Cells [row' col].Value = p.ShortDescription;  		col++;  		worksheet.Cells [row' col].Value = p.FullDescription;  		col++;  		worksheet.Cells [row' col].Value = p.VendorId;  		col++;  		worksheet.Cells [row' col].Value = p.ProductTemplateId;  		col++;  		worksheet.Cells [row' col].Value = p.ShowOnHomePage;  		col++;  		worksheet.Cells [row' col].Value = p.MetaKeywords;  		col++;  		worksheet.Cells [row' col].Value = p.MetaDescription;  		col++;  		worksheet.Cells [row' col].Value = p.MetaTitle;  		col++;  		worksheet.Cells [row' col].Value = p.GetSeName (0);  		col++;  		worksheet.Cells [row' col].Value = p.AllowCustomerReviews;  		col++;  		worksheet.Cells [row' col].Value = p.Published;  		col++;  		worksheet.Cells [row' col].Value = p.Sku;  		col++;  		worksheet.Cells [row' col].Value = p.ManufacturerPartNumber;  		col++;  		worksheet.Cells [row' col].Value = p.Gtin;  		col++;  		worksheet.Cells [row' col].Value = p.IsGiftCard;  		col++;  		worksheet.Cells [row' col].Value = p.GiftCardTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.RequireOtherProducts;  		col++;  		worksheet.Cells [row' col].Value = p.RequiredProductIds;  		col++;  		worksheet.Cells [row' col].Value = p.AutomaticallyAddRequiredProducts;  		col++;  		worksheet.Cells [row' col].Value = p.IsDownload;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.UnlimitedDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.MaxNumberOfDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadActivationTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.HasSampleDownload;  		col++;  		worksheet.Cells [row' col].Value = p.SampleDownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.HasUserAgreement;  		col++;  		worksheet.Cells [row' col].Value = p.UserAgreementText;  		col++;  		worksheet.Cells [row' col].Value = p.IsRecurring;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCycleLength;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCyclePeriodId;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringTotalCycles;  		col++;  		worksheet.Cells [row' col].Value = p.IsShipEnabled;  		col++;  		worksheet.Cells [row' col].Value = p.IsFreeShipping;  		col++;  		worksheet.Cells [row' col].Value = p.AdditionalShippingCharge;  		col++;  		worksheet.Cells [row' col].Value = p.DeliveryDateId;  		col++;  		worksheet.Cells [row' col].Value = p.WarehouseId;  		col++;  		worksheet.Cells [row' col].Value = p.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = p.TaxCategoryId;  		col++;  		worksheet.Cells [row' col].Value = p.ManageInventoryMethodId;  		col++;  		worksheet.Cells [row' col].Value = p.StockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockAvailability;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.MinStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.LowStockActivityId;  		col++;  		worksheet.Cells [row' col].Value = p.NotifyAdminForQuantityBelow;  		col++;  		worksheet.Cells [row' col].Value = p.BackorderModeId;  		col++;  		worksheet.Cells [row' col].Value = p.AllowBackInStockSubscriptions;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMinimumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMaximumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.AllowedQuantities;  		col++;  		worksheet.Cells [row' col].Value = p.AllowAddingOnlyExistingAttributeCombinations;  		col++;  		worksheet.Cells [row' col].Value = p.DisableBuyButton;  		col++;  		worksheet.Cells [row' col].Value = p.DisableWishlistButton;  		col++;  		worksheet.Cells [row' col].Value = p.AvailableForPreOrder;  		col++;  		worksheet.Cells [row' col].Value = p.PreOrderAvailabilityStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CallForPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Price;  		col++;  		worksheet.Cells [row' col].Value = p.OldPrice;  		col++;  		worksheet.Cells [row' col].Value = p.ProductCost;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPrice;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceEndDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CustomerEntersPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MinimumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MaximumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Weight;  		col++;  		worksheet.Cells [row' col].Value = p.Length;  		col++;  		worksheet.Cells [row' col].Value = p.Width;  		col++;  		worksheet.Cells [row' col].Value = p.Height;  		col++;  		worksheet.Cells [row' col].Value = p.CreatedOnUtc.ToOADate ();  		col++;  		//category identifiers  		string categoryIds = null;  		foreach (var pc in _categoryService.GetProductCategoriesByProductId (p.Id)) {  			categoryIds += pc.CategoryId;  			categoryIds += ";";  		}  		worksheet.Cells [row' col].Value = categoryIds;  		col++;  		//manufacturer identifiers  		string manufacturerIds = null;  		foreach (var pm in _manufacturerService.GetProductManufacturersByProductId (p.Id)) {  			manufacturerIds += pm.ManufacturerId;  			manufacturerIds += ";";  		}  		worksheet.Cells [row' col].Value = manufacturerIds;  		col++;  		//pictures (up to 3 pictures)  		string picture1 = null;  		string picture2 = null;  		string picture3 = null;  		var pictures = _pictureService.GetPicturesByProductId (p.Id' 3);  		for (int i = 0; i < pictures.Count; i++) {  			string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  			switch (i) {  			case 0:  				picture1 = pictureLocalPath;  				break;  			case 1:  				picture2 = pictureLocalPath;  				break;  			case 2:  				picture3 = pictureLocalPath;  				break;  			}  		}  		worksheet.Cells [row' col].Value = picture1;  		col++;  		worksheet.Cells [row' col].Value = picture2;  		col++;  		worksheet.Cells [row' col].Value = picture3;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Category = "Products";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} products"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Products");  	//Create Headers and format them   	var properties = new string[] {  		"ProductTypeId"'  		"ParentGroupedProductId"'  		"VisibleIndividually"'  		"Name"'  		"ShortDescription"'  		"FullDescription"'  		"VendorId"'  		"ProductTemplateId"'  		"ShowOnHomePage"'  		"MetaKeywords"'  		"MetaDescription"'  		"MetaTitle"'  		"SeName"'  		"AllowCustomerReviews"'  		"Published"'  		"SKU"'  		"ManufacturerPartNumber"'  		"Gtin"'  		"IsGiftCard"'  		"GiftCardTypeId"'  		"RequireOtherProducts"'  		"RequiredProductIds"'  		"AutomaticallyAddRequiredProducts"'  		"IsDownload"'  		"DownloadId"'  		"UnlimitedDownloads"'  		"MaxNumberOfDownloads"'  		"DownloadActivationTypeId"'  		"HasSampleDownload"'  		"SampleDownloadId"'  		"HasUserAgreement"'  		"UserAgreementText"'  		"IsRecurring"'  		"RecurringCycleLength"'  		"RecurringCyclePeriodId"'  		"RecurringTotalCycles"'  		"IsShipEnabled"'  		"IsFreeShipping"'  		"AdditionalShippingCharge"'  		"DeliveryDateId"'  		"WarehouseId"'  		"IsTaxExempt"'  		"TaxCategoryId"'  		"ManageInventoryMethodId"'  		"StockQuantity"'  		"DisplayStockAvailability"'  		"DisplayStockQuantity"'  		"MinStockQuantity"'  		"LowStockActivityId"'  		"NotifyAdminForQuantityBelow"'  		"BackorderModeId"'  		"AllowBackInStockSubscriptions"'  		"OrderMinimumQuantity"'  		"OrderMaximumQuantity"'  		"AllowedQuantities"'  		"AllowAddingOnlyExistingAttributeCombinations"'  		"DisableBuyButton"'  		"DisableWishlistButton"'  		"AvailableForPreOrder"'  		"PreOrderAvailabilityStartDateTimeUtc"'  		"CallForPrice"'  		"Price"'  		"OldPrice"'  		"ProductCost"'  		"SpecialPrice"'  		"SpecialPriceStartDateTimeUtc"'  		"SpecialPriceEndDateTimeUtc"'  		"CustomerEntersPrice"'  		"MinimumCustomerEnteredPrice"'  		"MaximumCustomerEnteredPrice"'  		"Weight"'  		"Length"'  		"Width"'  		"Height"'  		"CreatedOnUtc"'  		"CategoryIds"'  		"ManufacturerIds"'  		"Picture1"'  		"Picture2"'  		"Picture3"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var p in products) {  		int col = 1;  		worksheet.Cells [row' col].Value = p.ProductTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.ParentGroupedProductId;  		col++;  		worksheet.Cells [row' col].Value = p.VisibleIndividually;  		col++;  		worksheet.Cells [row' col].Value = p.Name;  		col++;  		worksheet.Cells [row' col].Value = p.ShortDescription;  		col++;  		worksheet.Cells [row' col].Value = p.FullDescription;  		col++;  		worksheet.Cells [row' col].Value = p.VendorId;  		col++;  		worksheet.Cells [row' col].Value = p.ProductTemplateId;  		col++;  		worksheet.Cells [row' col].Value = p.ShowOnHomePage;  		col++;  		worksheet.Cells [row' col].Value = p.MetaKeywords;  		col++;  		worksheet.Cells [row' col].Value = p.MetaDescription;  		col++;  		worksheet.Cells [row' col].Value = p.MetaTitle;  		col++;  		worksheet.Cells [row' col].Value = p.GetSeName (0);  		col++;  		worksheet.Cells [row' col].Value = p.AllowCustomerReviews;  		col++;  		worksheet.Cells [row' col].Value = p.Published;  		col++;  		worksheet.Cells [row' col].Value = p.Sku;  		col++;  		worksheet.Cells [row' col].Value = p.ManufacturerPartNumber;  		col++;  		worksheet.Cells [row' col].Value = p.Gtin;  		col++;  		worksheet.Cells [row' col].Value = p.IsGiftCard;  		col++;  		worksheet.Cells [row' col].Value = p.GiftCardTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.RequireOtherProducts;  		col++;  		worksheet.Cells [row' col].Value = p.RequiredProductIds;  		col++;  		worksheet.Cells [row' col].Value = p.AutomaticallyAddRequiredProducts;  		col++;  		worksheet.Cells [row' col].Value = p.IsDownload;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.UnlimitedDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.MaxNumberOfDownloads;  		col++;  		worksheet.Cells [row' col].Value = p.DownloadActivationTypeId;  		col++;  		worksheet.Cells [row' col].Value = p.HasSampleDownload;  		col++;  		worksheet.Cells [row' col].Value = p.SampleDownloadId;  		col++;  		worksheet.Cells [row' col].Value = p.HasUserAgreement;  		col++;  		worksheet.Cells [row' col].Value = p.UserAgreementText;  		col++;  		worksheet.Cells [row' col].Value = p.IsRecurring;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCycleLength;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringCyclePeriodId;  		col++;  		worksheet.Cells [row' col].Value = p.RecurringTotalCycles;  		col++;  		worksheet.Cells [row' col].Value = p.IsShipEnabled;  		col++;  		worksheet.Cells [row' col].Value = p.IsFreeShipping;  		col++;  		worksheet.Cells [row' col].Value = p.AdditionalShippingCharge;  		col++;  		worksheet.Cells [row' col].Value = p.DeliveryDateId;  		col++;  		worksheet.Cells [row' col].Value = p.WarehouseId;  		col++;  		worksheet.Cells [row' col].Value = p.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = p.TaxCategoryId;  		col++;  		worksheet.Cells [row' col].Value = p.ManageInventoryMethodId;  		col++;  		worksheet.Cells [row' col].Value = p.StockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockAvailability;  		col++;  		worksheet.Cells [row' col].Value = p.DisplayStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.MinStockQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.LowStockActivityId;  		col++;  		worksheet.Cells [row' col].Value = p.NotifyAdminForQuantityBelow;  		col++;  		worksheet.Cells [row' col].Value = p.BackorderModeId;  		col++;  		worksheet.Cells [row' col].Value = p.AllowBackInStockSubscriptions;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMinimumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.OrderMaximumQuantity;  		col++;  		worksheet.Cells [row' col].Value = p.AllowedQuantities;  		col++;  		worksheet.Cells [row' col].Value = p.AllowAddingOnlyExistingAttributeCombinations;  		col++;  		worksheet.Cells [row' col].Value = p.DisableBuyButton;  		col++;  		worksheet.Cells [row' col].Value = p.DisableWishlistButton;  		col++;  		worksheet.Cells [row' col].Value = p.AvailableForPreOrder;  		col++;  		worksheet.Cells [row' col].Value = p.PreOrderAvailabilityStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CallForPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Price;  		col++;  		worksheet.Cells [row' col].Value = p.OldPrice;  		col++;  		worksheet.Cells [row' col].Value = p.ProductCost;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPrice;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceStartDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.SpecialPriceEndDateTimeUtc;  		col++;  		worksheet.Cells [row' col].Value = p.CustomerEntersPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MinimumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.MaximumCustomerEnteredPrice;  		col++;  		worksheet.Cells [row' col].Value = p.Weight;  		col++;  		worksheet.Cells [row' col].Value = p.Length;  		col++;  		worksheet.Cells [row' col].Value = p.Width;  		col++;  		worksheet.Cells [row' col].Value = p.Height;  		col++;  		worksheet.Cells [row' col].Value = p.CreatedOnUtc.ToOADate ();  		col++;  		//category identifiers  		string categoryIds = null;  		foreach (var pc in _categoryService.GetProductCategoriesByProductId (p.Id)) {  			categoryIds += pc.CategoryId;  			categoryIds += ";";  		}  		worksheet.Cells [row' col].Value = categoryIds;  		col++;  		//manufacturer identifiers  		string manufacturerIds = null;  		foreach (var pm in _manufacturerService.GetProductManufacturersByProductId (p.Id)) {  			manufacturerIds += pm.ManufacturerId;  			manufacturerIds += ";";  		}  		worksheet.Cells [row' col].Value = manufacturerIds;  		col++;  		//pictures (up to 3 pictures)  		string picture1 = null;  		string picture2 = null;  		string picture3 = null;  		var pictures = _pictureService.GetPicturesByProductId (p.Id' 3);  		for (int i = 0; i < pictures.Count; i++) {  			string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  			switch (i) {  			case 0:  				picture1 = pictureLocalPath;  				break;  			case 1:  				picture2 = pictureLocalPath;  				break;  			case 2:  				picture3 = pictureLocalPath;  				break;  			}  		}  		worksheet.Cells [row' col].Value = picture1;  		col++;  		worksheet.Cells [row' col].Value = picture2;  		col++;  		worksheet.Cells [row' col].Value = picture3;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} products"' storeName);  	//xlPackage.Workbook.Properties.Category = "Products";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} products"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: foreach (var p in products) {  	int col = 1;  	worksheet.Cells [row' col].Value = p.ProductTypeId;  	col++;  	worksheet.Cells [row' col].Value = p.ParentGroupedProductId;  	col++;  	worksheet.Cells [row' col].Value = p.VisibleIndividually;  	col++;  	worksheet.Cells [row' col].Value = p.Name;  	col++;  	worksheet.Cells [row' col].Value = p.ShortDescription;  	col++;  	worksheet.Cells [row' col].Value = p.FullDescription;  	col++;  	worksheet.Cells [row' col].Value = p.VendorId;  	col++;  	worksheet.Cells [row' col].Value = p.ProductTemplateId;  	col++;  	worksheet.Cells [row' col].Value = p.ShowOnHomePage;  	col++;  	worksheet.Cells [row' col].Value = p.MetaKeywords;  	col++;  	worksheet.Cells [row' col].Value = p.MetaDescription;  	col++;  	worksheet.Cells [row' col].Value = p.MetaTitle;  	col++;  	worksheet.Cells [row' col].Value = p.GetSeName (0);  	col++;  	worksheet.Cells [row' col].Value = p.AllowCustomerReviews;  	col++;  	worksheet.Cells [row' col].Value = p.Published;  	col++;  	worksheet.Cells [row' col].Value = p.Sku;  	col++;  	worksheet.Cells [row' col].Value = p.ManufacturerPartNumber;  	col++;  	worksheet.Cells [row' col].Value = p.Gtin;  	col++;  	worksheet.Cells [row' col].Value = p.IsGiftCard;  	col++;  	worksheet.Cells [row' col].Value = p.GiftCardTypeId;  	col++;  	worksheet.Cells [row' col].Value = p.RequireOtherProducts;  	col++;  	worksheet.Cells [row' col].Value = p.RequiredProductIds;  	col++;  	worksheet.Cells [row' col].Value = p.AutomaticallyAddRequiredProducts;  	col++;  	worksheet.Cells [row' col].Value = p.IsDownload;  	col++;  	worksheet.Cells [row' col].Value = p.DownloadId;  	col++;  	worksheet.Cells [row' col].Value = p.UnlimitedDownloads;  	col++;  	worksheet.Cells [row' col].Value = p.MaxNumberOfDownloads;  	col++;  	worksheet.Cells [row' col].Value = p.DownloadActivationTypeId;  	col++;  	worksheet.Cells [row' col].Value = p.HasSampleDownload;  	col++;  	worksheet.Cells [row' col].Value = p.SampleDownloadId;  	col++;  	worksheet.Cells [row' col].Value = p.HasUserAgreement;  	col++;  	worksheet.Cells [row' col].Value = p.UserAgreementText;  	col++;  	worksheet.Cells [row' col].Value = p.IsRecurring;  	col++;  	worksheet.Cells [row' col].Value = p.RecurringCycleLength;  	col++;  	worksheet.Cells [row' col].Value = p.RecurringCyclePeriodId;  	col++;  	worksheet.Cells [row' col].Value = p.RecurringTotalCycles;  	col++;  	worksheet.Cells [row' col].Value = p.IsShipEnabled;  	col++;  	worksheet.Cells [row' col].Value = p.IsFreeShipping;  	col++;  	worksheet.Cells [row' col].Value = p.AdditionalShippingCharge;  	col++;  	worksheet.Cells [row' col].Value = p.DeliveryDateId;  	col++;  	worksheet.Cells [row' col].Value = p.WarehouseId;  	col++;  	worksheet.Cells [row' col].Value = p.IsTaxExempt;  	col++;  	worksheet.Cells [row' col].Value = p.TaxCategoryId;  	col++;  	worksheet.Cells [row' col].Value = p.ManageInventoryMethodId;  	col++;  	worksheet.Cells [row' col].Value = p.StockQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.DisplayStockAvailability;  	col++;  	worksheet.Cells [row' col].Value = p.DisplayStockQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.MinStockQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.LowStockActivityId;  	col++;  	worksheet.Cells [row' col].Value = p.NotifyAdminForQuantityBelow;  	col++;  	worksheet.Cells [row' col].Value = p.BackorderModeId;  	col++;  	worksheet.Cells [row' col].Value = p.AllowBackInStockSubscriptions;  	col++;  	worksheet.Cells [row' col].Value = p.OrderMinimumQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.OrderMaximumQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.AllowedQuantities;  	col++;  	worksheet.Cells [row' col].Value = p.AllowAddingOnlyExistingAttributeCombinations;  	col++;  	worksheet.Cells [row' col].Value = p.DisableBuyButton;  	col++;  	worksheet.Cells [row' col].Value = p.DisableWishlistButton;  	col++;  	worksheet.Cells [row' col].Value = p.AvailableForPreOrder;  	col++;  	worksheet.Cells [row' col].Value = p.PreOrderAvailabilityStartDateTimeUtc;  	col++;  	worksheet.Cells [row' col].Value = p.CallForPrice;  	col++;  	worksheet.Cells [row' col].Value = p.Price;  	col++;  	worksheet.Cells [row' col].Value = p.OldPrice;  	col++;  	worksheet.Cells [row' col].Value = p.ProductCost;  	col++;  	worksheet.Cells [row' col].Value = p.SpecialPrice;  	col++;  	worksheet.Cells [row' col].Value = p.SpecialPriceStartDateTimeUtc;  	col++;  	worksheet.Cells [row' col].Value = p.SpecialPriceEndDateTimeUtc;  	col++;  	worksheet.Cells [row' col].Value = p.CustomerEntersPrice;  	col++;  	worksheet.Cells [row' col].Value = p.MinimumCustomerEnteredPrice;  	col++;  	worksheet.Cells [row' col].Value = p.MaximumCustomerEnteredPrice;  	col++;  	worksheet.Cells [row' col].Value = p.Weight;  	col++;  	worksheet.Cells [row' col].Value = p.Length;  	col++;  	worksheet.Cells [row' col].Value = p.Width;  	col++;  	worksheet.Cells [row' col].Value = p.Height;  	col++;  	worksheet.Cells [row' col].Value = p.CreatedOnUtc.ToOADate ();  	col++;  	//category identifiers  	string categoryIds = null;  	foreach (var pc in _categoryService.GetProductCategoriesByProductId (p.Id)) {  		categoryIds += pc.CategoryId;  		categoryIds += ";";  	}  	worksheet.Cells [row' col].Value = categoryIds;  	col++;  	//manufacturer identifiers  	string manufacturerIds = null;  	foreach (var pm in _manufacturerService.GetProductManufacturersByProductId (p.Id)) {  		manufacturerIds += pm.ManufacturerId;  		manufacturerIds += ";";  	}  	worksheet.Cells [row' col].Value = manufacturerIds;  	col++;  	//pictures (up to 3 pictures)  	string picture1 = null;  	string picture2 = null;  	string picture3 = null;  	var pictures = _pictureService.GetPicturesByProductId (p.Id' 3);  	for (int i = 0; i < pictures.Count; i++) {  		string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  		switch (i) {  		case 0:  			picture1 = pictureLocalPath;  			break;  		case 1:  			picture2 = pictureLocalPath;  			break;  		case 2:  			picture3 = pictureLocalPath;  			break;  		}  	}  	worksheet.Cells [row' col].Value = picture1;  	col++;  	worksheet.Cells [row' col].Value = picture2;  	col++;  	worksheet.Cells [row' col].Value = picture3;  	col++;  	row++;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: foreach (var p in products) {  	int col = 1;  	worksheet.Cells [row' col].Value = p.ProductTypeId;  	col++;  	worksheet.Cells [row' col].Value = p.ParentGroupedProductId;  	col++;  	worksheet.Cells [row' col].Value = p.VisibleIndividually;  	col++;  	worksheet.Cells [row' col].Value = p.Name;  	col++;  	worksheet.Cells [row' col].Value = p.ShortDescription;  	col++;  	worksheet.Cells [row' col].Value = p.FullDescription;  	col++;  	worksheet.Cells [row' col].Value = p.VendorId;  	col++;  	worksheet.Cells [row' col].Value = p.ProductTemplateId;  	col++;  	worksheet.Cells [row' col].Value = p.ShowOnHomePage;  	col++;  	worksheet.Cells [row' col].Value = p.MetaKeywords;  	col++;  	worksheet.Cells [row' col].Value = p.MetaDescription;  	col++;  	worksheet.Cells [row' col].Value = p.MetaTitle;  	col++;  	worksheet.Cells [row' col].Value = p.GetSeName (0);  	col++;  	worksheet.Cells [row' col].Value = p.AllowCustomerReviews;  	col++;  	worksheet.Cells [row' col].Value = p.Published;  	col++;  	worksheet.Cells [row' col].Value = p.Sku;  	col++;  	worksheet.Cells [row' col].Value = p.ManufacturerPartNumber;  	col++;  	worksheet.Cells [row' col].Value = p.Gtin;  	col++;  	worksheet.Cells [row' col].Value = p.IsGiftCard;  	col++;  	worksheet.Cells [row' col].Value = p.GiftCardTypeId;  	col++;  	worksheet.Cells [row' col].Value = p.RequireOtherProducts;  	col++;  	worksheet.Cells [row' col].Value = p.RequiredProductIds;  	col++;  	worksheet.Cells [row' col].Value = p.AutomaticallyAddRequiredProducts;  	col++;  	worksheet.Cells [row' col].Value = p.IsDownload;  	col++;  	worksheet.Cells [row' col].Value = p.DownloadId;  	col++;  	worksheet.Cells [row' col].Value = p.UnlimitedDownloads;  	col++;  	worksheet.Cells [row' col].Value = p.MaxNumberOfDownloads;  	col++;  	worksheet.Cells [row' col].Value = p.DownloadActivationTypeId;  	col++;  	worksheet.Cells [row' col].Value = p.HasSampleDownload;  	col++;  	worksheet.Cells [row' col].Value = p.SampleDownloadId;  	col++;  	worksheet.Cells [row' col].Value = p.HasUserAgreement;  	col++;  	worksheet.Cells [row' col].Value = p.UserAgreementText;  	col++;  	worksheet.Cells [row' col].Value = p.IsRecurring;  	col++;  	worksheet.Cells [row' col].Value = p.RecurringCycleLength;  	col++;  	worksheet.Cells [row' col].Value = p.RecurringCyclePeriodId;  	col++;  	worksheet.Cells [row' col].Value = p.RecurringTotalCycles;  	col++;  	worksheet.Cells [row' col].Value = p.IsShipEnabled;  	col++;  	worksheet.Cells [row' col].Value = p.IsFreeShipping;  	col++;  	worksheet.Cells [row' col].Value = p.AdditionalShippingCharge;  	col++;  	worksheet.Cells [row' col].Value = p.DeliveryDateId;  	col++;  	worksheet.Cells [row' col].Value = p.WarehouseId;  	col++;  	worksheet.Cells [row' col].Value = p.IsTaxExempt;  	col++;  	worksheet.Cells [row' col].Value = p.TaxCategoryId;  	col++;  	worksheet.Cells [row' col].Value = p.ManageInventoryMethodId;  	col++;  	worksheet.Cells [row' col].Value = p.StockQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.DisplayStockAvailability;  	col++;  	worksheet.Cells [row' col].Value = p.DisplayStockQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.MinStockQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.LowStockActivityId;  	col++;  	worksheet.Cells [row' col].Value = p.NotifyAdminForQuantityBelow;  	col++;  	worksheet.Cells [row' col].Value = p.BackorderModeId;  	col++;  	worksheet.Cells [row' col].Value = p.AllowBackInStockSubscriptions;  	col++;  	worksheet.Cells [row' col].Value = p.OrderMinimumQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.OrderMaximumQuantity;  	col++;  	worksheet.Cells [row' col].Value = p.AllowedQuantities;  	col++;  	worksheet.Cells [row' col].Value = p.AllowAddingOnlyExistingAttributeCombinations;  	col++;  	worksheet.Cells [row' col].Value = p.DisableBuyButton;  	col++;  	worksheet.Cells [row' col].Value = p.DisableWishlistButton;  	col++;  	worksheet.Cells [row' col].Value = p.AvailableForPreOrder;  	col++;  	worksheet.Cells [row' col].Value = p.PreOrderAvailabilityStartDateTimeUtc;  	col++;  	worksheet.Cells [row' col].Value = p.CallForPrice;  	col++;  	worksheet.Cells [row' col].Value = p.Price;  	col++;  	worksheet.Cells [row' col].Value = p.OldPrice;  	col++;  	worksheet.Cells [row' col].Value = p.ProductCost;  	col++;  	worksheet.Cells [row' col].Value = p.SpecialPrice;  	col++;  	worksheet.Cells [row' col].Value = p.SpecialPriceStartDateTimeUtc;  	col++;  	worksheet.Cells [row' col].Value = p.SpecialPriceEndDateTimeUtc;  	col++;  	worksheet.Cells [row' col].Value = p.CustomerEntersPrice;  	col++;  	worksheet.Cells [row' col].Value = p.MinimumCustomerEnteredPrice;  	col++;  	worksheet.Cells [row' col].Value = p.MaximumCustomerEnteredPrice;  	col++;  	worksheet.Cells [row' col].Value = p.Weight;  	col++;  	worksheet.Cells [row' col].Value = p.Length;  	col++;  	worksheet.Cells [row' col].Value = p.Width;  	col++;  	worksheet.Cells [row' col].Value = p.Height;  	col++;  	worksheet.Cells [row' col].Value = p.CreatedOnUtc.ToOADate ();  	col++;  	//category identifiers  	string categoryIds = null;  	foreach (var pc in _categoryService.GetProductCategoriesByProductId (p.Id)) {  		categoryIds += pc.CategoryId;  		categoryIds += ";";  	}  	worksheet.Cells [row' col].Value = categoryIds;  	col++;  	//manufacturer identifiers  	string manufacturerIds = null;  	foreach (var pm in _manufacturerService.GetProductManufacturersByProductId (p.Id)) {  		manufacturerIds += pm.ManufacturerId;  		manufacturerIds += ";";  	}  	worksheet.Cells [row' col].Value = manufacturerIds;  	col++;  	//pictures (up to 3 pictures)  	string picture1 = null;  	string picture2 = null;  	string picture3 = null;  	var pictures = _pictureService.GetPicturesByProductId (p.Id' 3);  	for (int i = 0; i < pictures.Count; i++) {  		string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  		switch (i) {  		case 0:  			picture1 = pictureLocalPath;  			break;  		case 1:  			picture2 = pictureLocalPath;  			break;  		case 2:  			picture3 = pictureLocalPath;  			break;  		}  	}  	worksheet.Cells [row' col].Value = picture1;  	col++;  	worksheet.Cells [row' col].Value = picture2;  	col++;  	worksheet.Cells [row' col].Value = picture3;  	col++;  	row++;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: for (int i = 0; i < pictures.Count; i++) {  	string pictureLocalPath = _pictureService.GetThumbLocalPath (pictures [i]);  	switch (i) {  	case 0:  		picture1 = pictureLocalPath;  		break;  	case 1:  		picture2 = pictureLocalPath;  		break;  	case 2:  		picture3 = pictureLocalPath;  		break;  	}  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following statement contains a magic number: switch (i) {  case 0:  	picture1 = pictureLocalPath;  	break;  case 1:  	picture2 = pictureLocalPath;  	break;  case 2:  	picture3 = pictureLocalPath;  	break;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Orders");  	//Create Headers and format them  	var properties = new string[] {  		//order properties  		"OrderId"'  		"StoreId"'  		"OrderGuid"'  		"CustomerId"'  		"OrderStatusId"'  		"PaymentStatusId"'  		"ShippingStatusId"'  		"OrderSubtotalInclTax"'  		"OrderSubtotalExclTax"'  		"OrderSubTotalDiscountInclTax"'  		"OrderSubTotalDiscountExclTax"'  		"OrderShippingInclTax"'  		"OrderShippingExclTax"'  		"PaymentMethodAdditionalFeeInclTax"'  		"PaymentMethodAdditionalFeeExclTax"'  		"TaxRates"'  		"OrderTax"'  		"OrderTotal"'  		"RefundedAmount"'  		"OrderDiscount"'  		"CurrencyRate"'  		"CustomerCurrencyCode"'  		"AffiliateId"'  		"PaymentMethodSystemName"'  		"PurchaseOrderNumber"'  		"ShippingPickUpInStore"'  		"ShippingMethod"'  		"ShippingRateComputationMethodSystemName"'  		"CustomValuesXml"'  		"VatNumber"'  		"CreatedOnUtc"'  		//billing address  		"BillingFirstName"'  		"BillingLastName"'  		"BillingEmail"'  		"BillingCompany"'  		"BillingCountry"'  		"BillingStateProvince"'  		"BillingCity"'  		"BillingAddress1"'  		"BillingAddress2"'  		"BillingZipPostalCode"'  		"BillingPhoneNumber"'  		"BillingFaxNumber"'  		//shipping address  		"ShippingFirstName"'  		"ShippingLastName"'  		"ShippingEmail"'  		"ShippingCompany"'  		"ShippingCountry"'  		"ShippingStateProvince"'  		"ShippingCity"'  		"ShippingAddress1"'  		"ShippingAddress2"'  		"ShippingZipPostalCode"'  		"ShippingPhoneNumber"'  		"ShippingFaxNumber"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var order in orders) {  		int col = 1;  		//order properties  		worksheet.Cells [row' col].Value = order.Id;  		col++;  		worksheet.Cells [row' col].Value = order.StoreId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderGuid;  		col++;  		worksheet.Cells [row' col].Value = order.CustomerId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubtotalInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubtotalExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubTotalDiscountInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubTotalDiscountExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderShippingInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderShippingExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodAdditionalFeeInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodAdditionalFeeExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.TaxRates;  		col++;  		worksheet.Cells [row' col].Value = order.OrderTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderTotal;  		col++;  		worksheet.Cells [row' col].Value = order.RefundedAmount;  		col++;  		worksheet.Cells [row' col].Value = order.OrderDiscount;  		col++;  		worksheet.Cells [row' col].Value = order.CurrencyRate;  		col++;  		worksheet.Cells [row' col].Value = order.CustomerCurrencyCode;  		col++;  		worksheet.Cells [row' col].Value = order.AffiliateId;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodSystemName;  		col++;  		worksheet.Cells [row' col].Value = order.PurchaseOrderNumber;  		col++;  		worksheet.Cells [row' col].Value = order.PickUpInStore;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingMethod;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingRateComputationMethodSystemName;  		col++;  		worksheet.Cells [row' col].Value = order.CustomValuesXml;  		col++;  		worksheet.Cells [row' col].Value = order.VatNumber;  		col++;  		worksheet.Cells [row' col].Value = order.CreatedOnUtc.ToOADate ();  		col++;  		//billing address  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.FirstName : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.LastName : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Email : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Company : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.Country != null ? order.BillingAddress.Country.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.City : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Address1 : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Address2 : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.ZipPostalCode : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.PhoneNumber : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.FaxNumber : "";  		col++;  		//shipping address  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.FirstName : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.LastName : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Email : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Company : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.Country != null ? order.ShippingAddress.Country.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.City : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Address1 : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Address2 : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.ZipPostalCode : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.PhoneNumber : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.FaxNumber : "";  		col++;  		//next row  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Category = "Orders";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} orders"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Orders");  	//Create Headers and format them  	var properties = new string[] {  		//order properties  		"OrderId"'  		"StoreId"'  		"OrderGuid"'  		"CustomerId"'  		"OrderStatusId"'  		"PaymentStatusId"'  		"ShippingStatusId"'  		"OrderSubtotalInclTax"'  		"OrderSubtotalExclTax"'  		"OrderSubTotalDiscountInclTax"'  		"OrderSubTotalDiscountExclTax"'  		"OrderShippingInclTax"'  		"OrderShippingExclTax"'  		"PaymentMethodAdditionalFeeInclTax"'  		"PaymentMethodAdditionalFeeExclTax"'  		"TaxRates"'  		"OrderTax"'  		"OrderTotal"'  		"RefundedAmount"'  		"OrderDiscount"'  		"CurrencyRate"'  		"CustomerCurrencyCode"'  		"AffiliateId"'  		"PaymentMethodSystemName"'  		"PurchaseOrderNumber"'  		"ShippingPickUpInStore"'  		"ShippingMethod"'  		"ShippingRateComputationMethodSystemName"'  		"CustomValuesXml"'  		"VatNumber"'  		"CreatedOnUtc"'  		//billing address  		"BillingFirstName"'  		"BillingLastName"'  		"BillingEmail"'  		"BillingCompany"'  		"BillingCountry"'  		"BillingStateProvince"'  		"BillingCity"'  		"BillingAddress1"'  		"BillingAddress2"'  		"BillingZipPostalCode"'  		"BillingPhoneNumber"'  		"BillingFaxNumber"'  		//shipping address  		"ShippingFirstName"'  		"ShippingLastName"'  		"ShippingEmail"'  		"ShippingCompany"'  		"ShippingCountry"'  		"ShippingStateProvince"'  		"ShippingCity"'  		"ShippingAddress1"'  		"ShippingAddress2"'  		"ShippingZipPostalCode"'  		"ShippingPhoneNumber"'  		"ShippingFaxNumber"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var order in orders) {  		int col = 1;  		//order properties  		worksheet.Cells [row' col].Value = order.Id;  		col++;  		worksheet.Cells [row' col].Value = order.StoreId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderGuid;  		col++;  		worksheet.Cells [row' col].Value = order.CustomerId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubtotalInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubtotalExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubTotalDiscountInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubTotalDiscountExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderShippingInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderShippingExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodAdditionalFeeInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodAdditionalFeeExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.TaxRates;  		col++;  		worksheet.Cells [row' col].Value = order.OrderTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderTotal;  		col++;  		worksheet.Cells [row' col].Value = order.RefundedAmount;  		col++;  		worksheet.Cells [row' col].Value = order.OrderDiscount;  		col++;  		worksheet.Cells [row' col].Value = order.CurrencyRate;  		col++;  		worksheet.Cells [row' col].Value = order.CustomerCurrencyCode;  		col++;  		worksheet.Cells [row' col].Value = order.AffiliateId;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodSystemName;  		col++;  		worksheet.Cells [row' col].Value = order.PurchaseOrderNumber;  		col++;  		worksheet.Cells [row' col].Value = order.PickUpInStore;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingMethod;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingRateComputationMethodSystemName;  		col++;  		worksheet.Cells [row' col].Value = order.CustomValuesXml;  		col++;  		worksheet.Cells [row' col].Value = order.VatNumber;  		col++;  		worksheet.Cells [row' col].Value = order.CreatedOnUtc.ToOADate ();  		col++;  		//billing address  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.FirstName : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.LastName : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Email : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Company : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.Country != null ? order.BillingAddress.Country.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.City : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Address1 : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Address2 : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.ZipPostalCode : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.PhoneNumber : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.FaxNumber : "";  		col++;  		//shipping address  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.FirstName : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.LastName : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Email : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Company : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.Country != null ? order.ShippingAddress.Country.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.City : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Address1 : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Address2 : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.ZipPostalCode : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.PhoneNumber : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.FaxNumber : "";  		col++;  		//next row  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Category = "Orders";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} orders"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Orders");  	//Create Headers and format them  	var properties = new string[] {  		//order properties  		"OrderId"'  		"StoreId"'  		"OrderGuid"'  		"CustomerId"'  		"OrderStatusId"'  		"PaymentStatusId"'  		"ShippingStatusId"'  		"OrderSubtotalInclTax"'  		"OrderSubtotalExclTax"'  		"OrderSubTotalDiscountInclTax"'  		"OrderSubTotalDiscountExclTax"'  		"OrderShippingInclTax"'  		"OrderShippingExclTax"'  		"PaymentMethodAdditionalFeeInclTax"'  		"PaymentMethodAdditionalFeeExclTax"'  		"TaxRates"'  		"OrderTax"'  		"OrderTotal"'  		"RefundedAmount"'  		"OrderDiscount"'  		"CurrencyRate"'  		"CustomerCurrencyCode"'  		"AffiliateId"'  		"PaymentMethodSystemName"'  		"PurchaseOrderNumber"'  		"ShippingPickUpInStore"'  		"ShippingMethod"'  		"ShippingRateComputationMethodSystemName"'  		"CustomValuesXml"'  		"VatNumber"'  		"CreatedOnUtc"'  		//billing address  		"BillingFirstName"'  		"BillingLastName"'  		"BillingEmail"'  		"BillingCompany"'  		"BillingCountry"'  		"BillingStateProvince"'  		"BillingCity"'  		"BillingAddress1"'  		"BillingAddress2"'  		"BillingZipPostalCode"'  		"BillingPhoneNumber"'  		"BillingFaxNumber"'  		//shipping address  		"ShippingFirstName"'  		"ShippingLastName"'  		"ShippingEmail"'  		"ShippingCompany"'  		"ShippingCountry"'  		"ShippingStateProvince"'  		"ShippingCity"'  		"ShippingAddress1"'  		"ShippingAddress2"'  		"ShippingZipPostalCode"'  		"ShippingPhoneNumber"'  		"ShippingFaxNumber"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var order in orders) {  		int col = 1;  		//order properties  		worksheet.Cells [row' col].Value = order.Id;  		col++;  		worksheet.Cells [row' col].Value = order.StoreId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderGuid;  		col++;  		worksheet.Cells [row' col].Value = order.CustomerId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubtotalInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubtotalExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubTotalDiscountInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubTotalDiscountExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderShippingInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderShippingExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodAdditionalFeeInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodAdditionalFeeExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.TaxRates;  		col++;  		worksheet.Cells [row' col].Value = order.OrderTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderTotal;  		col++;  		worksheet.Cells [row' col].Value = order.RefundedAmount;  		col++;  		worksheet.Cells [row' col].Value = order.OrderDiscount;  		col++;  		worksheet.Cells [row' col].Value = order.CurrencyRate;  		col++;  		worksheet.Cells [row' col].Value = order.CustomerCurrencyCode;  		col++;  		worksheet.Cells [row' col].Value = order.AffiliateId;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodSystemName;  		col++;  		worksheet.Cells [row' col].Value = order.PurchaseOrderNumber;  		col++;  		worksheet.Cells [row' col].Value = order.PickUpInStore;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingMethod;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingRateComputationMethodSystemName;  		col++;  		worksheet.Cells [row' col].Value = order.CustomValuesXml;  		col++;  		worksheet.Cells [row' col].Value = order.VatNumber;  		col++;  		worksheet.Cells [row' col].Value = order.CreatedOnUtc.ToOADate ();  		col++;  		//billing address  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.FirstName : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.LastName : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Email : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Company : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.Country != null ? order.BillingAddress.Country.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.City : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Address1 : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Address2 : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.ZipPostalCode : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.PhoneNumber : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.FaxNumber : "";  		col++;  		//shipping address  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.FirstName : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.LastName : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Email : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Company : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.Country != null ? order.ShippingAddress.Country.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.City : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Address1 : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Address2 : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.ZipPostalCode : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.PhoneNumber : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.FaxNumber : "";  		col++;  		//next row  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Category = "Orders";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} orders"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Orders");  	//Create Headers and format them  	var properties = new string[] {  		//order properties  		"OrderId"'  		"StoreId"'  		"OrderGuid"'  		"CustomerId"'  		"OrderStatusId"'  		"PaymentStatusId"'  		"ShippingStatusId"'  		"OrderSubtotalInclTax"'  		"OrderSubtotalExclTax"'  		"OrderSubTotalDiscountInclTax"'  		"OrderSubTotalDiscountExclTax"'  		"OrderShippingInclTax"'  		"OrderShippingExclTax"'  		"PaymentMethodAdditionalFeeInclTax"'  		"PaymentMethodAdditionalFeeExclTax"'  		"TaxRates"'  		"OrderTax"'  		"OrderTotal"'  		"RefundedAmount"'  		"OrderDiscount"'  		"CurrencyRate"'  		"CustomerCurrencyCode"'  		"AffiliateId"'  		"PaymentMethodSystemName"'  		"PurchaseOrderNumber"'  		"ShippingPickUpInStore"'  		"ShippingMethod"'  		"ShippingRateComputationMethodSystemName"'  		"CustomValuesXml"'  		"VatNumber"'  		"CreatedOnUtc"'  		//billing address  		"BillingFirstName"'  		"BillingLastName"'  		"BillingEmail"'  		"BillingCompany"'  		"BillingCountry"'  		"BillingStateProvince"'  		"BillingCity"'  		"BillingAddress1"'  		"BillingAddress2"'  		"BillingZipPostalCode"'  		"BillingPhoneNumber"'  		"BillingFaxNumber"'  		//shipping address  		"ShippingFirstName"'  		"ShippingLastName"'  		"ShippingEmail"'  		"ShippingCompany"'  		"ShippingCountry"'  		"ShippingStateProvince"'  		"ShippingCity"'  		"ShippingAddress1"'  		"ShippingAddress2"'  		"ShippingZipPostalCode"'  		"ShippingPhoneNumber"'  		"ShippingFaxNumber"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var order in orders) {  		int col = 1;  		//order properties  		worksheet.Cells [row' col].Value = order.Id;  		col++;  		worksheet.Cells [row' col].Value = order.StoreId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderGuid;  		col++;  		worksheet.Cells [row' col].Value = order.CustomerId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingStatusId;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubtotalInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubtotalExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubTotalDiscountInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderSubTotalDiscountExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderShippingInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderShippingExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodAdditionalFeeInclTax;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodAdditionalFeeExclTax;  		col++;  		worksheet.Cells [row' col].Value = order.TaxRates;  		col++;  		worksheet.Cells [row' col].Value = order.OrderTax;  		col++;  		worksheet.Cells [row' col].Value = order.OrderTotal;  		col++;  		worksheet.Cells [row' col].Value = order.RefundedAmount;  		col++;  		worksheet.Cells [row' col].Value = order.OrderDiscount;  		col++;  		worksheet.Cells [row' col].Value = order.CurrencyRate;  		col++;  		worksheet.Cells [row' col].Value = order.CustomerCurrencyCode;  		col++;  		worksheet.Cells [row' col].Value = order.AffiliateId;  		col++;  		worksheet.Cells [row' col].Value = order.PaymentMethodSystemName;  		col++;  		worksheet.Cells [row' col].Value = order.PurchaseOrderNumber;  		col++;  		worksheet.Cells [row' col].Value = order.PickUpInStore;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingMethod;  		col++;  		worksheet.Cells [row' col].Value = order.ShippingRateComputationMethodSystemName;  		col++;  		worksheet.Cells [row' col].Value = order.CustomValuesXml;  		col++;  		worksheet.Cells [row' col].Value = order.VatNumber;  		col++;  		worksheet.Cells [row' col].Value = order.CreatedOnUtc.ToOADate ();  		col++;  		//billing address  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.FirstName : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.LastName : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Email : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Company : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.Country != null ? order.BillingAddress.Country.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null && order.BillingAddress.StateProvince != null ? order.BillingAddress.StateProvince.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.City : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Address1 : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.Address2 : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.ZipPostalCode : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.PhoneNumber : "";  		col++;  		worksheet.Cells [row' col].Value = order.BillingAddress != null ? order.BillingAddress.FaxNumber : "";  		col++;  		//shipping address  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.FirstName : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.LastName : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Email : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Company : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.Country != null ? order.ShippingAddress.Country.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null && order.ShippingAddress.StateProvince != null ? order.ShippingAddress.StateProvince.Name : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.City : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Address1 : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.Address2 : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.ZipPostalCode : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.PhoneNumber : "";  		col++;  		worksheet.Cells [row' col].Value = order.ShippingAddress != null ? order.ShippingAddress.FaxNumber : "";  		col++;  		//next row  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} orders"' storeName);  	//xlPackage.Workbook.Properties.Category = "Orders";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} orders"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportOrdersToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Customers");  	//Create Headers and format them  	var properties = new string[] {  		"CustomerId"'  		"CustomerGuid"'  		"Email"'  		"Username"'  		"PasswordStr"'  		//why can't we use 'Password' name?  		"PasswordFormatId"'  		"PasswordSalt"'  		"IsTaxExempt"'  		"AffiliateId"'  		"VendorId"'  		"Active"'  		"IsGuest"'  		"IsRegistered"'  		"IsAdministrator"'  		"IsForumModerator"'  		"FirstName"'  		"LastName"'  		"Gender"'  		"Company"'  		"StreetAddress"'  		"StreetAddress2"'  		"ZipPostalCode"'  		"City"'  		"CountryId"'  		"StateProvinceId"'  		"Phone"'  		"Fax"'  		"VatNumber"'  		"VatNumberStatusId"'  		"TimeZoneId"'  		"AvatarPictureId"'  		"ForumPostCount"'  		"Signature"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var customer in customers) {  		int col = 1;  		worksheet.Cells [row' col].Value = customer.Id;  		col++;  		worksheet.Cells [row' col].Value = customer.CustomerGuid;  		col++;  		worksheet.Cells [row' col].Value = customer.Email;  		col++;  		worksheet.Cells [row' col].Value = customer.Username;  		col++;  		worksheet.Cells [row' col].Value = customer.Password;  		col++;  		worksheet.Cells [row' col].Value = customer.PasswordFormatId;  		col++;  		worksheet.Cells [row' col].Value = customer.PasswordSalt;  		col++;  		worksheet.Cells [row' col].Value = customer.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = customer.AffiliateId;  		col++;  		worksheet.Cells [row' col].Value = customer.VendorId;  		col++;  		worksheet.Cells [row' col].Value = customer.Active;  		col++;  		//roles  		worksheet.Cells [row' col].Value = customer.IsGuest ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsRegistered ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsAdmin ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsForumModerator ();  		col++;  		//attributes  		var firstName = customer.GetAttribute<string> (SystemCustomerAttributeNames.FirstName);  		var lastName = customer.GetAttribute<string> (SystemCustomerAttributeNames.LastName);  		var gender = customer.GetAttribute<string> (SystemCustomerAttributeNames.Gender);  		var company = customer.GetAttribute<string> (SystemCustomerAttributeNames.Company);  		var streetAddress = customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress);  		var streetAddress2 = customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress2);  		var zipPostalCode = customer.GetAttribute<string> (SystemCustomerAttributeNames.ZipPostalCode);  		var city = customer.GetAttribute<string> (SystemCustomerAttributeNames.City);  		var countryId = customer.GetAttribute<int> (SystemCustomerAttributeNames.CountryId);  		var stateProvinceId = customer.GetAttribute<int> (SystemCustomerAttributeNames.StateProvinceId);  		var phone = customer.GetAttribute<string> (SystemCustomerAttributeNames.Phone);  		var fax = customer.GetAttribute<string> (SystemCustomerAttributeNames.Fax);  		var vatNumber = customer.GetAttribute<string> (SystemCustomerAttributeNames.VatNumber);  		var vatNumberStatusId = customer.GetAttribute<int> (SystemCustomerAttributeNames.VatNumberStatusId);  		var timeZoneId = customer.GetAttribute<string> (SystemCustomerAttributeNames.TimeZoneId);  		var avatarPictureId = customer.GetAttribute<int> (SystemCustomerAttributeNames.AvatarPictureId);  		var forumPostCount = customer.GetAttribute<int> (SystemCustomerAttributeNames.ForumPostCount);  		var signature = customer.GetAttribute<string> (SystemCustomerAttributeNames.Signature);  		worksheet.Cells [row' col].Value = firstName;  		col++;  		worksheet.Cells [row' col].Value = lastName;  		col++;  		worksheet.Cells [row' col].Value = gender;  		col++;  		worksheet.Cells [row' col].Value = company;  		col++;  		worksheet.Cells [row' col].Value = streetAddress;  		col++;  		worksheet.Cells [row' col].Value = streetAddress2;  		col++;  		worksheet.Cells [row' col].Value = zipPostalCode;  		col++;  		worksheet.Cells [row' col].Value = city;  		col++;  		worksheet.Cells [row' col].Value = countryId;  		col++;  		worksheet.Cells [row' col].Value = stateProvinceId;  		col++;  		worksheet.Cells [row' col].Value = phone;  		col++;  		worksheet.Cells [row' col].Value = fax;  		col++;  		worksheet.Cells [row' col].Value = vatNumber;  		col++;  		worksheet.Cells [row' col].Value = vatNumberStatusId;  		col++;  		worksheet.Cells [row' col].Value = timeZoneId;  		col++;  		worksheet.Cells [row' col].Value = avatarPictureId;  		col++;  		worksheet.Cells [row' col].Value = forumPostCount;  		col++;  		worksheet.Cells [row' col].Value = signature;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Category = "Customers";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} customers"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Customers");  	//Create Headers and format them  	var properties = new string[] {  		"CustomerId"'  		"CustomerGuid"'  		"Email"'  		"Username"'  		"PasswordStr"'  		//why can't we use 'Password' name?  		"PasswordFormatId"'  		"PasswordSalt"'  		"IsTaxExempt"'  		"AffiliateId"'  		"VendorId"'  		"Active"'  		"IsGuest"'  		"IsRegistered"'  		"IsAdministrator"'  		"IsForumModerator"'  		"FirstName"'  		"LastName"'  		"Gender"'  		"Company"'  		"StreetAddress"'  		"StreetAddress2"'  		"ZipPostalCode"'  		"City"'  		"CountryId"'  		"StateProvinceId"'  		"Phone"'  		"Fax"'  		"VatNumber"'  		"VatNumberStatusId"'  		"TimeZoneId"'  		"AvatarPictureId"'  		"ForumPostCount"'  		"Signature"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var customer in customers) {  		int col = 1;  		worksheet.Cells [row' col].Value = customer.Id;  		col++;  		worksheet.Cells [row' col].Value = customer.CustomerGuid;  		col++;  		worksheet.Cells [row' col].Value = customer.Email;  		col++;  		worksheet.Cells [row' col].Value = customer.Username;  		col++;  		worksheet.Cells [row' col].Value = customer.Password;  		col++;  		worksheet.Cells [row' col].Value = customer.PasswordFormatId;  		col++;  		worksheet.Cells [row' col].Value = customer.PasswordSalt;  		col++;  		worksheet.Cells [row' col].Value = customer.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = customer.AffiliateId;  		col++;  		worksheet.Cells [row' col].Value = customer.VendorId;  		col++;  		worksheet.Cells [row' col].Value = customer.Active;  		col++;  		//roles  		worksheet.Cells [row' col].Value = customer.IsGuest ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsRegistered ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsAdmin ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsForumModerator ();  		col++;  		//attributes  		var firstName = customer.GetAttribute<string> (SystemCustomerAttributeNames.FirstName);  		var lastName = customer.GetAttribute<string> (SystemCustomerAttributeNames.LastName);  		var gender = customer.GetAttribute<string> (SystemCustomerAttributeNames.Gender);  		var company = customer.GetAttribute<string> (SystemCustomerAttributeNames.Company);  		var streetAddress = customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress);  		var streetAddress2 = customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress2);  		var zipPostalCode = customer.GetAttribute<string> (SystemCustomerAttributeNames.ZipPostalCode);  		var city = customer.GetAttribute<string> (SystemCustomerAttributeNames.City);  		var countryId = customer.GetAttribute<int> (SystemCustomerAttributeNames.CountryId);  		var stateProvinceId = customer.GetAttribute<int> (SystemCustomerAttributeNames.StateProvinceId);  		var phone = customer.GetAttribute<string> (SystemCustomerAttributeNames.Phone);  		var fax = customer.GetAttribute<string> (SystemCustomerAttributeNames.Fax);  		var vatNumber = customer.GetAttribute<string> (SystemCustomerAttributeNames.VatNumber);  		var vatNumberStatusId = customer.GetAttribute<int> (SystemCustomerAttributeNames.VatNumberStatusId);  		var timeZoneId = customer.GetAttribute<string> (SystemCustomerAttributeNames.TimeZoneId);  		var avatarPictureId = customer.GetAttribute<int> (SystemCustomerAttributeNames.AvatarPictureId);  		var forumPostCount = customer.GetAttribute<int> (SystemCustomerAttributeNames.ForumPostCount);  		var signature = customer.GetAttribute<string> (SystemCustomerAttributeNames.Signature);  		worksheet.Cells [row' col].Value = firstName;  		col++;  		worksheet.Cells [row' col].Value = lastName;  		col++;  		worksheet.Cells [row' col].Value = gender;  		col++;  		worksheet.Cells [row' col].Value = company;  		col++;  		worksheet.Cells [row' col].Value = streetAddress;  		col++;  		worksheet.Cells [row' col].Value = streetAddress2;  		col++;  		worksheet.Cells [row' col].Value = zipPostalCode;  		col++;  		worksheet.Cells [row' col].Value = city;  		col++;  		worksheet.Cells [row' col].Value = countryId;  		col++;  		worksheet.Cells [row' col].Value = stateProvinceId;  		col++;  		worksheet.Cells [row' col].Value = phone;  		col++;  		worksheet.Cells [row' col].Value = fax;  		col++;  		worksheet.Cells [row' col].Value = vatNumber;  		col++;  		worksheet.Cells [row' col].Value = vatNumberStatusId;  		col++;  		worksheet.Cells [row' col].Value = timeZoneId;  		col++;  		worksheet.Cells [row' col].Value = avatarPictureId;  		col++;  		worksheet.Cells [row' col].Value = forumPostCount;  		col++;  		worksheet.Cells [row' col].Value = signature;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Category = "Customers";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} customers"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Customers");  	//Create Headers and format them  	var properties = new string[] {  		"CustomerId"'  		"CustomerGuid"'  		"Email"'  		"Username"'  		"PasswordStr"'  		//why can't we use 'Password' name?  		"PasswordFormatId"'  		"PasswordSalt"'  		"IsTaxExempt"'  		"AffiliateId"'  		"VendorId"'  		"Active"'  		"IsGuest"'  		"IsRegistered"'  		"IsAdministrator"'  		"IsForumModerator"'  		"FirstName"'  		"LastName"'  		"Gender"'  		"Company"'  		"StreetAddress"'  		"StreetAddress2"'  		"ZipPostalCode"'  		"City"'  		"CountryId"'  		"StateProvinceId"'  		"Phone"'  		"Fax"'  		"VatNumber"'  		"VatNumberStatusId"'  		"TimeZoneId"'  		"AvatarPictureId"'  		"ForumPostCount"'  		"Signature"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var customer in customers) {  		int col = 1;  		worksheet.Cells [row' col].Value = customer.Id;  		col++;  		worksheet.Cells [row' col].Value = customer.CustomerGuid;  		col++;  		worksheet.Cells [row' col].Value = customer.Email;  		col++;  		worksheet.Cells [row' col].Value = customer.Username;  		col++;  		worksheet.Cells [row' col].Value = customer.Password;  		col++;  		worksheet.Cells [row' col].Value = customer.PasswordFormatId;  		col++;  		worksheet.Cells [row' col].Value = customer.PasswordSalt;  		col++;  		worksheet.Cells [row' col].Value = customer.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = customer.AffiliateId;  		col++;  		worksheet.Cells [row' col].Value = customer.VendorId;  		col++;  		worksheet.Cells [row' col].Value = customer.Active;  		col++;  		//roles  		worksheet.Cells [row' col].Value = customer.IsGuest ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsRegistered ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsAdmin ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsForumModerator ();  		col++;  		//attributes  		var firstName = customer.GetAttribute<string> (SystemCustomerAttributeNames.FirstName);  		var lastName = customer.GetAttribute<string> (SystemCustomerAttributeNames.LastName);  		var gender = customer.GetAttribute<string> (SystemCustomerAttributeNames.Gender);  		var company = customer.GetAttribute<string> (SystemCustomerAttributeNames.Company);  		var streetAddress = customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress);  		var streetAddress2 = customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress2);  		var zipPostalCode = customer.GetAttribute<string> (SystemCustomerAttributeNames.ZipPostalCode);  		var city = customer.GetAttribute<string> (SystemCustomerAttributeNames.City);  		var countryId = customer.GetAttribute<int> (SystemCustomerAttributeNames.CountryId);  		var stateProvinceId = customer.GetAttribute<int> (SystemCustomerAttributeNames.StateProvinceId);  		var phone = customer.GetAttribute<string> (SystemCustomerAttributeNames.Phone);  		var fax = customer.GetAttribute<string> (SystemCustomerAttributeNames.Fax);  		var vatNumber = customer.GetAttribute<string> (SystemCustomerAttributeNames.VatNumber);  		var vatNumberStatusId = customer.GetAttribute<int> (SystemCustomerAttributeNames.VatNumberStatusId);  		var timeZoneId = customer.GetAttribute<string> (SystemCustomerAttributeNames.TimeZoneId);  		var avatarPictureId = customer.GetAttribute<int> (SystemCustomerAttributeNames.AvatarPictureId);  		var forumPostCount = customer.GetAttribute<int> (SystemCustomerAttributeNames.ForumPostCount);  		var signature = customer.GetAttribute<string> (SystemCustomerAttributeNames.Signature);  		worksheet.Cells [row' col].Value = firstName;  		col++;  		worksheet.Cells [row' col].Value = lastName;  		col++;  		worksheet.Cells [row' col].Value = gender;  		col++;  		worksheet.Cells [row' col].Value = company;  		col++;  		worksheet.Cells [row' col].Value = streetAddress;  		col++;  		worksheet.Cells [row' col].Value = streetAddress2;  		col++;  		worksheet.Cells [row' col].Value = zipPostalCode;  		col++;  		worksheet.Cells [row' col].Value = city;  		col++;  		worksheet.Cells [row' col].Value = countryId;  		col++;  		worksheet.Cells [row' col].Value = stateProvinceId;  		col++;  		worksheet.Cells [row' col].Value = phone;  		col++;  		worksheet.Cells [row' col].Value = fax;  		col++;  		worksheet.Cells [row' col].Value = vatNumber;  		col++;  		worksheet.Cells [row' col].Value = vatNumberStatusId;  		col++;  		worksheet.Cells [row' col].Value = timeZoneId;  		col++;  		worksheet.Cells [row' col].Value = avatarPictureId;  		col++;  		worksheet.Cells [row' col].Value = forumPostCount;  		col++;  		worksheet.Cells [row' col].Value = signature;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Category = "Customers";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} customers"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// uncomment this line if you want the XML written out to the outputDir  	//xlPackage.DebugMode = true;   	// get handle to the existing worksheet  	var worksheet = xlPackage.Workbook.Worksheets.Add ("Customers");  	//Create Headers and format them  	var properties = new string[] {  		"CustomerId"'  		"CustomerGuid"'  		"Email"'  		"Username"'  		"PasswordStr"'  		//why can't we use 'Password' name?  		"PasswordFormatId"'  		"PasswordSalt"'  		"IsTaxExempt"'  		"AffiliateId"'  		"VendorId"'  		"Active"'  		"IsGuest"'  		"IsRegistered"'  		"IsAdministrator"'  		"IsForumModerator"'  		"FirstName"'  		"LastName"'  		"Gender"'  		"Company"'  		"StreetAddress"'  		"StreetAddress2"'  		"ZipPostalCode"'  		"City"'  		"CountryId"'  		"StateProvinceId"'  		"Phone"'  		"Fax"'  		"VatNumber"'  		"VatNumberStatusId"'  		"TimeZoneId"'  		"AvatarPictureId"'  		"ForumPostCount"'  		"Signature"'  	};  	for (int i = 0; i < properties.Length; i++) {  		worksheet.Cells [1' i + 1].Value = properties [i];  		worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  		worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  		worksheet.Cells [1' i + 1].Style.Font.Bold = true;  	}  	int row = 2;  	foreach (var customer in customers) {  		int col = 1;  		worksheet.Cells [row' col].Value = customer.Id;  		col++;  		worksheet.Cells [row' col].Value = customer.CustomerGuid;  		col++;  		worksheet.Cells [row' col].Value = customer.Email;  		col++;  		worksheet.Cells [row' col].Value = customer.Username;  		col++;  		worksheet.Cells [row' col].Value = customer.Password;  		col++;  		worksheet.Cells [row' col].Value = customer.PasswordFormatId;  		col++;  		worksheet.Cells [row' col].Value = customer.PasswordSalt;  		col++;  		worksheet.Cells [row' col].Value = customer.IsTaxExempt;  		col++;  		worksheet.Cells [row' col].Value = customer.AffiliateId;  		col++;  		worksheet.Cells [row' col].Value = customer.VendorId;  		col++;  		worksheet.Cells [row' col].Value = customer.Active;  		col++;  		//roles  		worksheet.Cells [row' col].Value = customer.IsGuest ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsRegistered ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsAdmin ();  		col++;  		worksheet.Cells [row' col].Value = customer.IsForumModerator ();  		col++;  		//attributes  		var firstName = customer.GetAttribute<string> (SystemCustomerAttributeNames.FirstName);  		var lastName = customer.GetAttribute<string> (SystemCustomerAttributeNames.LastName);  		var gender = customer.GetAttribute<string> (SystemCustomerAttributeNames.Gender);  		var company = customer.GetAttribute<string> (SystemCustomerAttributeNames.Company);  		var streetAddress = customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress);  		var streetAddress2 = customer.GetAttribute<string> (SystemCustomerAttributeNames.StreetAddress2);  		var zipPostalCode = customer.GetAttribute<string> (SystemCustomerAttributeNames.ZipPostalCode);  		var city = customer.GetAttribute<string> (SystemCustomerAttributeNames.City);  		var countryId = customer.GetAttribute<int> (SystemCustomerAttributeNames.CountryId);  		var stateProvinceId = customer.GetAttribute<int> (SystemCustomerAttributeNames.StateProvinceId);  		var phone = customer.GetAttribute<string> (SystemCustomerAttributeNames.Phone);  		var fax = customer.GetAttribute<string> (SystemCustomerAttributeNames.Fax);  		var vatNumber = customer.GetAttribute<string> (SystemCustomerAttributeNames.VatNumber);  		var vatNumberStatusId = customer.GetAttribute<int> (SystemCustomerAttributeNames.VatNumberStatusId);  		var timeZoneId = customer.GetAttribute<string> (SystemCustomerAttributeNames.TimeZoneId);  		var avatarPictureId = customer.GetAttribute<int> (SystemCustomerAttributeNames.AvatarPictureId);  		var forumPostCount = customer.GetAttribute<int> (SystemCustomerAttributeNames.ForumPostCount);  		var signature = customer.GetAttribute<string> (SystemCustomerAttributeNames.Signature);  		worksheet.Cells [row' col].Value = firstName;  		col++;  		worksheet.Cells [row' col].Value = lastName;  		col++;  		worksheet.Cells [row' col].Value = gender;  		col++;  		worksheet.Cells [row' col].Value = company;  		col++;  		worksheet.Cells [row' col].Value = streetAddress;  		col++;  		worksheet.Cells [row' col].Value = streetAddress2;  		col++;  		worksheet.Cells [row' col].Value = zipPostalCode;  		col++;  		worksheet.Cells [row' col].Value = city;  		col++;  		worksheet.Cells [row' col].Value = countryId;  		col++;  		worksheet.Cells [row' col].Value = stateProvinceId;  		col++;  		worksheet.Cells [row' col].Value = phone;  		col++;  		worksheet.Cells [row' col].Value = fax;  		col++;  		worksheet.Cells [row' col].Value = vatNumber;  		col++;  		worksheet.Cells [row' col].Value = vatNumberStatusId;  		col++;  		worksheet.Cells [row' col].Value = timeZoneId;  		col++;  		worksheet.Cells [row' col].Value = avatarPictureId;  		col++;  		worksheet.Cells [row' col].Value = forumPostCount;  		col++;  		worksheet.Cells [row' col].Value = signature;  		col++;  		row++;  	}  	// we had better add some document properties to the spreadsheet   	// set some core property values  	//var storeName = _storeInformationSettings.StoreName;  	//var storeUrl = _storeInformationSettings.StoreUrl;  	//xlPackage.Workbook.Properties.Title = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Author = storeName;  	//xlPackage.Workbook.Properties.Subject = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Keywords = string.Format("{0} customers"' storeName);  	//xlPackage.Workbook.Properties.Category = "Customers";  	//xlPackage.Workbook.Properties.Comments = string.Format("{0} customers"' storeName);  	// set some extended property values  	//xlPackage.Workbook.Properties.Company = storeName;  	//xlPackage.Workbook.Properties.HyperlinkBase = new Uri(storeUrl);  	// save the new spreadsheet  	xlPackage.Save ();  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: for (int i = 0; i < properties.Length; i++) {  	worksheet.Cells [1' i + 1].Value = properties [i];  	worksheet.Cells [1' i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;  	worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  	worksheet.Cells [1' i + 1].Style.Font.Bold = true;  }  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportCustomersToXlsx,The following statement contains a magic number: worksheet.Cells [1' i + 1].Style.Fill.BackgroundColor.SetColor (Color.FromArgb (184' 204' 228));  
Magic Number,Nop.Services.ExportImport,ImportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ImportManager.cs,ImportProductsFromXlsx,The following statement contains a magic number: using (var xlPackage = new ExcelPackage (stream)) {  	// get the first worksheet in the workbook  	var worksheet = xlPackage.Workbook.Worksheets.FirstOrDefault ();  	if (worksheet == null)  		throw new NopException ("No worksheet found");  	//the columns  	var properties = new string[] {  		"ProductTypeId"'  		"ParentGroupedProductId"'  		"VisibleIndividually"'  		"Name"'  		"ShortDescription"'  		"FullDescription"'  		"VendorId"'  		"ProductTemplateId"'  		"ShowOnHomePage"'  		"MetaKeywords"'  		"MetaDescription"'  		"MetaTitle"'  		"SeName"'  		"AllowCustomerReviews"'  		"Published"'  		"SKU"'  		"ManufacturerPartNumber"'  		"Gtin"'  		"IsGiftCard"'  		"GiftCardTypeId"'  		"RequireOtherProducts"'  		"RequiredProductIds"'  		"AutomaticallyAddRequiredProducts"'  		"IsDownload"'  		"DownloadId"'  		"UnlimitedDownloads"'  		"MaxNumberOfDownloads"'  		"DownloadActivationTypeId"'  		"HasSampleDownload"'  		"SampleDownloadId"'  		"HasUserAgreement"'  		"UserAgreementText"'  		"IsRecurring"'  		"RecurringCycleLength"'  		"RecurringCyclePeriodId"'  		"RecurringTotalCycles"'  		"IsShipEnabled"'  		"IsFreeShipping"'  		"AdditionalShippingCharge"'  		"DeliveryDateId"'  		"WarehouseId"'  		"IsTaxExempt"'  		"TaxCategoryId"'  		"ManageInventoryMethodId"'  		"StockQuantity"'  		"DisplayStockAvailability"'  		"DisplayStockQuantity"'  		"MinStockQuantity"'  		"LowStockActivityId"'  		"NotifyAdminForQuantityBelow"'  		"BackorderModeId"'  		"AllowBackInStockSubscriptions"'  		"OrderMinimumQuantity"'  		"OrderMaximumQuantity"'  		"AllowedQuantities"'  		"AllowAddingOnlyExistingAttributeCombinations"'  		"DisableBuyButton"'  		"DisableWishlistButton"'  		"AvailableForPreOrder"'  		"PreOrderAvailabilityStartDateTimeUtc"'  		"CallForPrice"'  		"Price"'  		"OldPrice"'  		"ProductCost"'  		"SpecialPrice"'  		"SpecialPriceStartDateTimeUtc"'  		"SpecialPriceEndDateTimeUtc"'  		"CustomerEntersPrice"'  		"MinimumCustomerEnteredPrice"'  		"MaximumCustomerEnteredPrice"'  		"Weight"'  		"Length"'  		"Width"'  		"Height"'  		"CreatedOnUtc"'  		"CategoryIds"'  		"ManufacturerIds"'  		"Picture1"'  		"Picture2"'  		"Picture3"'  	};  	int iRow = 2;  	while (true) {  		bool allColumnsAreEmpty = true;  		for (var i = 1; i <= properties.Length; i++)  			if (worksheet.Cells [iRow' i].Value != null && !String.IsNullOrEmpty (worksheet.Cells [iRow' i].Value.ToString ())) {  				allColumnsAreEmpty = false;  				break;  			}  		if (allColumnsAreEmpty)  			break;  		int productTypeId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "ProductTypeId")].Value);  		int parentGroupedProductId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "ParentGroupedProductId")].Value);  		bool visibleIndividually = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "VisibleIndividually")].Value);  		string name = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "Name")].Value);  		string shortDescription = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "ShortDescription")].Value);  		string fullDescription = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "FullDescription")].Value);  		int vendorId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "VendorId")].Value);  		int productTemplateId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "ProductTemplateId")].Value);  		bool showOnHomePage = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "ShowOnHomePage")].Value);  		string metaKeywords = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "MetaKeywords")].Value);  		string metaDescription = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "MetaDescription")].Value);  		string metaTitle = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "MetaTitle")].Value);  		string seName = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "SeName")].Value);  		bool allowCustomerReviews = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AllowCustomerReviews")].Value);  		bool published = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "Published")].Value);  		string sku = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "SKU")].Value);  		string manufacturerPartNumber = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "ManufacturerPartNumber")].Value);  		string gtin = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "Gtin")].Value);  		bool isGiftCard = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "IsGiftCard")].Value);  		int giftCardTypeId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "GiftCardTypeId")].Value);  		bool requireOtherProducts = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "RequireOtherProducts")].Value);  		string requiredProductIds = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "RequiredProductIds")].Value);  		bool automaticallyAddRequiredProducts = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AutomaticallyAddRequiredProducts")].Value);  		bool isDownload = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "IsDownload")].Value);  		int downloadId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "DownloadId")].Value);  		bool unlimitedDownloads = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "UnlimitedDownloads")].Value);  		int maxNumberOfDownloads = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "MaxNumberOfDownloads")].Value);  		int downloadActivationTypeId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "DownloadActivationTypeId")].Value);  		bool hasSampleDownload = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "HasSampleDownload")].Value);  		int sampleDownloadId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "SampleDownloadId")].Value);  		bool hasUserAgreement = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "HasUserAgreement")].Value);  		string userAgreementText = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "UserAgreementText")].Value);  		bool isRecurring = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "IsRecurring")].Value);  		int recurringCycleLength = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "RecurringCycleLength")].Value);  		int recurringCyclePeriodId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "RecurringCyclePeriodId")].Value);  		int recurringTotalCycles = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "RecurringTotalCycles")].Value);  		bool isShipEnabled = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "IsShipEnabled")].Value);  		bool isFreeShipping = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "IsFreeShipping")].Value);  		decimal additionalShippingCharge = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "AdditionalShippingCharge")].Value);  		int deliveryDateId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "DeliveryDateId")].Value);  		int warehouseId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "WarehouseId")].Value);  		bool isTaxExempt = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "IsTaxExempt")].Value);  		int taxCategoryId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "TaxCategoryId")].Value);  		int manageInventoryMethodId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "ManageInventoryMethodId")].Value);  		int stockQuantity = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "StockQuantity")].Value);  		bool displayStockAvailability = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "DisplayStockAvailability")].Value);  		bool displayStockQuantity = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "DisplayStockQuantity")].Value);  		int minStockQuantity = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "MinStockQuantity")].Value);  		int lowStockActivityId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "LowStockActivityId")].Value);  		int notifyAdminForQuantityBelow = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "NotifyAdminForQuantityBelow")].Value);  		int backorderModeId = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "BackorderModeId")].Value);  		bool allowBackInStockSubscriptions = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AllowBackInStockSubscriptions")].Value);  		int orderMinimumQuantity = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "OrderMinimumQuantity")].Value);  		int orderMaximumQuantity = Convert.ToInt32 (worksheet.Cells [iRow' GetColumnIndex (properties' "OrderMaximumQuantity")].Value);  		string allowedQuantities = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "AllowedQuantities")].Value);  		bool allowAddingOnlyExistingAttributeCombinations = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AllowAddingOnlyExistingAttributeCombinations")].Value);  		bool disableBuyButton = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "DisableBuyButton")].Value);  		bool disableWishlistButton = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "DisableWishlistButton")].Value);  		bool availableForPreOrder = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "AvailableForPreOrder")].Value);  		DateTime? preOrderAvailabilityStartDateTimeUtc = null;  		var preOrderAvailabilityStartDateTimeUtcExcel = worksheet.Cells [iRow' GetColumnIndex (properties' "PreOrderAvailabilityStartDateTimeUtc")].Value;  		if (preOrderAvailabilityStartDateTimeUtcExcel != null)  			preOrderAvailabilityStartDateTimeUtc = DateTime.FromOADate (Convert.ToDouble (preOrderAvailabilityStartDateTimeUtcExcel));  		bool callForPrice = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "CallForPrice")].Value);  		decimal price = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "Price")].Value);  		decimal oldPrice = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "OldPrice")].Value);  		decimal productCost = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "ProductCost")].Value);  		decimal? specialPrice = null;  		var specialPriceExcel = worksheet.Cells [iRow' GetColumnIndex (properties' "SpecialPrice")].Value;  		if (specialPriceExcel != null)  			specialPrice = Convert.ToDecimal (specialPriceExcel);  		DateTime? specialPriceStartDateTimeUtc = null;  		var specialPriceStartDateTimeUtcExcel = worksheet.Cells [iRow' GetColumnIndex (properties' "SpecialPriceStartDateTimeUtc")].Value;  		if (specialPriceStartDateTimeUtcExcel != null)  			specialPriceStartDateTimeUtc = DateTime.FromOADate (Convert.ToDouble (specialPriceStartDateTimeUtcExcel));  		DateTime? specialPriceEndDateTimeUtc = null;  		var specialPriceEndDateTimeUtcExcel = worksheet.Cells [iRow' GetColumnIndex (properties' "SpecialPriceEndDateTimeUtc")].Value;  		if (specialPriceEndDateTimeUtcExcel != null)  			specialPriceEndDateTimeUtc = DateTime.FromOADate (Convert.ToDouble (specialPriceEndDateTimeUtcExcel));  		bool customerEntersPrice = Convert.ToBoolean (worksheet.Cells [iRow' GetColumnIndex (properties' "CustomerEntersPrice")].Value);  		decimal minimumCustomerEnteredPrice = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "MinimumCustomerEnteredPrice")].Value);  		decimal maximumCustomerEnteredPrice = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "MaximumCustomerEnteredPrice")].Value);  		decimal weight = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "Weight")].Value);  		decimal length = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "Length")].Value);  		decimal width = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "Width")].Value);  		decimal height = Convert.ToDecimal (worksheet.Cells [iRow' GetColumnIndex (properties' "Height")].Value);  		DateTime createdOnUtc = DateTime.FromOADate (Convert.ToDouble (worksheet.Cells [iRow' GetColumnIndex (properties' "CreatedOnUtc")].Value));  		string categoryIds = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "CategoryIds")].Value);  		string manufacturerIds = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "ManufacturerIds")].Value);  		string picture1 = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "Picture1")].Value);  		string picture2 = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "Picture2")].Value);  		string picture3 = ConvertColumnToString (worksheet.Cells [iRow' GetColumnIndex (properties' "Picture3")].Value);  		var product = _productService.GetProductBySku (sku);  		bool newProduct = false;  		if (product == null) {  			product = new Product ();  			newProduct = true;  		}  		product.ProductTypeId = productTypeId;  		product.ParentGroupedProductId = parentGroupedProductId;  		product.VisibleIndividually = visibleIndividually;  		product.Name = name;  		product.ShortDescription = shortDescription;  		product.FullDescription = fullDescription;  		product.VendorId = vendorId;  		product.ProductTemplateId = productTemplateId;  		product.ShowOnHomePage = showOnHomePage;  		product.MetaKeywords = metaKeywords;  		product.MetaDescription = metaDescription;  		product.MetaTitle = metaTitle;  		product.AllowCustomerReviews = allowCustomerReviews;  		product.Sku = sku;  		product.ManufacturerPartNumber = manufacturerPartNumber;  		product.Gtin = gtin;  		product.IsGiftCard = isGiftCard;  		product.GiftCardTypeId = giftCardTypeId;  		product.RequireOtherProducts = requireOtherProducts;  		product.RequiredProductIds = requiredProductIds;  		product.AutomaticallyAddRequiredProducts = automaticallyAddRequiredProducts;  		product.IsDownload = isDownload;  		product.DownloadId = downloadId;  		product.UnlimitedDownloads = unlimitedDownloads;  		product.MaxNumberOfDownloads = maxNumberOfDownloads;  		product.DownloadActivationTypeId = downloadActivationTypeId;  		product.HasSampleDownload = hasSampleDownload;  		product.SampleDownloadId = sampleDownloadId;  		product.HasUserAgreement = hasUserAgreement;  		product.UserAgreementText = userAgreementText;  		product.IsRecurring = isRecurring;  		product.RecurringCycleLength = recurringCycleLength;  		product.RecurringCyclePeriodId = recurringCyclePeriodId;  		product.RecurringTotalCycles = recurringTotalCycles;  		product.IsShipEnabled = isShipEnabled;  		product.IsFreeShipping = isFreeShipping;  		product.AdditionalShippingCharge = additionalShippingCharge;  		product.DeliveryDateId = deliveryDateId;  		product.WarehouseId = warehouseId;  		product.IsTaxExempt = isTaxExempt;  		product.TaxCategoryId = taxCategoryId;  		product.ManageInventoryMethodId = manageInventoryMethodId;  		product.StockQuantity = stockQuantity;  		product.DisplayStockAvailability = displayStockAvailability;  		product.DisplayStockQuantity = displayStockQuantity;  		product.MinStockQuantity = minStockQuantity;  		product.LowStockActivityId = lowStockActivityId;  		product.NotifyAdminForQuantityBelow = notifyAdminForQuantityBelow;  		product.BackorderModeId = backorderModeId;  		product.AllowBackInStockSubscriptions = allowBackInStockSubscriptions;  		product.OrderMinimumQuantity = orderMinimumQuantity;  		product.OrderMaximumQuantity = orderMaximumQuantity;  		product.AllowedQuantities = allowedQuantities;  		product.AllowAddingOnlyExistingAttributeCombinations = allowAddingOnlyExistingAttributeCombinations;  		product.DisableBuyButton = disableBuyButton;  		product.DisableWishlistButton = disableWishlistButton;  		product.AvailableForPreOrder = availableForPreOrder;  		product.PreOrderAvailabilityStartDateTimeUtc = preOrderAvailabilityStartDateTimeUtc;  		product.CallForPrice = callForPrice;  		product.Price = price;  		product.OldPrice = oldPrice;  		product.ProductCost = productCost;  		product.SpecialPrice = specialPrice;  		product.SpecialPriceStartDateTimeUtc = specialPriceStartDateTimeUtc;  		product.SpecialPriceEndDateTimeUtc = specialPriceEndDateTimeUtc;  		product.CustomerEntersPrice = customerEntersPrice;  		product.MinimumCustomerEnteredPrice = minimumCustomerEnteredPrice;  		product.MaximumCustomerEnteredPrice = maximumCustomerEnteredPrice;  		product.Weight = weight;  		product.Length = length;  		product.Width = width;  		product.Height = height;  		product.Published = published;  		product.CreatedOnUtc = createdOnUtc;  		product.UpdatedOnUtc = DateTime.UtcNow;  		if (newProduct) {  			_productService.InsertProduct (product);  		}  		else {  			_productService.UpdateProduct (product);  		}  		//search engine name  		_urlRecordService.SaveSlug (product' product.ValidateSeName (seName' product.Name' true)' 0);  		//category mappings  		if (!String.IsNullOrEmpty (categoryIds)) {  			foreach (var id in categoryIds.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries).Select (x => Convert.ToInt32 (x.Trim ()))) {  				if (product.ProductCategories.FirstOrDefault (x => x.CategoryId == id) == null) {  					//ensure that category exists  					var category = _categoryService.GetCategoryById (id);  					if (category != null) {  						var productCategory = new ProductCategory () {  							ProductId = product.Id'  							CategoryId = category.Id'  							IsFeaturedProduct = false'  							DisplayOrder = 1  						};  						_categoryService.InsertProductCategory (productCategory);  					}  				}  			}  		}  		//manufacturer mappings  		if (!String.IsNullOrEmpty (manufacturerIds)) {  			foreach (var id in manufacturerIds.Split (new char[] {  				';'  			}' StringSplitOptions.RemoveEmptyEntries).Select (x => Convert.ToInt32 (x.Trim ()))) {  				if (product.ProductManufacturers.FirstOrDefault (x => x.ManufacturerId == id) == null) {  					//ensure that manufacturer exists  					var manufacturer = _manufacturerService.GetManufacturerById (id);  					if (manufacturer != null) {  						var productManufacturer = new ProductManufacturer () {  							ProductId = product.Id'  							ManufacturerId = manufacturer.Id'  							IsFeaturedProduct = false'  							DisplayOrder = 1  						};  						_manufacturerService.InsertProductManufacturer (productManufacturer);  					}  				}  			}  		}  		//pictures  		foreach (var picturePath in new string[] {  			picture1'  			picture2'  			picture3  		}) {  			if (String.IsNullOrEmpty (picturePath))  				continue;  			var mimeType = GetMimeTypeFromFilePath (picturePath);  			var newPictureBinary = File.ReadAllBytes (picturePath);  			var pictureAlreadyExists = false;  			if (!newProduct) {  				//compare with existing product pictures  				var existingPictures = _pictureService.GetPicturesByProductId (product.Id);  				foreach (var existingPicture in existingPictures) {  					var existingBinary = _pictureService.LoadPictureBinary (existingPicture);  					//picture binary after validation (like in database)  					var validatedPictureBinary = _pictureService.ValidatePicture (newPictureBinary' mimeType);  					if (existingBinary.SequenceEqual (validatedPictureBinary)) {  						//the same picture content  						pictureAlreadyExists = true;  						break;  					}  				}  			}  			if (!pictureAlreadyExists) {  				product.ProductPictures.Add (new ProductPicture () {  					Picture = _pictureService.InsertPicture (newPictureBinary' mimeType' _pictureService.GetPictureSeName (name)' true)'  					DisplayOrder = 1'  				});  				_productService.UpdateProduct (product);  			}  		}  		//update "HasTierPrices" and "HasDiscountsApplied" properties  		_productService.UpdateHasTierPricesProperty (product);  		_productService.UpdateHasDiscountsApplied (product);  		//next product  		iRow++;  	}  }  
Magic Number,Nop.Services.Localization,LocalizationExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationExtensions.cs,GetLocalized,The following statement contains a magic number: if (languageId > 0) {  	//ensure that we have at least two published languages  	bool loadLocalizedValue = true;  	if (ensureTwoPublishedLanguages) {  		var lService = EngineContext.Current.Resolve<ILanguageService> ();  		var totalPublishedLanguages = lService.GetAllLanguages ().Count;  		loadLocalizedValue = totalPublishedLanguages >= 2;  	}  	//localized value  	if (loadLocalizedValue) {  		var leService = EngineContext.Current.Resolve<ILocalizedEntityService> ();  		resultStr = leService.GetLocalizedValue (languageId' entity.Id' localeKeyGroup' localeKey);  		if (!String.IsNullOrEmpty (resultStr))  			result = CommonHelper.To<TPropType> (resultStr);  	}  }  
Magic Number,Nop.Services.Localization,LocalizationExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationExtensions.cs,GetLocalized,The following statement contains a magic number: if (ensureTwoPublishedLanguages) {  	var lService = EngineContext.Current.Resolve<ILanguageService> ();  	var totalPublishedLanguages = lService.GetAllLanguages ().Count;  	loadLocalizedValue = totalPublishedLanguages >= 2;  }  
Magic Number,Nop.Services.Localization,LocalizationExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationExtensions.cs,GetLocalized,The following statement contains a magic number: loadLocalizedValue = totalPublishedLanguages >= 2;  
Magic Number,Nop.Services.Localization,LocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationService.cs,ImportResourcesFromXml,The following statement contains a magic number: if (_commonSettings.UseStoredProceduresIfSupported && _dataProvider.StoredProceduredSupported) {  	//SQL 2005 insists that your XML schema incoding be in UTF-16.  	//Otherwise' you'll get "XML parsing: line 1' character XXX' unable to switch the encoding"  	//so let's remove XML declaration  	var inDoc = new XmlDocument ();  	inDoc.LoadXml (xml);  	var sb = new StringBuilder ();  	using (var xWriter = XmlWriter.Create (sb' new XmlWriterSettings () {  		OmitXmlDeclaration = true  	})) {  		inDoc.Save (xWriter);  		xWriter.Close ();  	}  	var outDoc = new XmlDocument ();  	outDoc.LoadXml (sb.ToString ());  	xml = outDoc.OuterXml;  	//stored procedures are enabled and supported by the database.  	var pLanguageId = _dataProvider.GetParameter ();  	pLanguageId.ParameterName = "LanguageId";  	pLanguageId.Value = language.Id;  	pLanguageId.DbType = DbType.Int32;  	var pXmlPackage = _dataProvider.GetParameter ();  	pXmlPackage.ParameterName = "XmlPackage";  	pXmlPackage.Value = xml;  	pXmlPackage.DbType = DbType.Xml;  	//long-running query. specify timeout (600 seconds)  	_dbContext.ExecuteSqlCommand ("EXEC [LanguagePackImport] @LanguageId' @XmlPackage"' false' 600' pLanguageId' pXmlPackage);  }  else {  	//stored procedures aren't supported  	var xmlDoc = new XmlDocument ();  	xmlDoc.LoadXml (xml);  	var nodes = xmlDoc.SelectNodes (@"//Language/LocaleResource");  	foreach (XmlNode node in nodes) {  		string name = node.Attributes ["Name"].InnerText.Trim ();  		string value = "";  		var valueNode = node.SelectSingleNode ("Value");  		if (valueNode != null)  			value = valueNode.InnerText;  		if (String.IsNullOrEmpty (name))  			continue;  		//do not use "Insert"/"Update" methods because they clear cache  		//let's bulk insert  		var resource = language.LocaleStringResources.FirstOrDefault (x => x.ResourceName.Equals (name' StringComparison.InvariantCultureIgnoreCase));  		if (resource != null)  			resource.ResourceValue = value;  		else {  			language.LocaleStringResources.Add (new LocaleStringResource () {  				ResourceName = name'  				ResourceValue = value  			});  		}  	}  	_languageService.UpdateLanguage (language);  }  
Magic Number,Nop.Services.Localization,LocalizationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Localization\LocalizationService.cs,ImportResourcesFromXml,The following statement contains a magic number: _dbContext.ExecuteSqlCommand ("EXEC [LanguagePackImport] @LanguageId' @XmlPackage"' false' 600' pLanguageId' pXmlPackage);  
Magic Number,Nop.Services.Orders,OrderReportService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderReportService.cs,BestSellersReport,The following statement contains a magic number: switch (orderBy) {  case 1:  	{  		query2 = query2.OrderByDescending (x => x.TotalQuantity);  	}  	break;  case 2:  	{  		query2 = query2.OrderByDescending (x => x.TotalAmount);  	}  	break;  default:  	throw new ArgumentException ("Wrong orderBy parameter"' "orderBy");  }  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShippingDiscount,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	shippingDiscountAmount = Math.Round (shippingDiscountAmount' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShippingDiscount,The following statement contains a magic number: shippingDiscountAmount = Math.Round (shippingDiscountAmount' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetOrderTotalDiscount,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	discountAmount = Math.Round (discountAmount' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetOrderTotalDiscount,The following statement contains a magic number: discountAmount = Math.Round (discountAmount' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	subTotalWithoutDiscount = Math.Round (subTotalWithoutDiscount' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: subTotalWithoutDiscount = Math.Round (subTotalWithoutDiscount' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: foreach (KeyValuePair<decimal' decimal> kvp in tempTaxRates) {  	decimal taxRate = kvp.Key;  	decimal taxValue = kvp.Value;  	if (taxValue != decimal.Zero) {  		//discount the tax amount that applies to subtotal items  		if (subTotalExclTaxWithoutDiscount > decimal.Zero) {  			decimal discountTax = taxRates [taxRate] * (discountAmountExclTax / subTotalExclTaxWithoutDiscount);  			discountAmountInclTax += discountTax;  			taxValue = taxRates [taxRate] - discountTax;  			if (_shoppingCartSettings.RoundPricesDuringCalculation)  				taxValue = Math.Round (taxValue' 2);  			taxRates [taxRate] = taxValue;  		}  		//subtotal with discount (incl tax)  		subTotalInclTaxWithDiscount += taxValue;  	}  }  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: if (taxValue != decimal.Zero) {  	//discount the tax amount that applies to subtotal items  	if (subTotalExclTaxWithoutDiscount > decimal.Zero) {  		decimal discountTax = taxRates [taxRate] * (discountAmountExclTax / subTotalExclTaxWithoutDiscount);  		discountAmountInclTax += discountTax;  		taxValue = taxRates [taxRate] - discountTax;  		if (_shoppingCartSettings.RoundPricesDuringCalculation)  			taxValue = Math.Round (taxValue' 2);  		taxRates [taxRate] = taxValue;  	}  	//subtotal with discount (incl tax)  	subTotalInclTaxWithDiscount += taxValue;  }  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: if (subTotalExclTaxWithoutDiscount > decimal.Zero) {  	decimal discountTax = taxRates [taxRate] * (discountAmountExclTax / subTotalExclTaxWithoutDiscount);  	discountAmountInclTax += discountTax;  	taxValue = taxRates [taxRate] - discountTax;  	if (_shoppingCartSettings.RoundPricesDuringCalculation)  		taxValue = Math.Round (taxValue' 2);  	taxRates [taxRate] = taxValue;  }  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	taxValue = Math.Round (taxValue' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: taxValue = Math.Round (taxValue' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation) {  	discountAmountInclTax = Math.Round (discountAmountInclTax' 2);  	discountAmountExclTax = Math.Round (discountAmountExclTax' 2);  }  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation) {  	discountAmountInclTax = Math.Round (discountAmountInclTax' 2);  	discountAmountExclTax = Math.Round (discountAmountExclTax' 2);  }  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: discountAmountInclTax = Math.Round (discountAmountInclTax' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: discountAmountExclTax = Math.Round (discountAmountExclTax' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	subTotalWithDiscount = Math.Round (subTotalWithDiscount' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartSubTotal,The following statement contains a magic number: subTotalWithDiscount = Math.Round (subTotalWithDiscount' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,AdjustShippingRate,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	adjustedRate = Math.Round (adjustedRate' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,AdjustShippingRate,The following statement contains a magic number: adjustedRate = Math.Round (adjustedRate' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The following statement contains a magic number: if (shippingTotal.HasValue) {  	if (shippingTotal.Value < decimal.Zero)  		shippingTotal = decimal.Zero;  	//round  	if (_shoppingCartSettings.RoundPricesDuringCalculation)  		shippingTotal = Math.Round (shippingTotal.Value' 2);  	shippingTotalTaxed = _taxService.GetShippingPrice (shippingTotal.Value' includingTax' customer' out taxRate);  	//round  	if (_shoppingCartSettings.RoundPricesDuringCalculation)  		shippingTotalTaxed = Math.Round (shippingTotalTaxed.Value' 2);  }  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The following statement contains a magic number: if (shippingTotal.HasValue) {  	if (shippingTotal.Value < decimal.Zero)  		shippingTotal = decimal.Zero;  	//round  	if (_shoppingCartSettings.RoundPricesDuringCalculation)  		shippingTotal = Math.Round (shippingTotal.Value' 2);  	shippingTotalTaxed = _taxService.GetShippingPrice (shippingTotal.Value' includingTax' customer' out taxRate);  	//round  	if (_shoppingCartSettings.RoundPricesDuringCalculation)  		shippingTotalTaxed = Math.Round (shippingTotalTaxed.Value' 2);  }  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	shippingTotal = Math.Round (shippingTotal.Value' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The following statement contains a magic number: shippingTotal = Math.Round (shippingTotal.Value' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	shippingTotalTaxed = Math.Round (shippingTotalTaxed.Value' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartShippingTotal,The following statement contains a magic number: shippingTotalTaxed = Math.Round (shippingTotalTaxed.Value' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	taxTotal = Math.Round (taxTotal' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetTaxTotal,The following statement contains a magic number: taxTotal = Math.Round (taxTotal' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	resultTemp = Math.Round (resultTemp' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: resultTemp = Math.Round (resultTemp' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	resultTemp = Math.Round (resultTemp' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: resultTemp = Math.Round (resultTemp' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	resultTemp = Math.Round (resultTemp' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: resultTemp = Math.Round (resultTemp' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: if (orderTotal.HasValue) {  	orderTotal = orderTotal.Value - redeemedRewardPointsAmount;  	if (_shoppingCartSettings.RoundPricesDuringCalculation)  		orderTotal = Math.Round (orderTotal.Value' 2);  	return orderTotal;  }  else  	return null;  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	orderTotal = Math.Round (orderTotal.Value' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,GetShoppingCartTotal,The following statement contains a magic number: orderTotal = Math.Round (orderTotal.Value' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,ConvertRewardPointsToAmount,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	result = Math.Round (result' 2);  
Magic Number,Nop.Services.Orders,OrderTotalCalculationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\OrderTotalCalculationService.cs,ConvertRewardPointsToAmount,The following statement contains a magic number: result = Math.Round (result' 2);  
Magic Number,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The following statement contains a magic number: foreach (var sci in shoppingCart.Where (a => a.ShoppingCartType == shoppingCartType)) {  	if (sci.ProductId == product.Id) {  		//attributes  		bool attributesEqual = _productAttributeParser.AreProductAttributesEqual (sci.AttributesXml' selectedAttributes);  		//gift cards  		bool giftCardInfoSame = true;  		if (sci.Product.IsGiftCard) {  			string giftCardRecipientName1 = string.Empty;  			string giftCardRecipientEmail1 = string.Empty;  			string giftCardSenderName1 = string.Empty;  			string giftCardSenderEmail1 = string.Empty;  			string giftCardMessage1 = string.Empty;  			_productAttributeParser.GetGiftCardAttribute (selectedAttributes' out giftCardRecipientName1' out giftCardRecipientEmail1' out giftCardSenderName1' out giftCardSenderEmail1' out giftCardMessage1);  			string giftCardRecipientName2 = string.Empty;  			string giftCardRecipientEmail2 = string.Empty;  			string giftCardSenderName2 = string.Empty;  			string giftCardSenderEmail2 = string.Empty;  			string giftCardMessage2 = string.Empty;  			_productAttributeParser.GetGiftCardAttribute (sci.AttributesXml' out giftCardRecipientName2' out giftCardRecipientEmail2' out giftCardSenderName2' out giftCardSenderEmail2' out giftCardMessage2);  			if (giftCardRecipientName1.ToLowerInvariant () != giftCardRecipientName2.ToLowerInvariant () || giftCardSenderName1.ToLowerInvariant () != giftCardSenderName2.ToLowerInvariant ())  				giftCardInfoSame = false;  		}  		//price is the same (for products which require customers to enter a price)  		bool customerEnteredPricesEqual = true;  		if (sci.Product.CustomerEntersPrice)  			customerEnteredPricesEqual = Math.Round (sci.CustomerEnteredPrice' 2) == Math.Round (customerEnteredPrice' 2);  		//found?  		if (attributesEqual && giftCardInfoSame && customerEnteredPricesEqual)  			return sci;  	}  }  
Magic Number,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The following statement contains a magic number: foreach (var sci in shoppingCart.Where (a => a.ShoppingCartType == shoppingCartType)) {  	if (sci.ProductId == product.Id) {  		//attributes  		bool attributesEqual = _productAttributeParser.AreProductAttributesEqual (sci.AttributesXml' selectedAttributes);  		//gift cards  		bool giftCardInfoSame = true;  		if (sci.Product.IsGiftCard) {  			string giftCardRecipientName1 = string.Empty;  			string giftCardRecipientEmail1 = string.Empty;  			string giftCardSenderName1 = string.Empty;  			string giftCardSenderEmail1 = string.Empty;  			string giftCardMessage1 = string.Empty;  			_productAttributeParser.GetGiftCardAttribute (selectedAttributes' out giftCardRecipientName1' out giftCardRecipientEmail1' out giftCardSenderName1' out giftCardSenderEmail1' out giftCardMessage1);  			string giftCardRecipientName2 = string.Empty;  			string giftCardRecipientEmail2 = string.Empty;  			string giftCardSenderName2 = string.Empty;  			string giftCardSenderEmail2 = string.Empty;  			string giftCardMessage2 = string.Empty;  			_productAttributeParser.GetGiftCardAttribute (sci.AttributesXml' out giftCardRecipientName2' out giftCardRecipientEmail2' out giftCardSenderName2' out giftCardSenderEmail2' out giftCardMessage2);  			if (giftCardRecipientName1.ToLowerInvariant () != giftCardRecipientName2.ToLowerInvariant () || giftCardSenderName1.ToLowerInvariant () != giftCardSenderName2.ToLowerInvariant ())  				giftCardInfoSame = false;  		}  		//price is the same (for products which require customers to enter a price)  		bool customerEnteredPricesEqual = true;  		if (sci.Product.CustomerEntersPrice)  			customerEnteredPricesEqual = Math.Round (sci.CustomerEnteredPrice' 2) == Math.Round (customerEnteredPrice' 2);  		//found?  		if (attributesEqual && giftCardInfoSame && customerEnteredPricesEqual)  			return sci;  	}  }  
Magic Number,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The following statement contains a magic number: if (sci.ProductId == product.Id) {  	//attributes  	bool attributesEqual = _productAttributeParser.AreProductAttributesEqual (sci.AttributesXml' selectedAttributes);  	//gift cards  	bool giftCardInfoSame = true;  	if (sci.Product.IsGiftCard) {  		string giftCardRecipientName1 = string.Empty;  		string giftCardRecipientEmail1 = string.Empty;  		string giftCardSenderName1 = string.Empty;  		string giftCardSenderEmail1 = string.Empty;  		string giftCardMessage1 = string.Empty;  		_productAttributeParser.GetGiftCardAttribute (selectedAttributes' out giftCardRecipientName1' out giftCardRecipientEmail1' out giftCardSenderName1' out giftCardSenderEmail1' out giftCardMessage1);  		string giftCardRecipientName2 = string.Empty;  		string giftCardRecipientEmail2 = string.Empty;  		string giftCardSenderName2 = string.Empty;  		string giftCardSenderEmail2 = string.Empty;  		string giftCardMessage2 = string.Empty;  		_productAttributeParser.GetGiftCardAttribute (sci.AttributesXml' out giftCardRecipientName2' out giftCardRecipientEmail2' out giftCardSenderName2' out giftCardSenderEmail2' out giftCardMessage2);  		if (giftCardRecipientName1.ToLowerInvariant () != giftCardRecipientName2.ToLowerInvariant () || giftCardSenderName1.ToLowerInvariant () != giftCardSenderName2.ToLowerInvariant ())  			giftCardInfoSame = false;  	}  	//price is the same (for products which require customers to enter a price)  	bool customerEnteredPricesEqual = true;  	if (sci.Product.CustomerEntersPrice)  		customerEnteredPricesEqual = Math.Round (sci.CustomerEnteredPrice' 2) == Math.Round (customerEnteredPrice' 2);  	//found?  	if (attributesEqual && giftCardInfoSame && customerEnteredPricesEqual)  		return sci;  }  
Magic Number,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The following statement contains a magic number: if (sci.ProductId == product.Id) {  	//attributes  	bool attributesEqual = _productAttributeParser.AreProductAttributesEqual (sci.AttributesXml' selectedAttributes);  	//gift cards  	bool giftCardInfoSame = true;  	if (sci.Product.IsGiftCard) {  		string giftCardRecipientName1 = string.Empty;  		string giftCardRecipientEmail1 = string.Empty;  		string giftCardSenderName1 = string.Empty;  		string giftCardSenderEmail1 = string.Empty;  		string giftCardMessage1 = string.Empty;  		_productAttributeParser.GetGiftCardAttribute (selectedAttributes' out giftCardRecipientName1' out giftCardRecipientEmail1' out giftCardSenderName1' out giftCardSenderEmail1' out giftCardMessage1);  		string giftCardRecipientName2 = string.Empty;  		string giftCardRecipientEmail2 = string.Empty;  		string giftCardSenderName2 = string.Empty;  		string giftCardSenderEmail2 = string.Empty;  		string giftCardMessage2 = string.Empty;  		_productAttributeParser.GetGiftCardAttribute (sci.AttributesXml' out giftCardRecipientName2' out giftCardRecipientEmail2' out giftCardSenderName2' out giftCardSenderEmail2' out giftCardMessage2);  		if (giftCardRecipientName1.ToLowerInvariant () != giftCardRecipientName2.ToLowerInvariant () || giftCardSenderName1.ToLowerInvariant () != giftCardSenderName2.ToLowerInvariant ())  			giftCardInfoSame = false;  	}  	//price is the same (for products which require customers to enter a price)  	bool customerEnteredPricesEqual = true;  	if (sci.Product.CustomerEntersPrice)  		customerEnteredPricesEqual = Math.Round (sci.CustomerEnteredPrice' 2) == Math.Round (customerEnteredPrice' 2);  	//found?  	if (attributesEqual && giftCardInfoSame && customerEnteredPricesEqual)  		return sci;  }  
Magic Number,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The following statement contains a magic number: if (sci.Product.CustomerEntersPrice)  	customerEnteredPricesEqual = Math.Round (sci.CustomerEnteredPrice' 2) == Math.Round (customerEnteredPrice' 2);  
Magic Number,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The following statement contains a magic number: if (sci.Product.CustomerEntersPrice)  	customerEnteredPricesEqual = Math.Round (sci.CustomerEnteredPrice' 2) == Math.Round (customerEnteredPrice' 2);  
Magic Number,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The following statement contains a magic number: customerEnteredPricesEqual = Math.Round (sci.CustomerEnteredPrice' 2) == Math.Round (customerEnteredPrice' 2);  
Magic Number,Nop.Services.Orders,ShoppingCartService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Orders\ShoppingCartService.cs,FindShoppingCartItemInTheCart,The following statement contains a magic number: customerEnteredPricesEqual = Math.Round (sci.CustomerEnteredPrice' 2) == Math.Round (customerEnteredPrice' 2);  
Magic Number,Nop.Services.Payments,PaymentService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Payments\PaymentService.cs,GetAdditionalHandlingFee,The following statement contains a magic number: if (_shoppingCartSettings.RoundPricesDuringCalculation)  	result = Math.Round (result' 2);  
Magic Number,Nop.Services.Payments,PaymentService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Payments\PaymentService.cs,GetAdditionalHandlingFee,The following statement contains a magic number: result = Math.Round (result' 2);  
Magic Number,Nop.Services.Payments,PaymentService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Payments\PaymentService.cs,GetMaskedCreditCardNumber,The following statement contains a magic number: if (creditCardNumber.Length <= 4)  	return creditCardNumber;  
Magic Number,Nop.Services.Payments,PaymentService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Payments\PaymentService.cs,GetMaskedCreditCardNumber,The following statement contains a magic number: for (int i = 0; i < creditCardNumber.Length - 4; i++) {  	maskedChars += "*";  }  
Magic Number,Nop.Services.Security,EncryptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\EncryptionService.cs,EncryptText,The following statement contains a magic number: tDESalg.Key = new ASCIIEncoding ().GetBytes (encryptionPrivateKey.Substring (0' 16));  
Magic Number,Nop.Services.Security,EncryptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\EncryptionService.cs,EncryptText,The following statement contains a magic number: tDESalg.IV = new ASCIIEncoding ().GetBytes (encryptionPrivateKey.Substring (8' 8));  
Magic Number,Nop.Services.Security,EncryptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\EncryptionService.cs,EncryptText,The following statement contains a magic number: tDESalg.IV = new ASCIIEncoding ().GetBytes (encryptionPrivateKey.Substring (8' 8));  
Magic Number,Nop.Services.Security,EncryptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\EncryptionService.cs,DecryptText,The following statement contains a magic number: tDESalg.Key = new ASCIIEncoding ().GetBytes (encryptionPrivateKey.Substring (0' 16));  
Magic Number,Nop.Services.Security,EncryptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\EncryptionService.cs,DecryptText,The following statement contains a magic number: tDESalg.IV = new ASCIIEncoding ().GetBytes (encryptionPrivateKey.Substring (8' 8));  
Magic Number,Nop.Services.Security,EncryptionService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Security\EncryptionService.cs,DecryptText,The following statement contains a magic number: tDESalg.IV = new ASCIIEncoding ().GetBytes (encryptionPrivateKey.Substring (8' 8));  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,GetSeName,The following statement contains a magic number: if (languageId > 0) {  	//ensure that we have at least two published languages  	bool loadLocalizedValue = true;  	if (ensureTwoPublishedLanguages) {  		var lService = EngineContext.Current.Resolve<ILanguageService> ();  		var totalPublishedLanguages = lService.GetAllLanguages ().Count;  		loadLocalizedValue = totalPublishedLanguages >= 2;  	}  	//localized value  	if (loadLocalizedValue) {  		result = urlRecordService.GetActiveSlug (entityId' entityName' languageId);  	}  }  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,GetSeName,The following statement contains a magic number: if (ensureTwoPublishedLanguages) {  	var lService = EngineContext.Current.Resolve<ILanguageService> ();  	var totalPublishedLanguages = lService.GetAllLanguages ().Count;  	loadLocalizedValue = totalPublishedLanguages >= 2;  }  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,GetSeName,The following statement contains a magic number: loadLocalizedValue = totalPublishedLanguages >= 2;  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,ValidateSeName,The following statement contains a magic number: seName = CommonHelper.EnsureMaximumLength (seName' 200);  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,ToUnichar,The following statement contains a magic number: b [0] = Convert.ToByte (hexString.Substring (2' 2)' 16);  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,ToUnichar,The following statement contains a magic number: b [0] = Convert.ToByte (hexString.Substring (2' 2)' 16);  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,ToUnichar,The following statement contains a magic number: b [0] = Convert.ToByte (hexString.Substring (2' 2)' 16);  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,ToUnichar,The following statement contains a magic number: b [1] = Convert.ToByte (hexString.Substring (0' 2)' 16);  
Magic Number,Nop.Services.Seo,SeoExtensions,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Seo\SeoExtensions.cs,ToUnichar,The following statement contains a magic number: b [1] = Convert.ToByte (hexString.Substring (0' 2)' 16);  
Magic Number,Nop.Services.Tasks,TaskManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tasks\TaskManager.cs,Initialize,The following statement contains a magic number: if (notRunTasks.Count > 0) {  	var taskThread = new TaskThread () {  		RunOnlyOnce = true'  		Seconds = 60 * 5  	//let's run such tasks in 5 minutes after application start  	};  	foreach (var scheduleTask in notRunTasks) {  		var task = new Task (scheduleTask);  		taskThread.AddTask (task);  	}  	this._taskThreads.Add (taskThread);  }  
Magic Number,Nop.Services.Tasks,TaskManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tasks\TaskManager.cs,Initialize,The following statement contains a magic number: if (notRunTasks.Count > 0) {  	var taskThread = new TaskThread () {  		RunOnlyOnce = true'  		Seconds = 60 * 5  	//let's run such tasks in 5 minutes after application start  	};  	foreach (var scheduleTask in notRunTasks) {  		var task = new Task (scheduleTask);  		taskThread.AddTask (task);  	}  	this._taskThreads.Add (taskThread);  }  
Magic Number,Nop.Services.Tasks,TaskThread,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tasks\TaskThread.cs,TaskThread,The following statement contains a magic number: this.Seconds = 10 * 60;  
Magic Number,Nop.Services.Tasks,TaskThread,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tasks\TaskThread.cs,TaskThread,The following statement contains a magic number: this.Seconds = 10 * 60;  
Magic Number,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,CalculatePrice,The following statement contains a magic number: if (increase) {  	result = price * (1 + percent / 100);  }  else {  	result = price - (price) / (100 + percent) * percent;  }  
Magic Number,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,CalculatePrice,The following statement contains a magic number: if (increase) {  	result = price * (1 + percent / 100);  }  else {  	result = price - (price) / (100 + percent) * percent;  }  
Magic Number,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,CalculatePrice,The following statement contains a magic number: result = price * (1 + percent / 100);  
Magic Number,Nop.Services.Tax,TaxService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Tax\TaxService.cs,CalculatePrice,The following statement contains a magic number: result = price - (price) / (100 + percent) * percent;  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVat,The following statement contains a magic number: vatNumber = ((string)(results [2]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVat,The following statement contains a magic number: valid = ((bool)(results [3]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVat,The following statement contains a magic number: name = ((string)(results [4]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVat,The following statement contains a magic number: address = ((string)(results [5]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: vatNumber = ((string)(results [2]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderName = ((string)(results [3]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderCompanyType = ((string)(results [4]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderStreet = ((string)(results [5]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderPostcode = ((string)(results [6]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderCity = ((string)(results [7]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: valid = ((bool)(results [8]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderAddress = ((string)(results [9]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderNameMatch = ((matchCode)(results [10]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderNameMatchSpecified = ((bool)(results [11]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderCompanyTypeMatch = ((matchCode)(results [12]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderCompanyTypeMatchSpecified = ((bool)(results [13]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderStreetMatch = ((matchCode)(results [14]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderStreetMatchSpecified = ((bool)(results [15]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderPostcodeMatch = ((matchCode)(results [16]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderPostcodeMatchSpecified = ((bool)(results [17]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderCityMatch = ((matchCode)(results [18]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: traderCityMatchSpecified = ((bool)(results [19]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,checkVatApprox,The following statement contains a magic number: requestIdentifier = ((string)(results [20]));  
Magic Number,Nop.Services.EuropaCheckVatService,checkVatService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Web References\EuropaCheckVatService\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024) && (string.Compare (wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {  	return true;  }  
Duplicate Code,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The method contains a code clone-set at the following line numbers (starting from the method definition): ((391' 411)' (430' 450))
Duplicate Code,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The method contains a code clone-set at the following line numbers (starting from the method definition): ((693' 712)' (1278' 1297))
Duplicate Code,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The method contains a code clone-set at the following line numbers (starting from the method definition): ((921' 941)' (964' 984))
Duplicate Code,Nop.Services.Installation,CodeFirstInstallationService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Installation\CodeFirstInstallationService.cs,InstallProducts,The method contains a code clone-set at the following line numbers (starting from the method definition): ((1918' 1938)' (1957' 1977))
Missing Default,Nop.Services.Media,PictureService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Media\PictureService.cs,GetFileExtensionFromMimeType,The following switch statement is missing a default case: switch (lastPart) {  case "pjpeg":  	lastPart = "jpg";  	break;  case "x-png":  	lastPart = "png";  	break;  case "x-icon":  	lastPart = "ico";  	break;  }  
Missing Default,Nop.Services.Shipping,ShippingService,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\Shipping\ShippingService.cs,GetShoppingCartItemWeight,The following switch statement is missing a default case: switch (pvaValue.AttributeValueType) {  case AttributeValueType.Simple:  	{  		//simple attribute  		attributesTotalWeight += pvaValue.WeightAdjustment;  	}  	break;  case AttributeValueType.AssociatedToProduct:  	{  		//bundled product  		var associatedProduct = _productService.GetProductById (pvaValue.AssociatedProductId);  		if (associatedProduct != null && associatedProduct.IsShipEnabled) {  			attributesTotalWeight += associatedProduct.Weight * pvaValue.Quantity;  		}  	}  	break;  }  
Missing Default,Nop.Services.ExportImport,ExportManager,C:\repos\iowen8_FertilityWater_ECom\FertilityWaterStore\Libraries\Nop.Services\ExportImport\ExportManager.cs,ExportProductsToXlsx,The following switch statement is missing a default case: switch (i) {  case 0:  	picture1 = pictureLocalPath;  	break;  case 1:  	picture2 = pictureLocalPath;  	break;  case 2:  	picture3 = pictureLocalPath;  	break;  }  
