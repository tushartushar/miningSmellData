Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe6Test,The length of the statement  "                (value0' value1' value2' value3' value4' value5' value6) => new[] { value0' value1' value2' value3' value4' value5' value6 }) " is 125.
Long Statement,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe6Test,The length of the statement  "                (value0' value1' value2' value3' value4' value5' value6) => new[] { value0' value1' value2' value3' value4' value5' value6 }) " is 125.
Long Statement,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe7Test,The length of the statement  "                (value0' value1' value2' value3' value4' value5' value6' value7) => new[] { value0' value1' value2' value3' value4' value5' value6' value7 }) " is 141.
Long Statement,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe7Test,The length of the statement  "                (value0' value1' value2' value3' value4' value5' value6' value7) => new[] { value0' value1' value2' value3' value4' value5' value6' value7 }) " is 141.
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,SequenceTest,The following statement contains a magic number: Combinator.Sequence<Char' Char>(                  new[] {                      Chars.Satisfy('i')'                      Chars.Satisfy('n')'                      Chars.Satisfy('p')'                      Chars.Satisfy('u')'                      Chars.Satisfy('t')                  })                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                          {                              Assert.True(Enumerable.SequenceEqual(value' "input"));                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual('S'' restStream.Current.Value.Item0);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(6' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,SequenceTest,The following statement contains a magic number: Combinator.Sequence<Char' Char>(                  new[] {                      Chars.Satisfy('i')'                      Chars.Satisfy('n')'                      Chars.Satisfy('X')'                      Chars.Satisfy('u')'                      Chars.Satisfy('t')                  })                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) =>                      {                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('p'' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(3' restStream.Current.Value.Item1.Column);                      }'                      success: (restStream' value) =>                          Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,ChoiceTest,The following statement contains a magic number: Combinator.Choice<Char' Char>(new[] {                   Chars.Satisfy('i')'                  Parser.Fail<Char' Char>("Failure")              })                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('n'' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,ChoiceTest,The following statement contains a magic number: Combinator.Choice<Char' Char>(new[] {                   Parser.Fail<Char' Char>("Failure")'                  Chars.Satisfy('i')              })                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('n'' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,RepeatTest,The following statement contains a magic number: Combinator.Repeat(Chars.Any()' 5)                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                          {                              Assert.True(Enumerable.SequenceEqual(value' "input"));                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual('S'' restStream.Current.Value.Item0);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(6' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,RepeatTest,The following statement contains a magic number: Combinator.Repeat(Chars.Any()' 5)                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                          {                              Assert.True(Enumerable.SequenceEqual(value' "input"));                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual('S'' restStream.Current.Value.Item0);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(6' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,RepeatTest,The following statement contains a magic number: Combinator.Repeat(Chars.Any()' 12)                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) =>                          {                              Assert.False(restStream.Current.HasValue);                          }'                      success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,SepBy0Test,The following statement contains a magic number: Combinator.SepBy0(                  Chars.Any()'                  Chars.Char(''').Ignore())                  .Run("i'n'p'u't'S't'r'i'n'g'".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.True(Enumerable.SequenceEqual(value' "inputString"));                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('''' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(22' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,SepBy1Test,The following statement contains a magic number: Combinator.SepBy1(                  Chars.Any()'                  Chars.Char(''').Ignore())                  .Run("i'n'p'u't'S't'r'i'n'g'".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.True(Enumerable.SequenceEqual(value' "inputString"));                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('''' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(22' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,EndBy0Test,The following statement contains a magic number: Combinator.EndBy0(                      Chars.Any()'                      Chars.Char(''').Ignore())                      .Run("i'n'p'u't'S't'r'i'n'g".AsStream())                      .Case(                          failure: (restStream' _) => Assert.Fail()'                          success: (restStream' value) =>                          {                              Assert.True(Enumerable.SequenceEqual(value' "inputStrin"));                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual('g'' restStream.Current.Value.Item0);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(21' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,EndBy1Test,The following statement contains a magic number: Combinator.EndBy1(                      Chars.Any()'                      Chars.Char(''').Ignore())                      .Run("i'n'p'u't'S't'r'i'n'g".AsStream())                      .Case(                          failure: (restStream' _) => Assert.Fail()'                          success: (restStream' value) =>                          {                              Assert.True(Enumerable.SequenceEqual(value' "inputStrin"));                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual('g'' restStream.Current.Value.Item0);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(21' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,LazyTest,The following statement contains a magic number: Combinator.Or(                  Chars.Any()'                  Combinator.Lazy(throwException))                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) => Assert.Fail()'                  success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('n'' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe1Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  (value0' value1) => new[] { value0' value1 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) => Assert.Fail()'                  success: (restStream' value) =>                      {                          Assert.True(Enumerable.SequenceEqual(value' "in"));                          Assert.AreEqual('p'' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(3' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe1Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Parser.Fail<Char' Char>("Failure")'                  (value0' value1) => new[] { value0' value1 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) =>                      {                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('n'' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      }'                  success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe2Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  (value0' value1' value2) => new[] { value0' value1' value2 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) => Assert.Fail()'                  success: (restStream' value) =>                  {                      Assert.True(Enumerable.SequenceEqual(value' "inp"));                      Assert.AreEqual('u'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(4' restStream.Current.Value.Item1.Column);                  });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe2Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Parser.Fail<Char' Char>("Failure")'                  (value0' value1' value2) => new[] { value0' value1' value2 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) =>                  {                      Assert.True(restStream.Current.HasValue);                      Assert.AreEqual('p'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(3' restStream.Current.Value.Item1.Column);                  }'                  success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe3Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  (value0' value1' value2' value3) => new[] { value0' value1' value2' value3 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) => Assert.Fail()'                  success: (restStream' value) =>                  {                      Assert.True(Enumerable.SequenceEqual(value' "inpu"));                      Assert.AreEqual('t'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(5' restStream.Current.Value.Item1.Column);                  });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe3Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Parser.Fail<Char' Char>("Failure")'                  (value0' value1' value2' value3) => new[] { value0' value1' value2' value3 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) =>                  {                      Assert.True(restStream.Current.HasValue);                      Assert.AreEqual('u'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(4' restStream.Current.Value.Item1.Column);                  }'                  success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe4Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  Chars.Char('t')'                  (value0' value1' value2' value3' value4) => new[] { value0' value1' value2' value3' value4 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) => Assert.Fail()'                  success: (restStream' value) =>                  {                      Assert.True(Enumerable.SequenceEqual(value' "input"));                      Assert.AreEqual('S'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(6' restStream.Current.Value.Item1.Column);                  });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe4Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  Parser.Fail<Char' Char>("Failure")'                  (value0' value1' value2' value3' value4) => new[] { value0' value1' value2' value3' value4 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) =>                  {                      Assert.True(restStream.Current.HasValue);                      Assert.AreEqual('t'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(5' restStream.Current.Value.Item1.Column);                  }'                  success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe5Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  Chars.Char('t')'                  Chars.Char('S')'                  (value0' value1' value2' value3' value4' value5) => new[] { value0' value1' value2' value3' value4' value5 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) => Assert.Fail()'                  success: (restStream' value) =>                  {                      Assert.True(Enumerable.SequenceEqual(value' "inputS"));                      Assert.AreEqual('t'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(7' restStream.Current.Value.Item1.Column);                  });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe5Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  Chars.Char('t')'                  Parser.Fail<Char' Char>("Failure")'                  (value0' value1' value2' value3' value4' value5) => new[] { value0' value1' value2' value3' value4' value5 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) =>                  {                      Assert.True(restStream.Current.HasValue);                      Assert.AreEqual('S'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(6' restStream.Current.Value.Item1.Column);                  }'                  success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe6Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  Chars.Char('t')'                  Chars.Char('S')'                  Chars.Char('t')'                  (value0' value1' value2' value3' value4' value5' value6) => new[] { value0' value1' value2' value3' value4' value5' value6 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) => Assert.Fail()'                  success: (restStream' value) =>                  {                      Assert.True(Enumerable.SequenceEqual(value' "inputSt"));                      Assert.AreEqual('r'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(8' restStream.Current.Value.Item1.Column);                  });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe6Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  Chars.Char('t')'                  Chars.Char('S')'                  Parser.Fail<Char' Char>("Failure")'                  (value0' value1' value2' value3' value4' value5' value6) => new[] { value0' value1' value2' value3' value4' value5' value6 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) =>                  {                      Assert.True(restStream.Current.HasValue);                      Assert.AreEqual('t'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(7' restStream.Current.Value.Item1.Column);                  }'                  success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe7Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  Chars.Char('t')'                  Chars.Char('S')'                  Chars.Char('t')'                  Chars.Char('r')'                  (value0' value1' value2' value3' value4' value5' value6' value7) => new[] { value0' value1' value2' value3' value4' value5' value6' value7 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) => Assert.Fail()'                  success: (restStream' value) =>                  {                      Assert.True(Enumerable.SequenceEqual(value' "inputStr"));                      Assert.AreEqual('i'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(9' restStream.Current.Value.Item1.Column);                  });
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,Pipe7Test,The following statement contains a magic number: Combinator.Pipe(                  Chars.Char('i')'                  Chars.Char('n')'                  Chars.Char('p')'                  Chars.Char('u')'                  Chars.Char('t')'                  Chars.Char('S')'                  Chars.Char('t')'                  Parser.Fail<Char' Char>("Failure")'                  (value0' value1' value2' value3' value4' value5' value6' value7) => new[] { value0' value1' value2' value3' value4' value5' value6' value7 })                  .Run("inputString".AsStream())                  .Case(                  failure: (restStream' _) =>                  {                      Assert.True(restStream.Current.HasValue);                      Assert.AreEqual('r'' restStream.Current.Value.Item0);                      Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                      Assert.AreEqual(8' restStream.Current.Value.Item1.Column);                  }'                  success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq,CombinatorTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinator.Test.cs,IgnoreTest,The following statement contains a magic number: Combinator.Ignore(Combinator.Sequence("inpXtString".Select(Chars.Char)))                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) =>                      {                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('u'' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(4' restStream.Current.Value.Item1.Column);                      }'                      success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,AnyTest,The following statement contains a magic number: Chars.Any()                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' errorMessage) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,CharTest,The following statement contains a magic number: Chars.Char('i')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' errorMessage) => Assert.Fail()'                      success: (restStream' value) =>                          {                              Assert.AreEqual('i'' value);                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,CharTest,The following statement contains a magic number: Chars.Char(c => c == 'i')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' errorMessage) => Assert.Fail()'                      success: (restStream' value) =>                          {                              Assert.AreEqual('i'' value);                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,SatisfyTest,The following statement contains a magic number: Chars.Satisfy('i')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' errorMessage) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,SatisfyTest,The following statement contains a magic number: Chars.Satisfy(c => c == 'i')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' errorMessage) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,OneOfTest,The following statement contains a magic number: Chars.OneOf('a'' 'b'' 'i'' 'c')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,OneOfTest,The following statement contains a magic number: Chars.OneOf(new[] { 'a'' 'b'' 'i'' 'c' })                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,NoneOfTest,The following statement contains a magic number: Chars.NoneOf()                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,CharsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Chars.Test.cs,NoneOfTest,The following statement contains a magic number: Chars.NoneOf('a'' 'b'' 'c')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,AnyTest,The following statement contains a magic number: Prims.Any<Char>()                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' errorMessage) => Assert.Fail()'                      success: (restStream' value) =>                          {                              Assert.AreEqual('i'' value);                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,SatisfyTest,The following statement contains a magic number: Prims.Satisfy<Char>('i')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' errorMessage) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,SatisfyTest,The following statement contains a magic number: Prims.Satisfy<Char>(c => c == 'i')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' errorMessage) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,OneOfTest,The following statement contains a magic number: Chars.OneOf('a'' 'b'' 'i'' 'c')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                          {                              Assert.AreEqual('i'' value);                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,OneOfTest,The following statement contains a magic number: Chars.OneOf(new [] { 'a'' 'b'' 'i'' 'c' })                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.AreEqual('i'' value);                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                      });
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,NoneOfTest,The following statement contains a magic number: Chars.NoneOf()                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                           {                              Assert.AreEqual('i'' value);                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,NoneOfTest,The following statement contains a magic number: Chars.NoneOf('a'' 'b'' 'c')                  .Run("inputString".AsStream())                  .Case(                      failure: (restStream' _) => Assert.Fail()'                      success: (restStream' value) =>                           {                              Assert.AreEqual('i'' value);                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                          });
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,AppendTest,The following statement contains a magic number: Prims.Empty<Char' Char>()                  .Append(Chars.Char('f'))                  .Append(Chars.Char('X'))                  .Append(Chars.Char('o'))                  .Run("foo".AsStream())                  .Case(                      failure: (restStream' errorMessage) =>                          {                              Assert.True(restStream.Current.HasValue);                              Assert.AreEqual('o'' restStream.Current.Value.Item0);                              Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                              Assert.AreEqual(2' restStream.Current.Value.Item1.Column);                          }'                      success: (restStream' value) => Assert.Fail());
Magic Number,Test.Parseq.Combinators,PrimsTest,D:\research\architectureSmells\repos\linerlock_parseq\Test\Combinators\Prims.Test.cs,AppendTest,The following statement contains a magic number: Prims.Empty<Char' Char>()                  .Append(Chars.Char('f'))                  .Append(Chars.Char('o').Optional())                  .Append(Chars.Char('o'))                  .Append(Prims.Empty<Char' Char>()                      .Append(Chars.Char('b'))                      .Append(Chars.Char('X'))                      .Append(Chars.Char('r'))                      .Optional())                  .Run("foobar".AsStream())                  .Case(                      failure: (restStream' errorMessage) =>                          Assert.Fail()'                      success: (restStream' value) =>                      {                          Assert.True(Enumerable.SequenceEqual(value' "foo"));                          Assert.True(restStream.Current.HasValue);                          Assert.AreEqual('b'' restStream.Current.Value.Item0);                          Assert.AreEqual(1' restStream.Current.Value.Item1.Line);                          Assert.AreEqual(4' restStream.Current.Value.Item1.Column);                      });
