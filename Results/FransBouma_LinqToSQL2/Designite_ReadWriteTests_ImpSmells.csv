Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,Cyclomatic complexity of the method is 8
Long Statement,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,DoubleAndDecimalMathCalculationsWithLet,The length of the statement  "			//			//let d = EarthRadius * (-1 * AdventureWorksFunctions.Atan(x2 / AdventureWorksFunctions.Sqrt(1 - x2 * x2)) + Math.PI / 2) " is 126.
Long Statement,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTake,The length of the statement  "				Assert.AreEqual(@"SELECT [t1].[AccountNumber]' [t1].[CustomerID] AS [CustomerId]' [t1].[ModifiedDate]' [t1].[PersonID] AS [PersonId]' [t1].[rowguid] AS [Rowguid]' [t1].[StoreID] AS [StoreId]' [t1].[TerritoryID] AS [TerritoryId] " is 227.
Long Statement,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTake,The length of the statement  "    SELECT ROW_NUMBER() OVER (ORDER BY [t0].[AccountNumber]' [t0].[CustomerID]' [t0].[ModifiedDate]' [t0].[PersonID]' [t0].[rowguid]' [t0].[StoreID]' [t0].[TerritoryID]) AS [ROW_NUMBER]' [t0].[AccountNumber]' [t0].[CustomerID]' [t0].[ModifiedDate]' [t0].[PersonID]' [t0].[rowguid]' [t0].[StoreID]' [t0].[TerritoryID] " is 312.
Long Statement,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTakeUsingSql2000Paging,The length of the statement  "				Assert.AreEqual(@"SELECT TOP 10 [t0].[AccountNumber]' [t0].[CustomerID] AS [CustomerId]' [t0].[ModifiedDate]' [t0].[PersonID] AS [PersonId]' [t0].[rowguid] AS [Rowguid]' [t0].[StoreID] AS [StoreId]' [t0].[TerritoryID] AS [TerritoryId] " is 234.
Long Statement,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,GetContext,The length of the statement  "			connection.ConnectionString = ConfigurationManager.ConnectionStrings["AdventureWorksConnectionString.SQL Server (SqlClient)"].ConnectionString; " is 143.
Long Statement,ReadWriteTests.SqlServer,WriteTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\WriteTests.cs,GetContext,The length of the statement  "			connection.ConnectionString = ConfigurationManager.ConnectionStrings["WriteTestsConnectionString.SQL Server (SqlClient)"].ConnectionString; " is 139.
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewAddress,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.StreetName = ConstantsEnums.StreetName1;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber1;  					toReturn.Zipcode = ConstantsEnums.ZipCode1;  					toReturn.City = ConstantsEnums.City1;  					toReturn.Country = ConstantsEnums.Country1;  					break;  				case 2:  					toReturn.StreetName = ConstantsEnums.StreetName2;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber2;  					toReturn.Zipcode = ConstantsEnums.ZipCode2;  					toReturn.City = ConstantsEnums.City2;  					toReturn.Country = ConstantsEnums.Country2;  					break;  				case 3:  					toReturn.StreetName = ConstantsEnums.StreetName3;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber3;  					toReturn.Zipcode = ConstantsEnums.ZipCode3;  					toReturn.City = ConstantsEnums.City3;  					toReturn.Country = ConstantsEnums.Country3;  					break;  				case 4:  					toReturn.StreetName = ConstantsEnums.StreetName4;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber4;  					toReturn.Zipcode = ConstantsEnums.ZipCode4;  					toReturn.City = ConstantsEnums.City4;  					toReturn.Country = ConstantsEnums.Country4;  					break;  				default:  					throw new ArgumentException("number should be 1 - 4"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewAddress,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.StreetName = ConstantsEnums.StreetName1;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber1;  					toReturn.Zipcode = ConstantsEnums.ZipCode1;  					toReturn.City = ConstantsEnums.City1;  					toReturn.Country = ConstantsEnums.Country1;  					break;  				case 2:  					toReturn.StreetName = ConstantsEnums.StreetName2;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber2;  					toReturn.Zipcode = ConstantsEnums.ZipCode2;  					toReturn.City = ConstantsEnums.City2;  					toReturn.Country = ConstantsEnums.Country2;  					break;  				case 3:  					toReturn.StreetName = ConstantsEnums.StreetName3;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber3;  					toReturn.Zipcode = ConstantsEnums.ZipCode3;  					toReturn.City = ConstantsEnums.City3;  					toReturn.Country = ConstantsEnums.Country3;  					break;  				case 4:  					toReturn.StreetName = ConstantsEnums.StreetName4;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber4;  					toReturn.Zipcode = ConstantsEnums.ZipCode4;  					toReturn.City = ConstantsEnums.City4;  					toReturn.Country = ConstantsEnums.Country4;  					break;  				default:  					throw new ArgumentException("number should be 1 - 4"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewAddress,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.StreetName = ConstantsEnums.StreetName1;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber1;  					toReturn.Zipcode = ConstantsEnums.ZipCode1;  					toReturn.City = ConstantsEnums.City1;  					toReturn.Country = ConstantsEnums.Country1;  					break;  				case 2:  					toReturn.StreetName = ConstantsEnums.StreetName2;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber2;  					toReturn.Zipcode = ConstantsEnums.ZipCode2;  					toReturn.City = ConstantsEnums.City2;  					toReturn.Country = ConstantsEnums.Country2;  					break;  				case 3:  					toReturn.StreetName = ConstantsEnums.StreetName3;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber3;  					toReturn.Zipcode = ConstantsEnums.ZipCode3;  					toReturn.City = ConstantsEnums.City3;  					toReturn.Country = ConstantsEnums.Country3;  					break;  				case 4:  					toReturn.StreetName = ConstantsEnums.StreetName4;  					toReturn.HouseNumber = ConstantsEnums.HouseNumber4;  					toReturn.Zipcode = ConstantsEnums.ZipCode4;  					toReturn.City = ConstantsEnums.City4;  					toReturn.Country = ConstantsEnums.Country4;  					break;  				default:  					throw new ArgumentException("number should be 1 - 4"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewCustomer,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.CompanyName = ConstantsEnums.Customer1CompanyName;  					toReturn.CustomerSince = new DateTime(2000' 1' 1);  					toReturn.ContactPerson = ConstantsEnums.Customer1ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer1CompanyEmailAddress;  					break;  				case 2:  					toReturn.CompanyName = ConstantsEnums.Customer2CompanyName;  					toReturn.CustomerSince = new DateTime(1999' 12' 13);  					toReturn.ContactPerson = ConstantsEnums.Customer2ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer2CompanyEmailAddress;  					break;  				default:  					throw new ArgumentException("number should be 1 or 2"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewCustomer,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.CompanyName = ConstantsEnums.Customer1CompanyName;  					toReturn.CustomerSince = new DateTime(2000' 1' 1);  					toReturn.ContactPerson = ConstantsEnums.Customer1ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer1CompanyEmailAddress;  					break;  				case 2:  					toReturn.CompanyName = ConstantsEnums.Customer2CompanyName;  					toReturn.CustomerSince = new DateTime(1999' 12' 13);  					toReturn.ContactPerson = ConstantsEnums.Customer2ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer2CompanyEmailAddress;  					break;  				default:  					throw new ArgumentException("number should be 1 or 2"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewCustomer,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.CompanyName = ConstantsEnums.Customer1CompanyName;  					toReturn.CustomerSince = new DateTime(2000' 1' 1);  					toReturn.ContactPerson = ConstantsEnums.Customer1ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer1CompanyEmailAddress;  					break;  				case 2:  					toReturn.CompanyName = ConstantsEnums.Customer2CompanyName;  					toReturn.CustomerSince = new DateTime(1999' 12' 13);  					toReturn.ContactPerson = ConstantsEnums.Customer2ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer2CompanyEmailAddress;  					break;  				default:  					throw new ArgumentException("number should be 1 or 2"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewCustomer,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.CompanyName = ConstantsEnums.Customer1CompanyName;  					toReturn.CustomerSince = new DateTime(2000' 1' 1);  					toReturn.ContactPerson = ConstantsEnums.Customer1ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer1CompanyEmailAddress;  					break;  				case 2:  					toReturn.CompanyName = ConstantsEnums.Customer2CompanyName;  					toReturn.CustomerSince = new DateTime(1999' 12' 13);  					toReturn.ContactPerson = ConstantsEnums.Customer2ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer2CompanyEmailAddress;  					break;  				default:  					throw new ArgumentException("number should be 1 or 2"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewCustomer,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.CompanyName = ConstantsEnums.Customer1CompanyName;  					toReturn.CustomerSince = new DateTime(2000' 1' 1);  					toReturn.ContactPerson = ConstantsEnums.Customer1ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer1CompanyEmailAddress;  					break;  				case 2:  					toReturn.CompanyName = ConstantsEnums.Customer2CompanyName;  					toReturn.CustomerSince = new DateTime(1999' 12' 13);  					toReturn.ContactPerson = ConstantsEnums.Customer2ContactPerson;  					toReturn.CompanyEmailAddress = ConstantsEnums.Customer2CompanyEmailAddress;  					break;  				default:  					throw new ArgumentException("number should be 1 or 2"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,EntityCreator,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\EntityCreator.cs,CreateNewProduct,The following statement contains a magic number: switch(number)  			{  				case 1:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 1";  					toReturn.FullDescription = "New product 1 created for unittests. You don't need this product";  					toReturn.Price = 10.0M;  					break;  				case 2:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 2";  					toReturn.FullDescription = "New product 2 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 3:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 3";  					toReturn.FullDescription = "New product 3 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 4:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 4";  					toReturn.FullDescription = "New product 4 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 5:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 5";  					toReturn.FullDescription = "New product 5 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 6:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 6";  					toReturn.FullDescription = "New product 6 created for unittests. You don't need this product";  					toReturn.Price = 20.99M;  					break;  				case 7:  					toReturn.ProductId = Guid.NewGuid();  					toReturn.ShortDescription = "New product 7";  					toReturn.FullDescription = "New product 7 created for unittests. No price' picks default";  					break;  				default:  					throw new ArgumentException("number should be 1 - 6"' "number");  			}
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,AnyOnSubtypeWithContainsAndWhere,The following statement contains a magic number: var ids = new[] { 43659' 43660' 43661};
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,AnyOnSubtypeWithContainsAndWhere,The following statement contains a magic number: var ids = new[] { 43659' 43660' 43661};
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,AnyOnSubtypeWithContainsAndWhere,The following statement contains a magic number: var ids = new[] { 43659' 43660' 43661};
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,AnyOnSubtypeWithContainsAndWhere2,The following statement contains a magic number: var ids = new[] { 43659' 43660' 43661 };
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,AnyOnSubtypeWithContainsAndWhere2,The following statement contains a magic number: var ids = new[] { 43659' 43660' 43661 };
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,AnyOnSubtypeWithContainsAndWhere2,The following statement contains a magic number: var ids = new[] { 43659' 43660' 43661 };
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,GroupByWithHopTest,The following statement contains a magic number: var q = ctx.SalesOrderDetails  							.Where(srr => srr.SalesOrderHeader.CustomerId == 14120  									&& srr.SalesOrderHeader.ShipDate != null)  							.GroupBy(srr => new { srr.SalesOrderId' srr.SalesOrderHeader.ShipMethodId' srr.SalesOrderHeader.ShipDate })  							.Select(x => new  							{  								Date = x.Key.ShipDate'  								ShipMethodId = x.Key.ShipMethodId'  								Value = x.Average(z => (decimal)z.OrderQty)  							});
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,GroupByWithHopTest,The following statement contains a magic number: Assert.AreEqual(2' results.Count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,AnyOverWhere,The following statement contains a magic number: bool exists = ctx.Customers.Where(c => c.CustomerId == 15758).Any();
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchAddressWithGeographyField,The following statement contains a magic number: var q = from a in ctx.Addresses  						where a.Id == 3  						select a;
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchEntityWithRenamedPkField,The following statement contains a magic number: var q = from a in ctx.AddressTypes  						where a.Id == 3  						select a;
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,NullExceptionWithMissingOrderByTest,The following statement contains a magic number: var q = (from soh in ctx.SalesOrderHeaders  				         where soh.SalesOrderId < 43690  				         from sod in soh.SalesOrderDetails  				         orderby soh.SalesOrderId  				         select new {  				                    	soh.SalesOrderId'  				                    	ctx.Products.First(p => p.ProductId == sod.ProductId).Name'  										sod.SalesOrderDetailId'  						 });
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,NullExceptionWithMissingOrderByTest,The following statement contains a magic number: Assert.AreEqual(289' results.Count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchProjectionWithRelatedDataOverTwoManyToOneHops,The following statement contains a magic number: Assert.AreEqual(504' count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,DefaultIfEmptyOnRelatedEntity,The following statement contains a magic number: Assert.AreEqual(701' count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,DefaultIfEmptyOnRelatedEntityWithMultipleHops,The following statement contains a magic number: Assert.AreEqual(701' count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,WhereInNestedFromCombinedWithDefaultIfEmpty,The following statement contains a magic number: var q = from customer in ctx.Customers  						where (customer.CustomerId > 10000 && customer.CustomerId < 12000)  						from soh in customer.SalesOrderHeaders.DefaultIfEmpty()  						select new { customer.CustomerId' soh.SalesOrderId };
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,WhereInNestedFromCombinedWithDefaultIfEmpty,The following statement contains a magic number: var q = from customer in ctx.Customers  						where (customer.CustomerId > 10000 && customer.CustomerId < 12000)  						from soh in customer.SalesOrderHeaders.DefaultIfEmpty()  						select new { customer.CustomerId' soh.SalesOrderId };
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,WhereInNestedFromCombinedWithDefaultIfEmpty,The following statement contains a magic number: Assert.AreEqual(2975' count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,CustomProjectionIntoAnonymousTypeOnSelectManyList,The following statement contains a magic number: Assert.AreEqual(31465' count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,CustomProjectionIntoAnonymousTypeUsingMultipleQueries,The following statement contains a magic number: var q1 = from customer in ctx.Customers  							where customer.CustomerId<100  							from soh in customer.SalesOrderHeaders.DefaultIfEmpty()  							select new { customer.CustomerId' SalesOrderId = (int?)soh.SalesOrderId };
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,CustomProjectionIntoAnonymousTypeUsingMultipleQueries,The following statement contains a magic number: Assert.AreEqual(99' count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,CustomProjectionIntoAnonymousTypeUsingDefaultIfEmptyOnNestedFromsWithEmbeddedWhere,The following statement contains a magic number: var q = from c in customers  						from soh in c.SalesOrderHeaders.Where(soh => soh.SalesOrderId < 10).DefaultIfEmpty()  						select new { c.CustomerId' SalesOrderId = (int?) soh.SalesOrderId };
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,CustomProjectionIntoAnonymousTypeUsingDefaultIfEmptyOnNestedFromsWithEmbeddedWhere,The following statement contains a magic number: Assert.AreEqual(19820' q.ToList().Count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,NavigationInProjectionOnJoinedSetTest,The following statement contains a magic number: Assert.AreEqual(121317' x.Count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,AnyWithNavigationWithSetOfSetsProjection,The following statement contains a magic number: Assert.AreEqual(19119' q.ToList().Count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,MultiNavigationInProjectionOfSetOfSets,The following statement contains a magic number: Assert.AreEqual(19972' q.ToList().Count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,ContainsWithMultipleValuePairsAndWrappedQueriesTest,The following statement contains a magic number: lst.Add(new Pair<int' int> { Value1 = 1' Value2 = 722 });
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,ContainsWithMultipleValuePairsAndWrappedQueriesTest,The following statement contains a magic number: lst.Add(new Pair<int' int> { Value1 = 2' Value2 = 725 });
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,ContainsWithMultipleValuePairsAndWrappedQueriesTest,The following statement contains a magic number: lst.Add(new Pair<int' int> { Value1 = 2' Value2 = 725 });
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,ContainsWithMultipleValuePairsAndWrappedQueriesTest,The following statement contains a magic number: lst.Add(new Pair<int' int> { Value1 = 3' Value2 = 726 });
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,ContainsWithMultipleValuePairsAndWrappedQueriesTest,The following statement contains a magic number: lst.Add(new Pair<int' int> { Value1 = 3' Value2 = 726 });
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTake,The following statement contains a magic number: var q = ctx.Customers.Skip(11).Take(10);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTake,The following statement contains a magic number: var q = ctx.Customers.Skip(11).Take(10);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTake,The following statement contains a magic number: Assert.AreEqual(10' count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTakeUsingSql2000Paging,The following statement contains a magic number: var q = ctx.Customers.Skip(11).Take(10);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTakeUsingSql2000Paging,The following statement contains a magic number: var q = ctx.Customers.Skip(11).Take(10);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,FetchingSecondPageUsingSkipTakeUsingSql2000Paging,The following statement contains a magic number: Assert.AreEqual(10' count);
Magic Number,ReadWriteTests.SqlServer,AdventureWorksTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\ReadTestsAdventureWorks.cs,MultipleTimesSameJoinSameAliasProblem,The following statement contains a magic number: Assert.AreEqual(295' pList.Count);
Magic Number,ReadWriteTests.SqlServer,WriteTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\WriteTests.cs,SimpleInsertDeleteAddressTest,The following statement contains a magic number: var toInsert = EntityCreator.CreateNewAddress(2);
Magic Number,ReadWriteTests.SqlServer,WriteTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\WriteTests.cs,EnumFetchAfterMultiInsertTest,The following statement contains a magic number: Assert.AreEqual(2' blues.Count);
Magic Number,ReadWriteTests.SqlServer,WriteTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\WriteTests.cs,RefetchWithDefaultInDbTest,The following statement contains a magic number: var toInsert = EntityCreator.CreateNewProduct(7);
Magic Number,ReadWriteTests.SqlServer,WriteTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\WriteTests.cs,SplitOffEntitySaveNoReference,The following statement contains a magic number: splitOff.Photo = new byte[] { 0' 1' 2 };
Magic Number,ReadWriteTests.SqlServer,WriteTests,D:\research\architectureSmells\repos\FransBouma_LinqToSQL2\tests\ReadWriteTests\WriteTests.cs,SplitOffEntitySaveNoReference,The following statement contains a magic number: Assert.AreEqual(3' splitOffFetched.Photo.Length);
