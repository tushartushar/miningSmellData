Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Data.Linq,DBConvert,F:\newReposMay17\FransBouma_LinqToSQL2\src\Miscellaneous\DbConvert.cs,ChangeType,The method has 130 lines of code.
Long Method,System.Data.Linq.DbEngines.SqlServer,SqlHelpers,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlHelpers.cs,TranslateVBLikePattern,The method has 131 lines of code.
Long Method,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,GetDbType,The method has 113 lines of code.
Long Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,CreateDatabase,The method has 145 lines of code.
Long Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The method has 145 lines of code.
Long Method,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The method has 208 lines of code.
Long Method,System.Data.Linq.Provider.Common,SqlComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlComparer.cs,AreEqual,The method has 239 lines of code.
Long Method,System.Data.Linq.Provider.Common,SqlProjectionComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlProjectionComparer.cs,CanBeCompared,The method has 115 lines of code.
Long Method,System.Data.Linq.Provider.Common,SqlProjectionComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlProjectionComparer.cs,AreSimilar,The method has 175 lines of code.
Long Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The method has 240 lines of code.
Long Method,System.Data.Linq.Provider.Visitors,ExpressionDuplicator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ExpressionDuplicator.cs,ExpandTogether,The method has 208 lines of code.
Long Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,The method has 171 lines of code.
Long Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitUnaryOperator,The method has 108 lines of code.
Long Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,AccessMember,The method has 231 lines of code.
Long Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertToFetchedExpression,The method has 105 lines of code.
Long Method,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,Visit,The method has 223 lines of code.
Complex Method,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,SubmitChanges,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ValidateAll,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,TrackUntrackedObjects,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ObserveUntrackedObjects,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,BuildEdgeMaps,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,Compare,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,BuildDependencyOrderedList,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq,EntitySet,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\EntitySet.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetRelations,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetCachedObject,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetKeyFromPredicate,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq,DBConvert,F:\newReposMay17\FransBouma_LinqToSQL2\src\Miscellaneous\DbConvert.cs,ChangeType,Cyclomatic complexity of the method is 43
Complex Method,System.Data.Linq,Table,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\Table.cs,InsertOnSubmit,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq,Table,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\Table.cs,Attach,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq,Table,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\Table.cs,Attach,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitWithParens,Cyclomatic complexity of the method is 28
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitUnaryOperator,Cyclomatic complexity of the method is 33
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitBinaryOperator,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitColumnRef,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitSelect,Cyclomatic complexity of the method is 21
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitJoin,Cyclomatic complexity of the method is 18
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitInsert,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,FormatValue,Cyclomatic complexity of the method is 28
Complex Method,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,GetOperator,Cyclomatic complexity of the method is 35
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlHelpers,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlHelpers.cs,TranslateVBLikePattern,Cyclomatic complexity of the method is 33
Complex Method,System.Data.Linq.DbEngines.SqlServer,Sql2000Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2000Provider.cs,From,Cyclomatic complexity of the method is 20
Complex Method,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,From,Cyclomatic complexity of the method is 20
Complex Method,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,GetBestLargeType,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,BuildFieldDeclarations,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,GetDbType,Cyclomatic complexity of the method is 75
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlParameterInfoProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlParameterInfoProducer.cs,VisitBinaryOperator,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,Parse,Cyclomatic complexity of the method is 25
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,InitializeParameter,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,PredictTypeForUnary,Cyclomatic complexity of the method is 21
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,PredictTypeForBinary,Cyclomatic complexity of the method is 27
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,MostPreciseTypeInFamily,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,Cyclomatic complexity of the method is 36
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlTypeConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlTypeConverter.cs,VisitUnaryOperator,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,AreValuesEqual,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,ToQueryString,Cyclomatic complexity of the method is 49
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,Cyclomatic complexity of the method is 32
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMethodSupport,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetObjectMethodSupport,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDateTimeMethodSupport,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDateTimeOffsetMethodSupport,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetConvertMethodSupport,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDecimalMethodSupport,Cyclomatic complexity of the method is 16
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,Cyclomatic complexity of the method is 31
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,Cyclomatic complexity of the method is 35
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsVbConversionMethod,Cyclomatic complexity of the method is 17
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDatePart,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanMember,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Initialize,Cyclomatic complexity of the method is 18
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,CreateDatabase,Cyclomatic complexity of the method is 33
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,AssignParameters,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Execute,Cyclomatic complexity of the method is 22
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetResultShape,Cyclomatic complexity of the method is 20
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,InitializeProviderMode,Cyclomatic complexity of the method is 17
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlTypeSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlTypeSystem.cs,Create,Cyclomatic complexity of the method is 24
Complex Method,System.Data.Linq.DbEngines.SqlServer,SqlTypeSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlTypeSystem.cs,GetClosestRuntimeType,Cyclomatic complexity of the method is 32
Complex Method,System.Data.Linq.Provider.Common,ColumnNominator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ColumnNominator.cs,CanRecurseColumnize,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.Provider.Common,ColumnNominator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ColumnNominator.cs,IsClientOnly,Cyclomatic complexity of the method is 16
Complex Method,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,Generate,Cyclomatic complexity of the method is 22
Complex Method,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateNew,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,Cyclomatic complexity of the method is 30
Complex Method,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateEquals,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateArrayAssign,Cyclomatic complexity of the method is 27
Complex Method,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstant,Cyclomatic complexity of the method is 27
Complex Method,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,Cyclomatic complexity of the method is 32
Complex Method,System.Data.Linq.Provider.Common,SqlComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlComparer.cs,AreEqual,Cyclomatic complexity of the method is 126
Complex Method,System.Data.Linq.Provider.Common,SqlProjectionComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlProjectionComparer.cs,CanBeCompared,Cyclomatic complexity of the method is 51
Complex Method,System.Data.Linq.Provider.Common,SqlProjectionComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlProjectionComparer.cs,AreSimilar,Cyclomatic complexity of the method is 67
Complex Method,System.Data.Linq.Provider.Common,WhereClauseLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\WhereClauseLifter.cs,VisitJoin,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,Binary,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,SubSelect,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.Provider.Common,SqlNodeTypeOperators,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlNodeTypeOperators.cs,IsPredicateUnaryOperator,Cyclomatic complexity of the method is 19
Complex Method,System.Data.Linq.Provider.Common,SqlNodeTypeOperators,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlNodeTypeOperators.cs,IsUnaryOperatorExpectingPredicateOperand,Cyclomatic complexity of the method is 19
Complex Method,System.Data.Linq.Provider.Common,SqlNodeTypeOperators,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlNodeTypeOperators.cs,IsPredicateBinaryOperator,Cyclomatic complexity of the method is 22
Complex Method,System.Data.Linq.Provider.Common,SqlNodeTypeOperators,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlNodeTypeOperators.cs,IsComparisonOperator,Cyclomatic complexity of the method is 22
Complex Method,System.Data.Linq.Provider.Common,SqlNodeTypeOperators,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlNodeTypeOperators.cs,IsBinaryOperatorExpectingPredicateOperands,Cyclomatic complexity of the method is 22
Complex Method,System.Data.Linq.Provider.Common,TypeSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\TypeSystem.cs,IsSimpleType,Cyclomatic complexity of the method is 18
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitInner,Cyclomatic complexity of the method is 52
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,CoerceToSequence,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitInvocation,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,ChangeType,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,PropertyOrFieldOf,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,CanSkipOnSelection,Cyclomatic complexity of the method is 18
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitUnary,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitBinary,Cyclomatic complexity of the method is 59
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitAggregate,Cyclomatic complexity of the method is 16
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,FindGroupInfo,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,Cyclomatic complexity of the method is 19
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,Cyclomatic complexity of the method is 179
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,Cyclomatic complexity of the method is 22
Complex Method,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitInsert,Cyclomatic complexity of the method is 15
Complex Method,System.Data.Linq.Provider.Common,SqlExpressionNullability,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlExpressionNullability.cs,CanBeNull,Cyclomatic complexity of the method is 36
Complex Method,System.Data.Linq.Provider.Common,SqlIdentifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlIdentifier.cs,QuoteCompoundIdentifier,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEquals,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEqualsOp,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.Provider.Visitors,ColumnLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ColumnLifter.cs,VisitSelect,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Provider.Visitors,ConstantInOrderByRemover,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ConstantInOrderByRemover.cs,VisitSelect,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Provider.Visitors,ExpressionDuplicator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ExpressionDuplicator.cs,ExpandTogether,Cyclomatic complexity of the method is 64
Complex Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,Cyclomatic complexity of the method is 63
Complex Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,GetPossibleTypes,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ApplyTreat,Cyclomatic complexity of the method is 22
Complex Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitUnaryOperator,Cyclomatic complexity of the method is 31
Complex Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,AccessMember,Cyclomatic complexity of the method is 54
Complex Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertLinks,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertToFetchedExpression,Cyclomatic complexity of the method is 24
Complex Method,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertToFetchedSequence,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.Provider.Visitors,OrderByLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\OrderByLifter.cs,VisitSelect,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.Provider.Visitors,OrderByLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\OrderByLifter.cs,VisitRowNumber,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.Provider.Visitors,CaseSimplifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\CaseSimplifier.cs,VisitBinaryOperator,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Provider.Visitors,ObjectExpressionFlattener,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ObjectExpressionFlattener.cs,FlattenGroupByExpression,Cyclomatic complexity of the method is 14
Complex Method,System.Data.Linq.Provider.Visitors,QueryUnionizer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\QueryUnionizer.cs,VisitSelect,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Provider.Visitors,SelectionLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SelectionLifter.cs,VisitSelect,Cyclomatic complexity of the method is 16
Complex Method,System.Data.Linq.Provider.Visitors,SqlAliasDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlAliasDeflator.cs,VisitJoin,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Provider.Visitors,SqlBooleanMismatchVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlBooleanMismatchVisitor.cs,IsPredicateExpression,Cyclomatic complexity of the method is 20
Complex Method,System.Data.Linq.Provider.Visitors,SqlDuplicateColumnDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlDuplicateColumnDeflator.cs,VisitSelect,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitUnaryOperator,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.Provider.Visitors,SingleTableQueryVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SingleTableQueryVisitor.cs,VisitSelect,Cyclomatic complexity of the method is 15
Complex Method,System.Data.Linq.Provider.Visitors,SingleTableQueryVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SingleTableQueryVisitor.cs,VisitNew,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Provider.Visitors,ExpressionVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 50
Complex Method,System.Data.Linq.Provider.Visitors,LocalMapper,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\LocalMapper.cs,Visit,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,CanDbConvert,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,VisitBinaryOperator,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,Visit,Cyclomatic complexity of the method is 209
Complex Method,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,RefersToColumn,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsComparison,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsSupportedMethod,Cyclomatic complexity of the method is 20
Complex Method,System.Data.Linq.Provider.NodeTypes,SqlBinary,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlBinary.cs,SqlBinary,Cyclomatic complexity of the method is 23
Complex Method,System.Data.Linq.Provider.NodeTypes,SqlUnary,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlUnary.cs,SqlUnary,Cyclomatic complexity of the method is 21
Complex Method,System.Data.Linq.Mapping,AttributedMetaAssociation,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaAssociation.cs,AttributedMetaAssociation,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Mapping,AttributedMetaFunction,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaFunction.cs,AttributedMetaFunction,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Mapping,AttributedMetaType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaType.cs,InitDataMembers,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.Mapping,AttributedMetaType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaType.cs,InitSpecialMember,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Mapping,AttributedRootType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedRootType.cs,AttributedRootType,Cyclomatic complexity of the method is 15
Complex Method,System.Data.Linq.Mapping,AttributedRootType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedRootType.cs,Validate,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Linq.Mapping,AttributedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaModel.cs,InitStaticTables,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Linq.Mapping,AttributedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaModel.cs,InitFunctions,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MappedDataMember,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Mapping,MappedFunction,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedFunction.cs,MappedFunction,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.Mapping,MappedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedMetaModel.cs,InitStaticTableTypes,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.Mapping,MappedRootType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedRootType.cs,Validate,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Mapping,MappedRootType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedRootType.cs,InitInheritedType,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,InitDataMembers,Cyclomatic complexity of the method is 17
Complex Method,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,InitSpecialMember,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Mapping,MappingSource,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\MappingSource.cs,GetModel,Cyclomatic complexity of the method is 9
Complex Method,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadDatabaseMapping,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadFunctionMapping,Cyclomatic complexity of the method is 15
Complex Method,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadTableMapping,Cyclomatic complexity of the method is 12
Complex Method,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadTypeMappingImpl,Cyclomatic complexity of the method is 14
Complex Method,LinqToSqlShared.Mapping,MappingSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\MappingSystem.cs,IsSupportedDiscriminatorType,Cyclomatic complexity of the method is 12
Complex Method,LinqToSqlShared.Mapping,MappingSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\MappingSystem.cs,IsSupportedDiscriminatorType,Cyclomatic complexity of the method is 9
Complex Method,LinqToSqlShared.Mapping,MappingSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\MappingSystem.cs,IsSupportedIdentityType,Cyclomatic complexity of the method is 16
Long Parameter List,System.Data.Linq,StandardChangeTracker,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeTracker.cs,Track,The method has 5 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 5 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 6 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 7 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 8 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 9 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 10 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 11 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 12 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 13 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 14 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 15 parameters.
Long Parameter List,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Invoke,The method has 16 parameters.
Long Parameter List,System.Data.Linq,SecurityUtils,F:\newReposMay17\FransBouma_LinqToSQL2\src\Miscellaneous\SecurityUtils.cs,SecureConstructorInvoke,The method has 5 parameters.
Long Parameter List,System.Data.Linq,IProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\Interfaces\IProvider.cs,Execute,The method has 7 parameters.
Long Parameter List,System.Data.Linq,IProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\Interfaces\IProvider.cs,ExecuteAll,The method has 5 parameters.
Long Parameter List,System.Data.Linq.DbEngines.SqlServer,SqlFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlFactory.cs,FunctionCallDateAdd,The method has 5 parameters.
Long Parameter List,System.Data.Linq.DbEngines.SqlServer,SqlFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlFactory.cs,FunctionCallDateTimeOffsetAdd,The method has 5 parameters.
Long Parameter List,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Execute,The method has 7 parameters.
Long Parameter List,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,ExecuteAll,The method has 5 parameters.
Long Parameter List,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Execute,The method has 7 parameters.
Long Parameter List,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,ExecuteAll,The method has 5 parameters.
Long Parameter List,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ExecuteResult,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ExecuteResult.cs,ExecuteResult,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,AdoCompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\CompiledQuery.cs,AdoCompiledQuery,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,QueryInfo,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryInfo.cs,QueryInfo,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReader.cs,ObjectReader,The method has 7 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReaderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderBase.cs,ObjectReaderBase,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReaderFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderFactory.cs,Create,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReaderFactoryCache,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderFactoryCache.cs,GetFactory,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReaderFactoryCache,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderFactoryCache.cs,AddFactory,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReaderSession,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderSession.cs,ObjectReaderSession,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReaderSession,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderSession.cs,CreateReader,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReaderSession,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderSession.cs,GetNextResult,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,Rereader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Rereader.cs,GetBytes,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,Rereader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Rereader.cs,GetChars,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,FunctionCallDateAdd,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,FunctionCallDateTimeOffsetAdd,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,Value,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,Binary,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,Case,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,TypeCase,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,New,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,MethodCall,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,FunctionCall,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,TableValuedFunctionCall,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,MakeJoin,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitJoin,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitGroupJoin,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,SqlBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlBinder.cs,SqlBinder,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildProjection,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildProjectionInternal,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateAssociation,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Common,ObjectReaderCompiler,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderCompiler.cs,CreateSession,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,MemberAccessBinder,The method has 7 parameters.
Long Parameter List,System.Data.Linq.Provider.Visitors,CaseSimplifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\CaseSimplifier.cs,TryToWriteAsReducedCase,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Interfaces,IObjectReaderCompiler,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Interfaces\IObjectReaderCompiler.cs,CreateSession,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.Interfaces,IObjectReaderFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Interfaces\IObjectReaderFactory.cs,Create,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlBetween,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlBetween.cs,SqlBetween,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlBinary,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlBinary.cs,SqlBinary,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlBinary,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlBinary.cs,SqlBinary,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlColumn,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlColumn.cs,SqlColumn,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlFunctionCall,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlFunctionCall.cs,SqlFunctionCall,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlFunctionCall,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlFunctionCall.cs,SqlFunctionCall,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlGrouping,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlGrouping.cs,SqlGrouping,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlIn,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlIn.cs,SqlIn,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlJoin,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlJoin.cs,SqlJoin,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlJoinedCollection,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlJoinedCollection.cs,SqlJoinedCollection,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlLike,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlLike.cs,SqlLike,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlLink,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlLink.cs,SqlLink,The method has 9 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlMethodCall,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlMethodCall.cs,SqlMethodCall,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlNew,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlNew.cs,SqlNew,The method has 7 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlTableValuedFunctionCall,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlTableValuedFunctionCall.cs,SqlTableValuedFunctionCall,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlTypeCase,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlTypeCase.cs,SqlTypeCase,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlUnary,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlUnary.cs,SqlUnary,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlUnary,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlUnary.cs,SqlUnary,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlUserColumn,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlUserColumn.cs,SqlUserColumn,The method has 6 parameters.
Long Parameter List,System.Data.Linq.Provider.NodeTypes,SqlValue,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\NodeTypes\SqlValue.cs,SqlValue,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Mapping,MethodFinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\MethodFinder.cs,FindMethod,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The method has 5 parameters.
Long Parameter List,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,MappedType,The method has 5 parameters.
Long Identifier,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Initialize,The length of the parameter fileOrServerOrConnectionString is 30.
Long Identifier,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetConnectionString,The length of the parameter fileOrServerOrConnectionString is 30.
Long Identifier,System.Data.Linq.Provider.Common,SqlCrossApplyToCrossJoin,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlCrossApplyToCrossJoin.cs,Reduce,The length of the parameter providerModesWithIncompatibilities is 34.
Long Statement,System.Data.Linq,StandardChangeTracker,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeTracker.cs,AcceptChanges,The length of the statement  "	List<StandardTrackedObject> list = new List<StandardTrackedObject> ((IEnumerable<StandardTrackedObject>)this.items.Values); " is 123.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,SubmitChanges,The length of the statement  "		// First we need to rollback any value that have already been auto-[....]'d' since the values are no longer valid on the server " is 127.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,SubmitChanges,The length of the statement  "			Debug.Assert (syncDependentItem.IsNew || syncDependentItem.IsPossiblyModified' "SynchDependent data should only be rolled back for new and modified objects."); " is 159.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ClearForeignKeyReferences,The length of the statement  "			// This cache lookup is only possible if the other key is the primary key' since that is the only way items can be found in the cache. " is 134.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ClearForeignKeyReferences,The length of the statement  "				Debug.Assert (assoc.OtherMember.IsAssociation' "OtherMember of the association is expected to also be an association."); " is 120.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ClearForeignKeyReferences,The length of the statement  "						System.Collections.IList collection = assoc.OtherMember.MemberAccessor.GetBoxedValue (cached) as System.Collections.IList; " is 122.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ClearForeignKeyReferences,The length of the statement  "				// We are explicitly not calling ClearForeignKeysHelper because it breaks existing shipped behavior and we want to maintain backward compatibility " is 146.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ClearForeignKeyReferences,The length of the statement  "				// This is a unidirectional relationship or we have no way to look up the other side in the cache' so just clear our own side " is 125.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ClearForeignKeysHelper,The length of the statement  "	// If this member is one of our deferred loaders' and it does not already have a value' explicitly set the deferred source to " is 125.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ClearForeignKeysHelper,The length of the statement  "	// This is only necessary if the value has not already been assigned or set' because otherwise we won't implicitly load anyway when the member is accessed. " is 155.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,ClearForeignKeysHelper,The length of the statement  "	if (thisMember.IsDeferred && !(thisMember.StorageAccessor.HasAssignedValue (trackedInstance) || thisMember.StorageAccessor.HasLoadedValue (trackedInstance))) { " is 159.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,GetOtherItem,The length of the statement  "	if (assoc.ThisMember.StorageAccessor.HasAssignedValue (instance) || assoc.ThisMember.StorageAccessor.HasLoadedValue (instance)) { " is 129.
Long Statement,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,HasAssociationChanged,The length of the statement  "		if (assoc.ThisMember.StorageAccessor.HasAssignedValue (item.Current) || assoc.ThisMember.StorageAccessor.HasLoadedValue (item.Current)) { " is 137.
Long Statement,System.Data.Linq,ChangeSet,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeSet.cs,ToString,The length of the statement  "	return "{" + string.Format (Globalization.CultureInfo.InvariantCulture' "Inserts: {0}' Deletes: {1}' Updates: {2}"' this.Inserts.Count' this.Deletes.Count' this.Updates.Count) + "}"; " is 182.
Long Statement,System.Data.Linq,EntitySet,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\EntitySet.cs,AddRange,The length of the statement  "	// convert to List in case adding elements here removes them from the 'collection' (ie entityset to entityset assignment) " is 121.
Long Statement,System.Data.Linq,EntitySet,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\EntitySet.cs,Remove,The length of the statement  "		// so we shouldn't fire the event since the list itself will not be changed' even though the Remove will still be tracked " is 121.
Long Statement,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Compile,The length of the statement  "		return new CompiledQuery (query).Invoke<TArg0' TArg1' TArg2' TArg3' TArg4' TArg5' TArg6' TArg7' TArg8' TArg9' TArg10' TResult>; " is 127.
Long Statement,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Compile,The length of the statement  "		return new CompiledQuery (query).Invoke<TArg0' TArg1' TArg2' TArg3' TArg4' TArg5' TArg6' TArg7' TArg8' TArg9' TArg10' TArg11' TResult>; " is 135.
Long Statement,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Compile,The length of the statement  "		return new CompiledQuery (query).Invoke<TArg0' TArg1' TArg2' TArg3' TArg4' TArg5' TArg6' TArg7' TArg8' TArg9' TArg10' TArg11' TArg12' TResult>; " is 143.
Long Statement,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Compile,The length of the statement  "		return new CompiledQuery (query).Invoke<TArg0' TArg1' TArg2' TArg3' TArg4' TArg5' TArg6' TArg7' TArg8' TArg9' TArg10' TArg11' TArg12' TArg13' TResult>; " is 151.
Long Statement,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Compile,The length of the statement  "		return new CompiledQuery (query).Invoke<TArg0' TArg1' TArg2' TArg3' TArg4' TArg5' TArg6' TArg7' TArg8' TArg9' TArg10' TArg11' TArg12' TArg13' TArg14' TResult>; " is 159.
Long Statement,System.Data.Linq,CompiledQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\CompiledQuery.cs,Compile,The length of the statement  "		return new CompiledQuery (query).Invoke<TArg0' TArg1' TArg2' TArg3' TArg4' TArg5' TArg6' TArg7' TArg8' TArg9' TArg10' TArg11' TArg12' TArg13' TArg14' TArg15' TResult>; " is 167.
Long Statement,System.Data.Linq,DataContext,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataContext.cs,GetTable,The length of the statement  "		tb = (ITable)Activator.CreateInstance (tbType' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 137.
Long Statement,System.Data.Linq,DataContext,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataContext.cs,ValidateTable,The length of the statement  "			throw Error.NonEntityAssociationMapping (assoc.ThisMember.DeclaringType.Type' assoc.ThisMember.Name' assoc.ThisMember.DeclaringType.Type); " is 138.
Long Statement,System.Data.Linq,DataContext,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataContext.cs,ValidateTable,The length of the statement  "			throw Error.NonEntityAssociationMapping (assoc.ThisMember.DeclaringType.Type' assoc.ThisMember.Name' assoc.OtherType.Type); " is 123.
Long Statement,System.Data.Linq,DataContext,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataContext.cs,ExecuteQuery,The length of the statement  "	return (IEnumerable<TResult>)this.ExecuteMethodCall (this' ((MethodInfo)MethodInfo.GetCurrentMethod ()).MakeGenericMethod (typeof(TResult))' query' parameters).ReturnValue; " is 172.
Long Statement,System.Data.Linq,DataContext,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataContext.cs,ExecuteQuery,The length of the statement  "		_miExecuteQuery = typeof(DataContext).GetMethods ().Single (m => m.Name == "ExecuteQuery" && m.GetParameters ().Length == 2); " is 125.
Long Statement,System.Data.Linq,DataContext,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataContext.cs,ExecuteQuery,The length of the statement  "	return (IEnumerable)this.ExecuteMethodCall (this' _miExecuteQuery.MakeGenericMethod (elementType)' query' parameters).ReturnValue; " is 130.
Long Statement,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetObjectQuery,The length of the statement  "		Expression memberExpression = (metaMember.Member is FieldInfo) ? Expression.Field (serverItem' (FieldInfo)metaMember.Member) : Expression.Property (serverItem' (PropertyInfo)metaMember.Member); " is 193.
Long Statement,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetObjectQuery,The length of the statement  "		whereExpression = (whereExpression != null) ? Expression.And (whereExpression' memberEqualityExpression) : memberEqualityExpression; " is 132.
Long Statement,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetDataMemberQuery,The length of the statement  "		Expression mem = (member.Member is PropertyInfo) ? Expression.Property (e' (PropertyInfo)member.Member) : Expression.Field (e' (FieldInfo)member.Member); " is 153.
Long Statement,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetDeferredSourceFactory,The length of the statement  "	Type elemType = member.IsAssociation && member.Association.IsMany ? TypeSystem.GetElementType (member.Type) : member.Type; " is 122.
Long Statement,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetDeferredSourceFactory,The length of the statement  "	factory = (IDeferredSourceFactory)Activator.CreateInstance (typeof(DeferredSourceFactory<>).MakeGenericType (elemType)' BindingFlags.Instance | BindingFlags.NonPublic' null' new object[] { " is 188.
Long Statement,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetKeyFromPredicate,The length of the statement  "	if (memex == null || memex.Expression == null || memex.Expression.NodeType != ExpressionType.Parameter || memex.Expression.Type != type.Type) { " is 143.
Long Statement,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetKeyFromPredicate,The length of the statement  "	if (!type.Type.IsAssignableFrom (memex.Member.ReflectedType) && !memex.Member.ReflectedType.IsAssignableFrom (type.Type)) { " is 123.
Long Statement,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetObjectByKey,The length of the statement  "		target = ((IEnumerable)this._context.Provider.Execute (this.GetObjectQuery (type' keyValues)).ReturnValue).OfType<object> ().SingleOrDefault (); " is 144.
Long Statement,System.Data.Linq,DataLoadOptions,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataLoadOptions.cs,ValidateTypeGraphAcyclic,The length of the statement  "			if (edgeTargets.Where (et => et.IsAssignableFrom (edge.DeclaringType) || edge.DeclaringType.IsAssignableFrom (et)).Any ()) { " is 124.
Long Statement,System.Data.Linq,DBConvert,F:\newReposMay17\FransBouma_LinqToSQL2\src\Miscellaneous\DbConvert.cs,ChangeType,The length of the statement  "			return Enum.ToObject (toType' Convert.ChangeType (value' Enum.GetUnderlyingType (toType)' Globalization.CultureInfo.InvariantCulture)); " is 135.
Long Statement,System.Data.Linq,DBConvert,F:\newReposMay17\FransBouma_LinqToSQL2\src\Miscellaneous\DbConvert.cs,ChangeType,The length of the statement  "			return Convert.ChangeType (Convert.ChangeType (value' Enum.GetUnderlyingType (fromType)' Globalization.CultureInfo.InvariantCulture)' toType' Globalization.CultureInfo.InvariantCulture); " is 186.
Long Statement,System.Data.Linq,DBConvert,F:\newReposMay17\FransBouma_LinqToSQL2\src\Miscellaneous\DbConvert.cs,ChangeType,The length of the statement  "		} else if (!(typeof(IConvertible).IsAssignableFrom (toType)) && (mi = toType.GetMethod ("Parse"' BindingFlags.Static | BindingFlags.Public' null' StringArg' null)) != null) { " is 174.
Long Statement,System.Data.Linq,DBConvert,F:\newReposMay17\FransBouma_LinqToSQL2\src\Miscellaneous\DbConvert.cs,ChangeType,The length of the statement  "	} else if (toType.IsGenericType && toType.GetGenericTypeDefinition () == typeof(IQueryable<>) && typeof(IEnumerable<>).MakeGenericType (toType.GetGenericArguments () [0]).IsAssignableFrom (fromType)) { " is 201.
Long Statement,System.Data.Linq,StandardIdentityManager,F:\newReposMay17\FransBouma_LinqToSQL2\src\IdentityMangement\StandardIdentityManager.cs,SetCurrent,The length of the statement  "			this.currentCache = (IdentityCache)Activator.CreateInstance (typeof(IdentityCache<' >).MakeGenericType (type.Type' km.KeyType)' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 218.
Long Statement,System.Data.Linq,StandardIdentityManager,F:\newReposMay17\FransBouma_LinqToSQL2\src\IdentityMangement\StandardIdentityManager.cs,GetKeyManager,The length of the statement  "	KeyManager km = (KeyManager)Activator.CreateInstance (typeof(SingleKeyManager<' >).MakeGenericType (type.Type' mm.Type)' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 211.
Long Statement,System.Data.Linq,StandardIdentityManager,F:\newReposMay17\FransBouma_LinqToSQL2\src\IdentityMangement\StandardIdentityManager.cs,GetKeyManager,The length of the statement  "		km = (KeyManager)Activator.CreateInstance (typeof(MultiKeyManager<' ' >).MakeGenericType (type.Type' mm.Type' km.KeyType)' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 213.
Long Statement,System.Data.Linq,StandardChangeDirector,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeDirector.cs,RollbackAutoSync,The length of the statement  "			AutoSyncMembers (rollbackValues' rollbackItem' rollbackItem.IsNew ? UpdateType.Insert : UpdateType.Update' AutoSyncBehavior.RollbackSavedValues); " is 145.
Long Statement,System.Data.Linq,StandardChangeDirector,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeDirector.cs,GetAutoSyncMembers,The length of the statement  "		if ((updateType == UpdateType.Insert && metaMember.AutoSync == AutoSync.OnInsert) || (updateType == UpdateType.Update && metaMember.AutoSync == AutoSync.OnUpdate) || metaMember.AutoSync == AutoSync.Always) { " is 207.
Long Statement,System.Data.Linq,StandardChangeDirector,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeDirector.cs,AutoSyncMembers,The length of the statement  "	System.Diagnostics.Debug.Assert (item.IsNew || item.IsPossiblyModified' "AutoSyncMembers should only be called for new and modified objects."); " is 143.
Long Statement,System.Data.Linq,StandardChangeDirector,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeDirector.cs,AutoSyncMembers,The length of the statement  "			MetaAccessor accessor = (mm.Member is PropertyInfo && ((PropertyInfo)mm.Member).CanWrite) ? mm.MemberAccessor : mm.StorageAccessor; " is 131.
Long Statement,System.Data.Linq,StandardChangeDirector,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeDirector.cs,GetUpdateCheck,The length of the statement  "		return Expression.Equal (this.GetMemberExpression (serverItem' mt.VersionMember.Member)' this.GetMemberExpression (Expression.Constant (tracked.Current)' mt.VersionMember.Member)); " is 180.
Long Statement,System.Data.Linq,StandardChangeDirector,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeDirector.cs,GetUpdateCheck,The length of the statement  "					Expression eq = Expression.Equal (this.GetMemberExpression (serverItem' mm.Member)' Expression.Constant (memberValue' mm.Type)); " is 128.
Long Statement,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,IsSimpleCrossJoinList,The length of the statement  "		return @join.JoinType == SqlJoinType.Cross && this.IsSimpleCrossJoinList (@join.Left) && this.IsSimpleCrossJoinList (@join.Right); " is 130.
Long Statement,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitJoin,The length of the statement  "	if (rightJoin == null || (rightJoin.JoinType == SqlJoinType.Cross && @join.JoinType != SqlJoinType.CrossApply && @join.JoinType != SqlJoinType.OuterApply)) { " is 157.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,GetCreateSchemaForTableCommand,The length of the statement  "	if (String.Compare (schema' "DBO"' StringComparison.OrdinalIgnoreCase) != 0 && String.Compare (schema' "[DBO]"' StringComparison.OrdinalIgnoreCase) != 0) { " is 155.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,BuildFieldDeclarations,The length of the statement  "					sb.Append (string.Format (Globalization.CultureInfo.InvariantCulture' "  {0} "' SqlIdentifier.QuoteCompoundIdentifier (mm.MappedName))); " is 136.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,GetCreateForeignKeyCommands,The length of the statement  "				sb.AppendFormat (cmd' SqlIdentifier.QuoteCompoundIdentifier (tableName)' SqlIdentifier.QuoteIdentifier (name)' SqlIdentifier.QuoteCompoundIdentifier (thisKey)' SqlIdentifier.QuoteCompoundIdentifier (otherTable)' SqlIdentifier.QuoteCompoundIdentifier (otherKey)); " is 262.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlParameterInfoProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlParameterInfoProducer.cs,InsertLookup,The length of the statement  "			p = new SqlParameter (cp.ClrType' this.timeProviderType' this.parameterizer.CreateParameterName ()' cp.SourceExpression); " is 121.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlParameterInfoProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlParameterInfoProducer.cs,VisitStoredProcedureCall,The length of the statement  "	SqlParameter p = new SqlParameter (typeof(int?)' this.parameterizer.TypeProvider.From (typeof(int))' "@RETURN_VALUE"' spc.SourceExpression); " is 140.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlParameterInfoProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlParameterInfoProducer.cs,RetypeOutParameter,The length of the statement  "	this.parameterizer.Annotations.Add (node' new CompatibilityAnnotation (Strings.MaxSizeNotSupported (node.SourceExpression)' SqlServerProviderMode.Sql2000)); " is 156.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlParameterInfoProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlParameterInfoProducer.cs,VisitClientParameter,The length of the statement  "		SqlParameter p = new SqlParameter (cp.ClrType' cp.SqlType' this.parameterizer.CreateParameterName ()' cp.SourceExpression); " is 123.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlParameterizer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlParameterizer.cs,ParameterizeBlock,The length of the statement  "	SqlParameterInfo rowStatus = new SqlParameterInfo (new SqlParameter (typeof(int)' _typeProvider.From (typeof(int))' "@ROWCOUNT"' block.SourceExpression)); " is 154.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,InitializeParameter,The length of the statement  "				piPrecision.SetValue (parameter' Convert.ChangeType (sqlType.Precision' piPrecision.PropertyType' CultureInfo.InvariantCulture)' null); " is 135.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,InitializeParameter,The length of the statement  "				piScale.SetValue (parameter' Convert.ChangeType (sqlType.Scale' piScale.PropertyType' CultureInfo.InvariantCulture)' null); " is 123.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,PredictTypeForBinary,The length of the statement  "	if (leftType.IsSameTypeFamily (this.From (typeof(string))) && rightType.IsSameTypeFamily (this.From (typeof(string)))) { " is 120.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The length of the statement  "				return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType); " is 121.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The length of the statement  "		if (sqlTypeB.Size.HasValue && sqlTypeB.Size.Value == ProviderConstants.LargeTypeSizeIndicator || sqlTypeA.Size.HasValue && sqlTypeA.Size.Value == ProviderConstants.LargeTypeSizeIndicator) { " is 189.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlTypeConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlTypeConverter.cs,BothTypesAreStrings,The length of the statement  "	bool result = oldSqlType.IsSameTypeFamily (sql.TypeProvider.From (typeof(string))) && newSqlType.IsSameTypeFamily (sql.TypeProvider.From (typeof(string))); " is 155.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,ComparePrecedenceTo,The length of the statement  "	int p1 = sqlProviderType.IsTypeKnownByProvider ? GetTypeCoercionPrecedence (sqlProviderType.SqlDbType) : Int32.MinValue; " is 120.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,Equals,The length of the statement  "	return this.RuntimeOnlyType == that.RuntimeOnlyType && this.ApplicationTypeIndex == that.ApplicationTypeIndex && this.sqlDbType == that.sqlDbType && this.Size == that.Size && this.precision == that.precision && this.scale == that.scale; " is 236.
Long Statement,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The length of the statement  "	if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) { " is 178.
Long Statement,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The length of the statement  "		if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) { " is 143.
Long Statement,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetCoercionMethodSupport,The length of the statement  "	if (mc.Method.IsStatic && mc.SqlType.CanBeColumn && (mc.Method.Name == "op_Implicit" || mc.Method.Name == "op_Explicit")) { " is 123.
Long Statement,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The length of the statement  "			if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) { " is 136.
Long Statement,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsVbCompareString,The length of the statement  "	return call.Method.IsStatic && call.Method.DeclaringType.FullName == "Microsoft.VisualBasic.CompilerServices.Operators" && call.Method.Name == "CompareString"; " is 159.
Long Statement,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsVbLike,The length of the statement  "	return mc.Method.IsStatic && (mc.Method.DeclaringType.FullName == "Microsoft.VisualBasic.CompilerServices.LikeOperator" && mc.Method.Name == "LikeString") || (mc.Method.DeclaringType.FullName == "Microsoft.VisualBasic.CompilerServices.Operators" && mc.Method.Name == "LikeString"); " is 281.
Long Statement,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedMember,The length of the statement  "	return IsSupportedStringMember (m) || IsSupportedBinaryMember (m) || IsSupportedDateTimeMember (m) || IsSupportedDateTimeOffsetMember (m) || IsSupportedTimeSpanMember (m); " is 171.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Initialize,The length of the statement  "	_conManager = new ConnectionManager (this' con' maxUsersPerConnection' fileOrServerOrConnectionString != null/*disposeConnection*/); " is 132.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetProvider,The length of the statement  "	bool hasProvider = DbProviderFactories.GetFactoryClasses ().Rows.OfType<DataRow> ().Select (r => (string)r ["InvariantName"]).Contains (providerName' StringComparer.OrdinalIgnoreCase); " is 184.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetDatabaseName,The length of the statement  "	} else if (builder.ContainsKey ("Data Source") && ((string)builder ["Data Source"]).EndsWith (".sdf"' StringComparison.OrdinalIgnoreCase)) { " is 140.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,CreateDatabase,The length of the statement  "					engineType.InvokeMember ("CreateDatabase"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.InvokeMethod' null' engine' new object[] { " is 144.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,DeleteDatabase,The length of the statement  "			if (_conManager.Connection.State == ConnectionState.Closed && string.Compare (_conManager.Connection.ConnectionString' holdConnStr' StringComparison.Ordinal) != 0) { " is 165.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,DatabaseExists,The length of the statement  "			if (_conManager.Connection.State == ConnectionState.Closed && string.Compare (_conManager.Connection.ConnectionString' holdConnStr' StringComparison.Ordinal) != 0) { " is 165.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,CompileSubQuery,The length of the statement  "	QueryInfo[] qis = this.BuildQuery (ResultShape.Sequence' TypeSystem.GetSequenceType (elementType)' query' parameters' annotations); " is 131.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetCachedResult,The length of the statement  "			return new ExecuteResult (null' null' null' Activator.CreateInstance (typeof(SequenceOfOne<>).MakeGenericType (TypeSystem.GetElementType (this.GetResultType (query)))' BindingFlags.Instance | BindingFlags.NonPublic' null' new object[] { " is 236.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,LogCommand,The length of the statement  "			writer.WriteLine ("-- {0}: {1} {2} (Size = {3}; Prec = {4}; Scale = {5}) [{6}]"' p.ParameterName' p.Direction' sp == null ? p.DbType.ToString () : sp.SqlDbType.ToString ()' p.Size.ToString (System.Globalization.CultureInfo.CurrentCulture)' prec' scale' sp == null ? p.Value : sp.SqlValue); " is 289.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,LogCommand,The length of the statement  "		writer.WriteLine ("-- Context: {0}({1}) Model: {2} Build: {3}"' this.GetType ().Name' this.Mode' _services.Model.GetType ().Name' "1.0 (placeholder)"); " is 151.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Translate,The length of the statement  "	return (IEnumerable)Activator.CreateInstance (enumerableType' BindingFlags.Instance | BindingFlags.NonPublic' null' new object[] { " is 130.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,CompileSubQuery,The length of the statement  "	return this.CompileSubQuery (query' elementType' parameters as ReadOnlyCollection<System.Data.Linq.Provider.NodeTypes.SqlParameter>); " is 133.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Execute,The length of the statement  "				IEnumerable sequence = (IEnumerable)Activator.CreateInstance (typeof(OneTimeEnumerable<>).MakeGenericType (queryInfo.ResultType)' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 220.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Execute,The length of the statement  "			IEnumerable sequence = (IEnumerable)Activator.CreateInstance (typeof(OneTimeEnumerable<>).MakeGenericType (TypeSystem.GetElementType (queryInfo.ResultType))' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 248.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Execute,The length of the statement  "				sequence = (IEnumerable)Activator.CreateInstance (typeof(SingleResult<>).MakeGenericType (TypeSystem.GetElementType (queryInfo.ResultType))' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 231.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The length of the statement  "		converter.ConverterStrategy = ConverterStrategy.CanUseScopeIdentity | ConverterStrategy.CanUseJoinOn | ConverterStrategy.CanUseRowStatus; " is 137.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The length of the statement  "		converter.ConverterStrategy = ConverterStrategy.CanUseScopeIdentity | ConverterStrategy.SkipWithRowNumber | ConverterStrategy.CanUseRowStatus | ConverterStrategy.CanUseJoinOn | ConverterStrategy.CanUseOuterApply | ConverterStrategy.CanOutputFromInsert; " is 252.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The length of the statement  "	bool canUseOuterApply = (this.Mode == SqlServerProviderMode.Sql2005 || this.Mode == SqlServerProviderMode.Sql2008 || this.Mode == SqlServerProviderMode.SqlCE); " is 159.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The length of the statement  "	SqlBinder binder = new SqlBinder (_translator' _sqlFactory' _services.Model' _services.Context.LoadOptions' columnizer' canUseOuterApply); " is 138.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The length of the statement  "	SqlMultiplexerOptionType options = (this.Mode == SqlServerProviderMode.Sql2008 || this.Mode == SqlServerProviderMode.Sql2005 || this.Mode == SqlServerProviderMode.SqlCE) ? SqlMultiplexerOptionType.EnableBigJoin : SqlMultiplexerOptionType.None; " is 243.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The length of the statement  "	if (_mode == SqlServerProviderMode.SqlCE || _mode == SqlServerProviderMode.Sql2005 || _mode == SqlServerProviderMode.Sql2008) { " is 127.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The length of the statement  "			queries [i] = new QueryInfo (block.Statements [i]' commands [i]' parameters [i]' (i < n - 1) ? ResultShape.Return : resultShape' (i < n - 1) ? typeof(int) : resultType); " is 169.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetDefaultFactory,The length of the statement  "		SqlUserColumn col = new SqlUserColumn (rowType.Type' _typeProvider.From (rowType.Type)' suq' ""' false' suq.SourceExpression); " is 126.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetDefaultFactory,The length of the statement  "		SqlUserRow rowExp = new SqlUserRow (rowType.InheritanceRoot' _typeProvider.GetApplicationType ((int)ConverterSpecialTypes.Row)' suq' tmp); " is 138.
Long Statement,System.Data.Linq.DbEngines.SqlServer,SqlTypeSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlTypeSystem.cs,Create,The length of the statement  "	} else if (type == SqlDbType.Decimal && precision == ProviderConstants.DefaultDecimalPrecision && scale == ProviderConstants.DefaultDecimalScale) { " is 147.
Long Statement,System.Data.Linq.Provider.Common,CompiledSubQuery,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\CompiledSubQuery.cs,Execute,The length of the statement  "	QueryInfo qi = new QueryInfo (this.queryInfo.Query' this.queryInfo.CommandText' spis.AsReadOnly ()' this.queryInfo.ResultShape' this.queryInfo.ResultType); " is 155.
Long Statement,System.Data.Linq.Provider.Common,MultipleResults,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\MultipleResults.cs,GetResult,The length of the statement  "	return new SingleResult<T> (new OneTimeEnumerable<T> ((IEnumerator<T>)objReader)' this.executeResult' _readerProvider.Services.Context); " is 136.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateClientParameter,The length of the statement  "	MethodInfo miInvoke = d.GetType ().GetMethod ("Invoke"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[] { " is 144.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateMember,The length of the statement  "		return this.GenerateMethodCall (new SqlMethodCall (m.ClrType' m.SqlType' pi.GetGetMethod ()' m.Expression' null' m.SourceExpression)); " is 134.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateNew,The length of the statement  "		MethodInfo miInsertLookup = orbType.GetMethod ("InsertLookup"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[] { " is 151.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateNew,The length of the statement  "		MethodInfo miRaiseEvent = orbType.GetMethod ("SendEntityMaterialized"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[] { " is 159.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateMemberAssignment,The length of the statement  "	if (IsDeferrableExpression (expr) && (this.compiler.Services.Context.LoadOptions == null || !this.compiler.Services.Context.LoadOptions.IsPreloaded (mm.Member))) { " is 163.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateAssignDeferredEntitySet,The length of the statement  "	MethodInfo miSetSource = memberType.GetMethod ("SetSource"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[] { " is 148.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateAssignEntitySet,The length of the statement  "	MethodInfo miAssign = memberType.GetMethod ("Assign"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[] { " is 142.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateAssignDeferredReference,The length of the statement  "	Diagnostics.Debug.Assert (memberType.IsGenericType && (memberType.GetGenericTypeDefinition () == typeof(EntityRef<>) || memberType.GetGenericTypeDefinition () == typeof(Link<>))); " is 179.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateAssignDeferredReference,The length of the statement  "	ConstructorInfo ci = memberType.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[] { " is 136.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateLink,The length of the statement  "	Type elemType = link.Member.IsAssociation && link.Member.Association.IsMany ? TypeSystem.GetElementType (link.Member.Type) : link.Member.Type; " is 142.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateLink,The length of the statement  "		mi = typeof(ObjectMaterializer<>).MakeGenericType (this.compiler.DataReaderType).GetMethod ("GetNestedLinkSource"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 185.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateLink,The length of the statement  "		mi = typeof(ObjectMaterializer<>).MakeGenericType (this.compiler.DataReaderType).GetMethod ("GetLinkSource"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 179.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateClientQuery,The length of the statement  "	Type clientElementType = cq.Query.NodeType == SqlNodeType.Multiset ? TypeSystem.GetElementType (cq.ClrType) : cq.ClrType; " is 121.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateClientQuery,The length of the statement  "	MethodInfo miExecute = typeof(ObjectMaterializer<>).MakeGenericType (this.compiler.DataReaderType).GetMethod ("ExecuteSubQuery"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 199.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateJoinedCollection,The length of the statement  "	MethodInfo miRead = orbType.GetMethod ("Read"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' Type.EmptyTypes' null); " is 146.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "		else if ((actualType.IsSubclassOf (expectedType) || expectedType.IsSubclassOf (actualType)) && !actualType.IsValueType && !expectedType.IsValueType) { " is 150.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "			if (elementType.IsInterface || genExpectedTypeArgs [0].IsInterface || elementType.IsSubclassOf (genExpectedTypeArgs [0]) || genExpectedTypeArgs [0].IsSubclassOf (elementType) || TypeSystem.GetNonNullableType (elementType) == TypeSystem.GetNonNullableType (genExpectedTypeArgs [0])) { " is 283.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "		else if ((expectedType == typeof(IQueryable) || expectedType == typeof(IOrderedQueryable)) && typeof(IEnumerable).IsAssignableFrom (actualType)) { " is 146.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "		else if ((genExpectedType == typeof(IQueryable<>) || genExpectedType == typeof(IOrderedQueryable<>)) && actualIsSequence) { " is 123.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "			MethodInfo miAssign = expectedType.GetMethod ("Assign"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[] { " is 144.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "		else if (typeof(IEnumerable).IsAssignableFrom (expectedType) && actualIsSequence && expectedType.IsAssignableFrom (typeof(List<>).MakeGenericType (elemType))) { " is 160.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "		else if (expectedType.IsArray && expectedType.GetArrayRank () == 1 && !actualType.IsArray && seqType.IsAssignableFrom (actualType) && expectedType.GetElementType ().IsAssignableFrom (elemType)) { " is 195.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "		else if (expectedType.IsClass && typeof(ICollection<>).MakeGenericType (elemType).IsAssignableFrom (expectedType) && expectedType.GetConstructor (System.Type.EmptyTypes) != null && seqType.IsAssignableFrom (actualType)) { " is 221.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "			MethodInfo miGetTypeFromHandle = typeof(Type).GetMethod ("GetTypeFromHandle"' BindingFlags.Static | BindingFlags.Public); " is 121.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The length of the statement  "			MethodInfo miChangeType = typeof(DBConvert).GetMethod ("ChangeType"' BindingFlags.Static | BindingFlags.Public' null' new Type[] { " is 130.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateDefault,The length of the statement  "			MethodInfo mi = typeof(ObjectMaterializer<>).MakeGenericType (this.compiler.DataReaderType).GetMethod ("ErrorAssignmentToNull"' BindingFlags.Static | BindingFlags.Public); " is 171.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GetReaderMethod,The length of the statement  "	MethodInfo readerMethod = readerType.GetMethod (name' BindingFlags.Instance | BindingFlags.Public' null' readMethodSignature' null); " is 132.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GetReaderMethod,The length of the statement  "		readerMethod = readerType.GetMethod ("GetValue"' BindingFlags.Instance | BindingFlags.Public' null' readMethodSignature' null); " is 127.
Long Statement,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateGlobalAccess,The length of the statement  "		FieldInfo fi = varType.GetField ("Value"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 140.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderBase.cs,ExecuteSubQuery,The length of the statement  "	IEnumerable results = (IEnumerable)subQuery.Execute (this.Session.Provider' parentArgs' this.Session.UserArguments).ReturnValue; " is 128.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderFactory.cs,Create,The length of the statement  "	ObjectReaderSession<TDataReader> session = new ObjectReaderSession<TDataReader> ((TDataReader)dataReader' provider' parentArgs' userArgs' subQueries); " is 150.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderFactory.cs,GetNextResult,The length of the statement  "	IObjectReader reader = ors.GetNextResult (_materializeFunc' _namedColumns' _globals' _numberOfLocals' disposeDataReader); " is 121.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderFactoryCache,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderFactoryCache.cs,GetFactory,The length of the statement  "		if (elementType == info.Value.elementType && dataReaderType == info.Value.dataReaderType && mapping == info.Value.mapping && DataLoadOptions.ShapesAreEquivalent (options' info.Value.options) && SqlProjectionComparer.AreSimilar (projection' info.Value.projection)) { " is 265.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderFactoryCache,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderFactoryCache.cs,AddFactory,The length of the statement  "	this.list.AddFirst (new LinkedListNode<CacheInfo> (new CacheInfo (elementType' dataReaderType' mapping' options' projection' factory))); " is 136.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderSession,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderSession.cs,CreateReader,The length of the statement  "	ObjectReader<TDataReader' TObject> objectReader = new ObjectReader<TDataReader' TObject> (this' namedColumns' globals' _userArgs' nLocals' disposeDataReader' fnMaterialize); " is 173.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderSession,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderSession.cs,GetNextResult,The length of the statement  "	ObjectReader<TDataReader' TObject> objectReader = new ObjectReader<TDataReader' TObject> (this' namedColumns' globals' _userArgs' nLocals' disposeDataReader' fnMaterialize); " is 173.
Long Statement,System.Data.Linq.Provider.Common,SqlComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlComparer.cs,AreEqual,The length of the statement  "		return col1 == col2 || (col1.Expression != null && col2.Expression != null && AreEqual (col1.Expression' col2.Expression)); " is 123.
Long Statement,System.Data.Linq.Provider.Common,SqlComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlComparer.cs,AreEqual,The length of the statement  "		return (((SqlMember)node1).Member == ((SqlMember)node2).Member) && AreEqual (((SqlMember)node1).Expression' ((SqlMember)node2).Expression); " is 139.
Long Statement,System.Data.Linq.Provider.Common,SqlComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlComparer.cs,AreEqual,The length of the statement  "		return AreEqual (like1.Expression' like2.Expression) && AreEqual (like1.Pattern' like2.Pattern) && AreEqual (like1.Escape' like2.Escape); " is 137.
Long Statement,System.Data.Linq.Provider.Common,SqlProjectionComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlProjectionComparer.cs,CanBeCompared,The length of the statement  "		if (node.SourceExpression.NodeType != ExpressionType.NewArrayInit && node.SourceExpression.NodeType != ExpressionType.NewArrayBounds) { " is 135.
Long Statement,System.Data.Linq.Provider.Common,SqlProjectionComparer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlProjectionComparer.cs,AreSimilar,The length of the statement  "			if (!MetaPosition.AreSameMember (new1.Members [i].Member' new2.Members [i].Member) || !AreSimilar (new1.Members [i].Expression' new2.Members [i].Expression)) { " is 159.
Long Statement,System.Data.Linq.Provider.Common,WhereClauseLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\WhereClauseLifter.cs,VisitSelect,The length of the statement  "	bool stopHoisting = select.IsDistinct || select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates (select) || select.Top != null || this.rowNumberChecker.HasRowNumber (select); " is 183.
Long Statement,System.Data.Linq.Provider.Common,LinkOptimizationScope,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\LinkOptimizationScope.cs,TryGetValue,The length of the statement  "	return (this.map != null && this.map.TryGetValue (linkId' out expr)) || (this.previous != null && this.previous.TryGetValue (linkId' out expr)); " is 144.
Long Statement,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,DiscriminatedType,The length of the statement  "	return new SqlDiscriminatedType (typeProvider.From (typeof(Type))' discriminator' targetType' discriminator.SourceExpression); " is 126.
Long Statement,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,Table,The length of the statement  "	return new SqlTable (table' rowType' this.typeProvider.GetApplicationType ((int)ConverterSpecialTypes.Row)' sourceExpression); " is 126.
Long Statement,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,UnaryConvert,The length of the statement  "	System.Diagnostics.Debug.Assert (!targetSqlType.IsRuntimeOnlyType' "Attempted coversion to a runtime type: from = " + expression.SqlType.ToQueryString () + "; to = " + targetSqlType.ToQueryString () + "; source = " + sourceExpression.ToString ()); " is 247.
Long Statement,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,MakeJoin,The length of the statement  "	// if the new item is on the right side of some outer join then fixup the projection to reflect that it can possibly be null " is 124.
Long Statement,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,MakeJoin,The length of the statement  "			sel.Selection = new SqlOptionalValue (new SqlColumn ("test"' this.Unary (SqlNodeType.OuterJoinedValue' this.Value (typeof(int?)' this.typeProvider.From (typeof(int))' 1' false' source)))' sel.Selection); " is 203.
Long Statement,System.Data.Linq.Provider.Common,ProviderType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ProviderType.cs,ToString,The length of the statement  "	return SingleValue (GetClosestRuntimeType ()) + SingleValue (ToQueryString ()) + KeyValue<bool> ("IsApplicationType"' IsApplicationType) + KeyValue ("IsUnicodeType"' IsUnicodeType) + KeyValue<bool> ("IsRuntimeOnlyType"' IsRuntimeOnlyType) + KeyValue ("SupportsComparison"' SupportsComparison) + KeyValue ("SupportsLength"' SupportsLength) + KeyValue ("IsLargeType"' IsLargeType) + KeyValue ("IsFixedSize"' IsFixedSize) + KeyValue ("IsOrderable"' IsOrderable) + KeyValue ("IsGroupable"' IsGroupable) + KeyValue ("IsNumeric"' IsNumeric) + KeyValue ("IsChar"' IsChar) + KeyValue ("IsString"' IsString); " is 599.
Long Statement,System.Data.Linq.Provider.Common,TypeSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\TypeSystem.cs,IsSequenceType,The length of the statement  "	return seqType != typeof(string) && seqType != typeof(byte[]) && seqType != typeof(char[]) && FindIEnumerable (seqType) != null; " is 128.
Long Statement,System.Data.Linq.Provider.Common,TypeSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\TypeSystem.cs,FindStaticMethod,The length of the statement  "	MethodInfo mi = type.GetMethods (BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic).FirstOrDefault (m => m.Name == name && ArgsMatchExact (m' args' typeArgs)); " is 176.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,LockSelect,The length of the statement  "	if (sel.Selection.NodeType != SqlNodeType.AliasRef || sel.Where != null || sel.OrderBy.Count > 0 || sel.GroupBy.Count > 0 || sel.Having != null || sel.Top != null || sel.OrderingType != SqlOrderingType.Default || sel.IsDistinct) { " is 230.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitInvocation,The length of the statement  "	LambdaExpression lambda = (invoke.Expression.NodeType == ExpressionType.Quote) ? (LambdaExpression)((UnaryExpression)invoke.Expression).Operand : (invoke.Expression as LambdaExpression); " is 186.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitLambda,The length of the statement  "		LambdaExpression accessor = Expression.Lambda (typeof(Func<' >).MakeGenericType (typeof(object[])' p.Type)' Expression.Convert ( " is 128.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSelect,The length of the statement  "		return new SqlSelect (_nodeFactory.SubSelect (SqlNodeType.Multiset' pselect' selector.Body.Type)' alias' _dominatingExpression); " is 128.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSelect,The length of the statement  "	} else if ((project.NodeType == SqlNodeType.Element || project.NodeType == SqlNodeType.ScalarSubSelect) && (_converterStrategy & ConverterStrategy.CanUseOuterApply) != 0) { " is 172.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSelect,The length of the statement  "			inner.Selection = new SqlOptionalValue (new SqlColumn ("test"' _nodeFactory.Unary (SqlNodeType.OuterJoinedValue' _nodeFactory.Value (typeof(int?)' _typeProvider.From (typeof(int))' 1' false' _dominatingExpression)))' _nodeFactory.Unary (SqlNodeType.OuterJoinedValue' inner.Selection)); " is 285.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDefaultIfEmpty,The length of the statement  "	SqlExpression opt = new SqlOptionalValue (new SqlColumn ("test"' _nodeFactory.Unary (SqlNodeType.OuterJoinedValue' _nodeFactory.Value (typeof(int?)' _typeProvider.From (typeof(int))' 1' false' _dominatingExpression)))' _nodeFactory.Unary (SqlNodeType.OuterJoinedValue' aliasRef)); " is 280.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitOfType,The length of the statement  "	select.Where = _nodeFactory.AndAccumulate (select.Where' _nodeFactory.Unary (SqlNodeType.IsNotNull' aref' _dominatingExpression)); " is 130.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitTypeBinary,The length of the statement  "		result = _nodeFactory.Unary (SqlNodeType.IsNotNull' new SqlUnary (SqlNodeType.Treat' ofType' _typeProvider.From (ofType)' expr' _dominatingExpression)' _dominatingExpression); " is 175.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,ChangeType,The length of the statement  "		return new SqlClientParameter (type' _nodeFactory.TypeProvider.From (type)' Expression.Lambda (Expression.Convert (cp.Accessor.Body' type)' cp.Accessor.Parameters.ToArray ())' cp.SourceExpression); " is 197.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitNew,The length of the statement  "	if (TypeSystem.IsNullableType (qn.Type) && qn.Arguments.Count == 1 && TypeSystem.GetNonNullableType (qn.Type) == qn.Arguments [0].Type) { " is 137.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMemberInit,The length of the statement  "	SqlNew tb = _nodeFactory.New (mt' qn.Constructor' args' PropertyOrFieldOf (qn.Members)' members' _dominatingExpression); " is 120.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,PropertyOrFieldOf,The length of the statement  "			foreach (PropertyInfo pi in mi.DeclaringType.GetProperties (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,GenerateSkipTake,The length of the statement  "		SqlColumn rowNumber = new SqlColumn ("ROW_NUMBER"' _nodeFactory.RowNumber (new List<SqlOrderExpression> ()' _dominatingExpression)); " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,GenerateSkipTake,The length of the statement  "			final.Where = _nodeFactory.Between (rowNumberRef' _nodeFactory.Add (skipExp' 1)' _nodeFactory.Binary (SqlNodeType.Add' (SqlExpression)SqlDuplicator.Copy (skipExp)' takeExp)' _dominatingExpression); " is 197.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,TranslateTableValuedFunction,The length of the statement  "	SqlTableValuedFunctionCall functionCall = _nodeFactory.TableValuedFunctionCall (function.ResultRowTypes [0].InheritanceRoot' mce.Method.ReturnType' function.MappedName' sqlParams' mce); " is 185.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,TranslateTableValuedFunction,The length of the statement  "	SqlExpression projection = _translator.BuildProjection (aref' function.ResultRowTypes [0].InheritanceRoot' _allowDeferred' null' mce); " is 134.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,TranslateStoredProcedureCall,The length of the statement  "	if (returnType.IsGenericType && (returnType.GetGenericTypeDefinition () == typeof(IEnumerable<>) || returnType.GetGenericTypeDefinition () == typeof(ISingleResult<>))) { " is 169.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,TranslateStoredProcedureCall,The length of the statement  "		SqlUserRow rowExp = new SqlUserRow (rowType' _typeProvider.GetApplicationType ((int)ConverterSpecialTypes.Row)' spc' mce); " is 122.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,TranslateStoredProcedureCall,The length of the statement  "	} else if (!(typeof(IMultipleResults).IsAssignableFrom (returnType) || returnType == typeof(int) || returnType == typeof(int?))) { " is 130.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitUserQuery,The length of the statement  "			SqlUserColumn col = new SqlUserColumn (elementType' _typeProvider.From (elementType)' suq' ""' false' _dominatingExpression); " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitUserQuery,The length of the statement  "			SqlUserRow rowExp = new SqlUserRow (mType.InheritanceRoot' _typeProvider.GetApplicationType ((int)ConverterSpecialTypes.Row)' suq' _dominatingExpression); " is 154.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitGroupBy,The length of the statement  "		SqlExpression keyGroup = new SqlGrouping (elementType' _typeProvider.From (elementType)' keyExpr' ss' _dominatingExpression); " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitGroupBy,The length of the statement  "		_parameterExpressionToSqlExpression [resultSelector.Parameters [0]] = _nodeFactory.Member (kgAliasRef' elementType.GetProperty ("Key")); " is 136.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitGroupBy,The length of the statement  "		SqlExpression resultExpr = new SqlGrouping (elementType' _typeProvider.From (elementType)' keyExpr' ss' _dominatingExpression); " is 127.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitAggregate,The length of the statement  "	if (!_outerNode && !isCount && (lambda == null || (lambda.Parameters.Count == 1 && lambda.Parameters [0] == lambda.Body)) && (mce != null) && IsSequenceOperatorCall (mce' "Select") && select.From is SqlAlias) { " is 210.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitAggregate,The length of the statement  "				_parameterExpressionToSqlExpression [lambda.Parameters [0]] = (SqlExpression)SqlDuplicator.Copy (info.ElementOnGroupSource); " is 124.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitAggregate,The length of the statement  "		SqlSelect sel = new SqlSelect (this.GetAggregate (aggType' returnType' isCount ? null : (lambda == null) ? aref : exp)' alias' _dominatingExpression); " is 150.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitContains,The length of the statement  "			List<SqlExpression> list = values.OfType<object> ().Select (v => _nodeFactory.ValueFromObject (v' elemType' true' _dominatingExpression)).ToList (); " is 148.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,GenerateInExpression,The length of the statement  "			pred = _nodeFactory.Binary (SqlNodeType.Or' pred' _nodeFactory.Binary (SqlNodeType.EQ' (SqlExpression)SqlDuplicator.Copy (expr)' list [i])); " is 140.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The length of the statement  "	} else if (mc.Method.DeclaringType != typeof(string) && mc.Method.Name == "Contains" && !mc.Method.IsStatic && typeof(IList).IsAssignableFrom (mc.Method.DeclaringType) && mc.Type == typeof(bool) && mc.Arguments.Count == 1 && TypeSystem.GetElementType (mc.Method.DeclaringType).IsAssignableFrom (mc.Arguments [0].Type)) { " is 320.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMappedFunctionCall,The length of the statement  "		ProviderType sqlType = function.ReturnParameter != null && !string.IsNullOrEmpty (function.ReturnParameter.DbType) ? _typeProvider.Parse (function.ReturnParameter.DbType) : _typeProvider.From (mc.Method.ReturnType); " is 215.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) { " is 227.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) { " is 315.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "				return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4])); " is 164.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) { " is 315.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "				return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4])); " is 169.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 132.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) { " is 227.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "				return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null); " is 120.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) { " is 227.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "				return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2])); " is 120.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) { " is 322.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "				return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])); " is 149.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The length of the statement  "			if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) { " is 125.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitFirst,The length of the statement  "	SqlNodeType subType = (_typeProvider.From (select.Selection.ClrType).CanBeColumn) ? SqlNodeType.ScalarSubSelect : SqlNodeType.Element; " is 134.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitInsert,The length of the statement  "			pred = _nodeFactory.Binary (SqlNodeType.EQ' _nodeFactory.Member (tableAliasRef' id.Member)' this.GetIdentityExpression (id' sin.OutputKey != null)); " is 148.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,GetIdentityExpression,The length of the statement  "			return new SqlVariable (typeof(decimal)' _typeProvider.From (typeof(decimal))' "SCOPE_IDENTITY()"' _dominatingExpression); " is 122.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitUpdate,The length of the statement  "			findPredicate = Expression.Lambda (Expression.And (Expression.Invoke (findPredicate' p)' Expression.Invoke (check' p))' p); " is 123.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitUpdate,The length of the statement  "			assignments.Add (new SqlAssign (_nodeFactory.Member (ss.Selection' mmi.Member)' new SqlValue (mdm.Type' _typeProvider.From (mdm.Type)' mmi.CurrentValue' true' source)' source)); " is 177.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitUpdate,The length of the statement  "		select.Where = _nodeFactory.AndAccumulate (_nodeFactory.Binary (SqlNodeType.GT' this.GetRowCountExpression ()' _nodeFactory.ValueFromObject (0' false' _dominatingExpression))' select.Where); " is 190.
Long Statement,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDelete,The length of the statement  "			findPredicate = Expression.Lambda (Expression.And (Expression.Invoke (findPredicate' p)' Expression.Invoke (check' p))' p); " is 123.
Long Statement,System.Data.Linq.Provider.Common,SqlIdentifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlIdentifier.cs,QuoteCompoundIdentifier,The length of the statement  "	} else if (!s.StartsWith (QuotePrefix' StringComparison.Ordinal) && s.EndsWith (QuoteSuffix' StringComparison.Ordinal)) { " is 121.
Long Statement,System.Data.Linq.Provider.Common,SqlIdentifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlIdentifier.cs,QuoteCompoundIdentifier,The length of the statement  "	} else if (s.StartsWith (QuotePrefix' StringComparison.Ordinal) && !s.EndsWith (QuoteSuffix' StringComparison.Ordinal)) { " is 121.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildProjection,The length of the statement  "		return this.BuildProjectionInternal (item' rowType' (rowType.Table != null) ? rowType.PersistentDataMembers : rowType.DataMembers' allowDeferred' link' source); " is 160.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildProjection,The length of the statement  "				SqlNew defaultProjection = this.BuildProjectionInternal (item' type' type.PersistentDataMembers' allowDeferred' link' source); " is 126.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildProjectionInternal,The length of the statement  "			if (link != null && mm != link.Member && mm.IsAssociation && mm.MappedName == link.Member.MappedName && !mm.Association.IsMany && !IsPreloaded (link.Member.Member)) { " is 166.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildProjectionInternal,The length of the statement  "	ConstructorInfo cons = rowType.Type.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' System.Type.EmptyTypes' null); " is 158.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildLink,The length of the statement  "		return new SqlLink (new object ()' otherType' member.Type' typeProvider.From (member.Type)' item' member' exprs' null' source); " is 127.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildLink,The length of the statement  "		return new SqlLink (new object ()' thisType' member.Type' typeProvider.From (member.Type)' item' member' exprs' expansion' source); " is 131.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,WhereClauseFromSourceAndKeys,The length of the statement  "		Expression parameterAsDeclaring = elementType == metaMember.Member.DeclaringType ? (Expression)p : (Expression)Expression.Convert (p' metaMember.Member.DeclaringType); " is 167.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,WhereClauseFromSourceAndKeys,The length of the statement  "		Expression memberExpression = (metaMember.Member is FieldInfo) ? Expression.Field (parameterAsDeclaring' (FieldInfo)metaMember.Member) : Expression.Property (parameterAsDeclaring' (PropertyInfo)metaMember.Member); " is 213.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,WhereClauseFromSourceAndKeys,The length of the statement  "		whereExpression = (whereExpression != null) ? Expression.And (whereExpression' memberEqualityExpression) : memberEqualityExpression; " is 132.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateLink,The length of the statement  "		Expression lex = link.Expression != null ? (Expression)InternalExpression.Known (link.Expression) : (Expression)Expression.Constant (null' link.Member.Member.DeclaringType); " is 173.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEquals,The length of the statement  "	System.Diagnostics.Debug.Assert (expr.NodeType == SqlNodeType.EQ || expr.NodeType == SqlNodeType.NE || expr.NodeType == SqlNodeType.EQ2V || expr.NodeType == SqlNodeType.NE2V); " is 175.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEquals,The length of the statement  "	if (!mtLeft.IsEntity && !mtRight.IsEntity && (eLeft.NodeType != SqlNodeType.New || eLeft.SqlType.CanBeColumn) && (eRight.NodeType != SqlNodeType.New || eRight.SqlType.CanBeColumn)) { " is 182.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEquals,The length of the statement  "			return this.TranslateEqualsOp (expr.NodeType' sql.DoNotVisitExpression (expr.Left)' sql.DoNotVisitExpression (expr.Right)' false); " is 130.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEquals,The length of the statement  "		return sql.Binary (SqlNodeType.EQ' sql.ValueFromObject (0' expr.SourceExpression)' sql.ValueFromObject (1' expr.SourceExpression)); " is 131.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEquals,The length of the statement  "	SqlNodeType eqKind = (expr.NodeType == SqlNodeType.EQ2V || expr.NodeType == SqlNodeType.NE2V) ? SqlNodeType.EQ2V : SqlNodeType.EQ; " is 130.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEqualsOp,The length of the statement  "			return sql.Binary (SqlNodeType.Or' sql.Binary (SqlNodeType.And' sql.Unary (SqlNodeType.IsNull' (SqlExpression)SqlDuplicator.Copy (left))' sql.Unary (SqlNodeType.IsNull' (SqlExpression)SqlDuplicator.Copy (right)))' sql.Binary (SqlNodeType.And' sql.Binary (SqlNodeType.And' sql.Unary (SqlNodeType.IsNotNull' (SqlExpression)SqlDuplicator.Copy (left))' sql.Unary (SqlNodeType.IsNotNull' (SqlExpression)SqlDuplicator.Copy (right)))' sql.Binary (eqOp' left' right))); " is 461.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEqualsOp,The length of the statement  "			return sql.Unary (SqlNodeType.Not' sql.Binary (SqlNodeType.Or' sql.Binary (SqlNodeType.And' sql.Unary (SqlNodeType.IsNull' (SqlExpression)SqlDuplicator.Copy (left))' sql.Unary (SqlNodeType.IsNull' (SqlExpression)SqlDuplicator.Copy (right)))' sql.Binary (SqlNodeType.And' sql.Binary (SqlNodeType.And' sql.Unary (SqlNodeType.IsNotNull' (SqlExpression)SqlDuplicator.Copy (left))' sql.Unary (SqlNodeType.IsNotNull' (SqlExpression)SqlDuplicator.Copy (right)))' sql.Binary (eqOp' left' right)))); " is 490.
Long Statement,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateLinkEquals,The length of the statement  "	if ((link1 != null && link1.Member.IsAssociation && link1.Member.Association.IsForeignKey) || (link2 != null && link2.Member.IsAssociation && link2.Member.Association.IsForeignKey)) { " is 183.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderCompiler,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderCompiler.cs,Compile,The length of the statement  "		Type fnMatType = typeof(Func<' >).MakeGenericType (typeof(ObjectMaterializer<>).MakeGenericType (this.dataReaderType)' elementType); " is 132.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderCompiler,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderCompiler.cs,Compile,The length of the statement  "		factory = (IObjectReaderFactory)Activator.CreateInstance (factoryType' BindingFlags.Instance | BindingFlags.NonPublic' null' new object[] { " is 139.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderCompiler,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderCompiler.cs,CreateSession,The length of the statement  "	return (IObjectReaderSession)Activator.CreateInstance (sessionType' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 158.
Long Statement,System.Data.Linq.Provider.Common,ObjectReaderCompiler,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderCompiler.cs,CompileCapturedMethod,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("Read_" + elementType.Name' MethodAttributes.Static | MethodAttributes.Public' CallingConventions.Standard' elementType' new Type[] { " is 169.
Long Statement,System.Data.Linq.Provider.Common,ConnectionManager,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ConnectionManager.cs,UseConnection,The length of the statement  "	if (this.transaction == null && System.Transactions.Transaction.Current != null && System.Transactions.Transaction.Current != systemTransaction) { " is 146.
Long Statement,System.Data.Linq.Provider.Common,ConnectionManager,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ConnectionManager.cs,ReleaseConnection,The length of the statement  "	if (this.users.Count == 0 && this.autoClose && this.transaction == null && System.Transactions.Transaction.Current == null) { " is 125.
Long Statement,System.Data.Linq.Provider.Visitors,ColumnLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ColumnLifter.cs,PushSourceDown,The length of the statement  "	SqlSelect ns = new SqlSelect (new SqlNop (cols [0].ClrType' cols [0].SqlType' sqlSource.SourceExpression)' sqlSource' sqlSource.SourceExpression); " is 146.
Long Statement,System.Data.Linq.Provider.Visitors,ExpressionDuplicator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ExpressionDuplicator.cs,VisitLink,The length of the statement  "	return new SqlLink (link.Id' link.RowType' link.ClrType' link.SqlType' link.Expression' link.Member' exprs' expansion' link.SourceExpression); " is 142.
Long Statement,System.Data.Linq.Provider.Visitors,ExpressionDuplicator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ExpressionDuplicator.cs,ExpandTogether,The length of the statement  "		return factory.New (cobs [0].MetaType' cobs [0].Constructor' arguments' cobs [0].ArgMembers' bindings' exprs [0].SourceExpression); " is 131.
Long Statement,System.Data.Linq.Provider.Visitors,ExpressionDuplicator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ExpressionDuplicator.cs,ExpandTogether,The length of the statement  "			if (links [i].KeyExpressions.Count != links [0].KeyExpressions.Count || links [i].Member != links [0].Member || (links [i].Expansion != null) != (links [0].Expansion != null)) " is 175.
Long Statement,System.Data.Linq.Provider.Visitors,ExpressionDuplicator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ExpressionDuplicator.cs,ExpandTogether,The length of the statement  "		return new SqlLink (links [0].Id' links [0].RowType' links [0].ClrType' links [0].SqlType' links [0].Expression' links [0].Member' kexprs' expansion' links [0].SourceExpression); " is 178.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,The length of the statement  "					return VisitUnaryOperator (new SqlUnary (negator' bo.ClrType' bo.SqlType' sql.DoNotVisitExpression (bo.Right)' bo.SourceExpression)); " is 133.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,The length of the statement  "					return VisitUnaryOperator (new SqlUnary (negator' bo.ClrType' bo.SqlType' sql.DoNotVisitExpression (bo.Left)' bo.SourceExpression)); " is 132.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,The length of the statement  "				return this.VisitExpression (sql.ValueFromObject ((bo.NodeType == SqlNodeType.EQ) == (leftPossibleTypes [0] == rightPossibleTypes [0])' false' bo.SourceExpression)); " is 165.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitDiscriminatorOf,The length of the statement  "				SqlExpression @default = sql.Value (discriminator.GetType ()' tc.Whens [0].Match.SqlType' defaultType.InheritanceCode' true' tc.SourceExpression); " is 146.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitDiscriminatorOf,The length of the statement  "				values.Add (sql.Value (discriminator.GetType ()' when.Match.SqlType' ((SqlValue)when.Match).Value' true' tc.SourceExpression)); " is 127.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitUnaryOperator,The length of the statement  "				return this.VisitUnaryOperator (new SqlUnary (uo.NodeType' uo.ClrType' uo.SqlType' new SqlUnary (SqlNodeType.OuterJoinedValue' ov.ClrType' ov.SqlType' ov.HasValue' ov.SourceExpression)' uo.SourceExpression)); " is 208.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitUnaryOperator,The length of the statement  "				return new SqlUnary (uo.NodeType' uo.ClrType' uo.SqlType' new SqlUnary (SqlNodeType.OuterJoinedValue' tc.Discriminator.ClrType' tc.Discriminator.SqlType' tc.Discriminator' tc.SourceExpression)' uo.SourceExpression); " is 215.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitUnaryOperator,The length of the statement  "		return sql.Value (uo.ClrType' uo.SqlType' DBConvert.ChangeType (val.Value' uo.ClrType)' val.IsClientSpecified' val.SourceExpression); " is 133.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitUnaryOperator,The length of the statement  "			return sql.Value (typeof(bool)' this.typeProvider.From (typeof(int))' (val.Value == null) == (uo.NodeType == SqlNodeType.IsNull)' val.IsClientSpecified' uo.SourceExpression); " is 174.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitNew,The length of the statement  "		if (mm.IsAssociation && ma.Expression != null && ma.Expression.NodeType != SqlNodeType.Link && this.shape != null && this.shape.IsPreloaded (mm.Member) && mm.LoadMethod == null && this.alreadyIncluded != null && !this.alreadyIncluded.Contains (otherType)) { " is 257.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,AccessMember,The length of the statement  "						this.currentSelect.From = sql.MakeJoin (SqlJoinType.OuterApply' this.currentSelect.From' alias' null' sub.SourceExpression); " is 124.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,AccessMember,The length of the statement  "				SqlNodeType subType = (rexp is SqlTypeCase || !rexp.SqlType.CanBeColumn) ? SqlNodeType.Element : SqlNodeType.ScalarSubSelect; " is 125.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,AccessMember,The length of the statement  "		LambdaExpression accessor = Expression.Lambda (typeof(Func<' >).MakeGenericType (typeof(object[])' m.ClrType)' Expression.MakeMemberAccess (cp.Accessor.Body' m.Member)' cp.Accessor.Parameters); " is 193.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitSelect,The length of the statement  "		if (this.binder.OptimizeLinkExpansions && (@select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates (@select) || @select.IsDistinct)) { " is 143.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertToFetchedExpression,The length of the statement  "			if (this.currentSelect != null && node != null && node.NodeType == SqlNodeType.Element && link.Member.IsAssociation && this.binder.OptimizeLinkExpansions) { " is 156.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertToFetchedExpression,The length of the statement  "				SqlJoinType joinType = (link.Member.Association.IsForeignKey && !link.Member.Association.IsNullable) ? SqlJoinType.Inner : SqlJoinType.LeftOuter; " is 145.
Long Statement,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,SimulateCaseOfSequences,The length of the statement  "			elseFilter = sql.AndAccumulate (elseFilter' sql.Binary (SqlNodeType.NE' clientCase.Expression' clientCase.Whens [i].Match)); " is 124.
Long Statement,System.Data.Linq.Provider.Visitors,MultiSetMultiPlexer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MultiSetMultiPlexer.cs,VisitMultiset,The length of the statement  "	if ((this.options & SqlMultiplexerOptionType.EnableBigJoin) != 0 && !this.hasBigJoin && this.canJoin && this.isTopLevel && this.outerSelect != null && !MultisetChecker.HasMultiset (sms.Select.Selection) && BigJoinChecker.CanBigJoin (sms.Select)) { " is 247.
Long Statement,System.Data.Linq.Provider.Visitors,MultiSetMultiPlexer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MultiSetMultiPlexer.cs,VisitMultiset,The length of the statement  "		SqlSelect countSelect = new SqlSelect (sql.Unary (SqlNodeType.Count' null' sms.SourceExpression)' copyAlias' sms.SourceExpression); " is 131.
Long Statement,System.Data.Linq.Provider.Visitors,NameAssigner,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\NameAssigner.cs,VisitScalarSubSelect,The length of the statement  "		Diagnostics.Debug.Assert (ss != null && ss.Select != null && ss.Select.Row != null && ss.Select.Row.Columns.Count == 1); " is 120.
Long Statement,System.Data.Linq.Provider.Visitors,NameAssigner,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\NameAssigner.cs,IsSimpleColumn,The length of the statement  "			return String.IsNullOrEmpty (name) || String.Compare (name' colRef.Column.Name' StringComparison.OrdinalIgnoreCase) == 0; " is 121.
Long Statement,System.Data.Linq.Provider.Visitors,OrderByLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\OrderByLifter.cs,VisitAlias,The length of the statement  "				col = new SqlColumn (mm.MemberAccessor.Type' typeProvider.From (mm.MemberAccessor.Type)' name' mm' null' sourceExpression); " is 123.
Long Statement,System.Data.Linq.Provider.Visitors,OrderByLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\OrderByLifter.cs,VisitRowNumber,The length of the statement  "			SqlColumn col = new SqlColumn ("rowNumberOrder"' sql.Value (typeof(int)' this.typeProvider.From (typeof(int))' 1' false' rowNumber.SourceExpression)); " is 150.
Long Statement,System.Data.Linq.Provider.Visitors,OrderByLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\OrderByLifter.cs,PushDown,The length of the statement  "	SqlSelect select = new SqlSelect (new SqlNop (column.ClrType' column.SqlType' column.SourceExpression)' this.currentSelect.From' this.currentSelect.SourceExpression); " is 166.
Long Statement,System.Data.Linq.Provider.Visitors,PredicateLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\PredicateLifter.cs,VisitSelect,The length of the statement  "	if (@select.Top != null || @select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates (@select) || @select.IsDistinct) { " is 126.
Long Statement,System.Data.Linq.Provider.Visitors,Booleanizer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\Booleanizer.cs,ConvertValueToPredicate,The length of the statement  "	return new SqlBinary (SqlNodeType.EQ' valueExpression.ClrType' sql.TypeProvider.From (typeof(bool))' valueExpression' sql.Value (typeof(bool)' valueExpression.SqlType' true' false' valueExpression.SourceExpression)); " is 216.
Long Statement,System.Data.Linq.Provider.Visitors,Booleanizer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\Booleanizer.cs,ConvertPredicateToValue,The length of the statement  "		SqlExpression valueNull = sql.Value (valueTrue.ClrType' valueTrue.SqlType' null' false' predicateExpression.SourceExpression); " is 126.
Long Statement,System.Data.Linq.Provider.Visitors,Booleanizer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\Booleanizer.cs,ConvertPredicateToValue,The length of the statement  "			new SqlWhen (new SqlUnary (SqlNodeType.Not' predicateExpression.ClrType' predicateExpression.SqlType' predicateExpression' predicateExpression.SourceExpression)' valueFalse) " is 173.
Long Statement,System.Data.Linq.Provider.Visitors,CaseSimplifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\CaseSimplifier.cs,VisitBinaryOperator,The length of the statement  "		if (bo.Left.NodeType == SqlNodeType.SimpleCase && bo.Right.NodeType == SqlNodeType.Value && AreCaseWhenValuesConstant ((SqlSimpleCase)bo.Left)) { " is 145.
Long Statement,System.Data.Linq.Provider.Visitors,CaseSimplifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\CaseSimplifier.cs,VisitBinaryOperator,The length of the statement  "		} else if (bo.Right.NodeType == SqlNodeType.SimpleCase && bo.Left.NodeType == SqlNodeType.Value && AreCaseWhenValuesConstant ((SqlSimpleCase)bo.Right)) { " is 153.
Long Statement,System.Data.Linq.Provider.Visitors,CaseSimplifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\CaseSimplifier.cs,TryToWriteAsSimpleBooleanExpression,The length of the statement  "				rewrite = _sql.AndAccumulate (rewrite' _sql.Unary (SqlNodeType.IsNotNull' discriminator' discriminator.SourceExpression)); " is 122.
Long Statement,System.Data.Linq.Provider.Visitors,LiteralValidator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\LiteralValidator.cs,VisitValue,The length of the statement  "	if (!value.IsClientSpecified && value.ClrType.IsClass && value.ClrType != typeof(string) && value.ClrType != typeof(Type) && value.Value != null) { " is 147.
Long Statement,System.Data.Linq.Provider.Visitors,ScalarSubQueryRewriter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ScalarSubQueryRewriter.cs,VisitScalarSubSelect,The length of the statement  "	this.currentSelect.From = new SqlJoin (SqlJoinType.OuterApply' this.currentSelect.From' alias' null' ss.SourceExpression); " is 122.
Long Statement,System.Data.Linq.Provider.Visitors,SelectionFlattener,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SelectionFlattener.cs,VisitColumn,The length of the statement  "	if (c == null && col.Expression != null && !this.isInput && (!this.isNew || (this.isNew && !col.Expression.IsConstantColumn))) { " is 128.
Long Statement,System.Data.Linq.Provider.Visitors,SelectionLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SelectionLifter.cs,VisitSelect,The length of the statement  "	if (@select.Top != null || @select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates (@select) || @select.IsDistinct) { " is 126.
Long Statement,System.Data.Linq.Provider.Visitors,SqlAliasDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlAliasDeflator.cs,IsTrivialSelect,The length of the statement  "	if (@select.OrderBy.Count != 0 || @select.GroupBy.Count != 0 || @select.Having != null || @select.Top != null || @select.IsDistinct || @select.Where != null) " is 157.
Long Statement,System.Data.Linq.Provider.Visitors,SqlAliasDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlAliasDeflator.cs,HasEmptySource,The length of the statement  "	return sel.Row.Columns.Count == 0 && sel.From == null && sel.Where == null && sel.GroupBy.Count == 0 && sel.Having == null && sel.OrderBy.Count == 0; " is 149.
Long Statement,System.Data.Linq.Provider.Visitors,SqlBubbler,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlBubbler.cs,ForceLocal,The length of the statement  "		SqlColumn c = new SqlColumn (found.ClrType' found.SqlType' name' this.found.MetaMember' new SqlColumnRef (this.found)' row.SourceExpression); " is 141.
Long Statement,System.Data.Linq.Provider.Visitors,SqlColumnDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlColumnDeflator.cs,VisitSelect,The length of the statement  "			bool safeToRemove = !saveForceReferenceAll && !_referenceMap.ContainsKey (c) // don't remove anything from a distinct select (except maybe a literal value) since it would change the meaning of the comparison " is 207.
Long Statement,System.Data.Linq.Provider.Visitors,SqlColumnDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlColumnDeflator.cs,VisitSelect,The length of the statement  "			&& !@select.IsDistinct // don't remove an aggregate expression that may be the only expression that forces the grouping (since it would change the cardinality of the results) " is 174.
Long Statement,System.Data.Linq.Provider.Visitors,SqlScopedVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlScopedVisitor.cs,VisitJoin,The length of the statement  "		this.CurrentScope = new SqlScope (null' new SqlScope (join.Right' new SqlScope (join.Left' this.CurrentScope.ContainingScope))); " is 128.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitJoinedCollection,The length of the statement  "	return new SqlJoinedCollection (jc.ClrType' jc.SqlType' this.VisitExpression (jc.Expression)' this.VisitExpression (jc.Count)' jc.SourceExpression); " is 148.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitLink,The length of the statement  "	SqlLink newLink = new SqlLink (new object ()' link.RowType' link.ClrType' link.SqlType' null' link.Member' exprs' null' link.SourceExpression); " is 143.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitUserQuery,The length of the statement  "		SqlUserColumn dupSuc = new SqlUserColumn (suc.ClrType' suc.SqlType' suc.Query' suc.Name' suc.IsRequired' suc.SourceExpression); " is 127.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitTreat,The length of the statement  "	return new SqlUnary (SqlNodeType.Treat' t.ClrType' t.SqlType' (SqlExpression)this.Visit (t.Operand)' t.SourceExpression); " is 121.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitUnaryOperator,The length of the statement  "	return new SqlUnary (uo.NodeType' uo.ClrType' uo.SqlType' (SqlExpression)this.Visit (uo.Operand)' uo.Method' uo.SourceExpression); " is 130.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitBetween,The length of the statement  "	SqlBetween nbet = new SqlBetween (between.ClrType' between.SqlType' this.VisitExpression (between.Expression)' this.VisitExpression (between.Start)' this.VisitExpression (between.End)' between.SourceExpression); " is 211.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitIn,The length of the statement  "	SqlIn nin = new SqlIn (sin.ClrType' sin.SqlType' this.VisitExpression (sin.Expression)' sin.Values' sin.SourceExpression); " is 122.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitLike,The length of the statement  "	return new SqlLike (like.ClrType' like.SqlType' this.VisitExpression (like.Expression)' this.VisitExpression (like.Pattern)' this.VisitExpression (like.Escape)' like.SourceExpression); " is 184.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitTableValuedFunctionCall,The length of the statement  "	SqlTableValuedFunctionCall nfc = new SqlTableValuedFunctionCall (fc.RowType' fc.ClrType' fc.SqlType' fc.Name' args' fc.SourceExpression); " is 137.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitMethodCall,The length of the statement  "	return new SqlMethodCall (mc.ClrType' mc.SqlType' mc.Method' this.VisitExpression (mc.Object)' args' mc.SourceExpression); " is 122.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitGrouping,The length of the statement  "	SqlGrouping n = new SqlGrouping (g.ClrType' g.SqlType' this.VisitExpression (g.Key)' this.VisitExpression (g.Group)' g.SourceExpression); " is 137.
Long Statement,System.Data.Linq.Provider.Visitors,DuplicatingVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\DuplicatingVisitor.cs,VisitDiscriminatedType,The length of the statement  "	return new SqlDiscriminatedType (dt.SqlType' this.VisitExpression (dt.Discriminator)' dt.TargetType' dt.SourceExpression); " is 122.
Long Statement,System.Data.Linq.Provider.Visitors,Localizer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\Localizer.cs,MakeLocal,The length of the statement  "			return (e.NodeType == ExpressionType.Convert) ? Expression.Convert (local' e.Type) : Expression.ConvertChecked (local' e.Type); " is 127.
Long Statement,System.Data.Linq.Provider.Visitors,LocalMapper,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\LocalMapper.cs,Visit,The length of the statement  "		if (!this.isRemote && expression.NodeType != ExpressionType.Lambda && expression.NodeType != ExpressionType.Quote && DependenceChecker.IsIndependent (expression)) { " is 164.
Long Statement,System.Data.Linq.Provider.Visitors,LocalMapper,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\LocalMapper.cs,VisitMethodCall,The length of the statement  "	this.isRemote |= m.Method.DeclaringType == typeof(DMLMethodPlaceholders) || Attribute.IsDefined (m.Method' typeof(FunctionAttribute)); " is 134.
Long Statement,System.Data.Linq.Provider.Visitors,SqlTopSelectDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlTopSelectDeflator.cs,IsTrivialSelect,The length of the statement  "	if (@select.OrderBy.Count != 0 || @select.GroupBy.Count != 0 || @select.Having != null || @select.Top != null || @select.IsDistinct || @select.Where != null) " is 157.
Long Statement,System.Data.Linq.Provider.Visitors,SubQueryCompiler,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SubQueryCompiler.cs,VisitClientQuery,The length of the statement  "	Type clientElementType = cq.Query.NodeType == SqlNodeType.Multiset ? TypeSystem.GetElementType (cq.ClrType) : cq.ClrType; " is 121.
Long Statement,System.Data.Linq.Provider.Visitors,SubSelectDuplicator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SubSelectDuplicator.cs,VisitLink,The length of the statement  "	return new SqlLink (new object ()' link.RowType' link.ClrType' link.SqlType' null' link.Member' exprs' null' link.SourceExpression); " is 132.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,CanDbConvert,The length of the statement  "		return tcFrom == TypeCode.Byte || tcFrom == TypeCode.SByte || tcFrom == TypeCode.Int16 || tcFrom == TypeCode.UInt16 || tcFrom == TypeCode.Int32 || tcFrom == TypeCode.UInt32; " is 173.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,CanDbConvert,The length of the statement  "		return tcFrom == TypeCode.Byte || tcFrom == TypeCode.SByte || tcFrom == TypeCode.Int16 || tcFrom == TypeCode.UInt16 || tcFrom == TypeCode.Int32 || tcFrom == TypeCode.UInt32; " is 173.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,VisitBinaryOperator,The length of the statement  "			if (CanDbConvert (conv.Operand.ClrType' bo.Right.ClrType) && conv.Operand.SqlType.ComparePrecedenceTo (bo.Right.SqlType) != 1) { " is 128.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,VisitBinaryOperator,The length of the statement  "			if (CanDbConvert (conv.Operand.ClrType' bo.Left.ClrType) && conv.Operand.SqlType.ComparePrecedenceTo (bo.Left.SqlType) != 1) { " is 126.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,VisitBinaryOperator,The length of the statement  "		Func<SqlExpression' SqlExpression' bool> needsRetype = (expr' val) => (val.NodeType == SqlNodeType.Value || val.NodeType == SqlNodeType.ClientParameter) && !(expr.NodeType == SqlNodeType.Value || expr.NodeType == SqlNodeType.ClientParameter) && val.SqlType.IsUnicodeType && !expr.SqlType.IsUnicodeType; " is 302.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,VisitIn,The length of the statement  "			valueType = null == valueType ? value.SqlType : this.typeProvider.PredictTypeForBinary (SqlNodeType.EQ' value.SqlType' valueType); " is 130.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,VisitLike,The length of the statement  "	if (!like.Expression.SqlType.IsUnicodeType && like.Pattern.SqlType.IsUnicodeType && (like.Pattern.NodeType == SqlNodeType.Value || like.Pattern.NodeType == SqlNodeType.ClientParameter)) { " is 187.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,CoerceToFirst,The length of the statement  "			arg2 = sql.Value (arg1.ClrType' arg1.SqlType' DBConvert.ChangeType (val.Value' arg1.ClrType)' val.IsClientSpecified' arg2.SourceExpression); " is 140.
Long Statement,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,CoerceTypeFamily,The length of the statement  "	if ((arg1.SqlType.HasPrecisionAndScale && arg2.SqlType.HasPrecisionAndScale && arg1.SqlType != arg2.SqlType) || sql.IsHighPrecisionDateTimeType (arg1) || sql.IsHighPrecisionDateTimeType (arg2)) { " is 195.
Long Statement,System.Data.Linq.Provider.Visitors,ValidateNoInvalidComparison,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ValidateNoInvalidComparison.cs,VisitBinaryOperator,The length of the statement  "	if (bo.NodeType == SqlNodeType.EQ || bo.NodeType == SqlNodeType.NE || bo.NodeType == SqlNodeType.EQ2V || bo.NodeType == SqlNodeType.NE2V || bo.NodeType == SqlNodeType.GT || bo.NodeType == SqlNodeType.GE || bo.NodeType == SqlNodeType.LT || bo.NodeType == SqlNodeType.LE) { " is 271.
Long Statement,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsCompareToValue,The length of the statement  "	if (IsComparison (bo.NodeType) && bo.Left.NodeType == SqlNodeType.MethodCall && bo.Right.NodeType == SqlNodeType.Value) { " is 121.
Long Statement,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsCompareToMethod,The length of the statement  "	return !call.Method.IsStatic && call.Method.Name == "CompareTo" && call.Arguments.Count == 1 && call.Method.ReturnType == typeof(int); " is 134.
Long Statement,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsCompareMethod,The length of the statement  "	return call.Method.IsStatic && call.Method.Name == "Compare" && call.Arguments.Count > 1 && call.Method.ReturnType == typeof(int); " is 130.
Long Statement,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsVbCompareStringEqualsValue,The length of the statement  "	return IsComparison (bo.NodeType) && bo.Left.NodeType == SqlNodeType.MethodCall && bo.Right.NodeType == SqlNodeType.Value && IsVbCompareString ((SqlMethodCall)bo.Left); " is 168.
Long Statement,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsVbCompareString,The length of the statement  "	return call.Method.IsStatic && (call.Method.DeclaringType != null) && call.Method.DeclaringType.FullName == "Microsoft.VisualBasic.CompilerServices.Operators" && call.Method.Name == "CompareString"; " is 198.
Long Statement,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsVbIIF,The length of the statement  "	return mc.Method.IsStatic && (mc.Method.DeclaringType != null) && mc.Method.DeclaringType.FullName == "Microsoft.VisualBasic.Interaction" && mc.Method.Name == "IIf"; " is 165.
Long Statement,System.Data.Linq.BindingLists,BindingList,F:\newReposMay17\FransBouma_LinqToSQL2\src\BindingLists\BindingList.cs,Create,The length of the statement  "		return (IBindingList)Activator.CreateInstance (bindingType' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new object[] { " is 150.
Long Statement,System.Data.Linq.Mapping,FieldAccessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\Accesssors\FieldAccessor.cs,Create,The length of the statement  "	return (MetaAccessor)Activator.CreateInstance (typeof(Accessor<' >).MakeGenericType (objectType' fi.FieldType)' BindingFlags.Instance | BindingFlags.NonPublic' null' new object[] { " is 180.
Long Statement,System.Data.Linq.Mapping,PropertyAccessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\Accesssors\PropertyAccessor.cs,Create,The length of the statement  "			dset = Delegate.CreateDelegate (typeof(DSet<' >).MakeGenericType (objectType' pi.PropertyType)' pi.GetSetMethod (true)' true); " is 126.
Long Statement,System.Data.Linq.Mapping,PropertyAccessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\Accesssors\PropertyAccessor.cs,Create,The length of the statement  "	return (MetaAccessor)Activator.CreateInstance (typeof(Accessor<' ' >).MakeGenericType (objectType' pi.PropertyType' saType)' BindingFlags.Instance | BindingFlags.NonPublic' null' new object[] { " is 193.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,InitAccessors,The length of the statement  "						MakeDeferredAccessors (this.member.ReflectedType' this.accPrivate' out this.accPrivate' out this.accDefValue' out this.accDefSource); " is 133.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,InitAccessors,The length of the statement  "						MakeDeferredAccessors (this.member.ReflectedType' this.accPrivate' out this.accPrivate' out this.accDefValue' out this.accDefSource); " is 133.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,IsDeferredType,The length of the statement  "		return gtype == typeof(Link<>) || typeof(EntitySet<>).IsAssignableFrom (gtype) || typeof(EntityRef<>).IsAssignableFrom (gtype) || IsDeferredType (entityType.BaseType); " is 167.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorValue = CreateAccessor (typeof(LinkValueAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 121.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredValue = CreateAccessor (typeof(LinkDefValueAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 132.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredSource = CreateAccessor (typeof(LinkDefSourceAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 134.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorValue = CreateAccessor (typeof(EntityRefValueAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 126.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredValue = CreateAccessor (typeof(EntityRefDefValueAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 137.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredSource = CreateAccessor (typeof(EntityRefDefSourceAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 139.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorValue = CreateAccessor (typeof(EntitySetValueAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 126.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredValue = CreateAccessor (typeof(EntitySetDefValueAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 137.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredSource = CreateAccessor (typeof(EntitySetDefSourceAccessor<' >).MakeGenericType (objectDeclaringType' itemType)' accessor); " is 139.
Long Statement,System.Data.Linq.Mapping,AttributedMetaDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaDataMember.cs,CreateAccessor,The length of the statement  "	return (MetaAccessor)Activator.CreateInstance (accessorType' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' args' null); " is 149.
Long Statement,System.Data.Linq.Mapping,AttributedMetaTable,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaTable.cs,InitMethods,The length of the statement  "		this.insertMethod = MethodFinder.FindMethod (this.model.ContextType' "Insert" + rowType.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' new Type[] { " is 176.
Long Statement,System.Data.Linq.Mapping,AttributedMetaTable,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaTable.cs,InitMethods,The length of the statement  "		this.updateMethod = MethodFinder.FindMethod (this.model.ContextType' "Update" + rowType.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' new Type[] { " is 176.
Long Statement,System.Data.Linq.Mapping,AttributedMetaTable,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaTable.cs,InitMethods,The length of the statement  "		this.deleteMethod = MethodFinder.FindMethod (this.model.ContextType' "Delete" + rowType.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' new Type[] { " is 176.
Long Statement,System.Data.Linq.Mapping,AttributedMetaType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaType.cs,InitMethods,The length of the statement  "		this.onLoadedMethod = MethodFinder.FindMethod (this.Type' "OnLoaded"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' Type.EmptyTypes' false); " is 164.
Long Statement,System.Data.Linq.Mapping,AttributedMetaType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaType.cs,InitMethods,The length of the statement  "		this.onValidateMethod = MethodFinder.FindMethod (this.Type' "OnValidate"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' new[] { " is 151.
Long Statement,System.Data.Linq.Mapping,AttributedMetaType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaType.cs,InitMethods,The length of the statement  "		this.hasAnyLoadMethod = (this.onLoadedMethod != null) || (this.InheritanceBase != null && this.InheritanceBase.HasAnyLoadMethod); " is 129.
Long Statement,System.Data.Linq.Mapping,AttributedMetaType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaType.cs,InitMethods,The length of the statement  "		this.hasAnyValidateMethod = (this.onValidateMethod != null) || (this.InheritanceBase != null && this.InheritanceBase.HasAnyValidateMethod); " is 139.
Long Statement,System.Data.Linq.Mapping,AttributedMetaType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaType.cs,InitDataMembers,The length of the statement  "		BindingFlags flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy; " is 122.
Long Statement,System.Data.Linq.Mapping,AttributedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaModel.cs,InitStaticTables,The length of the statement  "					FieldInfo[] fields = type.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 135.
Long Statement,System.Data.Linq.Mapping,AttributedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaModel.cs,InitStaticTables,The length of the statement  "					PropertyInfo[] props = type.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 141.
Long Statement,System.Data.Linq.Mapping,AttributedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaModel.cs,InitFunctions,The length of the statement  "						foreach (MethodInfo mi in type.GetMethods (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)) { " is 143.
Long Statement,System.Data.Linq.Mapping,MappedAssociation,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedAssociation.cs,Init,The length of the statement  "	this.thisKey = (this.assocMap.ThisKey != null) ? MakeKeys (this.thisMember.DeclaringType' this.assocMap.ThisKey) : this.thisMember.DeclaringType.IdentityMembers; " is 161.
Long Statement,System.Data.Linq.Mapping,MappedAssociation,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedAssociation.cs,InitOther,The length of the statement  "		this.otherKey = (assocMap.OtherKey != null) ? MakeKeys (this.otherType' this.assocMap.OtherKey) : this.otherType.IdentityMembers; " is 129.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,InitAccessors,The length of the statement  "						MakeDeferredAccessors (this.member.ReflectedType' this.accPrivate' out this.accPrivate' out this.accDefValue' out this.accDefSource); " is 133.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,InitAccessors,The length of the statement  "						MakeDeferredAccessors (this.member.ReflectedType' this.accPrivate' out this.accPrivate' out this.accDefValue' out this.accDefSource); " is 133.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,IsDeferredType,The length of the statement  "		return gtype == typeof(Link<>) || typeof(EntitySet<>).IsAssignableFrom (gtype) || typeof(EntityRef<>).IsAssignableFrom (gtype) || IsDeferredType (clrType.BaseType); " is 164.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredValue = CreateAccessor (typeof(LinkDefValueAccessor<' >).MakeGenericType (declaringType' itemType)' accessor); " is 126.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredSource = CreateAccessor (typeof(LinkDefSourceAccessor<' >).MakeGenericType (declaringType' itemType)' accessor); " is 128.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorValue = CreateAccessor (typeof(EntityRefValueAccessor<' >).MakeGenericType (declaringType' itemType)' accessor); " is 120.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredValue = CreateAccessor (typeof(EntityRefDefValueAccessor<' >).MakeGenericType (declaringType' itemType)' accessor); " is 131.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredSource = CreateAccessor (typeof(EntityRefDefSourceAccessor<' >).MakeGenericType (declaringType' itemType)' accessor); " is 133.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorValue = CreateAccessor (typeof(EntitySetValueAccessor<' >).MakeGenericType (declaringType' itemType)' accessor); " is 120.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredValue = CreateAccessor (typeof(EntitySetDefValueAccessor<' >).MakeGenericType (declaringType' itemType)' accessor); " is 131.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,MakeDeferredAccessors,The length of the statement  "			accessorDeferredSource = CreateAccessor (typeof(EntitySetDefSourceAccessor<' >).MakeGenericType (declaringType' itemType)' accessor); " is 133.
Long Statement,System.Data.Linq.Mapping,MappedDataMember,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedDataMember.cs,CreateAccessor,The length of the statement  "	return (MetaAccessor)Activator.CreateInstance (accessorType' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' args' null); " is 149.
Long Statement,System.Data.Linq.Mapping,MappedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedMetaModel.cs,InitStaticTableTypes,The length of the statement  "		FieldInfo[] fields = type.GetFields (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 135.
Long Statement,System.Data.Linq.Mapping,MappedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedMetaModel.cs,InitStaticTableTypes,The length of the statement  "		PropertyInfo[] props = type.GetProperties (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 141.
Long Statement,System.Data.Linq.Mapping,MappedMetaModel,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedMetaModel.cs,GetRootType,The length of the statement  "	if (string.Compare (rootMapping.Name' type.Name' StringComparison.Ordinal) == 0 || string.Compare (rootMapping.Name' type.FullName' StringComparison.Ordinal) == 0 || string.Compare (rootMapping.Name' type.AssemblyQualifiedName' StringComparison.Ordinal) == 0) " is 259.
Long Statement,System.Data.Linq.Mapping,MappedRootType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedRootType.cs,InitInheritedType,The length of the statement  "			if ((keyValue.GetType () == typeof(string) && ((string)keyValue).Trim ().Length == 0 && d.GetType () == typeof(string) && ((string)d).Trim ().Length == 0) || object.Equals (d' keyValue)) { " is 188.
Long Statement,System.Data.Linq.Mapping,MappedTable,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedTable.cs,InitMethods,The length of the statement  "		this.insertMethod = MethodFinder.FindMethod (this.model.ContextType' "Insert" + rowType.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' new Type[] { " is 176.
Long Statement,System.Data.Linq.Mapping,MappedTable,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedTable.cs,InitMethods,The length of the statement  "		this.updateMethod = MethodFinder.FindMethod (this.model.ContextType' "Update" + rowType.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' new Type[] { " is 176.
Long Statement,System.Data.Linq.Mapping,MappedTable,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedTable.cs,InitMethods,The length of the statement  "		this.deleteMethod = MethodFinder.FindMethod (this.model.ContextType' "Delete" + rowType.Name' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' new Type[] { " is 176.
Long Statement,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,InitMethods,The length of the statement  "		this.onLoadedMethod = MethodFinder.FindMethod (this.Type' "OnLoaded"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' Type.EmptyTypes' false); " is 164.
Long Statement,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,InitMethods,The length of the statement  "		this.onValidateMethod = MethodFinder.FindMethod (this.Type' "OnValidate"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' new[] { " is 151.
Long Statement,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,InitMethods,The length of the statement  "		this.hasAnyLoadMethod = (this.onLoadedMethod != null) || (this.InheritanceBase != null && this.InheritanceBase.HasAnyLoadMethod); " is 129.
Long Statement,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,InitMethods,The length of the statement  "		this.hasAnyValidateMethod = (this.onValidateMethod != null) || (this.InheritanceBase != null && this.InheritanceBase.HasAnyValidateMethod); " is 139.
Long Statement,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,InitDataMembers,The length of the statement  "		BindingFlags flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy; " is 122.
Long Statement,System.Data.Linq.Mapping,MappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedType.cs,InitDataMembers,The length of the statement  "				foreach (MemberInfo mi in aboveRoot.GetMembers (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)) { " is 120.
Long Statement,System.Data.Linq.Mapping,MetaAssociationImpl,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MetaAssociationImpl.cs,MakeKeys,The length of the statement  "		MemberInfo[] rmis = mtype.Type.GetMember (names [i]' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 123.
Long Statement,System.Data.Linq.Mapping,MetaAssociationImpl,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MetaAssociationImpl.cs,ToString,The length of the statement  "	return string.Format (Globalization.CultureInfo.InvariantCulture' "{0} ->{1} {2}"' ThisMember.DeclaringType.Name' IsMany ? "*" : ""' OtherType.Name); " is 149.
Long Statement,System.Data.Linq.Mapping,UnmappedType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\UnmappedType.cs,InitDataMembers,The length of the statement  "				BindingFlags flags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy; " is 122.
Long Statement,System.Data.Linq.Mapping,MappingSource,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\MappingSource.cs,GetModel,The length of the statement  "		Interlocked.CompareExchange<Dictionary<Type' MetaModel>> (ref this.secondaryModels' new Dictionary<Type' MetaModel> ()' null); " is 126.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadDatabaseMapping,The length of the statement  "				throw Error.UnrecognizedElement (String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 195.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadDatabaseMapping,The length of the statement  "			throw Error.UnexpectedElement (XmlMappingConstant.Database' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 222.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ValidateAttributes,The length of the statement  "				throw Error.UnrecognizedAttribute (String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : ":"' reader.LocalName)); " is 197.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadFunctionMapping,The length of the statement  "		throw Error.UnexpectedElement (XmlMappingConstant.Function' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 222.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadFunctionMapping,The length of the statement  "				throw Error.UnrecognizedElement (String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 195.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadReturnMapping,The length of the statement  "		throw Error.UnexpectedElement (XmlMappingConstant.Return' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 220.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadParameterMapping,The length of the statement  "		throw Error.UnexpectedElement (XmlMappingConstant.Parameter' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 223.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadTableMapping,The length of the statement  "		throw Error.UnexpectedElement (XmlMappingConstant.Table' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 219.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadTableMapping,The length of the statement  "				throw Error.UnrecognizedElement (String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 195.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadTableMapping,The length of the statement  "			throw Error.UnexpectedElement (XmlMappingConstant.Table' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 219.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadElementTypeMapping,The length of the statement  "		throw Error.UnexpectedElement (XmlMappingConstant.Type' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 218.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadTypeMapping,The length of the statement  "		throw Error.UnexpectedElement (XmlMappingConstant.Type' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 218.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadTypeMappingImpl,The length of the statement  "				throw Error.UnrecognizedElement (String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 195.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadAssociationMapping,The length of the statement  "		throw Error.UnexpectedElement (XmlMappingConstant.Association' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 225.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadColumnMapping,The length of the statement  "		throw Error.UnexpectedElement (XmlMappingConstant.Column' String.Format (System.Globalization.CultureInfo.InvariantCulture' "{0}{1}{2}"' reader.Prefix' String.IsNullOrEmpty (reader.Prefix) ? "" : "/"' reader.LocalName)); " is 220.
Long Statement,System.Data.Linq.Mapping,XmlMappingReader,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappingSource\XmlMappingReader.cs,ReadColumnMapping,The length of the statement  "	cm.UpdateCheck = (updateCheck == null) ? UpdateCheck.Always : (UpdateCheck)Enum.Parse (typeof(UpdateCheck)' updateCheck); " is 121.
Long Statement,LinqToSqlShared.Mapping,DatabaseMapping,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\DatabaseMapping.cs,IsType,The length of the statement  "	if (string.Compare (map.Name' type.Name' StringComparison.Ordinal) == 0 || string.Compare (map.Name' type.FullName' StringComparison.Ordinal) == 0 || string.Compare (map.Name' type.AssemblyQualifiedName' StringComparison.Ordinal) == 0) " is 235.
Long Statement,LinqToSqlShared.Mapping,MappingSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\MappingSystem.cs,IsSupportedIdentityType,The length of the statement  "	if (type == typeof(Guid) || type == typeof(DateTime) || type == typeof(DateTimeOffset) || type == typeof(TimeSpan) || type == typeof(Binary)) { " is 143.
Complex Conditional,System.Data.Linq,ChangeProcessor,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ChangeProcessor.cs,BuildEdgeMaps,The conditional expression  "isNew || pointsToDeleted || pointsToNew || this.HasAssociationChanged (assoc' item)"  is complex.
Complex Conditional,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetKeyFromPredicate,The conditional expression  "memex == null || memex.Expression == null || memex.Expression.NodeType != ExpressionType.Parameter || memex.Expression.Type != type.Type"  is complex.
Complex Conditional,System.Data.Linq,StandardChangeDirector,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\StandardChangeDirector.cs,GetAutoSyncMembers,The conditional expression  "(updateType == UpdateType.Insert && metaMember.AutoSync == AutoSync.OnInsert) || (updateType == UpdateType.Update && metaMember.AutoSync == AutoSync.OnUpdate) || metaMember.AutoSync == AutoSync.Always"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitJoin,The conditional expression  "rightJoin == null || (rightJoin.JoinType == SqlJoinType.Cross && @join.JoinType != SqlJoinType.CrossApply && @join.JoinType != SqlJoinType.OuterApply)"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,SqlHelpers,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlHelpers.cs,EscapeLikeText,The conditional expression  "!(forceEscaping || text.Contains ("%") || text.Contains ("_") || text.Contains ("[") || text.Contains ("^"))"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,SqlHelpers,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlHelpers.cs,EscapeLikeText,The conditional expression  "c == '%' || c == '_' || c == '[' || c == '^' || c == escape"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,PredictTypeForBinary,The conditional expression  "(!leftType.IsLargeType && leftType.Size.HasValue) && (!rightType.IsLargeType && rightType.Size.HasValue)"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The conditional expression  "p0 == 0 && s0 == 0 && p1 == 0 && s1 == 0"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The conditional expression  "sqlTypeB.Size.HasValue && sqlTypeB.Size.Value == ProviderConstants.LargeTypeSizeIndicator || sqlTypeA.Size.HasValue && sqlTypeA.Size.Value == ProviderConstants.LargeTypeSizeIndicator"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,SqlTypeConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlTypeConverter.cs,VisitUnaryOperator,The conditional expression  "oldClrType == typeof(char) && (oldSqlType.IsChar || oldSqlType.IsString) && newSqlType.IsNumeric"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The conditional expression  "sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The conditional expression  "sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)"  is complex.
Complex Conditional,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetCoercionMethodSupport,The conditional expression  "mc.Method.IsStatic && mc.SqlType.CanBeColumn && (mc.Method.Name == "op_Implicit" || mc.Method.Name == "op_Explicit")"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The conditional expression  "(actualType.IsSubclassOf (expectedType) || expectedType.IsSubclassOf (actualType)) && !actualType.IsValueType && !expectedType.IsValueType"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The conditional expression  "elementType.IsInterface || genExpectedTypeArgs [0].IsInterface || elementType.IsSubclassOf (genExpectedTypeArgs [0]) || genExpectedTypeArgs [0].IsSubclassOf (elementType) || TypeSystem.GetNonNullableType (elementType) == TypeSystem.GetNonNullableType (genExpectedTypeArgs [0])"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The conditional expression  "expectedType.IsArray && expectedType.GetArrayRank () == 1 && !actualType.IsArray && seqType.IsAssignableFrom (actualType) && expectedType.GetElementType ().IsAssignableFrom (elemType)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConvertToType,The conditional expression  "expectedType.IsClass && typeof(ICollection<>).MakeGenericType (elemType).IsAssignableFrom (expectedType) && expectedType.GetConstructor (System.Type.EmptyTypes) != null && seqType.IsAssignableFrom (actualType)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,ObjectReaderFactoryCache,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ObjectReaderFactoryCache.cs,GetFactory,The conditional expression  "elementType == info.Value.elementType && dataReaderType == info.Value.dataReaderType && mapping == info.Value.mapping && DataLoadOptions.ShapesAreEquivalent (options' info.Value.options) && SqlProjectionComparer.AreSimilar (projection' info.Value.projection)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,LockSelect,The conditional expression  "sel.Selection.NodeType != SqlNodeType.AliasRef || sel.Where != null || sel.OrderBy.Count > 0 || sel.GroupBy.Count > 0 || sel.Having != null || sel.Top != null || sel.OrderingType != SqlOrderingType.Default || sel.IsDistinct"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,ChooseConversionMethod,The conditional expression  "nnFromType == nnToType // same non-nullable .NET types  || (sfromType.IsString && sfromType.Equals (stoType)) // same SQL string types  || (nnFromType.IsEnum || nnToType.IsEnum)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitTake,The conditional expression  "mce != null && IsSequenceOperatorCall (mce) && mce.Method.Name == "Skip" && mce.Arguments.Count == 2"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitAggregate,The conditional expression  "!_outerNode && !isCount && (lambda == null || (lambda.Parameters.Count == 1 && lambda.Parameters [0] == lambda.Body)) && (mce != null) && IsSequenceOperatorCall (mce' "Select") && select.From is SqlAlias"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitAggregate,The conditional expression  "select.Selection.SqlType.IsRuntimeOnlyType && !IsGrouping (sequence.Type) && !isCount && lambda == null"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The conditional expression  "mc.Method.DeclaringType != typeof(string) && mc.Method.Name == "Contains" && !mc.Method.IsStatic && typeof(IList).IsAssignableFrom (mc.Method.DeclaringType) && mc.Type == typeof(bool) && mc.Arguments.Count == 1 && TypeSystem.GetElementType (mc.Method.DeclaringType).IsAssignableFrom (mc.Arguments [0].Type)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The conditional expression  "mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The conditional expression  "mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The conditional expression  "mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The conditional expression  "mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The conditional expression  "mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The conditional expression  "mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,BuildProjectionInternal,The conditional expression  "link != null && mm != link.Member && mm.IsAssociation && mm.MappedName == link.Member.MappedName && !mm.Association.IsMany && !IsPreloaded (link.Member.Member)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateEquals,The conditional expression  "!mtLeft.IsEntity && !mtRight.IsEntity && (eLeft.NodeType != SqlNodeType.New || eLeft.SqlType.CanBeColumn) && (eRight.NodeType != SqlNodeType.New || eRight.SqlType.CanBeColumn)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,Translator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\Translator.cs,TranslateLinkEquals,The conditional expression  "(link1 != null && link1.Member.IsAssociation && link1.Member.Association.IsForeignKey) || (link2 != null && link2.Member.IsAssociation && link2.Member.Association.IsForeignKey)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Common,ConnectionManager,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\ConnectionManager.cs,ReleaseConnection,The conditional expression  "this.users.Count == 0 && this.autoClose && this.transaction == null && System.Transactions.Transaction.Current == null"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitSearchedCase,The conditional expression  "(c.ClrType == typeof(bool) || c.ClrType == typeof(bool?)) && c.Whens.Count == 1 && c.Else != null"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitNew,The conditional expression  "mm.IsAssociation && ma.Expression != null && ma.Expression.NodeType != SqlNodeType.Link && this.shape != null && this.shape.IsPreloaded (mm.Member) && mm.LoadMethod == null && this.alreadyIncluded != null && !this.alreadyIncluded.Contains (otherType)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitSelect,The conditional expression  "this.binder.OptimizeLinkExpansions && (@select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates (@select) || @select.IsDistinct)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertToFetchedExpression,The conditional expression  "this.currentSelect != null && node != null && node.NodeType == SqlNodeType.Element && link.Member.IsAssociation && this.binder.OptimizeLinkExpansions"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,MultiSetMultiPlexer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MultiSetMultiPlexer.cs,VisitMultiset,The conditional expression  "(this.options & SqlMultiplexerOptionType.EnableBigJoin) != 0 && !this.hasBigJoin && this.canJoin && this.isTopLevel && this.outerSelect != null && !MultisetChecker.HasMultiset (sms.Select.Selection) && BigJoinChecker.CanBigJoin (sms.Select)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,OrderByLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\OrderByLifter.cs,VisitSelect,The conditional expression  "(this.topSelect || select.Top != null) && select.OrderingType != SqlOrderingType.Never && this.orders != null"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,PredicateLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\PredicateLifter.cs,VisitSelect,The conditional expression  "@select.Top != null || @select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates (@select) || @select.IsDistinct"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,CaseSimplifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\CaseSimplifier.cs,DistributeOperatorIntoCase,The conditional expression  "nt != SqlNodeType.EQ && nt != SqlNodeType.NE && nt != SqlNodeType.EQ2V && nt != SqlNodeType.NE2V"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,LiteralValidator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\LiteralValidator.cs,VisitValue,The conditional expression  "!value.IsClientSpecified && value.ClrType.IsClass && value.ClrType != typeof(string) && value.ClrType != typeof(Type) && value.Value != null"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,SelectionFlattener,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SelectionFlattener.cs,VisitColumn,The conditional expression  "c == null && col.Expression != null && !this.isInput && (!this.isNew || (this.isNew && !col.Expression.IsConstantColumn))"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,SelectionLifter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SelectionLifter.cs,VisitSelect,The conditional expression  "@select.Top != null || @select.GroupBy.Count > 0 || this.aggregateChecker.HasAggregates (@select) || @select.IsDistinct"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,SqlAliasDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlAliasDeflator.cs,IsTrivialSelect,The conditional expression  "@select.OrderBy.Count != 0 || @select.GroupBy.Count != 0 || @select.Having != null || @select.Top != null || @select.IsDistinct || @select.Where != null"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,LocalMapper,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\LocalMapper.cs,Visit,The conditional expression  "!this.isRemote && expression.NodeType != ExpressionType.Lambda && expression.NodeType != ExpressionType.Quote && DependenceChecker.IsIndependent (expression)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,SqlTopSelectDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlTopSelectDeflator.cs,IsTrivialSelect,The conditional expression  "@select.OrderBy.Count != 0 || @select.GroupBy.Count != 0 || @select.Having != null || @select.Top != null || @select.IsDistinct || @select.Where != null"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,VisitLike,The conditional expression  "!like.Expression.SqlType.IsUnicodeType && like.Pattern.SqlType.IsUnicodeType && (like.Pattern.NodeType == SqlNodeType.Value || like.Pattern.NodeType == SqlNodeType.ClientParameter)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,CoerceTypeFamily,The conditional expression  "(arg1.SqlType.HasPrecisionAndScale && arg2.SqlType.HasPrecisionAndScale && arg1.SqlType != arg2.SqlType) || sql.IsHighPrecisionDateTimeType (arg1) || sql.IsHighPrecisionDateTimeType (arg2)"  is complex.
Complex Conditional,System.Data.Linq.Provider.Visitors,ValidateNoInvalidComparison,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\ValidateNoInvalidComparison.cs,VisitBinaryOperator,The conditional expression  "bo.NodeType == SqlNodeType.EQ || bo.NodeType == SqlNodeType.NE || bo.NodeType == SqlNodeType.EQ2V || bo.NodeType == SqlNodeType.NE2V || bo.NodeType == SqlNodeType.GT || bo.NodeType == SqlNodeType.GE || bo.NodeType == SqlNodeType.LT || bo.NodeType == SqlNodeType.LE"  is complex.
Complex Conditional,System.Data.Linq.Mapping,AttributedMetaFunction,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaFunction.cs,AttributedMetaFunction,The conditional expression  "attrs.Length <= 1 && mi.ReturnType.IsGenericType && (mi.ReturnType.GetGenericTypeDefinition () == typeof(IEnumerable<>) || mi.ReturnType.GetGenericTypeDefinition () == typeof(ISingleResult<>) || mi.ReturnType.GetGenericTypeDefinition () == typeof(IQueryable<>))"  is complex.
Complex Conditional,System.Data.Linq.Mapping,AttributedRootType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedRootType.cs,AttributedRootType,The conditional expression  "(codeValue.GetType () == typeof(string) && ((string)codeValue).Trim ().Length == 0 && d.GetType () == typeof(string) && ((string)d).Trim ().Length == 0) || object.Equals (d' codeValue)"  is complex.
Complex Conditional,System.Data.Linq.Mapping,MappedRootType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedRootType.cs,MappedRootType,The conditional expression  "this.inheritanceDefault == null && (this.InheritanceCode != null || this.inheritanceCodes != null && this.inheritanceCodes.Count > 0)"  is complex.
Complex Conditional,System.Data.Linq.Mapping,MappedRootType,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\MappedMetaModel\MappedRootType.cs,InitInheritedType,The conditional expression  "(keyValue.GetType () == typeof(string) && ((string)keyValue).Trim ().Length == 0 && d.GetType () == typeof(string) && ((string)d).Trim ().Length == 0) || object.Equals (d' keyValue)"  is complex.
Complex Conditional,LinqToSqlShared.Mapping,MappingSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\MappingSystem.cs,IsSupportedIdentityType,The conditional expression  "type == typeof(Guid) || type == typeof(DateTime) || type == typeof(DateTimeOffset) || type == typeof(TimeSpan) || type == typeof(Binary)"  is complex.
Virtual Method Call from Constructor,System.Data.Linq,ObjectChangeConflict,F:\newReposMay17\FransBouma_LinqToSQL2\src\ChangeManagement\ObjectChangeConflict.cs,ObjectChangeConflict,The constructor "ObjectChangeConflict" calls a virtual method "CreateDataCopy".
Virtual Method Call from Constructor,System.Data.Linq.Mapping,AttributedMetaAssociation,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\AttributedMetaModel\AttributedMetaAssociation.cs,AttributedMetaAssociation,The constructor "AttributedMetaAssociation" calls a virtual method "GetMetaType".
Empty Catch Block,System.Data.Linq,SecurityUtils,F:\newReposMay17\FransBouma_LinqToSQL2\src\Miscellaneous\SecurityUtils.cs,HasReflectionPermission,The method has an empty catch block.
Empty Catch Block,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,DatabaseExists,The method has an empty catch block.
Magic Number,System.Data.Linq,ItemList,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\ItemList.cs,GrowItems,The following statement contains a magic number: Array.Resize (ref items' count == 0 ? 4 : count * 2);  
Magic Number,System.Data.Linq,ItemList,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\ItemList.cs,GrowItems,The following statement contains a magic number: Array.Resize (ref items' count == 0 ? 4 : count * 2);  
Magic Number,System.Data.Linq,DataContext,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataContext.cs,ExecuteQuery,The following statement contains a magic number: if (_miExecuteQuery == null) {  	_miExecuteQuery = typeof(DataContext).GetMethods ().Single (m => m.Name == "ExecuteQuery" && m.GetParameters ().Length == 2);  }  
Magic Number,System.Data.Linq,DataContext,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataContext.cs,ExecuteQuery,The following statement contains a magic number: _miExecuteQuery = typeof(DataContext).GetMethods ().Single (m => m.Name == "ExecuteQuery" && m.GetParameters ().Length == 2);  
Magic Number,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetCachedObject,The following statement contains a magic number: if (mc == null || mc.Arguments.Count < 1 || mc.Arguments.Count > 2)  	return null;  
Magic Number,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetKeysFromPredicate,The following statement contains a magic number: if (bex == null) {  	MethodCallExpression mex = expr as MethodCallExpression;  	if (mex != null && mex.Method.Name == "op_Equality" && mex.Arguments.Count == 2) {  		bex = Expression.Equal (mex.Arguments [0]' mex.Arguments [1]);  	} else {  		return false;  	}  }  
Magic Number,System.Data.Linq,CommonDataServices,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\DataServices.cs,GetKeysFromPredicate,The following statement contains a magic number: if (mex != null && mex.Method.Name == "op_Equality" && mex.Arguments.Count == 2) {  	bex = Expression.Equal (mex.Arguments [0]' mex.Arguments [1]);  } else {  	return false;  }  
Magic Number,System.Data.Linq,IdentityCache,F:\newReposMay17\FransBouma_LinqToSQL2\src\IdentityMangement\IdentityCache.cs,IdentityCache,The following statement contains a magic number: buckets = new int[7];  
Magic Number,System.Data.Linq,IdentityCache,F:\newReposMay17\FransBouma_LinqToSQL2\src\IdentityMangement\IdentityCache.cs,IdentityCache,The following statement contains a magic number: slots = new Slot[7];  
Magic Number,System.Data.Linq,SR,F:\newReposMay17\FransBouma_LinqToSQL2\src\SR.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {  	for (int i = 0; i < args.Length; i++) {  		string text = args [i] as string;  		if (text != null && text.Length > 1024) {  			args [i] = text.Substring (0' 1021) + "...";  		}  	}  	return string.Format (CultureInfo.CurrentCulture' @string' args);  }  
Magic Number,System.Data.Linq,SR,F:\newReposMay17\FransBouma_LinqToSQL2\src\SR.cs,GetString,The following statement contains a magic number: if (args != null && args.Length > 0) {  	for (int i = 0; i < args.Length; i++) {  		string text = args [i] as string;  		if (text != null && text.Length > 1024) {  			args [i] = text.Substring (0' 1021) + "...";  		}  	}  	return string.Format (CultureInfo.CurrentCulture' @string' args);  }  
Magic Number,System.Data.Linq,SR,F:\newReposMay17\FransBouma_LinqToSQL2\src\SR.cs,GetString,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	string text = args [i] as string;  	if (text != null && text.Length > 1024) {  		args [i] = text.Substring (0' 1021) + "...";  	}  }  
Magic Number,System.Data.Linq,SR,F:\newReposMay17\FransBouma_LinqToSQL2\src\SR.cs,GetString,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	string text = args [i] as string;  	if (text != null && text.Length > 1024) {  		args [i] = text.Substring (0' 1021) + "...";  	}  }  
Magic Number,System.Data.Linq,SR,F:\newReposMay17\FransBouma_LinqToSQL2\src\SR.cs,GetString,The following statement contains a magic number: if (text != null && text.Length > 1024) {  	args [i] = text.Substring (0' 1021) + "...";  }  
Magic Number,System.Data.Linq,SR,F:\newReposMay17\FransBouma_LinqToSQL2\src\SR.cs,GetString,The following statement contains a magic number: if (text != null && text.Length > 1024) {  	args [i] = text.Substring (0' 1021) + "...";  }  
Magic Number,System.Data.Linq,SR,F:\newReposMay17\FransBouma_LinqToSQL2\src\SR.cs,GetString,The following statement contains a magic number: args [i] = text.Substring (0' 1021) + "...";  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2000Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2000Provider.cs,From,The following statement contains a magic number: switch (tc) {  case TypeCode.Boolean:  	return SqlTypeSystem.Create (SqlDbType.Bit);  case TypeCode.Byte:  	return SqlTypeSystem.Create (SqlDbType.TinyInt);  case TypeCode.SByte:  case TypeCode.Int16:  	return SqlTypeSystem.Create (SqlDbType.SmallInt);  case TypeCode.Int32:  case TypeCode.UInt16:  	return SqlTypeSystem.Create (SqlDbType.Int);  case TypeCode.Int64:  case TypeCode.UInt32:  	return SqlTypeSystem.Create (SqlDbType.BigInt);  case TypeCode.UInt64:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 20' 0);  case TypeCode.Decimal:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  case TypeCode.Double:  	return SqlTypeSystem.Create (SqlDbType.Float);  case TypeCode.Single:  	return SqlTypeSystem.Create (SqlDbType.Real);  case TypeCode.Char:  	return SqlTypeSystem.Create (SqlDbType.NChar' 1);  case TypeCode.String:  	return GetBestType (SqlDbType.NVarChar' size);  case TypeCode.DateTime:  	return SqlTypeSystem.Create (SqlDbType.DateTime);  case TypeCode.Object: {  	if (type == typeof(Guid))  		return SqlTypeSystem.Create (SqlDbType.UniqueIdentifier);  	if (type == typeof(byte[]) || type == typeof(Binary))  		return GetBestType (SqlDbType.VarBinary' size);  	if (type == typeof(char[]))  		return GetBestType (SqlDbType.NVarChar' size);  	if (type == typeof(TimeSpan))  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	if (type == typeof(System.Xml.Linq.XDocument) || type == typeof(System.Xml.Linq.XElement))  		return ProviderConstants.NTextType;  	// else UDT?  	return new SqlType (type);  }  default:  	throw Error.UnexpectedTypeCode (tc);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2000Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2000Provider.cs,From,The following statement contains a magic number: switch (tc) {  case TypeCode.Boolean:  	return SqlTypeSystem.Create (SqlDbType.Bit);  case TypeCode.Byte:  	return SqlTypeSystem.Create (SqlDbType.TinyInt);  case TypeCode.SByte:  case TypeCode.Int16:  	return SqlTypeSystem.Create (SqlDbType.SmallInt);  case TypeCode.Int32:  case TypeCode.UInt16:  	return SqlTypeSystem.Create (SqlDbType.Int);  case TypeCode.Int64:  case TypeCode.UInt32:  	return SqlTypeSystem.Create (SqlDbType.BigInt);  case TypeCode.UInt64:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 20' 0);  case TypeCode.Decimal:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  case TypeCode.Double:  	return SqlTypeSystem.Create (SqlDbType.Float);  case TypeCode.Single:  	return SqlTypeSystem.Create (SqlDbType.Real);  case TypeCode.Char:  	return SqlTypeSystem.Create (SqlDbType.NChar' 1);  case TypeCode.String:  	return GetBestType (SqlDbType.NVarChar' size);  case TypeCode.DateTime:  	return SqlTypeSystem.Create (SqlDbType.DateTime);  case TypeCode.Object: {  	if (type == typeof(Guid))  		return SqlTypeSystem.Create (SqlDbType.UniqueIdentifier);  	if (type == typeof(byte[]) || type == typeof(Binary))  		return GetBestType (SqlDbType.VarBinary' size);  	if (type == typeof(char[]))  		return GetBestType (SqlDbType.NVarChar' size);  	if (type == typeof(TimeSpan))  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	if (type == typeof(System.Xml.Linq.XDocument) || type == typeof(System.Xml.Linq.XElement))  		return ProviderConstants.NTextType;  	// else UDT?  	return new SqlType (type);  }  default:  	throw Error.UnexpectedTypeCode (tc);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2000Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2000Provider.cs,From,The following statement contains a magic number: switch (tc) {  case TypeCode.Boolean:  	return SqlTypeSystem.Create (SqlDbType.Bit);  case TypeCode.Byte:  	return SqlTypeSystem.Create (SqlDbType.TinyInt);  case TypeCode.SByte:  case TypeCode.Int16:  	return SqlTypeSystem.Create (SqlDbType.SmallInt);  case TypeCode.Int32:  case TypeCode.UInt16:  	return SqlTypeSystem.Create (SqlDbType.Int);  case TypeCode.Int64:  case TypeCode.UInt32:  	return SqlTypeSystem.Create (SqlDbType.BigInt);  case TypeCode.UInt64:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 20' 0);  case TypeCode.Decimal:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  case TypeCode.Double:  	return SqlTypeSystem.Create (SqlDbType.Float);  case TypeCode.Single:  	return SqlTypeSystem.Create (SqlDbType.Real);  case TypeCode.Char:  	return SqlTypeSystem.Create (SqlDbType.NChar' 1);  case TypeCode.String:  	return GetBestType (SqlDbType.NVarChar' size);  case TypeCode.DateTime:  	return SqlTypeSystem.Create (SqlDbType.DateTime);  case TypeCode.Object: {  	if (type == typeof(Guid))  		return SqlTypeSystem.Create (SqlDbType.UniqueIdentifier);  	if (type == typeof(byte[]) || type == typeof(Binary))  		return GetBestType (SqlDbType.VarBinary' size);  	if (type == typeof(char[]))  		return GetBestType (SqlDbType.NVarChar' size);  	if (type == typeof(TimeSpan))  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	if (type == typeof(System.Xml.Linq.XDocument) || type == typeof(System.Xml.Linq.XElement))  		return ProviderConstants.NTextType;  	// else UDT?  	return new SqlType (type);  }  default:  	throw Error.UnexpectedTypeCode (tc);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2000Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2000Provider.cs,From,The following statement contains a magic number: return SqlTypeSystem.Create (SqlDbType.Decimal' 20' 0);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2000Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2000Provider.cs,From,The following statement contains a magic number: return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2000Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2000Provider.cs,From,The following statement contains a magic number: return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,From,The following statement contains a magic number: switch (tc) {  case TypeCode.Boolean:  	return SqlTypeSystem.Create (SqlDbType.Bit);  case TypeCode.Byte:  	return SqlTypeSystem.Create (SqlDbType.TinyInt);  case TypeCode.SByte:  case TypeCode.Int16:  	return SqlTypeSystem.Create (SqlDbType.SmallInt);  case TypeCode.Int32:  case TypeCode.UInt16:  	return SqlTypeSystem.Create (SqlDbType.Int);  case TypeCode.Int64:  case TypeCode.UInt32:  	return SqlTypeSystem.Create (SqlDbType.BigInt);  case TypeCode.UInt64:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 20' 0);  case TypeCode.Decimal:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  case TypeCode.Double:  	return SqlTypeSystem.Create (SqlDbType.Float);  case TypeCode.Single:  	return SqlTypeSystem.Create (SqlDbType.Real);  case TypeCode.Char:  	return SqlTypeSystem.Create (SqlDbType.NChar' 1);  case TypeCode.String:  	return GetBestType (SqlDbType.NVarChar' size);  case TypeCode.DateTime:  	return SqlTypeSystem.Create (SqlDbType.DateTime);  case TypeCode.Object: {  	if (type == typeof(Guid))  		return SqlTypeSystem.Create (SqlDbType.UniqueIdentifier);  	if (type == typeof(byte[]) || type == typeof(Binary))  		return GetBestType (SqlDbType.VarBinary' size);  	if (type == typeof(char[]))  		return GetBestType (SqlDbType.NVarChar' size);  	if (type == typeof(TimeSpan))  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	if (type == typeof(System.Xml.Linq.XDocument) || type == typeof(System.Xml.Linq.XElement))  		return ProviderConstants.XmlType;  	// else UDT?  	return new SqlType (type);  }  default:  	throw Error.UnexpectedTypeCode (tc);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,From,The following statement contains a magic number: switch (tc) {  case TypeCode.Boolean:  	return SqlTypeSystem.Create (SqlDbType.Bit);  case TypeCode.Byte:  	return SqlTypeSystem.Create (SqlDbType.TinyInt);  case TypeCode.SByte:  case TypeCode.Int16:  	return SqlTypeSystem.Create (SqlDbType.SmallInt);  case TypeCode.Int32:  case TypeCode.UInt16:  	return SqlTypeSystem.Create (SqlDbType.Int);  case TypeCode.Int64:  case TypeCode.UInt32:  	return SqlTypeSystem.Create (SqlDbType.BigInt);  case TypeCode.UInt64:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 20' 0);  case TypeCode.Decimal:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  case TypeCode.Double:  	return SqlTypeSystem.Create (SqlDbType.Float);  case TypeCode.Single:  	return SqlTypeSystem.Create (SqlDbType.Real);  case TypeCode.Char:  	return SqlTypeSystem.Create (SqlDbType.NChar' 1);  case TypeCode.String:  	return GetBestType (SqlDbType.NVarChar' size);  case TypeCode.DateTime:  	return SqlTypeSystem.Create (SqlDbType.DateTime);  case TypeCode.Object: {  	if (type == typeof(Guid))  		return SqlTypeSystem.Create (SqlDbType.UniqueIdentifier);  	if (type == typeof(byte[]) || type == typeof(Binary))  		return GetBestType (SqlDbType.VarBinary' size);  	if (type == typeof(char[]))  		return GetBestType (SqlDbType.NVarChar' size);  	if (type == typeof(TimeSpan))  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	if (type == typeof(System.Xml.Linq.XDocument) || type == typeof(System.Xml.Linq.XElement))  		return ProviderConstants.XmlType;  	// else UDT?  	return new SqlType (type);  }  default:  	throw Error.UnexpectedTypeCode (tc);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,From,The following statement contains a magic number: switch (tc) {  case TypeCode.Boolean:  	return SqlTypeSystem.Create (SqlDbType.Bit);  case TypeCode.Byte:  	return SqlTypeSystem.Create (SqlDbType.TinyInt);  case TypeCode.SByte:  case TypeCode.Int16:  	return SqlTypeSystem.Create (SqlDbType.SmallInt);  case TypeCode.Int32:  case TypeCode.UInt16:  	return SqlTypeSystem.Create (SqlDbType.Int);  case TypeCode.Int64:  case TypeCode.UInt32:  	return SqlTypeSystem.Create (SqlDbType.BigInt);  case TypeCode.UInt64:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 20' 0);  case TypeCode.Decimal:  	return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  case TypeCode.Double:  	return SqlTypeSystem.Create (SqlDbType.Float);  case TypeCode.Single:  	return SqlTypeSystem.Create (SqlDbType.Real);  case TypeCode.Char:  	return SqlTypeSystem.Create (SqlDbType.NChar' 1);  case TypeCode.String:  	return GetBestType (SqlDbType.NVarChar' size);  case TypeCode.DateTime:  	return SqlTypeSystem.Create (SqlDbType.DateTime);  case TypeCode.Object: {  	if (type == typeof(Guid))  		return SqlTypeSystem.Create (SqlDbType.UniqueIdentifier);  	if (type == typeof(byte[]) || type == typeof(Binary))  		return GetBestType (SqlDbType.VarBinary' size);  	if (type == typeof(char[]))  		return GetBestType (SqlDbType.NVarChar' size);  	if (type == typeof(TimeSpan))  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	if (type == typeof(System.Xml.Linq.XDocument) || type == typeof(System.Xml.Linq.XElement))  		return ProviderConstants.XmlType;  	// else UDT?  	return new SqlType (type);  }  default:  	throw Error.UnexpectedTypeCode (tc);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,From,The following statement contains a magic number: return SqlTypeSystem.Create (SqlDbType.Decimal' 20' 0);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,From,The following statement contains a magic number: return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,From,The following statement contains a magic number: return SqlTypeSystem.Create (SqlDbType.Decimal' 29' size ?? 4);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,GetCreateSchemaForTableCommand,The following statement contains a magic number: if ((parts.Count) < 2) {  	return null;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The following statement contains a magic number: switch (targetType) {  case SqlDbType.NChar:  case SqlDbType.NVarChar:  	maxSize = 4000;  	break;  case SqlDbType.Char:  case SqlDbType.VarChar:  case SqlDbType.Binary:  case SqlDbType.VarBinary:  	maxSize = 8000;  	break;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The following statement contains a magic number: switch (targetType) {  case SqlDbType.NChar:  case SqlDbType.NVarChar:  	maxSize = 4000;  	break;  case SqlDbType.Char:  case SqlDbType.VarChar:  case SqlDbType.Binary:  case SqlDbType.VarBinary:  	maxSize = 8000;  	break;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The following statement contains a magic number: maxSize = 4000;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The following statement contains a magic number: maxSize = 8000;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetLargestDeclarableSize,The following statement contains a magic number: switch (declaredType.SqlDbType) {  case SqlDbType.Image:  case SqlDbType.Binary:  case SqlDbType.VarChar:  	return 8000;  case SqlDbType.NVarChar:  	return 4000;  default:  	return null;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetLargestDeclarableSize,The following statement contains a magic number: switch (declaredType.SqlDbType) {  case SqlDbType.Image:  case SqlDbType.Binary:  case SqlDbType.VarChar:  	return 8000;  case SqlDbType.NVarChar:  	return 4000;  default:  	return null;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetLargestDeclarableSize,The following statement contains a magic number: return 8000;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetLargestDeclarableSize,The following statement contains a magic number: return 4000;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: switch (functionCall.Name) {  case "LEN":  case "DATALENGTH":  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.VarChar:  	case SqlDbType.VarBinary:  		if (arg0.IsLargeType) {  			return SqlTypeSystem.Create (SqlDbType.BigInt);  		} else {  			return SqlTypeSystem.Create (SqlDbType.Int);  		}  	default:  		return SqlTypeSystem.Create (SqlDbType.Int);  	}  case "ABS":  case "SIGN":  case "ROUND":  case "CEILING":  case "FLOOR":  case "POWER":  	switch (arg0.SqlDbType) {  	case SqlDbType.TinyInt:  	case SqlDbType.Int:  	case SqlDbType.SmallInt:  		return SqlTypeSystem.Create (SqlDbType.Int);  	case SqlDbType.Float:  	case SqlDbType.Real:  		return SqlTypeSystem.Create (SqlDbType.Float);  	default:  		return arg0;  	}  case "PATINDEX":  case "CHARINDEX":  	if (arg1.IsLargeType)  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	return SqlTypeSystem.Create (SqlDbType.Int);  case "SUBSTRING":  	if (functionCall.Arguments [2].NodeType == SqlNodeType.Value) {  		SqlValue val = (SqlValue)functionCall.Arguments [2];  		if (val.Value is int) {  			switch (arg0.SqlDbType) {  			case SqlDbType.NVarChar:  			case SqlDbType.NChar:  			case SqlDbType.VarChar:  			case SqlDbType.Char:  				return SqlTypeSystem.Create (arg0.SqlDbType' (int)val.Value);  			default:  				return null;  			}  		}  	}  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.NChar:  		return SqlTypeSystem.Create (SqlDbType.NVarChar);  	case SqlDbType.VarChar:  	case SqlDbType.Char:  		return SqlTypeSystem.Create (SqlDbType.VarChar);  	default:  		return null;  	}  case "STUFF":  	// if the stuff call is an insertion  and is strictly additive  	// (no deletion of characters) the return type is the same as   	// a concatenation  	if (functionCall.Arguments.Count == 4) {  		SqlValue delLength = functionCall.Arguments [2] as SqlValue;  		if (delLength != null && (int)delLength.Value == 0) {  			return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  		}  	}  	return null;  case "LOWER":  case "UPPER":  case "RTRIM":  case "LTRIM":  case "INSERT":  case "REPLACE":  case "LEFT":  case "RIGHT":  case "REVERSE":  	return arg0;  default:  	return null;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: switch (functionCall.Name) {  case "LEN":  case "DATALENGTH":  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.VarChar:  	case SqlDbType.VarBinary:  		if (arg0.IsLargeType) {  			return SqlTypeSystem.Create (SqlDbType.BigInt);  		} else {  			return SqlTypeSystem.Create (SqlDbType.Int);  		}  	default:  		return SqlTypeSystem.Create (SqlDbType.Int);  	}  case "ABS":  case "SIGN":  case "ROUND":  case "CEILING":  case "FLOOR":  case "POWER":  	switch (arg0.SqlDbType) {  	case SqlDbType.TinyInt:  	case SqlDbType.Int:  	case SqlDbType.SmallInt:  		return SqlTypeSystem.Create (SqlDbType.Int);  	case SqlDbType.Float:  	case SqlDbType.Real:  		return SqlTypeSystem.Create (SqlDbType.Float);  	default:  		return arg0;  	}  case "PATINDEX":  case "CHARINDEX":  	if (arg1.IsLargeType)  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	return SqlTypeSystem.Create (SqlDbType.Int);  case "SUBSTRING":  	if (functionCall.Arguments [2].NodeType == SqlNodeType.Value) {  		SqlValue val = (SqlValue)functionCall.Arguments [2];  		if (val.Value is int) {  			switch (arg0.SqlDbType) {  			case SqlDbType.NVarChar:  			case SqlDbType.NChar:  			case SqlDbType.VarChar:  			case SqlDbType.Char:  				return SqlTypeSystem.Create (arg0.SqlDbType' (int)val.Value);  			default:  				return null;  			}  		}  	}  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.NChar:  		return SqlTypeSystem.Create (SqlDbType.NVarChar);  	case SqlDbType.VarChar:  	case SqlDbType.Char:  		return SqlTypeSystem.Create (SqlDbType.VarChar);  	default:  		return null;  	}  case "STUFF":  	// if the stuff call is an insertion  and is strictly additive  	// (no deletion of characters) the return type is the same as   	// a concatenation  	if (functionCall.Arguments.Count == 4) {  		SqlValue delLength = functionCall.Arguments [2] as SqlValue;  		if (delLength != null && (int)delLength.Value == 0) {  			return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  		}  	}  	return null;  case "LOWER":  case "UPPER":  case "RTRIM":  case "LTRIM":  case "INSERT":  case "REPLACE":  case "LEFT":  case "RIGHT":  case "REVERSE":  	return arg0;  default:  	return null;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: switch (functionCall.Name) {  case "LEN":  case "DATALENGTH":  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.VarChar:  	case SqlDbType.VarBinary:  		if (arg0.IsLargeType) {  			return SqlTypeSystem.Create (SqlDbType.BigInt);  		} else {  			return SqlTypeSystem.Create (SqlDbType.Int);  		}  	default:  		return SqlTypeSystem.Create (SqlDbType.Int);  	}  case "ABS":  case "SIGN":  case "ROUND":  case "CEILING":  case "FLOOR":  case "POWER":  	switch (arg0.SqlDbType) {  	case SqlDbType.TinyInt:  	case SqlDbType.Int:  	case SqlDbType.SmallInt:  		return SqlTypeSystem.Create (SqlDbType.Int);  	case SqlDbType.Float:  	case SqlDbType.Real:  		return SqlTypeSystem.Create (SqlDbType.Float);  	default:  		return arg0;  	}  case "PATINDEX":  case "CHARINDEX":  	if (arg1.IsLargeType)  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	return SqlTypeSystem.Create (SqlDbType.Int);  case "SUBSTRING":  	if (functionCall.Arguments [2].NodeType == SqlNodeType.Value) {  		SqlValue val = (SqlValue)functionCall.Arguments [2];  		if (val.Value is int) {  			switch (arg0.SqlDbType) {  			case SqlDbType.NVarChar:  			case SqlDbType.NChar:  			case SqlDbType.VarChar:  			case SqlDbType.Char:  				return SqlTypeSystem.Create (arg0.SqlDbType' (int)val.Value);  			default:  				return null;  			}  		}  	}  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.NChar:  		return SqlTypeSystem.Create (SqlDbType.NVarChar);  	case SqlDbType.VarChar:  	case SqlDbType.Char:  		return SqlTypeSystem.Create (SqlDbType.VarChar);  	default:  		return null;  	}  case "STUFF":  	// if the stuff call is an insertion  and is strictly additive  	// (no deletion of characters) the return type is the same as   	// a concatenation  	if (functionCall.Arguments.Count == 4) {  		SqlValue delLength = functionCall.Arguments [2] as SqlValue;  		if (delLength != null && (int)delLength.Value == 0) {  			return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  		}  	}  	return null;  case "LOWER":  case "UPPER":  case "RTRIM":  case "LTRIM":  case "INSERT":  case "REPLACE":  case "LEFT":  case "RIGHT":  case "REVERSE":  	return arg0;  default:  	return null;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: switch (functionCall.Name) {  case "LEN":  case "DATALENGTH":  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.VarChar:  	case SqlDbType.VarBinary:  		if (arg0.IsLargeType) {  			return SqlTypeSystem.Create (SqlDbType.BigInt);  		} else {  			return SqlTypeSystem.Create (SqlDbType.Int);  		}  	default:  		return SqlTypeSystem.Create (SqlDbType.Int);  	}  case "ABS":  case "SIGN":  case "ROUND":  case "CEILING":  case "FLOOR":  case "POWER":  	switch (arg0.SqlDbType) {  	case SqlDbType.TinyInt:  	case SqlDbType.Int:  	case SqlDbType.SmallInt:  		return SqlTypeSystem.Create (SqlDbType.Int);  	case SqlDbType.Float:  	case SqlDbType.Real:  		return SqlTypeSystem.Create (SqlDbType.Float);  	default:  		return arg0;  	}  case "PATINDEX":  case "CHARINDEX":  	if (arg1.IsLargeType)  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	return SqlTypeSystem.Create (SqlDbType.Int);  case "SUBSTRING":  	if (functionCall.Arguments [2].NodeType == SqlNodeType.Value) {  		SqlValue val = (SqlValue)functionCall.Arguments [2];  		if (val.Value is int) {  			switch (arg0.SqlDbType) {  			case SqlDbType.NVarChar:  			case SqlDbType.NChar:  			case SqlDbType.VarChar:  			case SqlDbType.Char:  				return SqlTypeSystem.Create (arg0.SqlDbType' (int)val.Value);  			default:  				return null;  			}  		}  	}  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.NChar:  		return SqlTypeSystem.Create (SqlDbType.NVarChar);  	case SqlDbType.VarChar:  	case SqlDbType.Char:  		return SqlTypeSystem.Create (SqlDbType.VarChar);  	default:  		return null;  	}  case "STUFF":  	// if the stuff call is an insertion  and is strictly additive  	// (no deletion of characters) the return type is the same as   	// a concatenation  	if (functionCall.Arguments.Count == 4) {  		SqlValue delLength = functionCall.Arguments [2] as SqlValue;  		if (delLength != null && (int)delLength.Value == 0) {  			return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  		}  	}  	return null;  case "LOWER":  case "UPPER":  case "RTRIM":  case "LTRIM":  case "INSERT":  case "REPLACE":  case "LEFT":  case "RIGHT":  case "REVERSE":  	return arg0;  default:  	return null;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: switch (functionCall.Name) {  case "LEN":  case "DATALENGTH":  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.VarChar:  	case SqlDbType.VarBinary:  		if (arg0.IsLargeType) {  			return SqlTypeSystem.Create (SqlDbType.BigInt);  		} else {  			return SqlTypeSystem.Create (SqlDbType.Int);  		}  	default:  		return SqlTypeSystem.Create (SqlDbType.Int);  	}  case "ABS":  case "SIGN":  case "ROUND":  case "CEILING":  case "FLOOR":  case "POWER":  	switch (arg0.SqlDbType) {  	case SqlDbType.TinyInt:  	case SqlDbType.Int:  	case SqlDbType.SmallInt:  		return SqlTypeSystem.Create (SqlDbType.Int);  	case SqlDbType.Float:  	case SqlDbType.Real:  		return SqlTypeSystem.Create (SqlDbType.Float);  	default:  		return arg0;  	}  case "PATINDEX":  case "CHARINDEX":  	if (arg1.IsLargeType)  		return SqlTypeSystem.Create (SqlDbType.BigInt);  	return SqlTypeSystem.Create (SqlDbType.Int);  case "SUBSTRING":  	if (functionCall.Arguments [2].NodeType == SqlNodeType.Value) {  		SqlValue val = (SqlValue)functionCall.Arguments [2];  		if (val.Value is int) {  			switch (arg0.SqlDbType) {  			case SqlDbType.NVarChar:  			case SqlDbType.NChar:  			case SqlDbType.VarChar:  			case SqlDbType.Char:  				return SqlTypeSystem.Create (arg0.SqlDbType' (int)val.Value);  			default:  				return null;  			}  		}  	}  	switch (arg0.SqlDbType) {  	case SqlDbType.NVarChar:  	case SqlDbType.NChar:  		return SqlTypeSystem.Create (SqlDbType.NVarChar);  	case SqlDbType.VarChar:  	case SqlDbType.Char:  		return SqlTypeSystem.Create (SqlDbType.VarChar);  	default:  		return null;  	}  case "STUFF":  	// if the stuff call is an insertion  and is strictly additive  	// (no deletion of characters) the return type is the same as   	// a concatenation  	if (functionCall.Arguments.Count == 4) {  		SqlValue delLength = functionCall.Arguments [2] as SqlValue;  		if (delLength != null && (int)delLength.Value == 0) {  			return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  		}  	}  	return null;  case "LOWER":  case "UPPER":  case "RTRIM":  case "LTRIM":  case "INSERT":  case "REPLACE":  case "LEFT":  case "RIGHT":  case "REVERSE":  	return arg0;  default:  	return null;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: if (functionCall.Arguments [2].NodeType == SqlNodeType.Value) {  	SqlValue val = (SqlValue)functionCall.Arguments [2];  	if (val.Value is int) {  		switch (arg0.SqlDbType) {  		case SqlDbType.NVarChar:  		case SqlDbType.NChar:  		case SqlDbType.VarChar:  		case SqlDbType.Char:  			return SqlTypeSystem.Create (arg0.SqlDbType' (int)val.Value);  		default:  			return null;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: if (functionCall.Arguments [2].NodeType == SqlNodeType.Value) {  	SqlValue val = (SqlValue)functionCall.Arguments [2];  	if (val.Value is int) {  		switch (arg0.SqlDbType) {  		case SqlDbType.NVarChar:  		case SqlDbType.NChar:  		case SqlDbType.VarChar:  		case SqlDbType.Char:  			return SqlTypeSystem.Create (arg0.SqlDbType' (int)val.Value);  		default:  			return null;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: if (functionCall.Arguments.Count == 4) {  	SqlValue delLength = functionCall.Arguments [2] as SqlValue;  	if (delLength != null && (int)delLength.Value == 0) {  		return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: if (functionCall.Arguments.Count == 4) {  	SqlValue delLength = functionCall.Arguments [2] as SqlValue;  	if (delLength != null && (int)delLength.Value == 0) {  		return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: if (functionCall.Arguments.Count == 4) {  	SqlValue delLength = functionCall.Arguments [2] as SqlValue;  	if (delLength != null && (int)delLength.Value == 0) {  		return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: if (delLength != null && (int)delLength.Value == 0) {  	return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,ReturnTypeOfFunction,The following statement contains a magic number: return PredictTypeForBinary (SqlNodeType.Concat' functionCall.Arguments [0].SqlType' functionCall.Arguments [3].SqlType);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The following statement contains a magic number: if (sqlTypeA.HasPrecisionAndScale && sqlTypeB.HasPrecisionAndScale && bestType.SqlDbType == SqlDbType.Decimal) {  	int p0 = sqlTypeA.Precision;  	int s0 = sqlTypeA.Scale;  	int p1 = sqlTypeB.Precision;  	int s1 = sqlTypeB.Scale;  	// precision and scale may be zero if this is an unsized type.  	if (p0 == 0 && s0 == 0 && p1 == 0 && s1 == 0) {  		return SqlTypeSystem.Create (bestType.SqlDbType);  	} else if (p0 == 0 && s0 == 0) {  		return SqlTypeSystem.Create (bestType.SqlDbType' p1' s1);  	} else if (p1 == 0 && s1 == 0) {  		return SqlTypeSystem.Create (bestType.SqlDbType' p0' s0);  	}  	// determine best scale/precision  	int bestLeft = Math.Max (p0 - s0' p1 - s1);  	int bestRight = Math.Max (s0' s1);  	int precision = Math.Min (bestLeft + bestRight' 38);  	return SqlTypeSystem.Create (bestType.SqlDbType' precision' /*scale*/bestRight);  } else {  	// determine the best size  	int? bestSize = null;  	if (sqlTypeA.Size.HasValue && sqlTypeB.Size.HasValue) {  		bestSize = (sqlTypeB.Size > sqlTypeA.Size) ? sqlTypeB.Size : sqlTypeA.Size;  	}  	if (sqlTypeB.Size.HasValue && sqlTypeB.Size.Value == ProviderConstants.LargeTypeSizeIndicator || sqlTypeA.Size.HasValue && sqlTypeA.Size.Value == ProviderConstants.LargeTypeSizeIndicator) {  		// the large type size trumps all  		bestSize = ProviderConstants.LargeTypeSizeIndicator;  	}  	bestType = new SqlType (bestType.SqlDbType' bestSize);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,From,The following statement contains a magic number: if (clrType == typeof(string)) {  	string str = (string)o;  	return From (clrType' str.Length);  } else if (clrType == typeof(bool)) {  	return From (typeof(int));  } else if (clrType.IsArray) {  	Array arr = (Array)o;  	return From (clrType' arr.Length);  } else if (clrType == typeof(decimal)) {  	decimal d = (decimal)o;  	// The CLR stores the scale of a decimal value in bits  	// 16 to 23 (i.e.' mask 0x00FF0000) of the fourth int.   	int scale = (Decimal.GetBits (d) [3] & 0x00FF0000) >> 16;  	return From (clrType' scale);  } else {  	return From (clrType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,From,The following statement contains a magic number: if (clrType == typeof(string)) {  	string str = (string)o;  	return From (clrType' str.Length);  } else if (clrType == typeof(bool)) {  	return From (typeof(int));  } else if (clrType.IsArray) {  	Array arr = (Array)o;  	return From (clrType' arr.Length);  } else if (clrType == typeof(decimal)) {  	decimal d = (decimal)o;  	// The CLR stores the scale of a decimal value in bits  	// 16 to 23 (i.e.' mask 0x00FF0000) of the fourth int.   	int scale = (Decimal.GetBits (d) [3] & 0x00FF0000) >> 16;  	return From (clrType' scale);  } else {  	return From (clrType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,From,The following statement contains a magic number: if (clrType == typeof(bool)) {  	return From (typeof(int));  } else if (clrType.IsArray) {  	Array arr = (Array)o;  	return From (clrType' arr.Length);  } else if (clrType == typeof(decimal)) {  	decimal d = (decimal)o;  	// The CLR stores the scale of a decimal value in bits  	// 16 to 23 (i.e.' mask 0x00FF0000) of the fourth int.   	int scale = (Decimal.GetBits (d) [3] & 0x00FF0000) >> 16;  	return From (clrType' scale);  } else {  	return From (clrType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,From,The following statement contains a magic number: if (clrType == typeof(bool)) {  	return From (typeof(int));  } else if (clrType.IsArray) {  	Array arr = (Array)o;  	return From (clrType' arr.Length);  } else if (clrType == typeof(decimal)) {  	decimal d = (decimal)o;  	// The CLR stores the scale of a decimal value in bits  	// 16 to 23 (i.e.' mask 0x00FF0000) of the fourth int.   	int scale = (Decimal.GetBits (d) [3] & 0x00FF0000) >> 16;  	return From (clrType' scale);  } else {  	return From (clrType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,From,The following statement contains a magic number: if (clrType.IsArray) {  	Array arr = (Array)o;  	return From (clrType' arr.Length);  } else if (clrType == typeof(decimal)) {  	decimal d = (decimal)o;  	// The CLR stores the scale of a decimal value in bits  	// 16 to 23 (i.e.' mask 0x00FF0000) of the fourth int.   	int scale = (Decimal.GetBits (d) [3] & 0x00FF0000) >> 16;  	return From (clrType' scale);  } else {  	return From (clrType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,From,The following statement contains a magic number: if (clrType.IsArray) {  	Array arr = (Array)o;  	return From (clrType' arr.Length);  } else if (clrType == typeof(decimal)) {  	decimal d = (decimal)o;  	// The CLR stores the scale of a decimal value in bits  	// 16 to 23 (i.e.' mask 0x00FF0000) of the fourth int.   	int scale = (Decimal.GetBits (d) [3] & 0x00FF0000) >> 16;  	return From (clrType' scale);  } else {  	return From (clrType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,From,The following statement contains a magic number: if (clrType == typeof(decimal)) {  	decimal d = (decimal)o;  	// The CLR stores the scale of a decimal value in bits  	// 16 to 23 (i.e.' mask 0x00FF0000) of the fourth int.   	int scale = (Decimal.GetBits (d) [3] & 0x00FF0000) >> 16;  	return From (clrType' scale);  } else {  	return From (clrType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,From,The following statement contains a magic number: if (clrType == typeof(decimal)) {  	decimal d = (decimal)o;  	// The CLR stores the scale of a decimal value in bits  	// 16 to 23 (i.e.' mask 0x00FF0000) of the fourth int.   	int scale = (Decimal.GetBits (d) [3] & 0x00FF0000) >> 16;  	return From (clrType' scale);  } else {  	return From (clrType);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlTypeConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlTypeConverter.cs,ConvertDoubleToString,The following statement contains a magic number: return sql.FunctionCall (resultClrType' "CONVERT"' new SqlExpression[] {  	nvarchar'  	expr'  	sql.ValueFromObject (2' false' expr.SourceExpression)  }' expr.SourceExpression);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetHashCode,The following statement contains a magic number: return hash ^ this.sqlDbType.GetHashCode () ^ (this.Size ?? 0) ^ (this.Precision) ^ (this.Scale << 8);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: switch (type) {  case SqlDbType.Binary:  	return 0;  case SqlDbType.VarBinary:  	return 1;  case SqlDbType.VarChar:  	return 2;  case SqlDbType.Char:  	return 3;  case SqlDbType.NChar:  	return 4;  case SqlDbType.NVarChar:  	return 5;  case SqlDbType.UniqueIdentifier:  	return 6;  case SqlDbType.Timestamp:  	return 7;  case SqlDbType.Image:  	return 8;  case SqlDbType.Text:  	return 9;  case SqlDbType.NText:  	return 10;  case SqlDbType.Bit:  	return 11;  case SqlDbType.TinyInt:  	return 12;  case SqlDbType.SmallInt:  	return 13;  case SqlDbType.Int:  	return 14;  case SqlDbType.BigInt:  	return 15;  case SqlDbType.SmallMoney:  	return 16;  case SqlDbType.Money:  	return 17;  case SqlDbType.Decimal:  	return 18;  case SqlDbType.Real:  	return 19;  case SqlDbType.Float:  	return 20;  case SqlDbType.Date:  	return 21;  case SqlDbType.Time:  	return 22;  case SqlDbType.SmallDateTime:  	return 23;  case SqlDbType.DateTime:  	return 24;  case SqlDbType.DateTime2:  	return 25;  case SqlDbType.DateTimeOffset:  	return 26;  case SqlDbType.Xml:  	return 27;  case SqlDbType.Variant:  	return 28;  case SqlDbType.Udt:  	return 29;  default:  	throw Error.UnexpectedTypeCode (type);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 2;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 3;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 4;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 5;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 6;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 7;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 8;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 9;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 10;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 11;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 12;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 13;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 14;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 15;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 16;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 17;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 18;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 19;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 20;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 21;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 22;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 23;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 24;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 25;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 26;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 27;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 28;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,GetTypeCoercionPrecedence,The following statement contains a magic number: return 29;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedStringNew,The following statement contains a magic number: return snew.Args.Count == 2 && snew.Args [0].ClrType == typeof(char) && snew.Args [1].ClrType == typeof(int);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.ClrType == typeof(DateTime) && sox.Args.Count >= 3 && sox.Args [0].ClrType == typeof(int) && sox.Args [1].ClrType == typeof(int) && sox.Args [2].ClrType == typeof(int)) {  	if (sox.Args.Count == 3) {  		return true;  	}  	if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  		if (sox.Args.Count == 6) {  			return true;  		}  		if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  			return true;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count == 3) {  	return true;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  	if (sox.Args.Count == 6) {  		return true;  	}  	if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  	if (sox.Args.Count == 6) {  		return true;  	}  	if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  	if (sox.Args.Count == 6) {  		return true;  	}  	if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  	if (sox.Args.Count == 6) {  		return true;  	}  	if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  	if (sox.Args.Count == 6) {  		return true;  	}  	if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  	if (sox.Args.Count == 6) {  		return true;  	}  	if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count >= 6 && sox.Args [3].ClrType == typeof(int) && sox.Args [4].ClrType == typeof(int) && sox.Args [5].ClrType == typeof(int)) {  	if (sox.Args.Count == 6) {  		return true;  	}  	if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if (sox.Args.Count == 6) {  	return true;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  	return true;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeNew,The following statement contains a magic number: if ((sox.Args.Count == 7) && (sox.Args [6].ClrType == typeof(int))) {  	return true;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 1) {  	return true;  } else if (sox.Args.Count == 3) {  	return true;  } else {  	if (sox.Args.Count == 4) {  		return true;  	} else if (sox.Args.Count == 5) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 1) {  	return true;  } else if (sox.Args.Count == 3) {  	return true;  } else {  	if (sox.Args.Count == 4) {  		return true;  	} else if (sox.Args.Count == 5) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 1) {  	return true;  } else if (sox.Args.Count == 3) {  	return true;  } else {  	if (sox.Args.Count == 4) {  		return true;  	} else if (sox.Args.Count == 5) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 3) {  	return true;  } else {  	if (sox.Args.Count == 4) {  		return true;  	} else if (sox.Args.Count == 5) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 3) {  	return true;  } else {  	if (sox.Args.Count == 4) {  		return true;  	} else if (sox.Args.Count == 5) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 3) {  	return true;  } else {  	if (sox.Args.Count == 4) {  		return true;  	} else if (sox.Args.Count == 5) {  		return true;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 4) {  	return true;  } else if (sox.Args.Count == 5) {  	return true;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 4) {  	return true;  } else if (sox.Args.Count == 5) {  	return true;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanNew,The following statement contains a magic number: if (sox.Args.Count == 5) {  	return true;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic && mc.Method.DeclaringType == typeof(SqlMethods)) {  	if (mc.Method.Name.StartsWith ("DateDiff"' StringComparison.Ordinal) && mc.Arguments.Count == 2) {  		foreach (string datePart in dateParts) {  			if (mc.Method.Name == "DateDiff" + datePart) {  				if (mc.Arguments.Count == 2) {  					return MethodSupport.Method;  				} else {  					return MethodSupport.MethodGroup;  				}  			}  		}  	} else if (mc.Method.Name == "Like") {  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		} else if (mc.Arguments.Count == 3) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	} else if (mc.Method.Name == "RawLength") {  		return MethodSupport.Method;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic && mc.Method.DeclaringType == typeof(SqlMethods)) {  	if (mc.Method.Name.StartsWith ("DateDiff"' StringComparison.Ordinal) && mc.Arguments.Count == 2) {  		foreach (string datePart in dateParts) {  			if (mc.Method.Name == "DateDiff" + datePart) {  				if (mc.Arguments.Count == 2) {  					return MethodSupport.Method;  				} else {  					return MethodSupport.MethodGroup;  				}  			}  		}  	} else if (mc.Method.Name == "Like") {  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		} else if (mc.Arguments.Count == 3) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	} else if (mc.Method.Name == "RawLength") {  		return MethodSupport.Method;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic && mc.Method.DeclaringType == typeof(SqlMethods)) {  	if (mc.Method.Name.StartsWith ("DateDiff"' StringComparison.Ordinal) && mc.Arguments.Count == 2) {  		foreach (string datePart in dateParts) {  			if (mc.Method.Name == "DateDiff" + datePart) {  				if (mc.Arguments.Count == 2) {  					return MethodSupport.Method;  				} else {  					return MethodSupport.MethodGroup;  				}  			}  		}  	} else if (mc.Method.Name == "Like") {  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		} else if (mc.Arguments.Count == 3) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	} else if (mc.Method.Name == "RawLength") {  		return MethodSupport.Method;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic && mc.Method.DeclaringType == typeof(SqlMethods)) {  	if (mc.Method.Name.StartsWith ("DateDiff"' StringComparison.Ordinal) && mc.Arguments.Count == 2) {  		foreach (string datePart in dateParts) {  			if (mc.Method.Name == "DateDiff" + datePart) {  				if (mc.Arguments.Count == 2) {  					return MethodSupport.Method;  				} else {  					return MethodSupport.MethodGroup;  				}  			}  		}  	} else if (mc.Method.Name == "Like") {  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		} else if (mc.Arguments.Count == 3) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	} else if (mc.Method.Name == "RawLength") {  		return MethodSupport.Method;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.Name.StartsWith ("DateDiff"' StringComparison.Ordinal) && mc.Arguments.Count == 2) {  	foreach (string datePart in dateParts) {  		if (mc.Method.Name == "DateDiff" + datePart) {  			if (mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			} else {  				return MethodSupport.MethodGroup;  			}  		}  	}  } else if (mc.Method.Name == "Like") {  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	} else if (mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  } else if (mc.Method.Name == "RawLength") {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.Name.StartsWith ("DateDiff"' StringComparison.Ordinal) && mc.Arguments.Count == 2) {  	foreach (string datePart in dateParts) {  		if (mc.Method.Name == "DateDiff" + datePart) {  			if (mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			} else {  				return MethodSupport.MethodGroup;  			}  		}  	}  } else if (mc.Method.Name == "Like") {  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	} else if (mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  } else if (mc.Method.Name == "RawLength") {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.Name.StartsWith ("DateDiff"' StringComparison.Ordinal) && mc.Arguments.Count == 2) {  	foreach (string datePart in dateParts) {  		if (mc.Method.Name == "DateDiff" + datePart) {  			if (mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			} else {  				return MethodSupport.MethodGroup;  			}  		}  	}  } else if (mc.Method.Name == "Like") {  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	} else if (mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  } else if (mc.Method.Name == "RawLength") {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.Name.StartsWith ("DateDiff"' StringComparison.Ordinal) && mc.Arguments.Count == 2) {  	foreach (string datePart in dateParts) {  		if (mc.Method.Name == "DateDiff" + datePart) {  			if (mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			} else {  				return MethodSupport.MethodGroup;  			}  		}  	}  } else if (mc.Method.Name == "Like") {  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	} else if (mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  } else if (mc.Method.Name == "RawLength") {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: foreach (string datePart in dateParts) {  	if (mc.Method.Name == "DateDiff" + datePart) {  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		} else {  			return MethodSupport.MethodGroup;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.Name == "DateDiff" + datePart) {  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	} else {  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return MethodSupport.Method;  } else {  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.Name == "Like") {  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	} else if (mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  } else if (mc.Method.Name == "RawLength") {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Method.Name == "Like") {  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	} else if (mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  } else if (mc.Method.Name == "RawLength") {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return MethodSupport.Method;  } else if (mc.Arguments.Count == 3) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return MethodSupport.Method;  } else if (mc.Arguments.Count == 3) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetSqlMethodsMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 3) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDecimalMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic) {  	if (mc.Arguments.Count == 2) {  		switch (mc.Method.Name) {  		case "Multiply":  		case "Divide":  		case "Subtract":  		case "Add":  		case "Remainder":  		case "Round":  			return MethodSupport.Method;  		}  	} else if (mc.Arguments.Count == 1) {  		switch (mc.Method.Name) {  		case "Negate":  		case "Floor":  		case "Truncate":  		case "Round":  			return MethodSupport.Method;  		default:  			if (mc.Method.Name.StartsWith ("To"' StringComparison.Ordinal)) {  				return MethodSupport.Method;  			}  			break;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDecimalMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	switch (mc.Method.Name) {  	case "Multiply":  	case "Divide":  	case "Subtract":  	case "Add":  	case "Remainder":  	case "Round":  		return MethodSupport.Method;  	}  } else if (mc.Arguments.Count == 1) {  	switch (mc.Method.Name) {  	case "Negate":  	case "Floor":  	case "Truncate":  	case "Round":  		return MethodSupport.Method;  	default:  		if (mc.Method.Name.StartsWith ("To"' StringComparison.Ordinal)) {  			return MethodSupport.Method;  		}  		break;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Method.DeclaringType == typeof(string)) {  	if (mc.Method.IsStatic) {  		if (mc.Method.Name == "Concat") {  			return MethodSupport.Method;  		}  	} else {  		switch (mc.Method.Name) {  		case "Contains":  		case "StartsWith":  		case "EndsWith":  			if (mc.Arguments.Count == 1) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "IndexOf":  		case "LastIndexOf":  			if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "Insert":  			if (mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "PadLeft":  		case "PadRight":  		case "Remove":  		case "Substring":  			if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "Replace":  			return MethodSupport.Method;  		case "Trim":  		case "ToLower":  		case "ToUpper":  			if (mc.Arguments.Count == 0) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "get_Chars":  		case "CompareTo":  			if (mc.Arguments.Count == 1) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Method.DeclaringType == typeof(string)) {  	if (mc.Method.IsStatic) {  		if (mc.Method.Name == "Concat") {  			return MethodSupport.Method;  		}  	} else {  		switch (mc.Method.Name) {  		case "Contains":  		case "StartsWith":  		case "EndsWith":  			if (mc.Arguments.Count == 1) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "IndexOf":  		case "LastIndexOf":  			if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "Insert":  			if (mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "PadLeft":  		case "PadRight":  		case "Remove":  		case "Substring":  			if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "Replace":  			return MethodSupport.Method;  		case "Trim":  		case "ToLower":  		case "ToUpper":  			if (mc.Arguments.Count == 0) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "get_Chars":  		case "CompareTo":  			if (mc.Arguments.Count == 1) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Method.DeclaringType == typeof(string)) {  	if (mc.Method.IsStatic) {  		if (mc.Method.Name == "Concat") {  			return MethodSupport.Method;  		}  	} else {  		switch (mc.Method.Name) {  		case "Contains":  		case "StartsWith":  		case "EndsWith":  			if (mc.Arguments.Count == 1) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "IndexOf":  		case "LastIndexOf":  			if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "Insert":  			if (mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "PadLeft":  		case "PadRight":  		case "Remove":  		case "Substring":  			if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "Replace":  			return MethodSupport.Method;  		case "Trim":  		case "ToLower":  		case "ToUpper":  			if (mc.Arguments.Count == 0) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "get_Chars":  		case "CompareTo":  			if (mc.Arguments.Count == 1) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Method.DeclaringType == typeof(string)) {  	if (mc.Method.IsStatic) {  		if (mc.Method.Name == "Concat") {  			return MethodSupport.Method;  		}  	} else {  		switch (mc.Method.Name) {  		case "Contains":  		case "StartsWith":  		case "EndsWith":  			if (mc.Arguments.Count == 1) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "IndexOf":  		case "LastIndexOf":  			if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "Insert":  			if (mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "PadLeft":  		case "PadRight":  		case "Remove":  		case "Substring":  			if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "Replace":  			return MethodSupport.Method;  		case "Trim":  		case "ToLower":  		case "ToUpper":  			if (mc.Arguments.Count == 0) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		case "get_Chars":  		case "CompareTo":  			if (mc.Arguments.Count == 1) {  				return MethodSupport.Method;  			}  			return MethodSupport.MethodGroup;  		}  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic) {  	if (mc.Method.Name == "Concat") {  		return MethodSupport.Method;  	}  } else {  	switch (mc.Method.Name) {  	case "Contains":  	case "StartsWith":  	case "EndsWith":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "IndexOf":  	case "LastIndexOf":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Insert":  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "PadLeft":  	case "PadRight":  	case "Remove":  	case "Substring":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Replace":  		return MethodSupport.Method;  	case "Trim":  	case "ToLower":  	case "ToUpper":  		if (mc.Arguments.Count == 0) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "get_Chars":  	case "CompareTo":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic) {  	if (mc.Method.Name == "Concat") {  		return MethodSupport.Method;  	}  } else {  	switch (mc.Method.Name) {  	case "Contains":  	case "StartsWith":  	case "EndsWith":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "IndexOf":  	case "LastIndexOf":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Insert":  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "PadLeft":  	case "PadRight":  	case "Remove":  	case "Substring":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Replace":  		return MethodSupport.Method;  	case "Trim":  	case "ToLower":  	case "ToUpper":  		if (mc.Arguments.Count == 0) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "get_Chars":  	case "CompareTo":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic) {  	if (mc.Method.Name == "Concat") {  		return MethodSupport.Method;  	}  } else {  	switch (mc.Method.Name) {  	case "Contains":  	case "StartsWith":  	case "EndsWith":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "IndexOf":  	case "LastIndexOf":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Insert":  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "PadLeft":  	case "PadRight":  	case "Remove":  	case "Substring":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Replace":  		return MethodSupport.Method;  	case "Trim":  	case "ToLower":  	case "ToUpper":  		if (mc.Arguments.Count == 0) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "get_Chars":  	case "CompareTo":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic) {  	if (mc.Method.Name == "Concat") {  		return MethodSupport.Method;  	}  } else {  	switch (mc.Method.Name) {  	case "Contains":  	case "StartsWith":  	case "EndsWith":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "IndexOf":  	case "LastIndexOf":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Insert":  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "PadLeft":  	case "PadRight":  	case "Remove":  	case "Substring":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Replace":  		return MethodSupport.Method;  	case "Trim":  	case "ToLower":  	case "ToUpper":  		if (mc.Arguments.Count == 0) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "get_Chars":  	case "CompareTo":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: switch (mc.Method.Name) {  case "Contains":  case "StartsWith":  case "EndsWith":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "IndexOf":  case "LastIndexOf":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Insert":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "PadLeft":  case "PadRight":  case "Remove":  case "Substring":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Replace":  	return MethodSupport.Method;  case "Trim":  case "ToLower":  case "ToUpper":  	if (mc.Arguments.Count == 0) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "get_Chars":  case "CompareTo":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: switch (mc.Method.Name) {  case "Contains":  case "StartsWith":  case "EndsWith":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "IndexOf":  case "LastIndexOf":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Insert":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "PadLeft":  case "PadRight":  case "Remove":  case "Substring":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Replace":  	return MethodSupport.Method;  case "Trim":  case "ToLower":  case "ToUpper":  	if (mc.Arguments.Count == 0) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "get_Chars":  case "CompareTo":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: switch (mc.Method.Name) {  case "Contains":  case "StartsWith":  case "EndsWith":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "IndexOf":  case "LastIndexOf":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Insert":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "PadLeft":  case "PadRight":  case "Remove":  case "Substring":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Replace":  	return MethodSupport.Method;  case "Trim":  case "ToLower":  case "ToUpper":  	if (mc.Arguments.Count == 0) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "get_Chars":  case "CompareTo":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: switch (mc.Method.Name) {  case "Contains":  case "StartsWith":  case "EndsWith":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "IndexOf":  case "LastIndexOf":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Insert":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "PadLeft":  case "PadRight":  case "Remove":  case "Substring":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Replace":  	return MethodSupport.Method;  case "Trim":  case "ToLower":  case "ToUpper":  	if (mc.Arguments.Count == 0) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "get_Chars":  case "CompareTo":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic && mc.Method.DeclaringType == typeof(Math)) {  	switch (mc.Method.Name) {  	case "Abs":  	case "Acos":  	case "Asin":  	case "Atan":  	case "Ceiling":  	case "Cos":  	case "Cosh":  	case "Exp":  	case "Floor":  	case "Log10":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Log":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		;  		return MethodSupport.MethodGroup;  	case "Max":  	case "Min":  	case "Pow":  	case "Atan2":  	case "BigMul":  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Round":  		if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Sign":  	case "Sin":  	case "Sinh":  	case "Sqrt":  	case "Tan":  	case "Tanh":  	case "Truncate":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic && mc.Method.DeclaringType == typeof(Math)) {  	switch (mc.Method.Name) {  	case "Abs":  	case "Acos":  	case "Asin":  	case "Atan":  	case "Ceiling":  	case "Cos":  	case "Cosh":  	case "Exp":  	case "Floor":  	case "Log10":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Log":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		;  		return MethodSupport.MethodGroup;  	case "Max":  	case "Min":  	case "Pow":  	case "Atan2":  	case "BigMul":  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Round":  		if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Sign":  	case "Sin":  	case "Sinh":  	case "Sqrt":  	case "Tan":  	case "Tanh":  	case "Truncate":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic && mc.Method.DeclaringType == typeof(Math)) {  	switch (mc.Method.Name) {  	case "Abs":  	case "Acos":  	case "Asin":  	case "Atan":  	case "Ceiling":  	case "Cos":  	case "Cosh":  	case "Exp":  	case "Floor":  	case "Log10":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Log":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		;  		return MethodSupport.MethodGroup;  	case "Max":  	case "Min":  	case "Pow":  	case "Atan2":  	case "BigMul":  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Round":  		if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Sign":  	case "Sin":  	case "Sinh":  	case "Sqrt":  	case "Tan":  	case "Tanh":  	case "Truncate":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: if (mc.Method.IsStatic && mc.Method.DeclaringType == typeof(Math)) {  	switch (mc.Method.Name) {  	case "Abs":  	case "Acos":  	case "Asin":  	case "Atan":  	case "Ceiling":  	case "Cos":  	case "Cosh":  	case "Exp":  	case "Floor":  	case "Log10":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Log":  		if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		;  		return MethodSupport.MethodGroup;  	case "Max":  	case "Min":  	case "Pow":  	case "Atan2":  	case "BigMul":  		if (mc.Arguments.Count == 2) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Round":  		if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	case "Sign":  	case "Sin":  	case "Sinh":  	case "Sqrt":  	case "Tan":  	case "Tanh":  	case "Truncate":  		if (mc.Arguments.Count == 1) {  			return MethodSupport.Method;  		}  		return MethodSupport.MethodGroup;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: switch (mc.Method.Name) {  case "Abs":  case "Acos":  case "Asin":  case "Atan":  case "Ceiling":  case "Cos":  case "Cosh":  case "Exp":  case "Floor":  case "Log10":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Log":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	;  	return MethodSupport.MethodGroup;  case "Max":  case "Min":  case "Pow":  case "Atan2":  case "BigMul":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Round":  	if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Sign":  case "Sin":  case "Sinh":  case "Sqrt":  case "Tan":  case "Tanh":  case "Truncate":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: switch (mc.Method.Name) {  case "Abs":  case "Acos":  case "Asin":  case "Atan":  case "Ceiling":  case "Cos":  case "Cosh":  case "Exp":  case "Floor":  case "Log10":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Log":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	;  	return MethodSupport.MethodGroup;  case "Max":  case "Min":  case "Pow":  case "Atan2":  case "BigMul":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Round":  	if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Sign":  case "Sin":  case "Sinh":  case "Sqrt":  case "Tan":  case "Tanh":  case "Truncate":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: switch (mc.Method.Name) {  case "Abs":  case "Acos":  case "Asin":  case "Atan":  case "Ceiling":  case "Cos":  case "Cosh":  case "Exp":  case "Floor":  case "Log10":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Log":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	;  	return MethodSupport.MethodGroup;  case "Max":  case "Min":  case "Pow":  case "Atan2":  case "BigMul":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Round":  	if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Sign":  case "Sin":  case "Sinh":  case "Sqrt":  case "Tan":  case "Tanh":  case "Truncate":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: switch (mc.Method.Name) {  case "Abs":  case "Acos":  case "Asin":  case "Atan":  case "Ceiling":  case "Cos":  case "Cosh":  case "Exp":  case "Floor":  case "Log10":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Log":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	;  	return MethodSupport.MethodGroup;  case "Max":  case "Min":  case "Pow":  case "Atan2":  case "BigMul":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Round":  	if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Sign":  case "Sin":  case "Sinh":  case "Sqrt":  case "Tan":  case "Tanh":  case "Truncate":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following statement contains a magic number: if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  	return MethodSupport.Method;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffMonth,The following statement contains a magic number: return 12 * (endDate.Year - startDate.Year) + endDate.Month - startDate.Month;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffHour,The following statement contains a magic number: checked {  	return DateDiffDay (startDate' endDate) * 24 + endDate.Hour - startDate.Hour;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffHour,The following statement contains a magic number: return DateDiffDay (startDate' endDate) * 24 + endDate.Hour - startDate.Hour;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffMinute,The following statement contains a magic number: checked {  	return DateDiffHour (startDate' endDate) * 60 + endDate.Minute - startDate.Minute;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffMinute,The following statement contains a magic number: return DateDiffHour (startDate' endDate) * 60 + endDate.Minute - startDate.Minute;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffSecond,The following statement contains a magic number: checked {  	return DateDiffMinute (startDate' endDate) * 60 + endDate.Second - startDate.Second;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffSecond,The following statement contains a magic number: return DateDiffMinute (startDate' endDate) * 60 + endDate.Second - startDate.Second;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffMillisecond,The following statement contains a magic number: checked {  	return DateDiffSecond (startDate' endDate) * 1000 + endDate.Millisecond - startDate.Millisecond;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffMillisecond,The following statement contains a magic number: return DateDiffSecond (startDate' endDate) * 1000 + endDate.Millisecond - startDate.Millisecond;  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffMicrosecond,The following statement contains a magic number: checked {  	return (int)((endDate.Ticks - startDate.Ticks) / 10);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffMicrosecond,The following statement contains a magic number: return (int)((endDate.Ticks - startDate.Ticks) / 10);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffNanosecond,The following statement contains a magic number: checked {  	return (int)((endDate.Ticks - startDate.Ticks) * 100);  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlMethods,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlMethods.cs,DateDiffNanosecond,The following statement contains a magic number: return (int)((endDate.Ticks - startDate.Ticks) * 100);  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Initialize,The following statement contains a magic number: if (con.ConnectionString.IndexOf ("MultipleActiveResultSets"' StringComparison.OrdinalIgnoreCase) >= 0) {  	DbConnectionStringBuilder builder = new DbConnectionStringBuilder ();  	builder.ConnectionString = con.ConnectionString;  	if (string.Compare ((string)builder ["MultipleActiveResultSets"]' "true"' StringComparison.OrdinalIgnoreCase) == 0) {  		maxUsersPerConnection = 10;  	}  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Initialize,The following statement contains a magic number: if (string.Compare ((string)builder ["MultipleActiveResultSets"]' "true"' StringComparison.OrdinalIgnoreCase) == 0) {  	maxUsersPerConnection = 10;  }  
Magic Number,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,Initialize,The following statement contains a magic number: maxUsersPerConnection = 10;  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,Generate,The following statement contains a magic number: try {  	stackDepth++;  	Diagnostics.Debug.Assert (stackDepth < 500);  	#endif  	switch (node.NodeType) {  	case SqlNodeType.New:  		return this.GenerateNew ((SqlNew)node);  	case SqlNodeType.ColumnRef:  		return this.GenerateColumnReference ((SqlColumnRef)node);  	case SqlNodeType.ClientQuery:  		return this.GenerateClientQuery ((SqlClientQuery)node' locInstance);  	case SqlNodeType.JoinedCollection:  		return this.GenerateJoinedCollection ((SqlJoinedCollection)node);  	case SqlNodeType.Link:  		return this.GenerateLink ((SqlLink)node' locInstance);  	case SqlNodeType.Value:  		return this.GenerateValue ((SqlValue)node);  	case SqlNodeType.ClientParameter:  		return this.GenerateClientParameter ((SqlClientParameter)node);  	case SqlNodeType.ValueOf:  		return this.GenerateValueOf ((SqlUnary)node);  	case SqlNodeType.OptionalValue:  		return this.GenerateOptionalValue ((SqlOptionalValue)node);  	case SqlNodeType.OuterJoinedValue:  		return this.Generate (((SqlUnary)node).Operand);  	case SqlNodeType.Lift:  		return this.GenerateLift ((SqlLift)node);  	case SqlNodeType.Grouping:  		return this.GenerateGrouping ((SqlGrouping)node);  	case SqlNodeType.ClientArray:  		return this.GenerateClientArray ((SqlClientArray)node);  	case SqlNodeType.UserColumn:  		return this.GenerateUserColumn ((SqlUserColumn)node);  	case SqlNodeType.ClientCase:  		return this.GenerateClientCase ((SqlClientCase)node' false' locInstance);  	case SqlNodeType.SearchedCase:  		return this.GenerateSearchedCase ((SqlSearchedCase)node);  	case SqlNodeType.TypeCase:  		return this.GenerateTypeCase ((SqlTypeCase)node);  	case SqlNodeType.DiscriminatedType:  		return this.GenerateDiscriminatedType ((SqlDiscriminatedType)node);  	case SqlNodeType.Member:  		return this.GenerateMember ((SqlMember)node);  	case SqlNodeType.MethodCall:  		return this.GenerateMethodCall ((SqlMethodCall)node);  	default:  		throw Error.CouldNotTranslateExpressionForReading (node.SourceExpression);  	}  	#if DEBUG  } finally {  	stackDepth--;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,Generate,The following statement contains a magic number: Diagnostics.Debug.Assert (stackDepth < 500);  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: switch (value) {  case 0:  	gen.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	gen.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	gen.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	gen.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	gen.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	gen.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	gen.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	gen.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	gen.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	if (value == -1) {  		gen.Emit (OpCodes.Ldc_I4_M1);  	} else if (value >= -127 && value < 128) {  		gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  	} else {  		gen.Emit (OpCodes.Ldc_I4' value);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: if (value == -1) {  	gen.Emit (OpCodes.Ldc_I4_M1);  } else if (value >= -127 && value < 128) {  	gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	gen.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: if (value == -1) {  	gen.Emit (OpCodes.Ldc_I4_M1);  } else if (value >= -127 && value < 128) {  	gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	gen.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: if (value >= -127 && value < 128) {  	gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	gen.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateConstInt,The following statement contains a magic number: if (value >= -127 && value < 128) {  	gen.Emit (OpCodes.Ldc_I4_S' (sbyte)value);  } else {  	gen.Emit (OpCodes.Ldc_I4' value);  }  
Magic Number,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,Concat,The following statement contains a magic number: for (int i = expressions.Length - 2; i >= 0; i--) {  	result = Binary (SqlNodeType.Concat' expressions [i]' result);  }  
Magic Number,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,Add,The following statement contains a magic number: for (int i = expressions.Length - 2; i >= 0; i--) {  	sum = Binary (SqlNodeType.Add' expressions [i]' sum);  }  
Magic Number,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,Multiply,The following statement contains a magic number: for (int i = expressions.Length - 2; i >= 0; i--) {  	result = Binary (SqlNodeType.Mul' expressions [i]' result);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitLambda,The following statement contains a magic number: for (int i = 0' n = lambda.Parameters.Count; i < n; i++) {  	ParameterExpression p = lambda.Parameters [i];  	if (p.Type == typeof(Type)) {  		throw Error.BadParameterType (p.Type);  	}  	// construct accessor for parameter  	ParameterExpression pa = Expression.Parameter (typeof(object[])' "args");  	LambdaExpression accessor = Expression.Lambda (typeof(Func<' >).MakeGenericType (typeof(object[])' p.Type)' Expression.Convert (  	#pragma  	/// Disable the 'obsolete' warning  	Expression.ArrayIndex (pa' Expression.Constant (i))' p.Type)'   	#pragma  	pa);  	SqlClientParameter cp = new SqlClientParameter (p.Type' _typeProvider.From (p.Type)' accessor' _dominatingExpression);  	// map references to lambda's parameter to client parameter node  	_parameterExpressionToSqlNode [p] = cp;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitLambda,The following statement contains a magic number: for (int i = 0' n = lambda.Parameters.Count; i < n; i++) {  	ParameterExpression p = lambda.Parameters [i];  	if (p.Type == typeof(Type)) {  		throw Error.BadParameterType (p.Type);  	}  	// construct accessor for parameter  	ParameterExpression pa = Expression.Parameter (typeof(object[])' "args");  	LambdaExpression accessor = Expression.Lambda (typeof(Func<' >).MakeGenericType (typeof(object[])' p.Type)' Expression.Convert (  	#pragma  	/// Disable the 'obsolete' warning  	Expression.ArrayIndex (pa' Expression.Constant (i))' p.Type)'   	#pragma  	pa);  	SqlClientParameter cp = new SqlClientParameter (p.Type' _typeProvider.From (p.Type)' accessor' _dominatingExpression);  	// map references to lambda's parameter to client parameter node  	_parameterExpressionToSqlNode [p] = cp;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitArrayIndex,The following statement contains a magic number: if (array.NodeType == SqlNodeType.ClientParameter && index.NodeType == SqlNodeType.Value) {  	SqlClientParameter cpArray = (SqlClientParameter)array;  	SqlValue vIndex = (SqlValue)index;  	return new SqlClientParameter (b.Type' _nodeFactory.TypeProvider.From (b.Type)' Expression.Lambda (  	#pragma  	/// Disable the 'obsolete' warning  	Expression.ArrayIndex (cpArray.Accessor.Body' Expression.Constant (vIndex.Value' vIndex.ClrType))'   	#pragma  	cpArray.Accessor.Parameters.ToArray ())' _dominatingExpression);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitArrayIndex,The following statement contains a magic number: if (array.NodeType == SqlNodeType.ClientParameter && index.NodeType == SqlNodeType.Value) {  	SqlClientParameter cpArray = (SqlClientParameter)array;  	SqlValue vIndex = (SqlValue)index;  	return new SqlClientParameter (b.Type' _nodeFactory.TypeProvider.From (b.Type)' Expression.Lambda (  	#pragma  	/// Disable the 'obsolete' warning  	Expression.ArrayIndex (cpArray.Accessor.Body' Expression.Constant (vIndex.Value' vIndex.ClrType))'   	#pragma  	cpArray.Accessor.Parameters.ToArray ())' _dominatingExpression);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitArrayIndex,The following statement contains a magic number: return new SqlClientParameter (b.Type' _nodeFactory.TypeProvider.From (b.Type)' Expression.Lambda (  #pragma  /// Disable the 'obsolete' warning  Expression.ArrayIndex (cpArray.Accessor.Body' Expression.Constant (vIndex.Value' vIndex.ClrType))'   #pragma  cpArray.Accessor.Parameters.ToArray ())' _dominatingExpression);  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitArrayIndex,The following statement contains a magic number: return new SqlClientParameter (b.Type' _nodeFactory.TypeProvider.From (b.Type)' Expression.Lambda (  #pragma  /// Disable the 'obsolete' warning  Expression.ArrayIndex (cpArray.Accessor.Body' Expression.Constant (vIndex.Value' vIndex.ClrType))'   #pragma  cpArray.Accessor.Parameters.ToArray ())' _dominatingExpression);  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,ConvertDateToDateTime2,The following statement contains a magic number: return _nodeFactory.FunctionCall (typeof(DateTime)' "CONVERT"' new SqlExpression[2] {  	datetime2'  	expr  }' expr.SourceExpression);  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitTake,The following statement contains a magic number: if (mce != null && IsSequenceOperatorCall (mce) && mce.Method.Name == "Skip" && mce.Arguments.Count == 2) {  	SqlExpression skipExp = this.VisitExpression (mce.Arguments [1]);  	// verify that count >= 0  	if (skipExp.NodeType == SqlNodeType.Value) {  		SqlValue constSkipCount = (SqlValue)skipExp;  		if (typeof(int).IsAssignableFrom (constSkipCount.Value.GetType ()) && ((int)constSkipCount.Value) < 0) {  			throw Error.ArgumentOutOfRange ("skipCount");  		}  	}  	SqlSelect select = this.VisitSequence (mce.Arguments [0]);  	return this.GenerateSkipTake (select' skipExp' takeExp);  } else {  	SqlSelect select = this.VisitSequence (sequence);  	return this.GenerateSkipTake (select' null' takeExp);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Method.IsStatic) {  	if (this.IsSequenceOperatorCall (mc)) {  		return this.VisitSequenceOperatorCall (mc);  	} else if (IsDataManipulationCall (mc)) {  		return this.VisitDataManipulationCall (mc);  	} // why is this handled here and not in SqlMethodCallConverter?  	else if (declType == typeof(DBConvert) || declType == typeof(Convert)) {  		if (mc.Method.Name == "ChangeType") {  			SqlNode sn = null;  			if (mc.Arguments.Count == 2) {  				object value = GetValue (mc.Arguments [1]' "ChangeType");  				if (value != null && typeof(Type).IsAssignableFrom (value.GetType ())) {  					sn = this.VisitChangeType (mc.Arguments [0]' (Type)value);  				}  			}  			if (sn == null) {  				throw Error.MethodFormHasNoSupportConversionToSql (mc.Method.Name' mc.Method);  			}  			return sn;  		}  	}  } else if (typeof(DataContext).IsAssignableFrom (mc.Method.DeclaringType)) {  	switch (mc.Method.Name) {  	case "GetTable": {  		// calls to GetTable<T> can be translated directly as table references  		if (mc.Method.IsGenericMethod) {  			Type[] typeArgs = mc.Method.GetGenericArguments ();  			if (typeArgs.Length == 1 && mc.Method.GetParameters ().Length == 0) {  				CheckContext (this.VisitExpression (mc.Object));  				ITable table = _services.Context.GetTable (typeArgs [0]);  				if (table != null) {  					return this.Visit (Expression.Constant (table));  				}  			}  		}  		break;  	}  	case "ExecuteCommand":  	case "ExecuteQuery":  		return this.VisitUserQuery ((string)GetValue (mc.Arguments [0]' mc.Method.Name)' GetArray (mc.Arguments [1])' mc.Type);  	}  	if (this.IsMappedFunctionCall (mc)) {  		return this.VisitMappedFunctionCall (mc);  	}  } else if (mc.Method.DeclaringType != typeof(string) && mc.Method.Name == "Contains" && !mc.Method.IsStatic && typeof(IList).IsAssignableFrom (mc.Method.DeclaringType) && mc.Type == typeof(bool) && mc.Arguments.Count == 1 && TypeSystem.GetElementType (mc.Method.DeclaringType).IsAssignableFrom (mc.Arguments [0].Type)) {  	return this.VisitContains (mc.Object' mc.Arguments [0]);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The following statement contains a magic number: if (this.IsSequenceOperatorCall (mc)) {  	return this.VisitSequenceOperatorCall (mc);  } else if (IsDataManipulationCall (mc)) {  	return this.VisitDataManipulationCall (mc);  } // why is this handled here and not in SqlMethodCallConverter?  else if (declType == typeof(DBConvert) || declType == typeof(Convert)) {  	if (mc.Method.Name == "ChangeType") {  		SqlNode sn = null;  		if (mc.Arguments.Count == 2) {  			object value = GetValue (mc.Arguments [1]' "ChangeType");  			if (value != null && typeof(Type).IsAssignableFrom (value.GetType ())) {  				sn = this.VisitChangeType (mc.Arguments [0]' (Type)value);  			}  		}  		if (sn == null) {  			throw Error.MethodFormHasNoSupportConversionToSql (mc.Method.Name' mc.Method);  		}  		return sn;  	}  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The following statement contains a magic number: if (IsDataManipulationCall (mc)) {  	return this.VisitDataManipulationCall (mc);  } // why is this handled here and not in SqlMethodCallConverter?  else if (declType == typeof(DBConvert) || declType == typeof(Convert)) {  	if (mc.Method.Name == "ChangeType") {  		SqlNode sn = null;  		if (mc.Arguments.Count == 2) {  			object value = GetValue (mc.Arguments [1]' "ChangeType");  			if (value != null && typeof(Type).IsAssignableFrom (value.GetType ())) {  				sn = this.VisitChangeType (mc.Arguments [0]' (Type)value);  			}  		}  		if (sn == null) {  			throw Error.MethodFormHasNoSupportConversionToSql (mc.Method.Name' mc.Method);  		}  		return sn;  	}  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The following statement contains a magic number: if (declType == typeof(DBConvert) || declType == typeof(Convert)) {  	if (mc.Method.Name == "ChangeType") {  		SqlNode sn = null;  		if (mc.Arguments.Count == 2) {  			object value = GetValue (mc.Arguments [1]' "ChangeType");  			if (value != null && typeof(Type).IsAssignableFrom (value.GetType ())) {  				sn = this.VisitChangeType (mc.Arguments [0]' (Type)value);  			}  		}  		if (sn == null) {  			throw Error.MethodFormHasNoSupportConversionToSql (mc.Method.Name' mc.Method);  		}  		return sn;  	}  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Method.Name == "ChangeType") {  	SqlNode sn = null;  	if (mc.Arguments.Count == 2) {  		object value = GetValue (mc.Arguments [1]' "ChangeType");  		if (value != null && typeof(Type).IsAssignableFrom (value.GetType ())) {  			sn = this.VisitChangeType (mc.Arguments [0]' (Type)value);  		}  	}  	if (sn == null) {  		throw Error.MethodFormHasNoSupportConversionToSql (mc.Method.Name' mc.Method);  	}  	return sn;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	object value = GetValue (mc.Arguments [1]' "ChangeType");  	if (value != null && typeof(Type).IsAssignableFrom (value.GetType ())) {  		sn = this.VisitChangeType (mc.Arguments [0]' (Type)value);  	}  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (IsSequenceOperatorCall (mc)) {  	switch (mc.Method.Name) {  	case "Select":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "SelectMany":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		}  		break;  	case "Join":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "GroupJoin":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  			return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  		}  		break;  	case "DefaultIfEmpty":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDefaultIfEmpty (mc.Arguments [0]);  		}  		break;  	case "OfType":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type ofType = mc.Method.GetGenericArguments () [0];  			return this.VisitOfType (mc.Arguments [0]' ofType);  		}  		break;  	case "Cast":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			Type type = mc.Method.GetGenericArguments () [0];  			return this.VisitSequenceCast (mc.Arguments [0]' type);  		}  		break;  	case "Where":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		}  		break;  	case "First":  	case "FirstOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "Single":  	case "SingleOrDefault":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' null' false);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Distinct":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitDistinct (mc.Arguments [0]);  		}  		break;  	case "Concat":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Union":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Intersect":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Except":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Any":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' null' true);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  		}  		break;  	case "All":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  		}  		break;  	case "Count":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  		}  		break;  	case "LongCount":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  		}  		break;  	case "Sum":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  		}  		break;  	case "Min":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  		}  		break;  	case "Max":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  		}  		break;  	case "Average":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  		} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  		}  		break;  	case "GroupBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  		} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  			return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  		}  		break;  	case "OrderBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "OrderByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "ThenBy":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  		}  		break;  	case "ThenByDescending":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  			return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  		}  		break;  	case "Take":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Skip":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "Contains":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  		}  		break;  	case "ToList":  	case "AsEnumerable":  	case "ToArray":  		isSupportedSequenceOperator = true;  		if (mc.Arguments.Count == 1) {  			return this.Visit (mc.Arguments [0]);  		}  		break;  	}  	// If the operator is supported' but the particular overload is not'  	// give an appropriate error message  	if (isSupportedSequenceOperator) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  } else {  	throw Error.InvalidSequenceOperatorCall (declType);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  	return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitFirst (mc.Arguments [0]' null' true);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitFirst (mc.Arguments [0]' null' false);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitQuantifier (mc.Arguments [0]' null' true);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  } else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  } else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  	return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  	return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (IsDataManipulationCall (mc)) {  	bool isSupportedDML = false;  	switch (mc.Method.Name) {  	case "Insert":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitInsert (mc.Arguments [0]' null);  		}  		break;  	case "Update":  		isSupportedDML = true;  		if (mc.Arguments.Count == 3) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 2) {  			if (mc.Method.GetGenericArguments ().Length == 1) {  				return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  			} else {  				return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  			}  		} else if (mc.Arguments.Count == 1) {  			return this.VisitUpdate (mc.Arguments [0]' null' null);  		}  		break;  	case "Delete":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitDelete (mc.Arguments [0]' null);  		}  		break;  	}  	if (isSupportedDML) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (IsDataManipulationCall (mc)) {  	bool isSupportedDML = false;  	switch (mc.Method.Name) {  	case "Insert":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitInsert (mc.Arguments [0]' null);  		}  		break;  	case "Update":  		isSupportedDML = true;  		if (mc.Arguments.Count == 3) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 2) {  			if (mc.Method.GetGenericArguments ().Length == 1) {  				return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  			} else {  				return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  			}  		} else if (mc.Arguments.Count == 1) {  			return this.VisitUpdate (mc.Arguments [0]' null' null);  		}  		break;  	case "Delete":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitDelete (mc.Arguments [0]' null);  		}  		break;  	}  	if (isSupportedDML) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (IsDataManipulationCall (mc)) {  	bool isSupportedDML = false;  	switch (mc.Method.Name) {  	case "Insert":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitInsert (mc.Arguments [0]' null);  		}  		break;  	case "Update":  		isSupportedDML = true;  		if (mc.Arguments.Count == 3) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 2) {  			if (mc.Method.GetGenericArguments ().Length == 1) {  				return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  			} else {  				return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  			}  		} else if (mc.Arguments.Count == 1) {  			return this.VisitUpdate (mc.Arguments [0]' null' null);  		}  		break;  	case "Delete":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitDelete (mc.Arguments [0]' null);  		}  		break;  	}  	if (isSupportedDML) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (IsDataManipulationCall (mc)) {  	bool isSupportedDML = false;  	switch (mc.Method.Name) {  	case "Insert":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitInsert (mc.Arguments [0]' null);  		}  		break;  	case "Update":  		isSupportedDML = true;  		if (mc.Arguments.Count == 3) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 2) {  			if (mc.Method.GetGenericArguments ().Length == 1) {  				return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  			} else {  				return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  			}  		} else if (mc.Arguments.Count == 1) {  			return this.VisitUpdate (mc.Arguments [0]' null' null);  		}  		break;  	case "Delete":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitDelete (mc.Arguments [0]' null);  		}  		break;  	}  	if (isSupportedDML) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (IsDataManipulationCall (mc)) {  	bool isSupportedDML = false;  	switch (mc.Method.Name) {  	case "Insert":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitInsert (mc.Arguments [0]' null);  		}  		break;  	case "Update":  		isSupportedDML = true;  		if (mc.Arguments.Count == 3) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  		} else if (mc.Arguments.Count == 2) {  			if (mc.Method.GetGenericArguments ().Length == 1) {  				return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  			} else {  				return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  			}  		} else if (mc.Arguments.Count == 1) {  			return this.VisitUpdate (mc.Arguments [0]' null' null);  		}  		break;  	case "Delete":  		isSupportedDML = true;  		if (mc.Arguments.Count == 2) {  			return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  		} else if (mc.Arguments.Count == 1) {  			return this.VisitDelete (mc.Arguments [0]' null);  		}  		break;  	}  	if (isSupportedDML) {  		throw Error.QueryOperatorOverloadNotSupported (mc.Method.Name);  	}  	throw Error.QueryOperatorNotSupported (mc.Method.Name);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Insert":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitInsert (mc.Arguments [0]' null);  	}  	break;  case "Update":  	isSupportedDML = true;  	if (mc.Arguments.Count == 3) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 2) {  		if (mc.Method.GetGenericArguments ().Length == 1) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else {  			return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  		}  	} else if (mc.Arguments.Count == 1) {  		return this.VisitUpdate (mc.Arguments [0]' null' null);  	}  	break;  case "Delete":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitDelete (mc.Arguments [0]' null);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Insert":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitInsert (mc.Arguments [0]' null);  	}  	break;  case "Update":  	isSupportedDML = true;  	if (mc.Arguments.Count == 3) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 2) {  		if (mc.Method.GetGenericArguments ().Length == 1) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else {  			return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  		}  	} else if (mc.Arguments.Count == 1) {  		return this.VisitUpdate (mc.Arguments [0]' null' null);  	}  	break;  case "Delete":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitDelete (mc.Arguments [0]' null);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Insert":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitInsert (mc.Arguments [0]' null);  	}  	break;  case "Update":  	isSupportedDML = true;  	if (mc.Arguments.Count == 3) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 2) {  		if (mc.Method.GetGenericArguments ().Length == 1) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else {  			return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  		}  	} else if (mc.Arguments.Count == 1) {  		return this.VisitUpdate (mc.Arguments [0]' null' null);  	}  	break;  case "Delete":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitDelete (mc.Arguments [0]' null);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Insert":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitInsert (mc.Arguments [0]' null);  	}  	break;  case "Update":  	isSupportedDML = true;  	if (mc.Arguments.Count == 3) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 2) {  		if (mc.Method.GetGenericArguments ().Length == 1) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else {  			return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  		}  	} else if (mc.Arguments.Count == 1) {  		return this.VisitUpdate (mc.Arguments [0]' null' null);  	}  	break;  case "Delete":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitDelete (mc.Arguments [0]' null);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: switch (mc.Method.Name) {  case "Insert":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitInsert (mc.Arguments [0]' null);  	}  	break;  case "Update":  	isSupportedDML = true;  	if (mc.Arguments.Count == 3) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 2) {  		if (mc.Method.GetGenericArguments ().Length == 1) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else {  			return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  		}  	} else if (mc.Arguments.Count == 1) {  		return this.VisitUpdate (mc.Arguments [0]' null' null);  	}  	break;  case "Delete":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitDelete (mc.Arguments [0]' null);  	}  	break;  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  } else if (mc.Arguments.Count == 1) {  	return this.VisitInsert (mc.Arguments [0]' null);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (mc.Arguments.Count == 3) {  	return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 2) {  	if (mc.Method.GetGenericArguments ().Length == 1) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else {  		return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  	}  } else if (mc.Arguments.Count == 1) {  	return this.VisitUpdate (mc.Arguments [0]' null' null);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (mc.Arguments.Count == 3) {  	return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 2) {  	if (mc.Method.GetGenericArguments ().Length == 1) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else {  		return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  	}  } else if (mc.Arguments.Count == 1) {  	return this.VisitUpdate (mc.Arguments [0]' null' null);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (mc.Arguments.Count == 3) {  	return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  } else if (mc.Arguments.Count == 2) {  	if (mc.Method.GetGenericArguments ().Length == 1) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else {  		return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  	}  } else if (mc.Arguments.Count == 1) {  	return this.VisitUpdate (mc.Arguments [0]' null' null);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	if (mc.Method.GetGenericArguments ().Length == 1) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else {  		return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  	}  } else if (mc.Arguments.Count == 1) {  	return this.VisitUpdate (mc.Arguments [0]' null' null);  }  
Magic Number,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following statement contains a magic number: if (mc.Arguments.Count == 2) {  	return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  } else if (mc.Arguments.Count == 1) {  	return this.VisitDelete (mc.Arguments [0]' null);  }  
Magic Number,System.Data.Linq.Provider.Common,SqlIdentifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlIdentifier.cs,IsQuoted,The following statement contains a magic number: if (s.Length < 2) {  	return false;  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitFunctionCall,The following statement contains a magic number: if (result is SqlFunctionCall) {  	SqlFunctionCall resultFunctionCall = (SqlFunctionCall)result;  	if (resultFunctionCall.Name == sql.LengthFunctionName) {  		SqlExpression expr = resultFunctionCall.Arguments [0];  		if (expr.SqlType.IsLargeType && !expr.SqlType.SupportsLength) {  			result = sql.FunctionCallDataLength (expr);  			if (expr.SqlType.IsUnicodeType) {  				result = sql.ConvertToInt (sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression)));  			}  		}  	}  	// If the return type of the sql function is not compatible with  	// the expected CLR type of the function' inject a conversion. This  	// step must be performed AFTER SqlRetyper has run.  	Type clrType = resultFunctionCall.SqlType.GetClosestRuntimeType ();  	bool skipConversion = SkipConversionForDateAdd (resultFunctionCall.Name' resultFunctionCall.ClrType' clrType);  	if ((resultFunctionCall.ClrType != clrType) && !skipConversion) {  		result = sql.ConvertTo (resultFunctionCall.ClrType' resultFunctionCall);  	}  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitFunctionCall,The following statement contains a magic number: if (resultFunctionCall.Name == sql.LengthFunctionName) {  	SqlExpression expr = resultFunctionCall.Arguments [0];  	if (expr.SqlType.IsLargeType && !expr.SqlType.SupportsLength) {  		result = sql.FunctionCallDataLength (expr);  		if (expr.SqlType.IsUnicodeType) {  			result = sql.ConvertToInt (sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression)));  		}  	}  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitFunctionCall,The following statement contains a magic number: if (expr.SqlType.IsLargeType && !expr.SqlType.SupportsLength) {  	result = sql.FunctionCallDataLength (expr);  	if (expr.SqlType.IsUnicodeType) {  		result = sql.ConvertToInt (sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression)));  	}  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitFunctionCall,The following statement contains a magic number: if (expr.SqlType.IsUnicodeType) {  	result = sql.ConvertToInt (sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression)));  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitFunctionCall,The following statement contains a magic number: result = sql.ConvertToInt (sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression)));  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitUnaryOperator,The following statement contains a magic number: if (result is SqlUnary) {  	SqlUnary unary = (SqlUnary)result;  	switch (unary.NodeType) {  	case SqlNodeType.ClrLength:  		SqlExpression expr = unary.Operand;  		result = sql.FunctionCallDataLength (expr);  		if (expr.SqlType.IsUnicodeType) {  			result = sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression));  		}  		result = sql.ConvertToInt (result);  		break;  	default:  		break;  	}  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitUnaryOperator,The following statement contains a magic number: switch (unary.NodeType) {  case SqlNodeType.ClrLength:  	SqlExpression expr = unary.Operand;  	result = sql.FunctionCallDataLength (expr);  	if (expr.SqlType.IsUnicodeType) {  		result = sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression));  	}  	result = sql.ConvertToInt (result);  	break;  default:  	break;  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitUnaryOperator,The following statement contains a magic number: if (expr.SqlType.IsUnicodeType) {  	result = sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression));  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlMethodTransformer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlMethodTransformer.cs,VisitUnaryOperator,The following statement contains a magic number: result = sql.Divide (result' sql.ValueFromObject (2' expr.SourceExpression));  
Magic Number,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,Visit,The following statement contains a magic number: try {  	nDepth++;  	CheckRecursionDepth (500' nDepth);  	switch (node.NodeType) {  	case SqlNodeType.Not:  	case SqlNodeType.Not2V:  	case SqlNodeType.Negate:  	case SqlNodeType.BitNot:  	case SqlNodeType.IsNull:  	case SqlNodeType.IsNotNull:  	case SqlNodeType.Count:  	case SqlNodeType.LongCount:  	case SqlNodeType.Max:  	case SqlNodeType.Min:  	case SqlNodeType.Sum:  	case SqlNodeType.Avg:  	case SqlNodeType.Stddev:  	case SqlNodeType.Convert:  	case SqlNodeType.ValueOf:  	case SqlNodeType.OuterJoinedValue:  	case SqlNodeType.ClrLength:  		result = this.VisitUnaryOperator ((SqlUnary)node);  		break;  	case SqlNodeType.Lift:  		result = this.VisitLift ((SqlLift)node);  		break;  	case SqlNodeType.Add:  	case SqlNodeType.Sub:  	case SqlNodeType.Mul:  	case SqlNodeType.Div:  	case SqlNodeType.Mod:  	case SqlNodeType.BitAnd:  	case SqlNodeType.BitOr:  	case SqlNodeType.BitXor:  	case SqlNodeType.And:  	case SqlNodeType.Or:  	case SqlNodeType.GE:  	case SqlNodeType.GT:  	case SqlNodeType.LE:  	case SqlNodeType.LT:  	case SqlNodeType.EQ:  	case SqlNodeType.NE:  	case SqlNodeType.EQ2V:  	case SqlNodeType.NE2V:  	case SqlNodeType.Concat:  	case SqlNodeType.Coalesce:  		result = this.VisitBinaryOperator ((SqlBinary)node);  		break;  	case SqlNodeType.Between:  		result = this.VisitBetween ((SqlBetween)node);  		break;  	case SqlNodeType.In:  		result = this.VisitIn ((SqlIn)node);  		break;  	case SqlNodeType.Like:  		result = this.VisitLike ((SqlLike)node);  		break;  	case SqlNodeType.Treat:  		result = this.VisitTreat ((SqlUnary)node);  		break;  	case SqlNodeType.Alias:  		result = this.VisitAlias ((SqlAlias)node);  		break;  	case SqlNodeType.AliasRef:  		result = this.VisitAliasRef ((SqlAliasRef)node);  		break;  	case SqlNodeType.Member:  		result = this.VisitMember ((SqlMember)node);  		break;  	case SqlNodeType.Row:  		result = this.VisitRow ((SqlRow)node);  		break;  	case SqlNodeType.Column:  		result = this.VisitColumn ((SqlColumn)node);  		break;  	case SqlNodeType.ColumnRef:  		result = this.VisitColumnRef ((SqlColumnRef)node);  		break;  	case SqlNodeType.Table:  		result = this.VisitTable ((SqlTable)node);  		break;  	case SqlNodeType.UserQuery:  		result = this.VisitUserQuery ((SqlUserQuery)node);  		break;  	case SqlNodeType.StoredProcedureCall:  		result = this.VisitStoredProcedureCall ((SqlStoredProcedureCall)node);  		break;  	case SqlNodeType.UserRow:  		result = this.VisitUserRow ((SqlUserRow)node);  		break;  	case SqlNodeType.UserColumn:  		result = this.VisitUserColumn ((SqlUserColumn)node);  		break;  	case SqlNodeType.Multiset:  	case SqlNodeType.ScalarSubSelect:  	case SqlNodeType.Element:  	case SqlNodeType.Exists:  		result = this.VisitSubSelect ((SqlSubSelect)node);  		break;  	case SqlNodeType.Join:  		result = this.VisitJoin ((SqlJoin)node);  		break;  	case SqlNodeType.Select:  		result = this.VisitSelect ((SqlSelect)node);  		break;  	case SqlNodeType.Parameter:  		result = this.VisitParameter ((SqlParameter)node);  		break;  	case SqlNodeType.New:  		result = this.VisitNew ((SqlNew)node);  		break;  	case SqlNodeType.Link:  		result = this.VisitLink ((SqlLink)node);  		break;  	case SqlNodeType.ClientQuery:  		result = this.VisitClientQuery ((SqlClientQuery)node);  		break;  	case SqlNodeType.JoinedCollection:  		result = this.VisitJoinedCollection ((SqlJoinedCollection)node);  		break;  	case SqlNodeType.Value:  		result = this.VisitValue ((SqlValue)node);  		break;  	case SqlNodeType.ClientArray:  		result = this.VisitClientArray ((SqlClientArray)node);  		break;  	case SqlNodeType.Insert:  		result = this.VisitInsert ((SqlInsert)node);  		break;  	case SqlNodeType.Update:  		result = this.VisitUpdate ((SqlUpdate)node);  		break;  	case SqlNodeType.Delete:  		result = this.VisitDelete ((SqlDelete)node);  		break;  	case SqlNodeType.MemberAssign:  		result = this.VisitMemberAssign ((SqlMemberAssign)node);  		break;  	case SqlNodeType.Assign:  		result = this.VisitAssign ((SqlAssign)node);  		break;  	case SqlNodeType.Block:  		result = this.VisitBlock ((SqlBlock)node);  		break;  	case SqlNodeType.SearchedCase:  		result = this.VisitSearchedCase ((SqlSearchedCase)node);  		break;  	case SqlNodeType.ClientCase:  		result = this.VisitClientCase ((SqlClientCase)node);  		break;  	case SqlNodeType.SimpleCase:  		result = this.VisitSimpleCase ((SqlSimpleCase)node);  		break;  	case SqlNodeType.TypeCase:  		result = this.VisitTypeCase ((SqlTypeCase)node);  		break;  	case SqlNodeType.Union:  		result = this.VisitUnion ((SqlUnion)node);  		break;  	case SqlNodeType.ExprSet:  		result = this.VisitExprSet ((SqlExprSet)node);  		break;  	case SqlNodeType.Variable:  		result = this.VisitVariable ((SqlVariable)node);  		break;  	case SqlNodeType.DoNotVisit:  		result = this.VisitDoNotVisit ((SqlDoNotVisitExpression)node);  		break;  	case SqlNodeType.OptionalValue:  		result = this.VisitOptionalValue ((SqlOptionalValue)node);  		break;  	case SqlNodeType.FunctionCall:  		result = this.VisitFunctionCall ((SqlFunctionCall)node);  		break;  	case SqlNodeType.TableValuedFunctionCall:  		result = this.VisitTableValuedFunctionCall ((SqlTableValuedFunctionCall)node);  		break;  	case SqlNodeType.MethodCall:  		result = this.VisitMethodCall ((SqlMethodCall)node);  		break;  	case SqlNodeType.Nop:  		result = this.VisitNop ((SqlNop)node);  		break;  	case SqlNodeType.SharedExpression:  		result = this.VisitSharedExpression ((SqlSharedExpression)node);  		break;  	case SqlNodeType.SharedExpressionRef:  		result = this.VisitSharedExpressionRef ((SqlSharedExpressionRef)node);  		break;  	case SqlNodeType.SimpleExpression:  		result = this.VisitSimpleExpression ((SqlSimpleExpression)node);  		break;  	case SqlNodeType.Grouping:  		result = this.VisitGrouping ((SqlGrouping)node);  		break;  	case SqlNodeType.DiscriminatedType:  		result = this.VisitDiscriminatedType ((SqlDiscriminatedType)node);  		break;  	case SqlNodeType.DiscriminatorOf:  		result = this.VisitDiscriminatorOf ((SqlDiscriminatorOf)node);  		break;  	case SqlNodeType.ClientParameter:  		result = this.VisitClientParameter ((SqlClientParameter)node);  		break;  	case SqlNodeType.RowNumber:  		result = this.VisitRowNumber ((SqlRowNumber)node);  		break;  	case SqlNodeType.IncludeScope:  		result = this.VisitIncludeScope ((SqlIncludeScope)node);  		break;  	default:  		throw Error.UnexpectedNode (node);  	}  } finally {  	this.nDepth--;  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,Visit,The following statement contains a magic number: CheckRecursionDepth (500' nDepth);  
Magic Number,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,RefersToColumn,The following statement contains a magic number: try {  	refersDepth++;  	System.Diagnostics.Debug.Assert (refersDepth < 20);  	#endif  	if (exp != null) {  		switch (exp.NodeType) {  		case SqlNodeType.Column:  			return exp == col || this.RefersToColumn (((SqlColumn)exp).Expression' col);  		case SqlNodeType.ColumnRef:  			SqlColumnRef cref = (SqlColumnRef)exp;  			return cref.Column == col || this.RefersToColumn (cref.Column.Expression' col);  		case SqlNodeType.ExprSet:  			SqlExprSet set = (SqlExprSet)exp;  			for (int i = 0' n = set.Expressions.Count; i < n; i++) {  				if (this.RefersToColumn (set.Expressions [i]' col)) {  					return true;  				}  			}  			break;  		case SqlNodeType.OuterJoinedValue:  			return this.RefersToColumn (((SqlUnary)exp).Operand' col);  		}  	}  	return false;  	#if DEBUG  } finally {  	refersDepth--;  }  
Magic Number,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,RefersToColumn,The following statement contains a magic number: System.Diagnostics.Debug.Assert (refersDepth < 20);  
Magic Number,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsSupportedMethod,The following statement contains a magic number: if (mc.Method.IsStatic) {  	switch (mc.Method.Name) {  	case "op_Equality":  	case "op_Inequality":  	case "op_LessThan":  	case "op_LessThanOrEqual":  	case "op_GreaterThan":  	case "op_GreaterThanOrEqual":  	case "op_Multiply":  	case "op_Division":  	case "op_Subtraction":  	case "op_Addition":  	case "op_Modulus":  	case "op_BitwiseAnd":  	case "op_BitwiseOr":  	case "op_ExclusiveOr":  	case "op_UnaryNegation":  	case "op_OnesComplement":  	case "op_False":  		return true;  	case "Equals":  		return mc.Arguments.Count == 2;  	case "Concat":  		return mc.Method.DeclaringType == typeof(string);  	}  } else {  	return mc.Method.Name == "Equals" && mc.Arguments.Count == 1 || mc.Method.Name == "GetType" && mc.Arguments.Count == 0;  }  
Magic Number,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsSupportedMethod,The following statement contains a magic number: switch (mc.Method.Name) {  case "op_Equality":  case "op_Inequality":  case "op_LessThan":  case "op_LessThanOrEqual":  case "op_GreaterThan":  case "op_GreaterThanOrEqual":  case "op_Multiply":  case "op_Division":  case "op_Subtraction":  case "op_Addition":  case "op_Modulus":  case "op_BitwiseAnd":  case "op_BitwiseOr":  case "op_ExclusiveOr":  case "op_UnaryNegation":  case "op_OnesComplement":  case "op_False":  	return true;  case "Equals":  	return mc.Arguments.Count == 2;  case "Concat":  	return mc.Method.DeclaringType == typeof(string);  }  
Magic Number,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsSupportedMethod,The following statement contains a magic number: return mc.Arguments.Count == 2;  
Missing Default,System.Data.Linq,SubqueryRules,F:\newReposMay17\FransBouma_LinqToSQL2\src\Querying\SubqueryRules.cs,IsSupportedTopLevelMethod,The following switch statement is missing a default case: switch (mi.Name) {  case "Where":  case "OrderBy":  case "OrderByDescending":  case "ThenBy":  case "ThenByDescending":  case "Take":  	return true;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,VisitJoin,The following switch statement is missing a default case: switch (@join.JoinType) {  case SqlJoinType.CrossApply:  	_commandStringBuilder.Append ("CROSS APPLY ");  	break;  case SqlJoinType.Cross:  	_commandStringBuilder.Append ("CROSS JOIN ");  	break;  case SqlJoinType.Inner:  	_commandStringBuilder.Append ("INNER JOIN ");  	break;  case SqlJoinType.LeftOuter:  	_commandStringBuilder.Append ("LEFT OUTER JOIN ");  	break;  case SqlJoinType.OuterApply:  	_commandStringBuilder.Append ("OUTER APPLY ");  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,CommandTextProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\CommandTextProducer.cs,FormatValue,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Char:  case TypeCode.String:  case TypeCode.DateTime:  	_commandStringBuilder.Append ("'");  	_commandStringBuilder.Append (this.EscapeSingleQuotes (value.ToString ()));  	_commandStringBuilder.Append ("'");  	return;  case TypeCode.Boolean:  	_commandStringBuilder.Append (this.GetBoolValue ((bool)value));  	return;  case TypeCode.Byte:  case TypeCode.Decimal:  case TypeCode.Double:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.SByte:  case TypeCode.Single:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	_commandStringBuilder.Append (value);  	return;  case TypeCode.Object: {  	if (value is Guid) {  		_commandStringBuilder.Append ("'");  		_commandStringBuilder.Append (value);  		_commandStringBuilder.Append ("'");  		return;  	}  	Type valueType = value as Type;  	if (valueType != null) {  		if (_isDebugMode) {  			_commandStringBuilder.Append ("typeof(");  			_commandStringBuilder.Append (valueType.Name);  			_commandStringBuilder.Append (")");  		} else {  			this.FormatValue ("");  		}  		return;  	}  	break;  }  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,Sql2000Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2000Provider.cs,GetBestLargeType,The following switch statement is missing a default case: switch (sqlType.SqlDbType) {  case SqlDbType.NChar:  case SqlDbType.NVarChar:  	return SqlTypeSystem.Create (SqlDbType.NText);  case SqlDbType.Char:  case SqlDbType.VarChar:  	return SqlTypeSystem.Create (SqlDbType.Text);  case SqlDbType.Binary:  case SqlDbType.VarBinary:  	return SqlTypeSystem.Create (SqlDbType.Image);  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,Sql2005Provider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\Sql2005Provider.cs,GetBestLargeType,The following switch statement is missing a default case: switch (sqlType.SqlDbType) {  case SqlDbType.NText:  case SqlDbType.NChar:  case SqlDbType.NVarChar:  	return SqlTypeSystem.Create (SqlDbType.NVarChar' ProviderConstants.LargeTypeSizeIndicator);  case SqlDbType.Text:  case SqlDbType.Char:  case SqlDbType.VarChar:  	return SqlTypeSystem.Create (SqlDbType.VarChar' ProviderConstants.LargeTypeSizeIndicator);  case SqlDbType.Image:  case SqlDbType.Binary:  case SqlDbType.VarBinary:  	return SqlTypeSystem.Create (SqlDbType.VarBinary' ProviderConstants.LargeTypeSizeIndicator);  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,GetDbType,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  	sb.Append ("TinyInt");  	break;  case TypeCode.SByte:  case TypeCode.Int16:  	sb.Append ("SmallInt");  	break;  case TypeCode.Int32:  case TypeCode.UInt16:  	sb.Append ("Int");  	break;  case TypeCode.Int64:  case TypeCode.UInt32:  	sb.Append ("BigInt");  	break;  case TypeCode.UInt64:  case TypeCode.Decimal:  	sb.Append ("Decimal(20)");  	break;  case TypeCode.Object:  	if (type == typeof(Guid)) {  		sb.Append ("UniqueIdentifier");  	} else {  		throw Error.CouldNotDetermineDbGeneratedSqlType (type);  	}  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlBuilder,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlBuilder.cs,GetDbType,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Boolean:  	sb.Append ("Bit");  	break;  case TypeCode.Byte:  	sb.Append ("TinyInt");  	break;  case TypeCode.SByte:  case TypeCode.Int16:  	sb.Append ("SmallInt");  	break;  case TypeCode.Int32:  case TypeCode.UInt16:  	sb.Append ("Int");  	break;  case TypeCode.Int64:  case TypeCode.UInt32:  	sb.Append ("BigInt");  	break;  case TypeCode.UInt64:  	sb.Append ("Decimal(20)");  	break;  case TypeCode.Decimal:  	sb.Append ("Decimal(29' 4)");  	break;  case TypeCode.Double:  	sb.Append ("Float");  	break;  case TypeCode.Single:  	sb.Append ("Real");  	break;  case TypeCode.Char:  	sb.Append ("NChar(1)");  	break;  case TypeCode.String:  	sb.Append ("NVarChar(4000)");  	break;  case TypeCode.DateTime:  	sb.Append ("DateTime");  	break;  case TypeCode.Object:  	if (type == typeof(Guid)) {  		sb.Append ("UniqueIdentifier");  	} else if (type == typeof(byte[])) {  		sb.Append ("VarBinary(8000)");  	} else if (type == typeof(char[])) {  		sb.Append ("NVarChar(4000)");  	} else if (type == typeof(DateTimeOffset)) {  		sb.Append ("DateTimeOffset");  	} else if (type == typeof(TimeSpan)) {  		sb.Append ("Time");  	} else {  		throw Error.CouldNotDetermineSqlType (type);  	}  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlParameterInfoProducer,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlParameterInfoProducer.cs,VisitBinaryOperator,The following switch statement is missing a default case: switch (bo.NodeType) {  case SqlNodeType.EQ:  case SqlNodeType.EQ2V:  case SqlNodeType.NE:  case SqlNodeType.NE2V: {  	SqlDbType leftSqlDbType = ((SqlType)(bo.Left.SqlType)).SqlDbType;  	SqlDbType rightSqlDbType = ((SqlType)(bo.Right.SqlType)).SqlDbType;  	if (leftSqlDbType == rightSqlDbType)  		break;  	bool isLeftColRef = bo.Left is SqlColumnRef;  	bool isRightColRef = bo.Right is SqlColumnRef;  	if (isLeftColRef == isRightColRef)  		break;  	if (isLeftColRef && leftSqlDbType == SqlDbType.Time && bo.Right.ClrType == typeof(DateTime))  		this.timeProviderType = bo.Left.SqlType;  	else if (isRightColRef && rightSqlDbType == SqlDbType.Time && bo.Left.ClrType == typeof(DateTime))  		this.timeProviderType = bo.Left.SqlType;  	break;  }  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlServerProviderBase,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlServerProviderBase.cs,GetBestType,The following switch statement is missing a default case: switch (targetType) {  case SqlDbType.NChar:  case SqlDbType.NVarChar:  	maxSize = 4000;  	break;  case SqlDbType.Char:  case SqlDbType.VarChar:  case SqlDbType.Binary:  case SqlDbType.VarBinary:  	maxSize = 8000;  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,AreValuesEqual,The following switch statement is missing a default case: switch (this.sqlDbType) {  case SqlDbType.Char:  case SqlDbType.NChar:  case SqlDbType.NVarChar:  case SqlDbType.VarChar:  case SqlDbType.Text:  	string s1 = o1 as string;  	if (s1 != null) {  		string s2 = o2 as string;  		if (s2 != null) {  			return s1.TrimEnd (' ').Equals (s2.TrimEnd (' ')' StringComparison.Ordinal);  		}  	}  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlType,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlType.cs,ToQueryString,The following switch statement is missing a default case: switch (sqlDbType) {  case SqlDbType.BigInt:  case SqlDbType.Bit:  case SqlDbType.Date:  case SqlDbType.Time:  case SqlDbType.DateTime:  case SqlDbType.DateTime2:  case SqlDbType.DateTimeOffset:  case SqlDbType.Int:  case SqlDbType.Money:  case SqlDbType.SmallDateTime:  case SqlDbType.SmallInt:  case SqlDbType.SmallMoney:  case SqlDbType.Timestamp:  case SqlDbType.TinyInt:  case SqlDbType.UniqueIdentifier:  case SqlDbType.Xml:  case SqlDbType.Image:  case SqlDbType.NText:  case SqlDbType.Text:  case SqlDbType.Udt:  	sb.Append (sqlDbType.ToString ());  	break;  case SqlDbType.Variant:  	sb.Append ("sql_variant");  	break;  case SqlDbType.Binary:  case SqlDbType.Char:  case SqlDbType.NChar:  	sb.Append (sqlDbType);  	if ((formatFlags & QueryFormatOptions.SuppressSize) == 0) {  		sb.Append ("(");  		sb.Append (size);  		sb.Append (")");  	}  	break;  case SqlDbType.NVarChar:  case SqlDbType.VarBinary:  case SqlDbType.VarChar:  	sb.Append (sqlDbType);  	if ((size.HasValue && size != 0) && (formatFlags & QueryFormatOptions.SuppressSize) == 0) {  		sb.Append ("(");  		if (size == ProviderConstants.LargeTypeSizeIndicator) {  			sb.Append ("MAX");  		} else {  			sb.Append (size);  		}  		sb.Append (")");  	}  	break;  case SqlDbType.Decimal:  case SqlDbType.Float:  case SqlDbType.Real:  	sb.Append (sqlDbType);  	if (precision != 0) {  		sb.Append ("(");  		sb.Append (precision);  		if (scale != 0) {  			sb.Append ("'");  			sb.Append (scale);  		}  		sb.Append (")");  	}  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetObjectMethodSupport,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "Equals":  	return MethodSupport.Method;  case "ToString":  	if (mc.Object.SqlType.CanBeColumn) {  		return MethodSupport.Method;  	}  	return MethodSupport.None;  case "GetType":  	if (mc.Arguments.Count == 0) {  		return MethodSupport.Method;  	}  	return MethodSupport.None;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDateTimeMethodSupport,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "CompareTo":  case "AddTicks":  case "AddMonths":  case "AddYears":  case "AddMilliseconds":  case "AddSeconds":  case "AddMinutes":  case "AddHours":  case "AddDays":  	return MethodSupport.Method;  case "Add":  	if (mc.Arguments.Count == 1 && mc.Arguments [0].ClrType == typeof(TimeSpan)) {  		return MethodSupport.Method;  	} else {  		return MethodSupport.MethodGroup;  	}  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDateTimeOffsetMethodSupport,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "CompareTo":  case "AddTicks":  case "AddMonths":  case "AddYears":  case "AddMilliseconds":  case "AddSeconds":  case "AddMinutes":  case "AddHours":  case "AddDays":  	return MethodSupport.Method;  case "Add":  	if (mc.Arguments.Count == 1 && mc.Arguments [0].ClrType == typeof(TimeSpan)) {  		return MethodSupport.Method;  	} else {  		return MethodSupport.MethodGroup;  	}  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetTimeSpanMethodSupport,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "Add":  case "Subtract":  case "CompareTo":  case "Duration":  case "Negate":  	return MethodSupport.Method;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetConvertMethodSupport,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "ToBoolean":  case "ToDecimal":  case "ToByte":  case "ToChar":  case "ToDouble":  case "ToInt16":  case "ToInt32":  case "ToInt64":  case "ToSingle":  case "ToString":  	return MethodSupport.Method;  case "ToDateTime":  	if (mc.Arguments [0].ClrType == typeof(string) || mc.Arguments [0].ClrType == typeof(DateTime)) {  		return MethodSupport.Method;  	} else {  		return MethodSupport.MethodGroup;  	}  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetDecimalMethodSupport,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "Multiply":  case "Divide":  case "Subtract":  case "Add":  case "Remainder":  case "Round":  	return MethodSupport.Method;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetStringMethodSupport,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "Contains":  case "StartsWith":  case "EndsWith":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "IndexOf":  case "LastIndexOf":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2 || mc.Arguments.Count == 3) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Insert":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "PadLeft":  case "PadRight":  case "Remove":  case "Substring":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Replace":  	return MethodSupport.Method;  case "Trim":  case "ToLower":  case "ToUpper":  	if (mc.Arguments.Count == 0) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "get_Chars":  case "CompareTo":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,GetMathMethodSupport,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "Abs":  case "Acos":  case "Asin":  case "Atan":  case "Ceiling":  case "Cos":  case "Cosh":  case "Exp":  case "Floor":  case "Log10":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Log":  	if (mc.Arguments.Count == 1 || mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	;  	return MethodSupport.MethodGroup;  case "Max":  case "Min":  case "Pow":  case "Atan2":  case "BigMul":  	if (mc.Arguments.Count == 2) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Round":  	if (mc.Arguments [mc.Arguments.Count - 1].ClrType == typeof(MidpointRounding) && (mc.Arguments.Count == 2 || mc.Arguments.Count == 3)) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  case "Sign":  case "Sin":  case "Sinh":  case "Sqrt":  case "Tan":  case "Tanh":  case "Truncate":  	if (mc.Arguments.Count == 1) {  		return MethodSupport.Method;  	}  	return MethodSupport.MethodGroup;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsVbConversionMethod,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "ToBoolean":  case "ToSByte":  case "ToByte":  case "ToChar":  case "ToCharArrayRankOne":  case "ToDate":  case "ToDecimal":  case "ToDouble":  case "ToInteger":  case "ToUInteger":  case "ToLong":  case "ToULong":  case "ToShort":  case "ToUShort":  case "ToSingle":  case "ToString":  	return true;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeMember,The following switch statement is missing a default case: switch (m.Member.Name) {  case "Date":  case "TimeOfDay":  case "DayOfWeek":  	return true;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedDateTimeOffsetMember,The following switch statement is missing a default case: switch (m.Member.Name) {  case "Date":  case "DateTime":  case "TimeOfDay":  case "DayOfWeek":  	return true;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,PostBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\PostBindDotNetConverter.cs,IsSupportedTimeSpanMember,The following switch statement is missing a default case: switch (m.Member.Name) {  case "Ticks":  case "TotalMilliseconds":  case "TotalSeconds":  case "TotalMinutes":  case "TotalHours":  case "TotalDays":  case "Milliseconds":  case "Seconds":  case "Minutes":  case "Hours":  case "Days":  	return true;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetCachedResult,The following switch statement is missing a default case: switch (this.GetResultShape (query)) {  case ResultShape.Singleton:  	return new ExecuteResult (null' null' null' obj);  case ResultShape.Sequence:  	return new ExecuteResult (null' null' null' Activator.CreateInstance (typeof(SequenceOfOne<>).MakeGenericType (TypeSystem.GetElementType (this.GetResultType (query)))' BindingFlags.Instance | BindingFlags.NonPublic' null' new object[] {  		obj  	}' null));  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,AssignParameters,The following switch statement is missing a default case: switch (pi.Type) {  case SqlParameterType.UserArgument:  	try {  		value = pi.Accessor.DynamicInvoke (new object[] {  			userArguments  		});  	} catch (System.Reflection.TargetInvocationException e) {  		throw e.InnerException;  	}  	break;  case SqlParameterType.PreviousResult:  	value = lastResult;  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetResultShape,The following switch statement is missing a default case: switch (mce.Method.Name) {  // methods known to produce singletons  case "First":  case "FirstOrDefault":  case "Single":  case "SingleOrDefault":  	isSingleton = true;  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,BuildQuery,The following switch statement is missing a default case: switch (this.Mode) {  case SqlServerProviderMode.Sql2000:  	converter.ConverterStrategy = ConverterStrategy.CanUseScopeIdentity | ConverterStrategy.CanUseJoinOn | ConverterStrategy.CanUseRowStatus;  	break;  case SqlServerProviderMode.Sql2005:  case SqlServerProviderMode.Sql2008:  	converter.ConverterStrategy = ConverterStrategy.CanUseScopeIdentity | ConverterStrategy.SkipWithRowNumber | ConverterStrategy.CanUseRowStatus | ConverterStrategy.CanUseJoinOn | ConverterStrategy.CanUseOuterApply | ConverterStrategy.CanOutputFromInsert;  	break;  case SqlServerProviderMode.SqlCE:  	converter.ConverterStrategy = ConverterStrategy.CanUseOuterApply;  	// Can't set ConverterStrategy.CanUseJoinOn because scalar subqueries in the ON clause  	// can't be converted into anything.  	break;  }  
Missing Default,System.Data.Linq.DbEngines.SqlServer,SqlProvider,F:\newReposMay17\FransBouma_LinqToSQL2\src\DbEngines\SqlServer\SqlProvider.cs,GetFinalSelect,The following switch statement is missing a default case: switch (node.NodeType) {  case SqlNodeType.Select:  	return (SqlSelect)node;  case SqlNodeType.Block: {  	SqlBlock b = (SqlBlock)node;  	return GetFinalSelect (b.Statements [b.Statements.Count - 1]);  }  }  
Missing Default,System.Data.Linq.Provider.Common,DynamicTypeGenerator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\DynamicTypeGenerator.cs,GenerateArrayAccess,The following switch statement is missing a default case: switch (tc) {  //case TypeCode.SByte:  //     gen.Emit(OpCodes.Ldelem_I1);  //     break;  //case TypeCode.Int16:  //     gen.Emit(OpCodes.Ldelem_I2);  //     break;  case TypeCode.Int32:  	gen.Emit (OpCodes.Ldelem_I4);  	break;  //case TypeCode.Int64:  //     gen.Emit(OpCodes.Ldelem_I8);  //     break;  //case TypeCode.Single:  //     gen.Emit(OpCodes.Ldelem_R4);  //     break;  //case TypeCode.Double:  //     gen.Emit(OpCodes.Ldelem_R8);  //     break;  //default:  //     if (type.IsValueType) {  //        gen.Emit(OpCodes.Ldelem' type);  //     }  //     else {  //        gen.Emit(OpCodes.Ldelem_Ref);  //     }  //     break;  }  
Missing Default,System.Data.Linq.Provider.Common,SqlNamer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\SqlNamer.cs,DiscoverName,The following switch statement is missing a default case: switch (e.NodeType) {  case SqlNodeType.Column:  	return DiscoverName (((SqlColumn)e).Expression);  case SqlNodeType.ColumnRef:  	SqlColumnRef cref = (SqlColumnRef)e;  	if (cref.Column.Name != null)  		return cref.Column.Name;  	return DiscoverName (cref.Column);  case SqlNodeType.ExprSet:  	SqlExprSet eset = (SqlExprSet)e;  	return DiscoverName (eset.Expressions [0]);  }  
Missing Default,System.Data.Linq.Provider.Common,NodeFactory,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\NodeFactory.cs,SubSelect,The following switch statement is missing a default case: switch (nt) {  case SqlNodeType.ScalarSubSelect:  case SqlNodeType.Element:  	clrType = @select.Selection.ClrType;  	sqlType = @select.Selection.SqlType;  	break;  case SqlNodeType.Multiset:  	if (clrType == null) {  		clrType = typeof(List<>).MakeGenericType (@select.Selection.ClrType);  	}  	sqlType = typeProvider.GetApplicationType ((int)ConverterSpecialTypes.Table);  	break;  case SqlNodeType.Exists:  	clrType = typeof(bool);  	sqlType = typeProvider.From (typeof(bool));  	break;  }  
Missing Default,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,CanSkipOnSelection,The following switch statement is missing a default case: switch (selection.NodeType) {  case SqlNodeType.AliasRef: {  	SqlNode node = ((SqlAliasRef)selection).Alias.Node;  	SqlSelect select = node as SqlSelect;  	if (select != null) {  		return CanSkipOnSelection (select.Selection);  	}  	SqlUnion union = node as SqlUnion;  	if (union != null) {  		bool left = default(bool);  		bool right = default(bool);  		SqlSelect selectLeft = union.Left as SqlSelect;  		if (selectLeft != null) {  			left = CanSkipOnSelection (selectLeft.Selection);  		}  		SqlSelect selectRight = union.Right as SqlSelect;  		if (selectRight != null) {  			right = CanSkipOnSelection (selectRight.Selection);  		}  		return left && right;  	}  	SqlExpression expr = (SqlExpression)node;  	return CanSkipOnSelection (expr);  }  case SqlNodeType.New:  	SqlNew sn = (SqlNew)selection;  	// check each member of the projection for sequences  	foreach (SqlMemberAssign ma in sn.Members) {  		if (!CanSkipOnSelection (ma.Expression))  			return false;  	}  	if (sn.ArgMembers != null) {  		for (int i = 0' n = sn.ArgMembers.Count; i < n; ++i) {  			if (!CanSkipOnSelection (sn.Args [i])) {  				return false;  			}  		}  	}  	break;  }  
Missing Default,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitUnary,The following switch statement is missing a default case: switch (u.NodeType) {  case ExpressionType.Negate:  case ExpressionType.NegateChecked:  	result = _nodeFactory.Unary (SqlNodeType.Negate' exp' _dominatingExpression);  	break;  case ExpressionType.Not:  	if (u.Operand.Type == typeof(bool) || u.Operand.Type == typeof(bool?)) {  		result = _nodeFactory.Unary (SqlNodeType.Not' exp' _dominatingExpression);  	} else {  		result = _nodeFactory.Unary (SqlNodeType.BitNot' exp' _dominatingExpression);  	}  	break;  case ExpressionType.TypeAs:  	result = _nodeFactory.Unary (SqlNodeType.Treat' exp' _dominatingExpression);  	break;  }  
Missing Default,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitMethodCall,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "GetTable": {  	// calls to GetTable<T> can be translated directly as table references  	if (mc.Method.IsGenericMethod) {  		Type[] typeArgs = mc.Method.GetGenericArguments ();  		if (typeArgs.Length == 1 && mc.Method.GetParameters ().Length == 0) {  			CheckContext (this.VisitExpression (mc.Object));  			ITable table = _services.Context.GetTable (typeArgs [0]);  			if (table != null) {  				return this.Visit (Expression.Constant (table));  			}  		}  	}  	break;  }  case "ExecuteCommand":  case "ExecuteQuery":  	return this.VisitUserQuery ((string)GetValue (mc.Arguments [0]' mc.Method.Name)' GetArray (mc.Arguments [1])' mc.Type);  }  
Missing Default,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitSequenceOperatorCall,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "Select":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelect (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "SelectMany":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitSelectMany (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	}  	break;  case "Join":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "GroupJoin":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 5 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [4]) && this.GetLambda (mc.Arguments [4]).Parameters.Count == 2) {  		return this.VisitGroupJoin (mc.Arguments [0]' mc.Arguments [1]' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3])' this.GetLambda (mc.Arguments [4]));  	}  	break;  case "DefaultIfEmpty":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDefaultIfEmpty (mc.Arguments [0]);  	}  	break;  case "OfType":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type ofType = mc.Method.GetGenericArguments () [0];  		return this.VisitOfType (mc.Arguments [0]' ofType);  	}  	break;  case "Cast":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		Type type = mc.Method.GetGenericArguments () [0];  		return this.VisitSequenceCast (mc.Arguments [0]' type);  	}  	break;  case "Where":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitWhere (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	}  	break;  case "First":  case "FirstOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "Single":  case "SingleOrDefault":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' null' false);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitFirst (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Distinct":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitDistinct (mc.Arguments [0]);  	}  	break;  case "Concat":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitConcat (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Union":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitUnion (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Intersect":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitIntersect (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Except":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitExcept (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Any":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' null' true);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' true);  	}  	break;  case "All":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitQuantifier (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' false);  	}  	break;  case "Count":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Count' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Count' mc.Type);  	}  	break;  case "LongCount":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.LongCount' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.LongCount' mc.Type);  	}  	break;  case "Sum":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Sum' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Sum' mc.Type);  	}  	break;  case "Min":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Min' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Min' mc.Type);  	}  	break;  case "Max":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Max' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Max' mc.Type);  	}  	break;  case "Average":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' null' SqlNodeType.Avg' mc.Type);  	} else if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitAggregate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlNodeType.Avg' mc.Type);  	}  	break;  case "GroupBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' null);  	} else if (mc.Arguments.Count == 3 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 4 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [2]) && this.GetLambda (mc.Arguments [2]).Parameters.Count == 1 && this.IsLambda (mc.Arguments [3]) && this.GetLambda (mc.Arguments [3]).Parameters.Count == 2) {  		return this.VisitGroupBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2])' this.GetLambda (mc.Arguments [3]));  	}  	break;  case "OrderBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "OrderByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitOrderBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "ThenBy":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Ascending);  	}  	break;  case "ThenByDescending":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2 && this.IsLambda (mc.Arguments [1]) && this.GetLambda (mc.Arguments [1]).Parameters.Count == 1) {  		return this.VisitThenBy (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' SqlOrderType.Descending);  	}  	break;  case "Take":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitTake (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Skip":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitSkip (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "Contains":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitContains (mc.Arguments [0]' mc.Arguments [1]);  	}  	break;  case "ToList":  case "AsEnumerable":  case "ToArray":  	isSupportedSequenceOperator = true;  	if (mc.Arguments.Count == 1) {  		return this.Visit (mc.Arguments [0]);  	}  	break;  }  
Missing Default,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,VisitDataManipulationCall,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "Insert":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitInsert (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitInsert (mc.Arguments [0]' null);  	}  	break;  case "Update":  	isSupportedDML = true;  	if (mc.Arguments.Count == 3) {  		return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' this.GetLambda (mc.Arguments [2]));  	} else if (mc.Arguments.Count == 2) {  		if (mc.Method.GetGenericArguments ().Length == 1) {  			return this.VisitUpdate (mc.Arguments [0]' this.GetLambda (mc.Arguments [1])' null);  		} else {  			return this.VisitUpdate (mc.Arguments [0]' null' this.GetLambda (mc.Arguments [1]));  		}  	} else if (mc.Arguments.Count == 1) {  		return this.VisitUpdate (mc.Arguments [0]' null' null);  	}  	break;  case "Delete":  	isSupportedDML = true;  	if (mc.Arguments.Count == 2) {  		return this.VisitDelete (mc.Arguments [0]' this.GetLambda (mc.Arguments [1]));  	} else if (mc.Arguments.Count == 1) {  		return this.VisitDelete (mc.Arguments [0]' null);  	}  	break;  }  
Missing Default,System.Data.Linq.Provider.Common,QueryConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Common\QueryConverter.cs,IsLegalIdentityType,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,The following switch statement is missing a default case: switch (bo.NodeType) {  case SqlNodeType.EQ:  case SqlNodeType.EQ2V:  	if (this.IsConstNull (bo.Left) && !TypeSystem.IsNullableType (bo.ClrType)) {  		return this.VisitUnaryOperator (this.sql.Unary (SqlNodeType.IsNull' bo.Right' bo.SourceExpression));  	} else if (this.IsConstNull (bo.Right) && !TypeSystem.IsNullableType (bo.ClrType)) {  		return this.VisitUnaryOperator (this.sql.Unary (SqlNodeType.IsNull' bo.Left' bo.SourceExpression));  	}  	break;  case SqlNodeType.NE:  case SqlNodeType.NE2V:  	if (this.IsConstNull (bo.Left) && !TypeSystem.IsNullableType (bo.ClrType)) {  		return this.VisitUnaryOperator (this.sql.Unary (SqlNodeType.IsNotNull' bo.Right' bo.SourceExpression));  	} else if (this.IsConstNull (bo.Right) && !TypeSystem.IsNullableType (bo.ClrType)) {  		return this.VisitUnaryOperator (this.sql.Unary (SqlNodeType.IsNotNull' bo.Left' bo.SourceExpression));  	}  	break;  }  
Missing Default,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,The following switch statement is missing a default case: switch (bo.NodeType) {  case SqlNodeType.EQ:  case SqlNodeType.EQ2V:  case SqlNodeType.NE:  case SqlNodeType.NE2V: {  	SqlValue vLeft = bo.Left as SqlValue;  	SqlValue vRight = bo.Right as SqlValue;  	bool leftIsBool = vLeft != null && vLeft.Value is bool;  	bool rightIsBool = vRight != null && vRight.Value is bool;  	if (leftIsBool || rightIsBool) {  		bool equal = bo.NodeType != SqlNodeType.NE && bo.NodeType != SqlNodeType.NE2V;  		bool isTwoValue = bo.NodeType == SqlNodeType.EQ2V || bo.NodeType == SqlNodeType.NE2V;  		SqlNodeType negator = isTwoValue ? SqlNodeType.Not2V : SqlNodeType.Not;  		if (leftIsBool && !rightIsBool) {  			bool value = (bool)vLeft.Value;  			if (value ^ equal) {  				return VisitUnaryOperator (new SqlUnary (negator' bo.ClrType' bo.SqlType' sql.DoNotVisitExpression (bo.Right)' bo.SourceExpression));  			}  			if (bo.Right.ClrType == typeof(bool)) {  				// If the other side is nullable bool then this expression is already a reasonable way to handle three-values  				return bo.Right;  			}  		} else if (!leftIsBool && rightIsBool) {  			bool value = (bool)vRight.Value;  			if (value ^ equal) {  				return VisitUnaryOperator (new SqlUnary (negator' bo.ClrType' bo.SqlType' sql.DoNotVisitExpression (bo.Left)' bo.SourceExpression));  			}  			if (bo.Left.ClrType == typeof(bool)) {  				// If the other side is nullable bool then this expression is already a reasonable way to handle three-values  				return bo.Left;  			}  		} else if (leftIsBool && rightIsBool) {  			// Here' both left and right are bools.  			bool leftValue = (bool)vLeft.Value;  			bool rightValue = (bool)vRight.Value;  			if (equal) {  				return sql.ValueFromObject (leftValue == rightValue' false' bo.SourceExpression);  			} else {  				return sql.ValueFromObject (leftValue != rightValue' false' bo.SourceExpression);  			}  		}  	}  	break;  }  }  
Missing Default,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,The following switch statement is missing a default case: switch (bo.NodeType) {  case SqlNodeType.And: {  	SqlValue vLeft = bo.Left as SqlValue;  	SqlValue vRight = bo.Right as SqlValue;  	if (vLeft != null && vRight == null) {  		if (vLeft.Value != null && (bool)vLeft.Value) {  			return bo.Right;  		}  		return sql.ValueFromObject (false' false' bo.SourceExpression);  	} else if (vLeft == null && vRight != null) {  		if (vRight.Value != null && (bool)vRight.Value) {  			return bo.Left;  		}  		return sql.ValueFromObject (false' false' bo.SourceExpression);  	} else if (vLeft != null && vRight != null) {  		return sql.ValueFromObject ((bool)(vLeft.Value ?? false) && (bool)(vRight.Value ?? false)' false' bo.SourceExpression);  	}  	break;  }  case SqlNodeType.Or: {  	SqlValue vLeft = bo.Left as SqlValue;  	SqlValue vRight = bo.Right as SqlValue;  	if (vLeft != null && vRight == null) {  		if (vLeft.Value != null && !(bool)vLeft.Value) {  			return bo.Right;  		}  		return sql.ValueFromObject (true' false' bo.SourceExpression);  	} else if (vLeft == null && vRight != null) {  		if (vRight.Value != null && !(bool)vRight.Value) {  			return bo.Left;  		}  		return sql.ValueFromObject (true' false' bo.SourceExpression);  	} else if (vLeft != null && vRight != null) {  		return sql.ValueFromObject ((bool)(vLeft.Value ?? false) || (bool)(vRight.Value ?? false)' false' bo.SourceExpression);  	}  	break;  }  case SqlNodeType.EQ:  case SqlNodeType.NE:  case SqlNodeType.EQ2V:  case SqlNodeType.NE2V: {  	SqlExpression translated = this.translator.TranslateLinkEquals (bo);  	if (translated != bo) {  		return this.VisitExpression (translated);  	}  	break;  }  }  
Missing Default,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitBinaryOperator,The following switch statement is missing a default case: switch (bo.NodeType) {  case SqlNodeType.EQ:  case SqlNodeType.NE:  case SqlNodeType.EQ2V:  case SqlNodeType.NE2V:  	SqlExpression translated = this.translator.TranslateEquals (bo);  	if (translated != bo) {  		return this.VisitExpression (translated);  	}  	// Special handling for typeof(Type) nodes. Reduce to a static check if possible;  	// strip SqlDiscriminatedType if possible;  	if (typeof(Type).IsAssignableFrom (bo.Left.ClrType)) {  		SqlExpression left = TypeSource.GetTypeSource (bo.Left);  		SqlExpression right = TypeSource.GetTypeSource (bo.Right);  		MetaType[] leftPossibleTypes = GetPossibleTypes (left);  		MetaType[] rightPossibleTypes = GetPossibleTypes (right);  		bool someMatch = false;  		for (int i = 0; i < leftPossibleTypes.Length; ++i) {  			for (int j = 0; j < rightPossibleTypes.Length; ++j) {  				if (leftPossibleTypes [i] == rightPossibleTypes [j]) {  					someMatch = true;  					break;  				}  			}  		}  		// Is a match possible?  		if (!someMatch) {  			// No match is possible  			return this.VisitExpression (sql.ValueFromObject (bo.NodeType == SqlNodeType.NE' false' bo.SourceExpression));  		}  		// Is the match known statically?  		if (leftPossibleTypes.Length == 1 && rightPossibleTypes.Length == 1) {  			// Yes' the match is statically known.  			return this.VisitExpression (sql.ValueFromObject ((bo.NodeType == SqlNodeType.EQ) == (leftPossibleTypes [0] == rightPossibleTypes [0])' false' bo.SourceExpression));  		}  		// If both sides are discriminated types' then create a comparison of discriminators instead;  		SqlDiscriminatedType leftDt = bo.Left as SqlDiscriminatedType;  		SqlDiscriminatedType rightDt = bo.Right as SqlDiscriminatedType;  		if (leftDt != null && rightDt != null) {  			return this.VisitExpression (sql.Binary (bo.NodeType' leftDt.Discriminator' rightDt.Discriminator));  		}  	}  	// can only compare sql scalars  	if (TypeSystem.IsSequenceType (bo.Left.ClrType)) {  		throw Error.ComparisonNotSupportedForType (bo.Left.ClrType);  	}  	if (TypeSystem.IsSequenceType (bo.Right.ClrType)) {  		throw Error.ComparisonNotSupportedForType (bo.Right.ClrType);  	}  	break;  }  
Missing Default,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,VisitUnaryOperator,The following switch statement is missing a default case: switch (exp.NodeType) {  case SqlNodeType.Element:  	exp = sql.SubSelect (SqlNodeType.Exists' ((SqlSubSelect)exp).Select);  	if (uo.NodeType == SqlNodeType.IsNull) {  		exp = sql.Unary (SqlNodeType.Not' exp' exp.SourceExpression);  	}  	return exp;  case SqlNodeType.ClientQuery: {  	SqlClientQuery cq = (SqlClientQuery)exp;  	if (cq.Query.NodeType == SqlNodeType.Element) {  		exp = sql.SubSelect (SqlNodeType.Exists' cq.Query.Select);  		if (uo.NodeType == SqlNodeType.IsNull) {  			exp = sql.Unary (SqlNodeType.Not' exp' exp.SourceExpression);  		}  		return exp;  	}  	return sql.ValueFromObject (uo.NodeType == SqlNodeType.IsNotNull' false' uo.SourceExpression);  }  case SqlNodeType.OptionalValue:  	uo.Operand = ((SqlOptionalValue)exp).HasValue;  	return uo;  case SqlNodeType.ClientCase: {  	// Distribute unary into simple case.  	SqlClientCase sc = (SqlClientCase)uo.Operand;  	List<SqlExpression> matches = new List<SqlExpression> ();  	List<SqlExpression> values = new List<SqlExpression> ();  	foreach (SqlClientWhen when in sc.Whens) {  		matches.Add (when.Match);  		values.Add (VisitUnaryOperator (sql.Unary (uo.NodeType' when.Value' when.Value.SourceExpression)));  	}  	return sql.Case (sc.ClrType' sc.Expression' matches' values' sc.SourceExpression);  }  case SqlNodeType.TypeCase: {  	// Distribute unary into type case. In the process' convert to simple case.  	SqlTypeCase tc = (SqlTypeCase)uo.Operand;  	List<SqlExpression> newMatches = new List<SqlExpression> ();  	List<SqlExpression> newValues = new List<SqlExpression> ();  	foreach (SqlTypeCaseWhen when in tc.Whens) {  		SqlUnary un = new SqlUnary (uo.NodeType' uo.ClrType' uo.SqlType' when.TypeBinding' when.TypeBinding.SourceExpression);  		SqlExpression expr = VisitUnaryOperator (un);  		if (expr is SqlNew) {  			throw Error.DidNotExpectTypeBinding ();  		}  		newMatches.Add (when.Match);  		newValues.Add (expr);  	}  	return sql.Case (uo.ClrType' tc.Discriminator' newMatches' newValues' tc.SourceExpression);  }  case SqlNodeType.Value: {  	SqlValue val = (SqlValue)uo.Operand;  	return sql.Value (typeof(bool)' this.typeProvider.From (typeof(int))' (val.Value == null) == (uo.NodeType == SqlNodeType.IsNull)' val.IsClientSpecified' uo.SourceExpression);  }  }  
Missing Default,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertLinks,The following switch statement is missing a default case: switch (node.NodeType) {  case SqlNodeType.Column: {  	SqlColumn col = (SqlColumn)node;  	if (col.Expression != null) {  		col.Expression = this.ConvertLinks (col.Expression);  	}  	return node;  }  case SqlNodeType.OuterJoinedValue: {  	SqlExpression o = ((SqlUnary)node).Operand;  	SqlExpression e = this.ConvertLinks (o);  	if (e == o) {  		return node;  	}  	if (e.NodeType != SqlNodeType.OuterJoinedValue) {  		return sql.Unary (SqlNodeType.OuterJoinedValue' e);  	}  	return e;  }  case SqlNodeType.Link:  	return this.ConvertToFetchedExpression ((SqlLink)node);  case SqlNodeType.ClientCase: {  	SqlClientCase sc = (SqlClientCase)node;  	foreach (SqlClientWhen when in sc.Whens) {  		SqlExpression converted = ConvertLinks (when.Value);  		when.Value = converted;  		if (!sc.ClrType.IsAssignableFrom (when.Value.ClrType)) {  			throw Error.DidNotExpectTypeChange (when.Value.ClrType' sc.ClrType);  		}  	}  	return node;  }  }  
Missing Default,System.Data.Linq.Provider.Visitors,MemberAccessBinder,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MemberAccessBinder.cs,ConvertToFetchedExpression,The following switch statement is missing a default case: switch (node.NodeType) {  case SqlNodeType.OuterJoinedValue: {  	SqlExpression o = ((SqlUnary)node).Operand;  	SqlExpression e = this.ConvertLinks (o);  	if (e == o) {  		return (SqlExpression)node;  	}  	return e;  }  case SqlNodeType.ClientCase: {  	// Need to recurse in case the object case has links.  	SqlClientCase cc = (SqlClientCase)node;  	List<SqlNode> fetchedValues = new List<SqlNode> ();  	bool allExprs = true;  	foreach (SqlClientWhen when in cc.Whens) {  		SqlNode fetchedValue = ConvertToFetchedExpression (when.Value);  		allExprs = allExprs && (fetchedValue is SqlExpression);  		fetchedValues.Add (fetchedValue);  	}  	if (allExprs) {  		// All WHEN values are simple expressions (no sequences).   		List<SqlExpression> matches = new List<SqlExpression> ();  		List<SqlExpression> values = new List<SqlExpression> ();  		for (int i = 0' c = fetchedValues.Count; i < c; ++i) {  			SqlExpression fetchedValue = (SqlExpression)fetchedValues [i];  			if (!cc.ClrType.IsAssignableFrom (fetchedValue.ClrType)) {  				throw Error.DidNotExpectTypeChange (cc.ClrType' fetchedValue.ClrType);  			}  			matches.Add (cc.Whens [i].Match);  			values.Add (fetchedValue);  		}  		node = sql.Case (cc.ClrType' cc.Expression' matches' values' cc.SourceExpression);  	} else {  		node = SimulateCaseOfSequences (cc' fetchedValues);  	}  	break;  }  case SqlNodeType.TypeCase: {  	SqlTypeCase tc = (SqlTypeCase)node;  	List<SqlNode> fetchedValues = new List<SqlNode> ();  	foreach (SqlTypeCaseWhen when in tc.Whens) {  		SqlNode fetchedValue = ConvertToFetchedExpression (when.TypeBinding);  		fetchedValues.Add (fetchedValue);  	}  	for (int i = 0' c = fetchedValues.Count; i < c; ++i) {  		SqlExpression fetchedValue = (SqlExpression)fetchedValues [i];  		tc.Whens [i].TypeBinding = fetchedValue;  	}  	break;  }  case SqlNodeType.SearchedCase: {  	SqlSearchedCase sc = (SqlSearchedCase)node;  	foreach (SqlWhen when in sc.Whens) {  		when.Match = this.ConvertToFetchedExpression (when.Match);  		when.Value = this.ConvertToFetchedExpression (when.Value);  	}  	sc.Else = this.ConvertToFetchedExpression (sc.Else);  	break;  }  case SqlNodeType.Link:  	{  		SqlLink link = (SqlLink)node;  		if (link.Expansion != null) {  			return this.VisitLinkExpansion (link);  		}  		SqlExpression cached;  		if (this.linkMap.TryGetValue (link.Id' out cached)) {  			return this.VisitExpression (cached);  		}  		// translate link into expanded form  		node = this.translator.TranslateLink (link' true);  		// New nodes may have been produced because of Subquery.  		// Prebind again for method-call and static treat handling.  		node = binder.Prebind (node);  		// Make it an expression.  		node = this.ConvertToExpression (node);  		// bind the translation  		node = this.Visit (node);  		// Check for element node' rewrite as sql apply.  		if (this.currentSelect != null && node != null && node.NodeType == SqlNodeType.Element && link.Member.IsAssociation && this.binder.OptimizeLinkExpansions) {  			// if link in a non-nullable foreign key association then inner-join is okay to use (since it must always exist)  			// otherwise use left-outer-join   			SqlJoinType joinType = (link.Member.Association.IsForeignKey && !link.Member.Association.IsNullable) ? SqlJoinType.Inner : SqlJoinType.LeftOuter;  			SqlSubSelect ss = (SqlSubSelect)node;  			SqlExpression where = ss.Select.Where;  			ss.Select.Where = null;  			// form cross apply   			SqlAlias sa = new SqlAlias (ss.Select);  			if (joinType == SqlJoinType.Inner && this.IsOuterDependent (this.currentSelect.From' sa' @where)) {  				joinType = SqlJoinType.LeftOuter;  			}  			this.currentSelect.From = sql.MakeJoin (joinType' this.currentSelect.From' sa' @where' ss.SourceExpression);  			SqlExpression result = new SqlAliasRef (sa);  			this.linkMap.Add (link.Id' result);  			return this.VisitExpression (result);  		}  	}  	break;  }  
Missing Default,System.Data.Linq.Provider.Visitors,CaseSimplifier,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\CaseSimplifier.cs,VisitBinaryOperator,The following switch statement is missing a default case: switch (bo.NodeType) {  case SqlNodeType.EQ:  case SqlNodeType.NE:  case SqlNodeType.EQ2V:  case SqlNodeType.NE2V:  	if (bo.Left.NodeType == SqlNodeType.SimpleCase && bo.Right.NodeType == SqlNodeType.Value && AreCaseWhenValuesConstant ((SqlSimpleCase)bo.Left)) {  		return this.DistributeOperatorIntoCase (bo.NodeType' (SqlSimpleCase)bo.Left' bo.Right);  	} else if (bo.Right.NodeType == SqlNodeType.SimpleCase && bo.Left.NodeType == SqlNodeType.Value && AreCaseWhenValuesConstant ((SqlSimpleCase)bo.Right)) {  		return this.DistributeOperatorIntoCase (bo.NodeType' (SqlSimpleCase)bo.Right' bo.Left);  	}  	break;  }  
Missing Default,System.Data.Linq.Provider.Visitors,SqlAliasDeflator,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlAliasDeflator.cs,VisitJoin,The following switch statement is missing a default case: switch (@join.JoinType) {  case SqlJoinType.Cross:  case SqlJoinType.Inner:  	// reducing either side would effect cardinality of results  	break;  case SqlJoinType.LeftOuter:  case SqlJoinType.CrossApply:  case SqlJoinType.OuterApply:  	// may reduce to left if no references to the right  	if (this.HasEmptySource (@join.Right)) {  		SqlAlias a = (SqlAlias)@join.Right;  		_removedMap [a] = a;  		return @join.Left;  	}  	break;  }  
Missing Default,System.Data.Linq.Provider.Visitors,SqlColumnEqualizer,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlColumnEqualizer.cs,CheckJoinCondition,The following switch statement is missing a default case: switch (expr.NodeType) {  case SqlNodeType.And: {  	SqlBinary b = (SqlBinary)expr;  	CheckJoinCondition (b.Left);  	CheckJoinCondition (b.Right);  	break;  }  case SqlNodeType.EQ:  case SqlNodeType.EQ2V: {  	SqlBinary b = (SqlBinary)expr;  	SqlColumnRef crLeft = b.Left as SqlColumnRef;  	SqlColumnRef crRight = b.Right as SqlColumnRef;  	if (crLeft != null && crRight != null) {  		SqlColumn cLeft = crLeft.GetRootColumn ();  		SqlColumn cRight = crRight.GetRootColumn ();  		this._map [cLeft] = cRight;  		this._map [cRight] = cLeft;  	}  	break;  }  }  
Missing Default,System.Data.Linq.Provider.Visitors,SingleTableQueryVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SingleTableQueryVisitor.cs,IsColumnMatch,The following switch statement is missing a default case: switch (expr.NodeType) {  case SqlNodeType.Column: {  	memberInfo = ((SqlColumn)expr).MetaMember.Member;  	break;  }  case SqlNodeType.ColumnRef: {  	memberInfo = (((SqlColumnRef)expr).Column).MetaMember.Member;  	break;  }  case SqlNodeType.Member: {  	memberInfo = ((SqlMember)expr).Member;  	break;  }  }  
Missing Default,System.Data.Linq.Provider.Visitors,TypeCorrector,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\TypeCorrector.cs,CanDbConvert,The following switch statement is missing a default case: switch (tcTo) {  #warning [FB] REFACTOR SQL Server specific  case TypeCode.Int16:  	return tcFrom == TypeCode.Byte || tcFrom == TypeCode.SByte;  case TypeCode.Int32:  	return tcFrom == TypeCode.Byte || tcFrom == TypeCode.SByte || tcFrom == TypeCode.Int16 || tcFrom == TypeCode.UInt16;  case TypeCode.Int64:  	return tcFrom == TypeCode.Byte || tcFrom == TypeCode.SByte || tcFrom == TypeCode.Int16 || tcFrom == TypeCode.UInt16 || tcFrom == TypeCode.Int32 || tcFrom == TypeCode.UInt32;  case TypeCode.UInt16:  	return tcFrom == TypeCode.Byte || tcFrom == TypeCode.SByte;  case TypeCode.UInt32:  	return tcFrom == TypeCode.Byte || tcFrom == TypeCode.SByte || tcFrom == TypeCode.Int16 || tcFrom == TypeCode.UInt16;  case TypeCode.UInt64:  	return tcFrom == TypeCode.Byte || tcFrom == TypeCode.SByte || tcFrom == TypeCode.Int16 || tcFrom == TypeCode.UInt16 || tcFrom == TypeCode.Int32 || tcFrom == TypeCode.UInt32;  case TypeCode.Double:  	return tcFrom == TypeCode.Single;  case TypeCode.Decimal:  	return tcFrom == TypeCode.Single || tcFrom == TypeCode.Double;  }  
Missing Default,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,VisitSubSelect,The following switch statement is missing a default case: switch (ss.NodeType) {  case SqlNodeType.ScalarSubSelect:  	return this.VisitScalarSubSelect (ss);  case SqlNodeType.Multiset:  	return this.VisitMultiset (ss);  case SqlNodeType.Element:  	return this.VisitElement (ss);  case SqlNodeType.Exists:  	return this.VisitExists (ss);  }  
Missing Default,System.Data.Linq.Provider.Visitors,SqlVisitor,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\SqlVisitor.cs,RefersToColumn,The following switch statement is missing a default case: switch (exp.NodeType) {  case SqlNodeType.Column:  	return exp == col || this.RefersToColumn (((SqlColumn)exp).Expression' col);  case SqlNodeType.ColumnRef:  	SqlColumnRef cref = (SqlColumnRef)exp;  	return cref.Column == col || this.RefersToColumn (cref.Column.Expression' col);  case SqlNodeType.ExprSet:  	SqlExprSet set = (SqlExprSet)exp;  	for (int i = 0' n = set.Expressions.Count; i < n; i++) {  		if (this.RefersToColumn (set.Expressions [i]' col)) {  			return true;  		}  	}  	break;  case SqlNodeType.OuterJoinedValue:  	return this.RefersToColumn (((SqlUnary)exp).Operand' col);  }  
Missing Default,System.Data.Linq.Provider.Visitors,PreBindDotNetConverter,F:\newReposMay17\FransBouma_LinqToSQL2\src\Provider\Visitors\MethodCallConverter.cs,IsSupportedMethod,The following switch statement is missing a default case: switch (mc.Method.Name) {  case "op_Equality":  case "op_Inequality":  case "op_LessThan":  case "op_LessThanOrEqual":  case "op_GreaterThan":  case "op_GreaterThanOrEqual":  case "op_Multiply":  case "op_Division":  case "op_Subtraction":  case "op_Addition":  case "op_Modulus":  case "op_BitwiseAnd":  case "op_BitwiseOr":  case "op_ExclusiveOr":  case "op_UnaryNegation":  case "op_OnesComplement":  case "op_False":  	return true;  case "Equals":  	return mc.Arguments.Count == 2;  case "Concat":  	return mc.Method.DeclaringType == typeof(string);  }  
Missing Default,LinqToSqlShared.Mapping,MappingSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\MappingSystem.cs,IsSupportedDiscriminatorType,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  case TypeCode.Char:  case TypeCode.String:  case TypeCode.Boolean:  	return true;  }  
Missing Default,LinqToSqlShared.Mapping,MappingSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\MappingSystem.cs,IsSupportedDiscriminatorType,The following switch statement is missing a default case: switch (type) {  case SqlDbType.BigInt:  case SqlDbType.Bit:  case SqlDbType.Char:  case SqlDbType.Int:  case SqlDbType.NChar:  case SqlDbType.NVarChar:  case SqlDbType.SmallInt:  case SqlDbType.TinyInt:  case SqlDbType.VarChar:  	return true;  }  
Missing Default,LinqToSqlShared.Mapping,MappingSystem,F:\newReposMay17\FransBouma_LinqToSQL2\src\Mapping\DbmlShared\MappingSystem.cs,IsSupportedIdentityType,The following switch statement is missing a default case: switch (Type.GetTypeCode (type)) {  case TypeCode.Byte:  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  case TypeCode.Char:  case TypeCode.String:  case TypeCode.Boolean:  case TypeCode.Decimal:  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
