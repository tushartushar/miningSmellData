Implementation smell,Namespace,Class,File,Method,Description
Long Method,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,Load,The method has 123 lines of code.
Complex Method,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,Load,Cyclomatic complexity of the method is 13
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,SetToDefault,The following statement contains a magic number: WriteCurPer = 5;
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,SetToDefault,The following statement contains a magic number: InactUnrelTime = 5;
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,SetToDefault,The following statement contains a magic number: WriteMinPer = 60;
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,SetToDefault,The following statement contains a magic number: StoreMinPer = 365;
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,SetToDefault,The following statement contains a magic number: WriteHrPer = 60;
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,SetToDefault,The following statement contains a magic number: StoreHrPer = 365;
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,SetToDefault,The following statement contains a magic number: StoreEvPer = 365;
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,Load,The following statement contains a magic number: try              {                  if (!File.Exists(fileName))                      throw new FileNotFoundException(string.Format(CommonPhrases.NamedFileNotFound' fileName));                    XmlDocument xmlDoc = new XmlDocument(); // обрабатываемый XML-документ                  xmlDoc.Load(fileName);                  XmlElement rootElem = xmlDoc.DocumentElement;                    // загрузка общих параметров                  XmlNode paramsNode = rootElem.SelectSingleNode("CommonParams");                  if (paramsNode != null)                  {                      XmlNodeList paramNodeList = paramsNode.SelectNodes("Param");                      foreach (XmlElement paramElem in paramNodeList)                      {                          string name = paramElem.GetAttribute("name").Trim();                          string nameL = name.ToLowerInvariant();                          string val = paramElem.GetAttribute("value");                            try                          {                              if (nameL == "tcpport")                                  TcpPort = int.Parse(val);                              else if (nameL == "usead")                                  UseAD = bool.Parse(val);                              else if (nameL == "ldappath")                                  LdapPath = val;                              else if (nameL == "detailedlog")                                  DetailedLog = bool.Parse(val);                          }                          catch                          {                              throw new Exception(string.Format(CommonPhrases.IncorrectXmlParamVal' name));                          }                      }                  }                    // загрузка директорий                  paramsNode = rootElem.SelectSingleNode("Directories");                  if (paramsNode != null)                  {                      XmlNodeList paramNodeList = paramsNode.SelectNodes("Param");                      foreach (XmlElement paramElem in paramNodeList)                      {                          string nameL = paramElem.GetAttribute("name").Trim().ToLowerInvariant();                          string val = ScadaUtils.NormalDir(paramElem.GetAttribute("value"));                            if (nameL == "basedatdir")                              BaseDATDir = val;                          else if (nameL == "itfdir")                              ItfDir = val;                          else if (nameL == "arcdir")                              ArcDir = val;                          else if (nameL == "arccopydir")                              ArcCopyDir = val;                      }                  }                    // загрузка параметров записи данных                  paramsNode = rootElem.SelectSingleNode("SaveParams");                  if (paramsNode != null)                  {                      XmlNodeList paramNodeList = paramsNode.SelectNodes("Param");                      foreach (XmlElement paramElem in paramNodeList)                      {                          string name = paramElem.GetAttribute("name").Trim();                          string nameL = name.ToLowerInvariant();                          string val = paramElem.GetAttribute("value");                            try                          {                              if (nameL == "writecurper")                                  WriteCurPer = int.Parse(val);                              else if (nameL == "inactunreltime")                                  InactUnrelTime = int.Parse(val);                              else if (nameL == "writecur")                                  WriteCur = bool.Parse(val);                              else if (nameL == "writecurcopy")                                  WriteCurCopy = bool.Parse(val);                              else if (nameL == "writeminper")                                  WriteMinPer = int.Parse(val);                              else if (nameL == "storeminper")                                  StoreMinPer = int.Parse(val);                              else if (nameL == "writemin")                                  WriteMin = bool.Parse(val);                              else if (nameL == "writemincopy")                                  WriteMinCopy = bool.Parse(val);                              else if (nameL == "writehrper")                                  WriteHrPer = int.Parse(val) * 60;                              else if (nameL == "storehrper")                                  StoreHrPer = int.Parse(val);                              else if (nameL == "writehr")                                  WriteHr = bool.Parse(val);                              else if (nameL == "writehrcopy")                                  WriteHrCopy = bool.Parse(val);                              else if (nameL == "storeevper")                                  StoreEvPer = int.Parse(val);                              else if (nameL == "writeev")                                  WriteEv = bool.Parse(val);                              else if (nameL == "writeevcopy")                                  WriteEvCopy = bool.Parse(val);                          }                          catch                          {                              throw new Exception(string.Format(CommonPhrases.IncorrectXmlParamVal' name));                          }                      }                  }                    // загрузка имён файлов модулей                  XmlNode modulesNode = rootElem.SelectSingleNode("Modules");                  if (modulesNode != null)                  {                      XmlNodeList moduleNodeList = modulesNode.SelectNodes("Module");                      foreach (XmlElement moduleElem in moduleNodeList)                          ModuleFileNames.Add(moduleElem.GetAttribute("fileName"));                  }                    errMsg = "";                  return true;              }              catch (Exception ex)              {                  errMsg = CommonPhrases.LoadAppSettingsError + ":" + Environment.NewLine + ex.Message;                  return false;              }
Magic Number,Scada.Server,Settings,C:\repos\RapidScada_SCADA\ScadaServer\ScadaServerCommon\Settings.cs,Save,The following statement contains a magic number: try              {                  // формирование XML-документа                  XmlDocument xmlDoc = new XmlDocument();                    XmlDeclaration xmlDecl = xmlDoc.CreateXmlDeclaration("1.0"' "utf-8"' null);                  xmlDoc.AppendChild(xmlDecl);                    XmlElement rootElem = xmlDoc.CreateElement("ScadaServerSvcConfig");                  xmlDoc.AppendChild(rootElem);                    rootElem.AppendChild(xmlDoc.CreateComment(                      Localization.UseRussian ? "Общие параметры" : "Common Parameters"));                  XmlElement paramsElem = xmlDoc.CreateElement("CommonParams");                  rootElem.AppendChild(paramsElem);                  paramsElem.AppendParamElem("TcpPort"' TcpPort'                       "Номер TCP-порта"' "TCP port number");                  paramsElem.AppendParamElem("UseAD"' UseAD'                      "Использовать Active Directory для аутентификации пользователей"'                       "Use Active Directory for users authentication");                  paramsElem.AppendParamElem("LdapPath"' LdapPath'                       "Путь к серверу контроллера домена"' "Domain controller server path");                  paramsElem.AppendParamElem("DetailedLog"' DetailedLog'                      "Записывать в журнал приложения подробную информацию"' "Write detailed information to the log");                    rootElem.AppendChild(xmlDoc.CreateComment(Localization.UseRussian ? "Директории" : "Directories"));                  paramsElem = xmlDoc.CreateElement("Directories");                  rootElem.AppendChild(paramsElem);                  paramsElem.AppendParamElem("BaseDATDir"' BaseDATDir'                      "Директория базы конфигурации в формате DAT"'                       "The configuration database in DAT format directory");                  paramsElem.AppendParamElem("ItfDir"' ItfDir'                      "Директория интерфейса"' "The interface directory");                  paramsElem.AppendParamElem("ArcDir"' ArcDir'                      "Директория архива в формате DAT"' "The archive in DAT format directory");                  paramsElem.AppendParamElem("ArcCopyDir"' ArcCopyDir'                      "Директория копии архива в формате DAT"' "The archive copy in DAT format directory");                    rootElem.AppendChild(xmlDoc.CreateComment(                      Localization.UseRussian ? "Параметры записи" : "Saving Parameters"));                  paramsElem = xmlDoc.CreateElement("SaveParams");                  rootElem.AppendChild(paramsElem);                  paramsElem.AppendParamElem("WriteCurPer"' WriteCurPer'                      "Период записи текущего среза' с"' "Current data writing period' sec");                  paramsElem.AppendParamElem("InactUnrelTime"' InactUnrelTime'                      "Время установки недостоверности при неактивности' мин."' "Unreliable on inactivity' min");                  paramsElem.AppendParamElem("WriteCur"' WriteCur'                      "Записывать текущий срез"' "Write current data");                  paramsElem.AppendParamElem("WriteCurCopy"' WriteCurCopy'                      "Записывать копию текущего среза"' "Write current data copy");                  paramsElem.AppendParamElem("WriteMinPer"' WriteMinPer'                      "Период записи минутных срезов' с"' "Minute data writing period' sec");                  paramsElem.AppendParamElem("StoreMinPer"' StoreMinPer'                      "Период хранения минутных срезов' дн."' "Minute data storing period' days");                  paramsElem.AppendParamElem("WriteMin"' WriteMin'                      "Записывать минутные срезы"' "Write minute data");                  paramsElem.AppendParamElem("WriteMinCopy"' WriteMinCopy'                      "Записывать копии минутных срезов"' "Write minute data copy");                  paramsElem.AppendParamElem("WriteHrPer"' WriteHrPer / 60'                      "Период записи часовых срезов' мин."' "Hourly data writing period' min");                  paramsElem.AppendParamElem("StoreHrPer"' StoreHrPer'                      "Период хранения часовых срезов' дн."' "Hourly data storing period' days");                  paramsElem.AppendParamElem("WriteHr"' WriteHr'                      "Записывать часовые срезы"' "Write hourly data");                  paramsElem.AppendParamElem("WriteHrCopy"' WriteHrCopy'                      "Записывать копии часовых срезов"' "Write hourly data copy");                  paramsElem.AppendParamElem("StoreEvPer"' StoreEvPer'                      "Период хранения событий' дн."' "Events storing period' days");                  paramsElem.AppendParamElem("WriteEv"' WriteEv'                      "Записывать события"' "Write events");                  paramsElem.AppendParamElem("WriteEvCopy"' WriteEvCopy'                      "Записывать копии событий"' "Write events copy");                    rootElem.AppendChild(xmlDoc.CreateComment(Localization.UseRussian ? "Модули" : "Modules"));                  XmlElement modulesElem = xmlDoc.CreateElement("Modules");                  rootElem.AppendChild(modulesElem);                    foreach (string moduleFileName in ModuleFileNames)                  {                      XmlElement moduleElem = xmlDoc.CreateElement("Module");                      moduleElem.SetAttribute("fileName"' moduleFileName);                      modulesElem.AppendChild(moduleElem);                  }                    // сохранение XML-документа в файле                  string bakName = fileName + ".bak";                  File.Copy(fileName' bakName' true);                  xmlDoc.Save(fileName);                    errMsg = "";                  return true;              }              catch (Exception ex)              {                  errMsg = CommonPhrases.SaveAppSettingsError + ":" + Environment.NewLine + ex.Message;                  return false;              }
