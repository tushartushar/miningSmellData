Implementation smell,Namespace,Class,File,Method,Description
Long Method,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The method has 299 lines of code.
Long Method,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The method has 259 lines of code.
Long Method,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The method has 196 lines of code.
Long Method,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The method has 176 lines of code.
Long Method,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The method has 296 lines of code.
Long Method,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The method has 226 lines of code.
Complex Method,Scada.Comm.Devices.Modbus.Protocol,DeviceTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DeviceTemplate.cs,Load,Cyclomatic complexity of the method is 13
Complex Method,Scada.Comm.Devices.Modbus.Protocol,DeviceTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DeviceTemplate.cs,Save,Cyclomatic complexity of the method is 9
Complex Method,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,AsciiRequest,Cyclomatic complexity of the method is 8
Long Parameter List,Scada.Comm.Devices.Modbus.Protocol,ModbusUtils,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusUtils.cs,ApplyByteOrder,The method has 5 parameters. Parameters: src' dest' destOffset' destLenght' byteOrder
Long Statement,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmDevProps)); " is 131.
Long Statement,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmDevTemplate)); " is 134.
Long Statement,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The length of the statement  "            this.treeView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 144.
Long Statement,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The length of the statement  "            this.gbDevTemplate.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 149.
Long Statement,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The length of the statement  "            this.ctrlElemGroup.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The length of the statement  "            this.ctrlElem.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The length of the statement  "            this.ctrlCmd.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Complex Conditional,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,DecodeRespPDU,The conditional expression  "buffer[offset + 1] == ReqPDU[1] && buffer[offset + 2] == ReqPDU[2] &&                      buffer[offset + 3] == ReqPDU[3] && buffer[offset + 4] == ReqPDU[4]"  is complex.
Complex Conditional,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The conditional expression  "InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6]"  is complex.
Complex Conditional,Scada.Comm.Devices,KpModbusLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\KpModbusLogic.cs,SendCmd,The conditional expression  "modbusCmd != null &&                      (modbusCmd.Multiple && (cmd.CmdTypeID == BaseValues.CmdTypes.Standard ||                       cmd.CmdTypeID == BaseValues.CmdTypes.Binary) ||                      !modbusCmd.Multiple && cmd.CmdTypeID == BaseValues.CmdTypes.Standard)"  is complex.
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: if (Multiple)              {                  // формирование PDU для команды WriteMultipleCoils или WriteMultipleRegisters                  int byteCnt = TableType == TableTypes.Coils ?                      ((ElemCnt % 8 == 0) ? ElemCnt / 8 : ElemCnt / 8 + 1) :                       ElemCnt * 2;                    ReqPDU = new byte[6 + byteCnt];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                  ReqPDU[3] = (byte)(ElemCnt / 256);                  ReqPDU[4] = (byte)(ElemCnt % 256);                  ReqPDU[5] = (byte)byteCnt;                    ModbusUtils.ApplyByteOrder(Data' ReqPDU' 6' byteCnt' ByteOrder);              }              else              {                  // формирование PDU для команды WriteSingleCoil или WriteSingleRegister                  ReqPDU = new byte[5];                  ReqPDU[0] = FuncCode;                  ReqPDU[1] = (byte)(Address / 256);                  ReqPDU[2] = (byte)(Address % 256);                    if (TableType == TableTypes.Coils)                  {                      ReqPDU[3] = Value > 0 ? (byte)0xFF : (byte)0x00;                      ReqPDU[4] = 0x00;                  }                  else                  {                      byte[] data = new byte[]                       {                          (byte)(Value / 256)'                          (byte)(Value % 256)                      };                      ModbusUtils.ApplyByteOrder(data' ReqPDU' 3' 2' ByteOrder);                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,InitReqPDU,The following statement contains a magic number: RespPduLen = 5;
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == ReqPDU[1] && buffer[offset + 2] == ReqPDU[2] &&                      buffer[offset + 3] == ReqPDU[3] && buffer[offset + 4] == ReqPDU[4])                  {                      return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == ReqPDU[1] && buffer[offset + 2] == ReqPDU[2] &&                      buffer[offset + 3] == ReqPDU[3] && buffer[offset + 4] == ReqPDU[4])                  {                      return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == ReqPDU[1] && buffer[offset + 2] == ReqPDU[2] &&                      buffer[offset + 3] == ReqPDU[3] && buffer[offset + 4] == ReqPDU[4])                  {                      return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == ReqPDU[1] && buffer[offset + 2] == ReqPDU[2] &&                      buffer[offset + 3] == ReqPDU[3] && buffer[offset + 4] == ReqPDU[4])                  {                      return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == ReqPDU[1] && buffer[offset + 2] == ReqPDU[2] &&                      buffer[offset + 3] == ReqPDU[3] && buffer[offset + 4] == ReqPDU[4])                  {                      return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusCmd.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == ReqPDU[1] && buffer[offset + 2] == ReqPDU[2] &&                      buffer[offset + 3] == ReqPDU[3] && buffer[offset + 4] == ReqPDU[4])                  {                      return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,InitReqADU,The following statement contains a magic number: if (ReqPDU != null)              {                  int pduLen = ReqPDU.Length;                    switch (transMode)                  {                      case TransModes.RTU:                          ReqADU = new byte[pduLen + 3];                          ReqADU[0] = devAddr;                          ReqPDU.CopyTo(ReqADU' 1);                          ushort crc = ModbusUtils.CalcCRC16(ReqADU' 0' pduLen + 1);                          ReqADU[pduLen + 1] = (byte)(crc % 256);                          ReqADU[pduLen + 2] = (byte)(crc / 256);                          RespAduLen = RespPduLen + 3;                          break;                      case TransModes.ASCII:                          byte[] aduBuf = new byte[pduLen + 2];                          aduBuf[0] = devAddr;                          ReqPDU.CopyTo(aduBuf' 1);                          aduBuf[pduLen + 1] = ModbusUtils.CalcLRC(aduBuf' 0' pduLen + 1);                            StringBuilder sbADU = new StringBuilder();                          foreach (byte b in aduBuf)                              sbADU.Append(b.ToString("X2"));                            ReqADU = Encoding.Default.GetBytes(sbADU.ToString());                          ReqStr = ModbusUtils.Colon + sbADU;                          RespAduLen = RespPduLen + 2;                          break;                      default: // TransModes.TCP                          ReqADU = new byte[pduLen + 7];                          ReqADU[0] = 0;                          ReqADU[1] = 0;                          ReqADU[2] = 0;                          ReqADU[3] = 0;                          ReqADU[4] = (byte)((pduLen + 1) / 256);                          ReqADU[5] = (byte)((pduLen + 1) % 256);                          ReqADU[6] = devAddr;                          ReqPDU.CopyTo(ReqADU' 7);                          RespAduLen = RespPduLen + 7;                          break;                  }              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,DecodeRespPDU,The following statement contains a magic number: if (respFuncCode == FuncCode)              {                  if (length == RespPduLen)                      result = true;                  else                      errMsg = ModbusPhrases.IncorrectPduLength;              }              else if (respFuncCode == ExcFuncCode)              {                  errMsg = length == 2 ?                       ModbusPhrases.DeviceError + ": " + ModbusUtils.GetExcDescr(buffer[offset + 1]) :                      ModbusPhrases.IncorrectPduLength;              }              else              {                  errMsg = ModbusPhrases.IncorrectPduFuncCode;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,GetMaxElemCnt,The following statement contains a magic number: return tableType == TableTypes.DiscreteInputs || tableType == TableTypes.Coils ? 2000 : 125;
Magic Number,Scada.Comm.Devices.Modbus.Protocol,DataUnit,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DataUnit.cs,GetMaxElemCnt,The following statement contains a magic number: return tableType == TableTypes.DiscreteInputs || tableType == TableTypes.Coils ? 2000 : 125;
Magic Number,Scada.Comm.Devices.Modbus.Protocol,Settings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DeviceTemplate.cs,GetDefByteOrder,The following statement contains a magic number: switch (elemCnt)                  {                      case 1:                          return defByteOrder2;                      case 2:                          return defByteOrder4;                      case 4:                          return defByteOrder8;                      default:                          return null;                  }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,Settings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\DeviceTemplate.cs,GetDefByteOrder,The following statement contains a magic number: switch (elemCnt)                  {                      case 1:                          return defByteOrder2;                      case 2:                          return defByteOrder4;                      case 4:                          return defByteOrder8;                      default:                          return null;                  }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: ReqPDU = new byte[5];
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: ReqPDU[1] = (byte)(Address / 256);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: ReqPDU[2] = (byte)(Address % 256);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: ReqPDU[2] = (byte)(Address % 256);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: ReqPDU[3] = (byte)(TotalElemLength / 256);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: ReqPDU[3] = (byte)(TotalElemLength / 256);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: ReqPDU[4] = (byte)(TotalElemLength % 256);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: ReqPDU[4] = (byte)(TotalElemLength % 256);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)              {                  int n = TotalElemLength / 8;                  if ((TotalElemLength % 8) > 0)                      n++;                  RespPduLen = 2 + n;                  RespByteCnt = (byte)n;              }              else              {                  RespPduLen = 2 + TotalElemLength * 2;                  RespByteCnt = (byte)(TotalElemLength * 2);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)              {                  int n = TotalElemLength / 8;                  if ((TotalElemLength % 8) > 0)                      n++;                  RespPduLen = 2 + n;                  RespByteCnt = (byte)n;              }              else              {                  RespPduLen = 2 + TotalElemLength * 2;                  RespByteCnt = (byte)(TotalElemLength * 2);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)              {                  int n = TotalElemLength / 8;                  if ((TotalElemLength % 8) > 0)                      n++;                  RespPduLen = 2 + n;                  RespByteCnt = (byte)n;              }              else              {                  RespPduLen = 2 + TotalElemLength * 2;                  RespByteCnt = (byte)(TotalElemLength * 2);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)              {                  int n = TotalElemLength / 8;                  if ((TotalElemLength % 8) > 0)                      n++;                  RespPduLen = 2 + n;                  RespByteCnt = (byte)n;              }              else              {                  RespPduLen = 2 + TotalElemLength * 2;                  RespByteCnt = (byte)(TotalElemLength * 2);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)              {                  int n = TotalElemLength / 8;                  if ((TotalElemLength % 8) > 0)                      n++;                  RespPduLen = 2 + n;                  RespByteCnt = (byte)n;              }              else              {                  RespPduLen = 2 + TotalElemLength * 2;                  RespByteCnt = (byte)(TotalElemLength * 2);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)              {                  int n = TotalElemLength / 8;                  if ((TotalElemLength % 8) > 0)                      n++;                  RespPduLen = 2 + n;                  RespByteCnt = (byte)n;              }              else              {                  RespPduLen = 2 + TotalElemLength * 2;                  RespByteCnt = (byte)(TotalElemLength * 2);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,InitReqPDU,The following statement contains a magic number: for (int i = 0; i < elemCnt; i++)              {                  Elem elem = Elems[i];                  byte[] elemVal = new byte[elem.ElemType == ElemTypes.Bool ? 1 : elem.Length * 2];                  Array.Clear(elemVal' 0' elemVal.Length);                  ElemVals[i] = elemVal;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == RespByteCnt)                  {                      int len = ElemVals.Length;                      int byteNum = offset + 2;                        if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)                      {                          int bitNum = 0;                          for (int elemInd = 0; elemInd < len; elemInd++)                          {                              ElemVals[elemInd][0] = ((buffer[byteNum] >> bitNum) & 0x01) > 0 ? (byte)1 : (byte)0;                                if (++bitNum == 8)                              {                                  bitNum = 0;                                  byteNum++;                              }                          }                      }                      else                      {                          for (int elemInd = 0; elemInd < len; elemInd++)                          {                              byte[] elemVal = ElemVals[elemInd];                              int elemLen = Elems[elemInd].Length;                              int elemValLen = elemLen * 2;                              // копирование считанных байт в обратном порядке                              for (int i = elemValLen - 1' j = byteNum; i >= 0; i--' j++)                                  elemVal[i] = buffer[j];                              byteNum += elemValLen;                          }                      }                        return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == RespByteCnt)                  {                      int len = ElemVals.Length;                      int byteNum = offset + 2;                        if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)                      {                          int bitNum = 0;                          for (int elemInd = 0; elemInd < len; elemInd++)                          {                              ElemVals[elemInd][0] = ((buffer[byteNum] >> bitNum) & 0x01) > 0 ? (byte)1 : (byte)0;                                if (++bitNum == 8)                              {                                  bitNum = 0;                                  byteNum++;                              }                          }                      }                      else                      {                          for (int elemInd = 0; elemInd < len; elemInd++)                          {                              byte[] elemVal = ElemVals[elemInd];                              int elemLen = Elems[elemInd].Length;                              int elemValLen = elemLen * 2;                              // копирование считанных байт в обратном порядке                              for (int i = elemValLen - 1' j = byteNum; i >= 0; i--' j++)                                  elemVal[i] = buffer[j];                              byteNum += elemValLen;                          }                      }                        return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ElemGroup.cs,DecodeRespPDU,The following statement contains a magic number: if (base.DecodeRespPDU(buffer' offset' length' out errMsg))              {                  if (buffer[offset + 1] == RespByteCnt)                  {                      int len = ElemVals.Length;                      int byteNum = offset + 2;                        if (TableType == TableTypes.DiscreteInputs || TableType == TableTypes.Coils)                      {                          int bitNum = 0;                          for (int elemInd = 0; elemInd < len; elemInd++)                          {                              ElemVals[elemInd][0] = ((buffer[byteNum] >> bitNum) & 0x01) > 0 ? (byte)1 : (byte)0;                                if (++bitNum == 8)                              {                                  bitNum = 0;                                  byteNum++;                              }                          }                      }                      else                      {                          for (int elemInd = 0; elemInd < len; elemInd++)                          {                              byte[] elemVal = ElemVals[elemInd];                              int elemLen = Elems[elemInd].Length;                              int elemValLen = elemLen * 2;                              // копирование считанных байт в обратном порядке                              for (int i = elemValLen - 1' j = byteNum; i >= 0; i--' j++)                                  elemVal[i] = buffer[j];                              byteNum += elemValLen;                          }                      }                        return true;                  }                  else                  {                      errMsg = ModbusPhrases.IncorrectPduData;                      return false;                  }              }              else              {                  return false;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusUtils,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusUtils.cs,CalcCRC16,The following statement contains a magic number: return (ushort)((crcHi << 8) | crcLo);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusUtils,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusUtils.cs,GetElemCount,The following statement contains a magic number: switch (elemType)              {                  case ElemTypes.ULong:                  case ElemTypes.Long:                  case ElemTypes.Double:                      return 4;                  case ElemTypes.UInt:                  case ElemTypes.Int:                  case ElemTypes.Float:                      return 2;                  default:                      return 1;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusUtils,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusUtils.cs,GetElemCount,The following statement contains a magic number: switch (elemType)              {                  case ElemTypes.ULong:                  case ElemTypes.Long:                  case ElemTypes.Double:                      return 4;                  case ElemTypes.UInt:                  case ElemTypes.Int:                  case ElemTypes.Float:                      return 2;                  default:                      return 1;              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,RtuRequest,The following statement contains a magic number: int readCnt = Connection.Read(InBuf' 0' 5' Timeout' CommUtils.ProtocolLogFormats.Hex' out logText);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,RtuRequest,The following statement contains a magic number: if (readCnt == 5)              {                  int pduLen;                  int count;                    if (InBuf[0] != dataUnit.ReqADU[0]) // проверка адреса устройства в ответе                  {                      ExecWriteToLog(ModbusPhrases.IncorrectDevAddr);                  }                  else if (!(InBuf[1] == dataUnit.FuncCode || InBuf[1] == dataUnit.ExcFuncCode))                  {                      ExecWriteToLog(ModbusPhrases.IncorrectPduFuncCode);                  }                  else                  {                      if (InBuf[1] == dataUnit.FuncCode)                      {                          // считывание окончания ответа                          pduLen = dataUnit.RespPduLen;                          count = dataUnit.RespAduLen - 5;                            readCnt = Connection.Read(InBuf' 5' count' Timeout'                               CommUtils.ProtocolLogFormats.Hex' out logText);                          ExecWriteToLog(logText);                      }                      else // устройство вернуло исключение                      {                          pduLen = 2;                          count = 0;                          readCnt = 0;                      }                        if (readCnt == count)                      {                          if (InBuf[pduLen + 1] + InBuf[pduLen + 2] * 256 == ModbusUtils.CalcCRC16(InBuf' 0' pduLen + 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(InBuf' 1' pduLen' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.CrcError);                          }                      }                      else                      {                          ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,RtuRequest,The following statement contains a magic number: if (readCnt == 5)              {                  int pduLen;                  int count;                    if (InBuf[0] != dataUnit.ReqADU[0]) // проверка адреса устройства в ответе                  {                      ExecWriteToLog(ModbusPhrases.IncorrectDevAddr);                  }                  else if (!(InBuf[1] == dataUnit.FuncCode || InBuf[1] == dataUnit.ExcFuncCode))                  {                      ExecWriteToLog(ModbusPhrases.IncorrectPduFuncCode);                  }                  else                  {                      if (InBuf[1] == dataUnit.FuncCode)                      {                          // считывание окончания ответа                          pduLen = dataUnit.RespPduLen;                          count = dataUnit.RespAduLen - 5;                            readCnt = Connection.Read(InBuf' 5' count' Timeout'                               CommUtils.ProtocolLogFormats.Hex' out logText);                          ExecWriteToLog(logText);                      }                      else // устройство вернуло исключение                      {                          pduLen = 2;                          count = 0;                          readCnt = 0;                      }                        if (readCnt == count)                      {                          if (InBuf[pduLen + 1] + InBuf[pduLen + 2] * 256 == ModbusUtils.CalcCRC16(InBuf' 0' pduLen + 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(InBuf' 1' pduLen' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.CrcError);                          }                      }                      else                      {                          ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,RtuRequest,The following statement contains a magic number: if (readCnt == 5)              {                  int pduLen;                  int count;                    if (InBuf[0] != dataUnit.ReqADU[0]) // проверка адреса устройства в ответе                  {                      ExecWriteToLog(ModbusPhrases.IncorrectDevAddr);                  }                  else if (!(InBuf[1] == dataUnit.FuncCode || InBuf[1] == dataUnit.ExcFuncCode))                  {                      ExecWriteToLog(ModbusPhrases.IncorrectPduFuncCode);                  }                  else                  {                      if (InBuf[1] == dataUnit.FuncCode)                      {                          // считывание окончания ответа                          pduLen = dataUnit.RespPduLen;                          count = dataUnit.RespAduLen - 5;                            readCnt = Connection.Read(InBuf' 5' count' Timeout'                               CommUtils.ProtocolLogFormats.Hex' out logText);                          ExecWriteToLog(logText);                      }                      else // устройство вернуло исключение                      {                          pduLen = 2;                          count = 0;                          readCnt = 0;                      }                        if (readCnt == count)                      {                          if (InBuf[pduLen + 1] + InBuf[pduLen + 2] * 256 == ModbusUtils.CalcCRC16(InBuf' 0' pduLen + 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(InBuf' 1' pduLen' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.CrcError);                          }                      }                      else                      {                          ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,RtuRequest,The following statement contains a magic number: if (readCnt == 5)              {                  int pduLen;                  int count;                    if (InBuf[0] != dataUnit.ReqADU[0]) // проверка адреса устройства в ответе                  {                      ExecWriteToLog(ModbusPhrases.IncorrectDevAddr);                  }                  else if (!(InBuf[1] == dataUnit.FuncCode || InBuf[1] == dataUnit.ExcFuncCode))                  {                      ExecWriteToLog(ModbusPhrases.IncorrectPduFuncCode);                  }                  else                  {                      if (InBuf[1] == dataUnit.FuncCode)                      {                          // считывание окончания ответа                          pduLen = dataUnit.RespPduLen;                          count = dataUnit.RespAduLen - 5;                            readCnt = Connection.Read(InBuf' 5' count' Timeout'                               CommUtils.ProtocolLogFormats.Hex' out logText);                          ExecWriteToLog(logText);                      }                      else // устройство вернуло исключение                      {                          pduLen = 2;                          count = 0;                          readCnt = 0;                      }                        if (readCnt == count)                      {                          if (InBuf[pduLen + 1] + InBuf[pduLen + 2] * 256 == ModbusUtils.CalcCRC16(InBuf' 0' pduLen + 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(InBuf' 1' pduLen' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.CrcError);                          }                      }                      else                      {                          ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,RtuRequest,The following statement contains a magic number: if (readCnt == 5)              {                  int pduLen;                  int count;                    if (InBuf[0] != dataUnit.ReqADU[0]) // проверка адреса устройства в ответе                  {                      ExecWriteToLog(ModbusPhrases.IncorrectDevAddr);                  }                  else if (!(InBuf[1] == dataUnit.FuncCode || InBuf[1] == dataUnit.ExcFuncCode))                  {                      ExecWriteToLog(ModbusPhrases.IncorrectPduFuncCode);                  }                  else                  {                      if (InBuf[1] == dataUnit.FuncCode)                      {                          // считывание окончания ответа                          pduLen = dataUnit.RespPduLen;                          count = dataUnit.RespAduLen - 5;                            readCnt = Connection.Read(InBuf' 5' count' Timeout'                               CommUtils.ProtocolLogFormats.Hex' out logText);                          ExecWriteToLog(logText);                      }                      else // устройство вернуло исключение                      {                          pduLen = 2;                          count = 0;                          readCnt = 0;                      }                        if (readCnt == count)                      {                          if (InBuf[pduLen + 1] + InBuf[pduLen + 2] * 256 == ModbusUtils.CalcCRC16(InBuf' 0' pduLen + 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(InBuf' 1' pduLen' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.CrcError);                          }                      }                      else                      {                          ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,RtuRequest,The following statement contains a magic number: if (readCnt == 5)              {                  int pduLen;                  int count;                    if (InBuf[0] != dataUnit.ReqADU[0]) // проверка адреса устройства в ответе                  {                      ExecWriteToLog(ModbusPhrases.IncorrectDevAddr);                  }                  else if (!(InBuf[1] == dataUnit.FuncCode || InBuf[1] == dataUnit.ExcFuncCode))                  {                      ExecWriteToLog(ModbusPhrases.IncorrectPduFuncCode);                  }                  else                  {                      if (InBuf[1] == dataUnit.FuncCode)                      {                          // считывание окончания ответа                          pduLen = dataUnit.RespPduLen;                          count = dataUnit.RespAduLen - 5;                            readCnt = Connection.Read(InBuf' 5' count' Timeout'                               CommUtils.ProtocolLogFormats.Hex' out logText);                          ExecWriteToLog(logText);                      }                      else // устройство вернуло исключение                      {                          pduLen = 2;                          count = 0;                          readCnt = 0;                      }                        if (readCnt == count)                      {                          if (InBuf[pduLen + 1] + InBuf[pduLen + 2] * 256 == ModbusUtils.CalcCRC16(InBuf' 0' pduLen + 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(InBuf' 1' pduLen' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.CrcError);                          }                      }                      else                      {                          ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,AsciiRequest,The following statement contains a magic number: if (lineLen >= 3)              {                  int aduLen = (lineLen - 1) / 2;                    if (aduLen == dataUnit.RespAduLen && lineLen % 2 == 1)                  {                      // получение ADU ответа                      byte[] aduBuf = new byte[aduLen];                      bool parseOK = true;                        for (int i = 0' j = 1; i < aduLen && parseOK; i++' j += 2)                      {                          try                          {                              aduBuf[i] = byte.Parse(line.Substring(j' 2)' NumberStyles.HexNumber);                          }                          catch                          {                              ExecWriteToLog(ModbusPhrases.IncorrectSymbol);                              parseOK = false;                          }                      }                        if (parseOK)                      {                          if (aduBuf[aduLen - 1] == ModbusUtils.CalcLRC(aduBuf' 0' aduLen - 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(aduBuf' 1' aduLen - 2' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.LrcError);                          }                      }                  }                  else                  {                      ExecWriteToLog(ModbusPhrases.IncorrectAduLength);                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,AsciiRequest,The following statement contains a magic number: if (lineLen >= 3)              {                  int aduLen = (lineLen - 1) / 2;                    if (aduLen == dataUnit.RespAduLen && lineLen % 2 == 1)                  {                      // получение ADU ответа                      byte[] aduBuf = new byte[aduLen];                      bool parseOK = true;                        for (int i = 0' j = 1; i < aduLen && parseOK; i++' j += 2)                      {                          try                          {                              aduBuf[i] = byte.Parse(line.Substring(j' 2)' NumberStyles.HexNumber);                          }                          catch                          {                              ExecWriteToLog(ModbusPhrases.IncorrectSymbol);                              parseOK = false;                          }                      }                        if (parseOK)                      {                          if (aduBuf[aduLen - 1] == ModbusUtils.CalcLRC(aduBuf' 0' aduLen - 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(aduBuf' 1' aduLen - 2' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.LrcError);                          }                      }                  }                  else                  {                      ExecWriteToLog(ModbusPhrases.IncorrectAduLength);                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,AsciiRequest,The following statement contains a magic number: if (lineLen >= 3)              {                  int aduLen = (lineLen - 1) / 2;                    if (aduLen == dataUnit.RespAduLen && lineLen % 2 == 1)                  {                      // получение ADU ответа                      byte[] aduBuf = new byte[aduLen];                      bool parseOK = true;                        for (int i = 0' j = 1; i < aduLen && parseOK; i++' j += 2)                      {                          try                          {                              aduBuf[i] = byte.Parse(line.Substring(j' 2)' NumberStyles.HexNumber);                          }                          catch                          {                              ExecWriteToLog(ModbusPhrases.IncorrectSymbol);                              parseOK = false;                          }                      }                        if (parseOK)                      {                          if (aduBuf[aduLen - 1] == ModbusUtils.CalcLRC(aduBuf' 0' aduLen - 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(aduBuf' 1' aduLen - 2' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.LrcError);                          }                      }                  }                  else                  {                      ExecWriteToLog(ModbusPhrases.IncorrectAduLength);                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,AsciiRequest,The following statement contains a magic number: if (lineLen >= 3)              {                  int aduLen = (lineLen - 1) / 2;                    if (aduLen == dataUnit.RespAduLen && lineLen % 2 == 1)                  {                      // получение ADU ответа                      byte[] aduBuf = new byte[aduLen];                      bool parseOK = true;                        for (int i = 0' j = 1; i < aduLen && parseOK; i++' j += 2)                      {                          try                          {                              aduBuf[i] = byte.Parse(line.Substring(j' 2)' NumberStyles.HexNumber);                          }                          catch                          {                              ExecWriteToLog(ModbusPhrases.IncorrectSymbol);                              parseOK = false;                          }                      }                        if (parseOK)                      {                          if (aduBuf[aduLen - 1] == ModbusUtils.CalcLRC(aduBuf' 0' aduLen - 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(aduBuf' 1' aduLen - 2' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.LrcError);                          }                      }                  }                  else                  {                      ExecWriteToLog(ModbusPhrases.IncorrectAduLength);                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,AsciiRequest,The following statement contains a magic number: if (lineLen >= 3)              {                  int aduLen = (lineLen - 1) / 2;                    if (aduLen == dataUnit.RespAduLen && lineLen % 2 == 1)                  {                      // получение ADU ответа                      byte[] aduBuf = new byte[aduLen];                      bool parseOK = true;                        for (int i = 0' j = 1; i < aduLen && parseOK; i++' j += 2)                      {                          try                          {                              aduBuf[i] = byte.Parse(line.Substring(j' 2)' NumberStyles.HexNumber);                          }                          catch                          {                              ExecWriteToLog(ModbusPhrases.IncorrectSymbol);                              parseOK = false;                          }                      }                        if (parseOK)                      {                          if (aduBuf[aduLen - 1] == ModbusUtils.CalcLRC(aduBuf' 0' aduLen - 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(aduBuf' 1' aduLen - 2' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.LrcError);                          }                      }                  }                  else                  {                      ExecWriteToLog(ModbusPhrases.IncorrectAduLength);                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,AsciiRequest,The following statement contains a magic number: if (lineLen >= 3)              {                  int aduLen = (lineLen - 1) / 2;                    if (aduLen == dataUnit.RespAduLen && lineLen % 2 == 1)                  {                      // получение ADU ответа                      byte[] aduBuf = new byte[aduLen];                      bool parseOK = true;                        for (int i = 0' j = 1; i < aduLen && parseOK; i++' j += 2)                      {                          try                          {                              aduBuf[i] = byte.Parse(line.Substring(j' 2)' NumberStyles.HexNumber);                          }                          catch                          {                              ExecWriteToLog(ModbusPhrases.IncorrectSymbol);                              parseOK = false;                          }                      }                        if (parseOK)                      {                          if (aduBuf[aduLen - 1] == ModbusUtils.CalcLRC(aduBuf' 0' aduLen - 1))                          {                              // расшифровка ответа                              string errMsg;                                if (dataUnit.DecodeRespPDU(aduBuf' 1' aduLen - 2' out errMsg))                              {                                  ExecWriteToLog(ModbusPhrases.OK);                                  result = true;                              }                              else                              {                                  ExecWriteToLog(errMsg + "!");                              }                          }                          else                          {                              ExecWriteToLog(ModbusPhrases.LrcError);                          }                      }                  }                  else                  {                      ExecWriteToLog(ModbusPhrases.IncorrectAduLength);                  }              }              else              {                  ExecWriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: int readCnt = Connection.Read(InBuf' 0' 7' Timeout' CommUtils.ProtocolLogFormats.Hex' out logText);
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.Protocol,ModbusPoll,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\Protocol\ModbusPoll.cs,TcpRequest,The following statement contains a magic number: if (readCnt == 7)              {                  int pduLen = InBuf[4] * 256 + InBuf[5] - 1;                    if (InBuf[0] == 0 && InBuf[1] == 0 && InBuf[2] == 0 && InBuf[3] == 0 && pduLen > 0 &&                      InBuf[6] == dataUnit.ReqADU[6])                  {                      // считывание PDU                      readCnt = Connection.Read(InBuf' 7' pduLen' Timeout'                           CommUtils.ProtocolLogFormats.Hex' out logText);                      ExecWriteToLog(logText);                        if (readCnt == pduLen)                      {                          // расшифровка ответа                          string errMsg;                            if (dataUnit.DecodeRespPDU(InBuf' 7' pduLen' out errMsg))                          {                              ExecWriteToLog(ModbusPhrases.OK);                              result = true;                          }                          else                          {                              ExecWriteToLog(errMsg + "!");                          }                      }                      else                      {                          WriteToLog(ModbusPhrases.CommErrorWithExclamation);                      }                  }                  else                  {                      WriteToLog(ModbusPhrases.IncorrectMbap);                  }              }              else              {                  WriteToLog(ModbusPhrases.CommErrorWithExclamation);              }
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.gbCmd.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.gbCmd.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.gbCmd.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.gbCmd.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.gbCmd.Size = new System.Drawing.Size(280' 324);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.gbCmd.Size = new System.Drawing.Size(280' 324);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemType.Location = new System.Drawing.Point(10' 196);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemType.Location = new System.Drawing.Point(10' 196);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemType.Size = new System.Drawing.Size(68' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemType.Size = new System.Drawing.Size(68' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemType.TabIndex = 10;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdElemType.Location = new System.Drawing.Point(13' 212);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdElemType.Location = new System.Drawing.Point(13' 212);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdElemType.Size = new System.Drawing.Size(124' 21);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdElemType.Size = new System.Drawing.Size(124' 21);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdElemType.TabIndex = 11;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddressHint.Location = new System.Drawing.Point(140' 177);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddressHint.Location = new System.Drawing.Point(140' 177);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddressHint.Size = new System.Drawing.Size(29' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddressHint.Size = new System.Drawing.Size(29' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddressHint.TabIndex = 9;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrderExample.Location = new System.Drawing.Point(143' 256);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrderExample.Location = new System.Drawing.Point(143' 256);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrderExample.Size = new System.Drawing.Size(118' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrderExample.Size = new System.Drawing.Size(118' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrderExample.TabIndex = 16;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdByteOrder.Location = new System.Drawing.Point(13' 252);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdByteOrder.Location = new System.Drawing.Point(13' 252);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdByteOrder.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdByteOrder.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdByteOrder.TabIndex = 15;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrder.Location = new System.Drawing.Point(10' 236);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrder.Location = new System.Drawing.Point(10' 236);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrder.Size = new System.Drawing.Size(55' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrder.Size = new System.Drawing.Size(55' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdByteOrder.TabIndex = 14;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdFuncCode.Location = new System.Drawing.Point(13' 134);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdFuncCode.Location = new System.Drawing.Point(13' 134);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdFuncCode.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdFuncCode.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdFuncCode.TabIndex = 6;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdFuncCode.Location = new System.Drawing.Point(10' 118);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdFuncCode.Location = new System.Drawing.Point(10' 118);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdFuncCode.Size = new System.Drawing.Size(75' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdFuncCode.Size = new System.Drawing.Size(75' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdFuncCode.TabIndex = 5;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.chkCmdMultiple.Location = new System.Drawing.Point(13' 98);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.chkCmdMultiple.Location = new System.Drawing.Point(13' 98);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.chkCmdMultiple.Size = new System.Drawing.Size(62' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.chkCmdMultiple.Size = new System.Drawing.Size(62' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.chkCmdMultiple.TabIndex = 4;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemCnt.Location = new System.Drawing.Point(140' 196);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemCnt.Location = new System.Drawing.Point(140' 196);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemCnt.Size = new System.Drawing.Size(75' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemCnt.Size = new System.Drawing.Size(75' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdElemCnt.TabIndex = 12;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdElemCnt.Location = new System.Drawing.Point(143' 212);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdElemCnt.Location = new System.Drawing.Point(143' 212);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdElemCnt.Maximum = new decimal(new int[] {              2000'              0'              0'              0});
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdElemCnt.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdElemCnt.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdElemCnt.TabIndex = 13;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdName.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdName.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdName.Size = new System.Drawing.Size(254' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.txtCmdName.Size = new System.Drawing.Size(254' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdName.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdName.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdName.Size = new System.Drawing.Size(35' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdName.Size = new System.Drawing.Size(35' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdNum.Location = new System.Drawing.Point(10' 275);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdNum.Location = new System.Drawing.Point(10' 275);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdNum.Size = new System.Drawing.Size(92' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdNum.Size = new System.Drawing.Size(92' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdNum.TabIndex = 17;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdNum.Location = new System.Drawing.Point(13' 291);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdNum.Location = new System.Drawing.Point(13' 291);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdNum.Maximum = new decimal(new int[] {              65535'              0'              0'              0});
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdNum.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdNum.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdNum.TabIndex = 18;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdAddress.Location = new System.Drawing.Point(13' 173);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdAddress.Location = new System.Drawing.Point(13' 173);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdAddress.Maximum = new decimal(new int[] {              65536'              0'              0'              0});
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdAddress.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdAddress.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.numCmdAddress.TabIndex = 8;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddress.Location = new System.Drawing.Point(10' 157);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddress.Location = new System.Drawing.Point(10' 157);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddress.Size = new System.Drawing.Size(85' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddress.Size = new System.Drawing.Size(85' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdAddress.TabIndex = 7;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdTableType.Location = new System.Drawing.Point(10' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdTableType.Location = new System.Drawing.Point(10' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdTableType.Size = new System.Drawing.Size(56' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdTableType.Size = new System.Drawing.Size(56' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.lblCmdTableType.TabIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdTableType.Location = new System.Drawing.Point(13' 71);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdTableType.Location = new System.Drawing.Point(13' 71);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdTableType.Size = new System.Drawing.Size(254' 21);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdTableType.Size = new System.Drawing.Size(254' 21);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.cbCmdTableType.TabIndex = 3;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(280' 324);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlCmd,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlCmd.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(280' 324);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.gbElem.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.gbElem.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.gbElem.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.gbElem.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.gbElem.Size = new System.Drawing.Size(280' 271);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.gbElem.Size = new System.Drawing.Size(280' 271);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrderExample.Location = new System.Drawing.Point(143' 242);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrderExample.Location = new System.Drawing.Point(143' 242);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrderExample.Size = new System.Drawing.Size(118' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrderExample.Size = new System.Drawing.Size(118' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrderExample.TabIndex = 18;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemByteOrder.Location = new System.Drawing.Point(13' 238);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemByteOrder.Location = new System.Drawing.Point(13' 238);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemByteOrder.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemByteOrder.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemByteOrder.TabIndex = 17;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrder.Location = new System.Drawing.Point(10' 222);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrder.Location = new System.Drawing.Point(10' 222);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrder.Size = new System.Drawing.Size(55' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrder.Size = new System.Drawing.Size(55' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemByteOrder.TabIndex = 16;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbDouble.Location = new System.Drawing.Point(143' 179);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbDouble.Location = new System.Drawing.Point(143' 179);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbDouble.Size = new System.Drawing.Size(100' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbDouble.Size = new System.Drawing.Size(100' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbDouble.TabIndex = 14;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbLong.Location = new System.Drawing.Point(143' 156);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbLong.Location = new System.Drawing.Point(143' 156);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbLong.Size = new System.Drawing.Size(88' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbLong.Size = new System.Drawing.Size(88' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbLong.TabIndex = 12;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbULong.Location = new System.Drawing.Point(13' 156);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbULong.Location = new System.Drawing.Point(13' 156);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbULong.Size = new System.Drawing.Size(94' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbULong.Size = new System.Drawing.Size(94' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbULong.TabIndex = 11;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbBool.Location = new System.Drawing.Point(13' 202);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbBool.Location = new System.Drawing.Point(13' 202);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbBool.Size = new System.Drawing.Size(74' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbBool.Size = new System.Drawing.Size(74' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbBool.TabIndex = 15;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbFloat.Location = new System.Drawing.Point(13' 179);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbFloat.Location = new System.Drawing.Point(13' 179);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbFloat.Size = new System.Drawing.Size(88' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbFloat.Size = new System.Drawing.Size(88' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbFloat.TabIndex = 13;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbInt.Location = new System.Drawing.Point(143' 133);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbInt.Location = new System.Drawing.Point(143' 133);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbInt.Size = new System.Drawing.Size(79' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbInt.Size = new System.Drawing.Size(79' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbInt.TabIndex = 10;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUInt.Location = new System.Drawing.Point(13' 133);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUInt.Location = new System.Drawing.Point(13' 133);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUInt.Size = new System.Drawing.Size(85' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUInt.Size = new System.Drawing.Size(85' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUInt.TabIndex = 9;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbShort.Location = new System.Drawing.Point(143' 110);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbShort.Location = new System.Drawing.Point(143' 110);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbShort.Size = new System.Drawing.Size(91' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbShort.Size = new System.Drawing.Size(91' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbShort.TabIndex = 8;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemType.Location = new System.Drawing.Point(10' 94);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemType.Location = new System.Drawing.Point(10' 94);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemType.Size = new System.Drawing.Size(34' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemType.Size = new System.Drawing.Size(34' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemType.TabIndex = 6;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUShort.Location = new System.Drawing.Point(13' 110);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUShort.Location = new System.Drawing.Point(13' 110);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUShort.Size = new System.Drawing.Size(97' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUShort.Size = new System.Drawing.Size(97' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.rbUShort.TabIndex = 7;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemAddress.Location = new System.Drawing.Point(13' 71);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemAddress.Location = new System.Drawing.Point(13' 71);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemAddress.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemAddress.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemAddress.TabIndex = 3;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemAddress.Location = new System.Drawing.Point(10' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemAddress.Location = new System.Drawing.Point(10' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemAddress.Size = new System.Drawing.Size(45' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemAddress.Size = new System.Drawing.Size(45' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemAddress.TabIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemSignal.Location = new System.Drawing.Point(143' 71);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemSignal.Location = new System.Drawing.Point(143' 71);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemSignal.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemSignal.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemSignal.TabIndex = 5;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemSignal.Location = new System.Drawing.Point(140' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemSignal.Location = new System.Drawing.Point(140' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemSignal.Size = new System.Drawing.Size(36' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemSignal.Size = new System.Drawing.Size(36' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemSignal.TabIndex = 4;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemName.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemName.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemName.Size = new System.Drawing.Size(254' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.txtElemName.Size = new System.Drawing.Size(254' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemName.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemName.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemName.Size = new System.Drawing.Size(35' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.lblElemName.Size = new System.Drawing.Size(35' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(280' 271);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElem,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElem.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(280' 271);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.gbElemGroup.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.gbElemGroup.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.gbElemGroup.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.gbElemGroup.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.gbElemGroup.Size = new System.Drawing.Size(280' 245);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.gbElemGroup.Size = new System.Drawing.Size(280' 245);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddressHint.Location = new System.Drawing.Point(140' 177);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddressHint.Location = new System.Drawing.Point(140' 177);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddressHint.Size = new System.Drawing.Size(29' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddressHint.Size = new System.Drawing.Size(29' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddressHint.TabIndex = 9;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrFuncCode.Location = new System.Drawing.Point(13' 134);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrFuncCode.Location = new System.Drawing.Point(13' 134);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrFuncCode.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrFuncCode.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrFuncCode.TabIndex = 6;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrFuncCode.Location = new System.Drawing.Point(10' 118);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrFuncCode.Location = new System.Drawing.Point(10' 118);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrFuncCode.Size = new System.Drawing.Size(75' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrFuncCode.Size = new System.Drawing.Size(75' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrFuncCode.TabIndex = 5;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.chkGrActive.Location = new System.Drawing.Point(13' 19);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.chkGrActive.Location = new System.Drawing.Point(13' 19);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.chkGrActive.Size = new System.Drawing.Size(56' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.chkGrActive.Size = new System.Drawing.Size(56' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrElemCnt.Location = new System.Drawing.Point(10' 196);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrElemCnt.Location = new System.Drawing.Point(10' 196);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrElemCnt.Size = new System.Drawing.Size(75' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrElemCnt.Size = new System.Drawing.Size(75' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrElemCnt.TabIndex = 10;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrElemCnt.Location = new System.Drawing.Point(13' 212);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrElemCnt.Location = new System.Drawing.Point(13' 212);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrElemCnt.Maximum = new decimal(new int[] {              2000'              0'              0'              0});
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrElemCnt.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrElemCnt.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrElemCnt.TabIndex = 11;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrName.Location = new System.Drawing.Point(13' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrName.Location = new System.Drawing.Point(13' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrName.Size = new System.Drawing.Size(254' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrName.Size = new System.Drawing.Size(254' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.txtGrName.TabIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrName.Location = new System.Drawing.Point(10' 39);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrName.Location = new System.Drawing.Point(10' 39);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrName.Size = new System.Drawing.Size(35' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrName.Size = new System.Drawing.Size(35' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrAddress.Location = new System.Drawing.Point(13' 173);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrAddress.Location = new System.Drawing.Point(13' 173);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrAddress.Maximum = new decimal(new int[] {              65536'              0'              0'              0});
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrAddress.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrAddress.Size = new System.Drawing.Size(124' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.numGrAddress.TabIndex = 8;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddress.Location = new System.Drawing.Point(10' 157);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddress.Location = new System.Drawing.Point(10' 157);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddress.Size = new System.Drawing.Size(109' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddress.Size = new System.Drawing.Size(109' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrAddress.TabIndex = 7;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrTableType.Location = new System.Drawing.Point(10' 78);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrTableType.Location = new System.Drawing.Point(10' 78);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrTableType.Size = new System.Drawing.Size(56' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrTableType.Size = new System.Drawing.Size(56' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.lblGrTableType.TabIndex = 3;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.cbGrTableType.Location = new System.Drawing.Point(13' 94);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.cbGrTableType.Location = new System.Drawing.Point(13' 94);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.cbGrTableType.Size = new System.Drawing.Size(254' 21);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.cbGrTableType.Size = new System.Drawing.Size(254' 21);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.cbGrTableType.TabIndex = 4;
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(280' 245);
Magic Number,Scada.Comm.Devices.Modbus.UI,CtrlElemGroup,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\CtrlElemGroup.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(280' 245);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,FrmDevProps_Load,The following statement contains a magic number: cbTransMode.SetSelectedItem(transMode' new Dictionary<string' int>()                   { { "RTU"' 0 }' { "ASCII"' 1 }' { "TCP"' 2 } }' 0);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,btnOK_Click,The following statement contains a magic number: if (kpProps.Modified)              {                  kpProps.CustomParams["TransMode"] = (string)cbTransMode.GetSelectedItem(                      new Dictionary<int' object>() { { 0' "RTU" }' { 1' "ASCII" }' { 2' "TCP" } });                  kpProps.CmdLine = txtDevTemplate.Text;              }
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbDevice.Location = new System.Drawing.Point(12' 84);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbDevice.Location = new System.Drawing.Point(12' 84);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbDevice.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbDevice.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbDevice.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbDevice.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbDevice.Size = new System.Drawing.Size(259' 65);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbDevice.Size = new System.Drawing.Size(259' 65);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowseDevTemplate.Location = new System.Drawing.Point(174' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowseDevTemplate.Location = new System.Drawing.Point(174' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowseDevTemplate.Size = new System.Drawing.Size(20' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowseDevTemplate.Size = new System.Drawing.Size(20' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnBrowseDevTemplate.TabIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCreateDevTemplate.Location = new System.Drawing.Point(200' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCreateDevTemplate.Location = new System.Drawing.Point(200' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCreateDevTemplate.Size = new System.Drawing.Size(20' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCreateDevTemplate.Size = new System.Drawing.Size(20' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCreateDevTemplate.TabIndex = 3;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnEditDevTemplate.Location = new System.Drawing.Point(226' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnEditDevTemplate.Location = new System.Drawing.Point(226' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnEditDevTemplate.Size = new System.Drawing.Size(20' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnEditDevTemplate.Size = new System.Drawing.Size(20' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnEditDevTemplate.TabIndex = 4;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.txtDevTemplate.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.txtDevTemplate.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.txtDevTemplate.Size = new System.Drawing.Size(155' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.txtDevTemplate.Size = new System.Drawing.Size(155' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.lblDevTemplate.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.lblDevTemplate.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.lblDevTemplate.Size = new System.Drawing.Size(84' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.lblDevTemplate.Size = new System.Drawing.Size(84' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbCommLine.Location = new System.Drawing.Point(12' 12);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbCommLine.Location = new System.Drawing.Point(12' 12);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbCommLine.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbCommLine.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbCommLine.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbCommLine.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbCommLine.Size = new System.Drawing.Size(259' 66);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.gbCommLine.Size = new System.Drawing.Size(259' 66);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.cbTransMode.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.cbTransMode.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.cbTransMode.Size = new System.Drawing.Size(233' 21);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.cbTransMode.Size = new System.Drawing.Size(233' 21);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.lblTransMode.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.lblTransMode.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.lblTransMode.Size = new System.Drawing.Size(46' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.lblTransMode.Size = new System.Drawing.Size(46' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(115' 155);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(115' 155);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(196' 155);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(196' 155);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 3;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(283' 190);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevProps,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevProps.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(283' 190);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.treeView.Location = new System.Drawing.Point(13' 19);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.treeView.Location = new System.Drawing.Point(13' 19);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: treeNode4.ImageIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.treeView.Size = new System.Drawing.Size(254' 469);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.treeView.Size = new System.Drawing.Size(254' 469);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(2' "elem.png");
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(3' "cmds.png");
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.imageList.Images.SetKeyName(4' "cmd.png");
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip.Size = new System.Drawing.Size(590' 25);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.toolStrip.Size = new System.Drawing.Size(590' 25);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnNew.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnNew.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnOpen.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnOpen.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnSave.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAs.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnSaveAs.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(6' 25);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator1.Size = new System.Drawing.Size(6' 25);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnAddElemGroup.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnAddElemGroup.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnAddElem.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnAddElem.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnAddCmd.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnAddCmd.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveUp.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveUp.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveDown.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveDown.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnDelete.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(6' 25);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparator2.Size = new System.Drawing.Size(6' 25);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnEditSettings.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.btnEditSettings.Size = new System.Drawing.Size(23' 22);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.gbDevTemplate.Location = new System.Drawing.Point(12' 28);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.gbDevTemplate.Location = new System.Drawing.Point(12' 28);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.gbDevTemplate.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.gbDevTemplate.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.gbDevTemplate.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.gbDevTemplate.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.gbDevTemplate.Size = new System.Drawing.Size(280' 501);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.gbDevTemplate.Size = new System.Drawing.Size(280' 501);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElemGroup.Location = new System.Drawing.Point(298' 28);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElemGroup.Location = new System.Drawing.Point(298' 28);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElemGroup.Size = new System.Drawing.Size(280' 245);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElemGroup.Size = new System.Drawing.Size(280' 245);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElemGroup.TabIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElem.Location = new System.Drawing.Point(298' 201);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElem.Location = new System.Drawing.Point(298' 201);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElem.Size = new System.Drawing.Size(280' 271);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElem.Size = new System.Drawing.Size(280' 271);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlElem.TabIndex = 3;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlCmd.Location = new System.Drawing.Point(298' 205);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlCmd.Location = new System.Drawing.Point(298' 205);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlCmd.Size = new System.Drawing.Size(280' 324);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlCmd.Size = new System.Drawing.Size(280' 324);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ctrlCmd.TabIndex = 4;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(590' 541);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(590' 541);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(606' 500);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmDevTemplate,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmDevTemplate.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(606' 500);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbZeroBased.Size = new System.Drawing.Size(79' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbZeroBased.Size = new System.Drawing.Size(79' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbOneBased.Location = new System.Drawing.Point(120' 0);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbOneBased.Size = new System.Drawing.Size(77' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbOneBased.Size = new System.Drawing.Size(77' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.pnlBase.Location = new System.Drawing.Point(13' 19);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.pnlBase.Location = new System.Drawing.Point(13' 19);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.pnlBase.Size = new System.Drawing.Size(230' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.pnlBase.Size = new System.Drawing.Size(230' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.pnlNotation.Location = new System.Drawing.Point(13' 42);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.pnlNotation.Location = new System.Drawing.Point(13' 42);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.pnlNotation.Size = new System.Drawing.Size(230' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.pnlNotation.Size = new System.Drawing.Size(230' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbDec.Size = new System.Drawing.Size(63' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbDec.Size = new System.Drawing.Size(63' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbHex.Location = new System.Drawing.Point(120' 0);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbHex.Size = new System.Drawing.Size(86' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.rbHex.Size = new System.Drawing.Size(86' 17);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrderExample.Location = new System.Drawing.Point(10' 133);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrderExample.Location = new System.Drawing.Point(10' 133);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrderExample.Size = new System.Drawing.Size(118' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrderExample.Size = new System.Drawing.Size(118' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrderExample.TabIndex = 6;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder2.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder2.Location = new System.Drawing.Point(13' 32);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder2.Size = new System.Drawing.Size(234' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder2.Size = new System.Drawing.Size(234' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(197' 252);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(197' 252);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 3;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(116' 252);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(116' 252);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbAddressing.Location = new System.Drawing.Point(12' 12);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbAddressing.Location = new System.Drawing.Point(12' 12);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbAddressing.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbAddressing.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbAddressing.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbAddressing.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbAddressing.Size = new System.Drawing.Size(260' 72);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbAddressing.Size = new System.Drawing.Size(260' 72);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbDefByteOrder.Location = new System.Drawing.Point(12' 90);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbDefByteOrder.Location = new System.Drawing.Point(12' 90);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbDefByteOrder.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbDefByteOrder.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbDefByteOrder.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbDefByteOrder.Padding = new System.Windows.Forms.Padding(10' 3' 10' 10);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbDefByteOrder.Size = new System.Drawing.Size(260' 156);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.gbDefByteOrder.Size = new System.Drawing.Size(260' 156);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder8.Location = new System.Drawing.Point(10' 94);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder8.Location = new System.Drawing.Point(10' 94);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder8.Size = new System.Drawing.Size(41' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder8.Size = new System.Drawing.Size(41' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder8.TabIndex = 4;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder8.Location = new System.Drawing.Point(13' 110);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder8.Location = new System.Drawing.Point(13' 110);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder8.Size = new System.Drawing.Size(234' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder8.Size = new System.Drawing.Size(234' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder8.TabIndex = 5;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder4.Location = new System.Drawing.Point(10' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder4.Location = new System.Drawing.Point(10' 55);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder4.Size = new System.Drawing.Size(41' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder4.Size = new System.Drawing.Size(41' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder4.TabIndex = 2;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder4.Location = new System.Drawing.Point(13' 71);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder4.Location = new System.Drawing.Point(13' 71);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder4.Size = new System.Drawing.Size(234' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder4.Size = new System.Drawing.Size(234' 20);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.txtDefByteOrder4.TabIndex = 3;
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder2.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder2.Location = new System.Drawing.Point(10' 16);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder2.Size = new System.Drawing.Size(41' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.lblDefByteOrder2.Size = new System.Drawing.Size(41' 13);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 287);
Magic Number,Scada.Comm.Devices.Modbus.UI,FrmTemplateSettings,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpModbus\Modbus\UI\FrmTemplateSettings.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 287);
