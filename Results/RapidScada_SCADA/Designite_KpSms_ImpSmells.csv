Implementation smell,Namespace,Class,File,Method,Description
Long Method,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The method has 110 lines of code.
Long Method,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,PrimarySession,The method has 112 lines of code.
Complex Method,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,Cyclomatic complexity of the method is 11
Complex Method,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,PrimarySession,Cyclomatic complexity of the method is 16
Complex Conditional,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The conditional expression  "!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2)"  is complex.
Empty Catch Block,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,DecodeUnicodeText,The method has an empty catch block.
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,KpSmsLogic,The following statement contains a magic number: if (Localization.UseRussian)              {                  kpTags.Add(new KPTag(1' "Связь"));                  kpTags.Add(new KPTag(2' "Кол-во событий"));              }              else              {                  kpTags.Add(new KPTag(1' "Connection"));                  kpTags.Add(new KPTag(2' "Event count"));              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,KpSmsLogic,The following statement contains a magic number: if (Localization.UseRussian)              {                  kpTags.Add(new KPTag(1' "Связь"));                  kpTags.Add(new KPTag(2' "Кол-во событий"));              }              else              {                  kpTags.Add(new KPTag(1' "Connection"));                  kpTags.Add(new KPTag(2' "Event count"));              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,DecodePhone,The following statement contains a magic number: for (int i = 2; i < phoneNumber.Length; i += 2)              {                  if (i + 1 < phoneNumber.Length)                  {                      char c = phoneNumber[i + 1];                      if ('0' <= c && c <= '9')                           result.Append(c);                        c = phoneNumber[i];                      if ('0' <= c && c <= '9')                           result.Append(c);                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,DecodePhone,The following statement contains a magic number: for (int i = 2; i < phoneNumber.Length; i += 2)              {                  if (i + 1 < phoneNumber.Length)                  {                      char c = phoneNumber[i + 1];                      if ('0' <= c && c <= '9')                           result.Append(c);                        c = phoneNumber[i];                      if ('0' <= c && c <= '9')                           result.Append(c);                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,EncodePhone,The following statement contains a magic number: if (phoneLen > 0)              {                  if (phoneNumber[0] == '+')                  {                      phoneNumber = phoneNumber.Substring(1);                      result.Append("91");                      phoneLen--;                  }                  else                      result.Append("81");                    int i = 1;                  while (i < phoneLen)                  {                      result.Append(phoneNumber[i]);                      result.Append(phoneNumber[i - 1]);                      i += 2;                  }                  if (i == phoneLen)                  {                      result.Append('F');                      result.Append(phoneNumber[i - 1]);                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode7bitText,The following statement contains a magic number: byte[] buf = new byte[text.Length / 2];
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode7bitText,The following statement contains a magic number: for (int i = 0; i < text.Length - 1; i += 2)                  buf[bufPos++] = HexToByte(text.Substring(i' 2));
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode7bitText,The following statement contains a magic number: for (int i = 0; i < text.Length - 1; i += 2)                  buf[bufPos++] = HexToByte(text.Substring(i' 2));
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode7bitText,The following statement contains a magic number: byte bit = 7;
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode7bitText,The following statement contains a magic number: for (int i = 0; i < bufPos; i++)              {                  byte b = buf[i];                  byte sym = (byte)((part >> (bit + 1)) | ((b & MaskR[bit - 1]) << (7 - bit)));                  part = (byte)(b & MaskL[bit - 1]);                  result[resPos++] = sym;                    if (--bit == 0)                  {                      sym = (byte)((b & 0xFE) >> 1);                      part = 0;                        result[resPos++] = sym;                      bit = 7;                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode7bitText,The following statement contains a magic number: for (int i = 0; i < bufPos; i++)              {                  byte b = buf[i];                  byte sym = (byte)((part >> (bit + 1)) | ((b & MaskR[bit - 1]) << (7 - bit)));                  part = (byte)(b & MaskL[bit - 1]);                  result[resPos++] = sym;                    if (--bit == 0)                  {                      sym = (byte)((b & 0xFE) >> 1);                      part = 0;                        result[resPos++] = sym;                      bit = 7;                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Encode7bitText,The following statement contains a magic number: byte bit = 7;
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Encode7bitText,The following statement contains a magic number: while (i < len)              {                  byte sym = (byte)(bytes[i] & 0x7F);                  byte nextSym = i < len - 1 ? (byte)(bytes[i + 1] & 0x7F) : (byte)0;                  byte code = (byte)((sym >> (7 - bit)) | (nextSym << bit));                    if (bit == 1)                  {                      i++;                      bit = 7;                  }                  else                      bit--;                    result.Add(code);                  i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Encode7bitText,The following statement contains a magic number: while (i < len)              {                  byte sym = (byte)(bytes[i] & 0x7F);                  byte nextSym = i < len - 1 ? (byte)(bytes[i + 1] & 0x7F) : (byte)0;                  byte code = (byte)((sym >> (7 - bit)) | (nextSym << bit));                    if (bit == 1)                  {                      i++;                      bit = 7;                  }                  else                      bit--;                    result.Add(code);                  i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode8bitText,The following statement contains a magic number: byte[] buf = new byte[text.Length / 2];
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode8bitText,The following statement contains a magic number: for (int i = 0; i < text.Length - 1; i += 2)                  buf[bufPos++] = HexToByte(text.Substring(i' 2));
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,Decode8bitText,The following statement contains a magic number: for (int i = 0; i < text.Length - 1; i += 2)                  buf[bufPos++] = HexToByte(text.Substring(i' 2));
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,DecodeUnicodeText,The following statement contains a magic number: for (int i = 0; i < text.Length - 3; i += 4)                  try                  {                      int val = int.Parse(text.Substring(i' 4)' NumberStyles.HexNumber);                      result.Append(char.ConvertFromUtf32(val));                  }                  catch { }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,DecodeUnicodeText,The following statement contains a magic number: for (int i = 0; i < text.Length - 3; i += 4)                  try                  {                      int val = int.Parse(text.Substring(i' 4)' NumberStyles.HexNumber);                      result.Append(char.ConvertFromUtf32(val));                  }                  catch { }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,DecodeUnicodeText,The following statement contains a magic number: for (int i = 0; i < text.Length - 3; i += 4)                  try                  {                      int val = int.Parse(text.Substring(i' 4)' NumberStyles.HexNumber);                      result.Append(char.ConvertFromUtf32(val));                  }                  catch { }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,EncodeUnicodeText,The following statement contains a magic number: for (int i = 0; i < text.Length; i++)              {                  int val = char.ConvertToUtf32(text' i);                  result.Add((byte)(val >> 8 & 0xFF));                  result.Add((byte)(val & 0xFF));              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,MakePDU,The following statement contains a magic number: const int Max7bitMsgLen = 160;
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,MakePDU,The following statement contains a magic number: const int MaxUnicodeMsgLen = 70;
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,MakePDU,The following statement contains a magic number: pduLen = (pdu.Length - 2) / 2;
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,MakePDU,The following statement contains a magic number: pduLen = (pdu.Length - 2) / 2;
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,FillMessageList,The following statement contains a magic number: while (i <= lineCnt)              {                  string line = inData[i - 1].Trim();                  if (line.StartsWith("+CMGL: ") && line.Length > 7)                  {                      // получение индекса' статуса и длины сообщения                      Message msg = new Message();                      bool paramsOK = false;                      string[] parts = line.Substring(7).Split(new char[] { ''' }' StringSplitOptions.None);                      if (parts.Length >= 3)                      {                          int val1' val2' val3;                          if (int.TryParse(parts[0]' out val1) && int.TryParse(parts[1]' out val2) &&                              int.TryParse(parts[parts.Length - 1]' out val3))                          {                              paramsOK = true;                              msg.Index = val1;                              msg.Status = val2;                              msg.Length = val3;                              i++;                          }                      }                        // расшифровка PDU                      if (paramsOK)                      {                          if (i <= lineCnt)                          {                              line = inData[i - 1].Trim(); // PDU                              try                              {                                  int scaLen = int.Parse(line.Substring(0' 2));         // длина номера центра сообщений                                  int oaPos = scaLen * 2 + 4;                           // позиция номера отправителя                                    if (msg.Length == (line.Length - oaPos + 2) / 2)                                  {                                      int oaLen = int.Parse(line.Substring(oaPos' 2)'                                          NumberStyles.HexNumber);                      // длина номера отправителя                                      if (oaLen % 2 > 0) oaLen++;                                      msg.Phone = DecodePhone(line.Substring(oaPos + 2' oaLen + 2));                                        int sctsPos = oaPos + oaLen + 8;                  // позиция временной метки                                      msg.TimeStamp = new DateTime(int.Parse("20" + line[sctsPos + 1] + line[sctsPos])'                                          int.Parse(line[sctsPos + 3].ToString() + line[sctsPos + 2])'                                          int.Parse(line[sctsPos + 5].ToString() + line[sctsPos + 4])'                                          int.Parse(line[sctsPos + 7].ToString() + line[sctsPos + 6])'                                          int.Parse(line[sctsPos + 9].ToString() + line[sctsPos + 8])'                                          int.Parse(line[sctsPos + 11].ToString() + line[sctsPos + 10]));                                        string dcs = line.Substring(sctsPos - 2' 2);      // кодировка                                      int udPos = sctsPos + 16;                         // позиция текста сообщения                                      int udl = int.Parse(line.Substring(udPos - 2' 2)'                                          NumberStyles.HexNumber);                      // длина текста сообщения                                      string ud = line.Substring(udPos);                // текст сообщения                                        // проверка длины текста сообщения' разные модемы вычиляют UDL по-разному                                      if (!(dcs == "00" && ud.Length * 4 / 7 == udl ||                                           dcs != "00" && ud.Length == udl * 2))                                      {                                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                              "Предупреждение в строке {0}: некорректная длина текста сообщения" :                                              "Warning in line {0}: incorrect message length"' i));                                      }                                        // декодирование сообщения                                      if (dcs == "00")                                          msg.Text = Decode7bitText(ud);                                      else if (dcs == "F6")                                          msg.Text = Decode8bitText(ud);                                      else if (dcs == "08")                                          msg.Text = DecodeUnicodeText(ud);                                        messageList.Add(msg);                                  }                                  else                                  {                                      result = false;                                      logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                          "Ошибка в строке {0}: некорректная длина PDU" :                                          "Error in line {0}: incorrect PDU length"' i));                                  }                              }                              catch                              {                                  result = false;                                  logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                                      "Ошибка в строке {0}: невозможно расшифровать PDU" :                                      "Error in line {0}: unable to decode PDU"' i));                              }                          }                          else                          {                              result = false;                              logMsgSB.AppendLine(Localization.UseRussian ?                                  "Ошибка: некорректное завершение входных данных" :                                  "Error: incorrect termination of the input data");                          }                      }                      else                      {                          result = false;                          logMsgSB.AppendLine(string.Format(Localization.UseRussian ?                              "Ошибка в строке {0}: некорректные параметры сообщения" :                              "Error in line {0}: incorrect message parameters"' i));                      }                  }                    i++;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: object[] msgObjArr = new object[6];
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: if (message == null)              {                  msgObjArr[0] = 0;                  msgObjArr[1] = 0;                  msgObjArr[2] = "";                  msgObjArr[3] = DateTime.MinValue;                  msgObjArr[4] = "";                  msgObjArr[5] = true;              }              else              {                  msgObjArr[0] = message.Index;                  msgObjArr[1] = message.Status;                  msgObjArr[2] = message.Phone.Clone();                  msgObjArr[3] = message.TimeStamp;                  msgObjArr[4] = message.Text.Clone();                  msgObjArr[5] = false;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: if (message == null)              {                  msgObjArr[0] = 0;                  msgObjArr[1] = 0;                  msgObjArr[2] = "";                  msgObjArr[3] = DateTime.MinValue;                  msgObjArr[4] = "";                  msgObjArr[5] = true;              }              else              {                  msgObjArr[0] = message.Index;                  msgObjArr[1] = message.Status;                  msgObjArr[2] = message.Phone.Clone();                  msgObjArr[3] = message.TimeStamp;                  msgObjArr[4] = message.Text.Clone();                  msgObjArr[5] = false;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: if (message == null)              {                  msgObjArr[0] = 0;                  msgObjArr[1] = 0;                  msgObjArr[2] = "";                  msgObjArr[3] = DateTime.MinValue;                  msgObjArr[4] = "";                  msgObjArr[5] = true;              }              else              {                  msgObjArr[0] = message.Index;                  msgObjArr[1] = message.Status;                  msgObjArr[2] = message.Phone.Clone();                  msgObjArr[3] = message.TimeStamp;                  msgObjArr[4] = message.Text.Clone();                  msgObjArr[5] = false;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: if (message == null)              {                  msgObjArr[0] = 0;                  msgObjArr[1] = 0;                  msgObjArr[2] = "";                  msgObjArr[3] = DateTime.MinValue;                  msgObjArr[4] = "";                  msgObjArr[5] = true;              }              else              {                  msgObjArr[0] = message.Index;                  msgObjArr[1] = message.Status;                  msgObjArr[2] = message.Phone.Clone();                  msgObjArr[3] = message.TimeStamp;                  msgObjArr[4] = message.Text.Clone();                  msgObjArr[5] = false;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: if (message == null)              {                  msgObjArr[0] = 0;                  msgObjArr[1] = 0;                  msgObjArr[2] = "";                  msgObjArr[3] = DateTime.MinValue;                  msgObjArr[4] = "";                  msgObjArr[5] = true;              }              else              {                  msgObjArr[0] = message.Index;                  msgObjArr[1] = message.Status;                  msgObjArr[2] = message.Phone.Clone();                  msgObjArr[3] = message.TimeStamp;                  msgObjArr[4] = message.Text.Clone();                  msgObjArr[5] = false;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: if (message == null)              {                  msgObjArr[0] = 0;                  msgObjArr[1] = 0;                  msgObjArr[2] = "";                  msgObjArr[3] = DateTime.MinValue;                  msgObjArr[4] = "";                  msgObjArr[5] = true;              }              else              {                  msgObjArr[0] = message.Index;                  msgObjArr[1] = message.Status;                  msgObjArr[2] = message.Phone.Clone();                  msgObjArr[3] = message.TimeStamp;                  msgObjArr[4] = message.Text.Clone();                  msgObjArr[5] = false;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: if (message == null)              {                  msgObjArr[0] = 0;                  msgObjArr[1] = 0;                  msgObjArr[2] = "";                  msgObjArr[3] = DateTime.MinValue;                  msgObjArr[4] = "";                  msgObjArr[5] = true;              }              else              {                  msgObjArr[0] = message.Index;                  msgObjArr[1] = message.Status;                  msgObjArr[2] = message.Phone.Clone();                  msgObjArr[3] = message.TimeStamp;                  msgObjArr[4] = message.Text.Clone();                  msgObjArr[5] = false;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertMessage,The following statement contains a magic number: if (message == null)              {                  msgObjArr[0] = 0;                  msgObjArr[1] = 0;                  msgObjArr[2] = "";                  msgObjArr[3] = DateTime.MinValue;                  msgObjArr[4] = "";                  msgObjArr[5] = true;              }              else              {                  msgObjArr[0] = message.Index;                  msgObjArr[1] = message.Status;                  msgObjArr[2] = message.Phone.Clone();                  msgObjArr[3] = message.TimeStamp;                  msgObjArr[4] = message.Text.Clone();                  msgObjArr[5] = false;              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,PrimarySession,The following statement contains a magic number: if (lastCommSucc)              {                  foreach (Message msg in messageList)                  {                      // обработка сообщения' если оно не обработано другими КП                      try                      {                          object[] msgObjArr = msg.Reference;                          if (!(bool)msgObjArr[5] /*сообщение не обработано*/ &&                               (int)msgObjArr[1] <= 1 /*принятое сообщение*/)                          {                              // запись события                              WriteEvent(msg.TimeStamp' msg.Phone' msg.Text' ref eventCnt);                              msgObjArr[5] = true;                          }                      }                      catch                      {                          WriteToLog((Localization.UseRussian ?                               "Ошибка при обработке сообщения " :                               "Error processing message ") + msg.Index);                      }                        // удаление сообщений из памяти GSM-терминала                      bool deleteComplete = false;                      tryNum = 0;                      while (tryNum < ReqTriesCnt && !deleteComplete && !Terminated)                      {                          WriteToLog((Localization.UseRussian ? "Удаление сообщения " : "Delete message ") + msg.Index);                          Connection.WriteLine("AT+CMGD=" + msg.Index);                          Connection.ReadLines(ReqParams.Timeout' OkStopCond' out deleteComplete);                            FinishRequest();                          tryNum++;                      }                      lastCommSucc = lastCommSucc && deleteComplete;                  }                    messageList.Clear();                  GetMessageObjList().Clear();              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,PrimarySession,The following statement contains a magic number: if (lastCommSucc)              {                  foreach (Message msg in messageList)                  {                      // обработка сообщения' если оно не обработано другими КП                      try                      {                          object[] msgObjArr = msg.Reference;                          if (!(bool)msgObjArr[5] /*сообщение не обработано*/ &&                               (int)msgObjArr[1] <= 1 /*принятое сообщение*/)                          {                              // запись события                              WriteEvent(msg.TimeStamp' msg.Phone' msg.Text' ref eventCnt);                              msgObjArr[5] = true;                          }                      }                      catch                      {                          WriteToLog((Localization.UseRussian ?                               "Ошибка при обработке сообщения " :                               "Error processing message ") + msg.Index);                      }                        // удаление сообщений из памяти GSM-терминала                      bool deleteComplete = false;                      tryNum = 0;                      while (tryNum < ReqTriesCnt && !deleteComplete && !Terminated)                      {                          WriteToLog((Localization.UseRussian ? "Удаление сообщения " : "Delete message ") + msg.Index);                          Connection.WriteLine("AT+CMGD=" + msg.Index);                          Connection.ReadLines(ReqParams.Timeout' OkStopCond' out deleteComplete);                            FinishRequest();                          tryNum++;                      }                      lastCommSucc = lastCommSucc && deleteComplete;                  }                    messageList.Clear();                  GetMessageObjList().Clear();              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,SecondarySession,The following statement contains a magic number: foreach (object[] msgObjArr in msgObjList)              {                  try                  {                      if (!(bool)msgObjArr[5]) // сообщение не обработано                      {                          if ((string)msgObjArr[2] == CallNum /*совпадение телефонного номера*/ &&                              (int)msgObjArr[1] <= 1 /*принятое сообщение*/)                          {                              // запись события                              WriteEvent((DateTime)msgObjArr[3]' ""' (string)msgObjArr[4]' ref eventCnt);                              msgObjArr[5] = true;                          }                      }                  }                  catch                  {                      int index;                      try { index = (int)msgObjArr[0]; }                      catch { index = 0; }                      WriteToLog((Localization.UseRussian ?                           "Ошибка при обработке сообщения" :                           "Error processing message") + (index > 0 ? " " + index : ""));                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,SecondarySession,The following statement contains a magic number: foreach (object[] msgObjArr in msgObjList)              {                  try                  {                      if (!(bool)msgObjArr[5]) // сообщение не обработано                      {                          if ((string)msgObjArr[2] == CallNum /*совпадение телефонного номера*/ &&                              (int)msgObjArr[1] <= 1 /*принятое сообщение*/)                          {                              // запись события                              WriteEvent((DateTime)msgObjArr[3]' ""' (string)msgObjArr[4]' ref eventCnt);                              msgObjArr[5] = true;                          }                      }                  }                  catch                  {                      int index;                      try { index = (int)msgObjArr[0]; }                      catch { index = 0; }                      WriteToLog((Localization.UseRussian ?                           "Ошибка при обработке сообщения" :                           "Error processing message") + (index > 0 ? " " + index : ""));                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,SecondarySession,The following statement contains a magic number: foreach (object[] msgObjArr in msgObjList)              {                  try                  {                      if (!(bool)msgObjArr[5]) // сообщение не обработано                      {                          if ((string)msgObjArr[2] == CallNum /*совпадение телефонного номера*/ &&                              (int)msgObjArr[1] <= 1 /*принятое сообщение*/)                          {                              // запись события                              WriteEvent((DateTime)msgObjArr[3]' ""' (string)msgObjArr[4]' ref eventCnt);                              msgObjArr[5] = true;                          }                      }                  }                  catch                  {                      int index;                      try { index = (int)msgObjArr[0]; }                      catch { index = 0; }                      WriteToLog((Localization.UseRussian ?                           "Ошибка при обработке сообщения" :                           "Error processing message") + (index > 0 ? " " + index : ""));                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,SecondarySession,The following statement contains a magic number: foreach (object[] msgObjArr in msgObjList)              {                  try                  {                      if (!(bool)msgObjArr[5]) // сообщение не обработано                      {                          if ((string)msgObjArr[2] == CallNum /*совпадение телефонного номера*/ &&                              (int)msgObjArr[1] <= 1 /*принятое сообщение*/)                          {                              // запись события                              WriteEvent((DateTime)msgObjArr[3]' ""' (string)msgObjArr[4]' ref eventCnt);                              msgObjArr[5] = true;                          }                      }                  }                  catch                  {                      int index;                      try { index = (int)msgObjArr[0]; }                      catch { index = 0; }                      WriteToLog((Localization.UseRussian ?                           "Ошибка при обработке сообщения" :                           "Error processing message") + (index > 0 ? " " + index : ""));                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,SecondarySession,The following statement contains a magic number: foreach (object[] msgObjArr in msgObjList)              {                  try                  {                      if (!(bool)msgObjArr[5]) // сообщение не обработано                      {                          if ((string)msgObjArr[2] == CallNum /*совпадение телефонного номера*/ &&                              (int)msgObjArr[1] <= 1 /*принятое сообщение*/)                          {                              // запись события                              WriteEvent((DateTime)msgObjArr[3]' ""' (string)msgObjArr[4]' ref eventCnt);                              msgObjArr[5] = true;                          }                      }                  }                  catch                  {                      int index;                      try { index = (int)msgObjArr[0]; }                      catch { index = 0; }                      WriteToLog((Localization.UseRussian ?                           "Ошибка при обработке сообщения" :                           "Error processing message") + (index > 0 ? " " + index : ""));                  }              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,SendMessages,The following statement contains a magic number: foreach (string phoneNumber in phoneNumbers)              {                  WriteToLog(string.Format(Localization.UseRussian ?                      "Отправка SMS на номер {0}" :                      "Send message to {0}"' phoneNumber));                    int pduLen;                  string pdu = MakePDU(phoneNumber' msgText' out pduLen);                  Connection.WriteLine("AT+CMGS=" + pduLen);                  Thread.Sleep(100);                    try                  {                      Connection.NewLine = "\x1A";                      Connection.WriteLine(pdu);                  }                  finally                  {                      Connection.NewLine = NewLine;                  }                    bool stopReceived;                  Connection.ReadLines(ReqParams.Timeout' OkStopCond' out stopReceived);                  if (!stopReceived)                      responseOK = false;                  Thread.Sleep(ReqParams.Delay);              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,ConvertTagDataToStr,The following statement contains a magic number: if (tagData.Stat > 0)              {                  if (signal == 1)                      return tagData.Val > 0 ?                          (Localization.UseRussian ? "Есть" : "Yes") :                          (Localization.UseRussian ? "Нет" : "No");                  else if (signal == 2)                      return ((int)tagData.Val).ToString();              }
Magic Number,Scada.Comm.Devices,KpSmsLogic,C:\repos\RapidScada_SCADA\ScadaComm\OpenKPs\KpSms\KpSmsLogic.cs,SendCmd,The following statement contains a magic number: if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary && (cmd.CmdNum == 1 || cmd.CmdNum == 2))              {                  string cmdDataStr = cmd.GetCmdDataStr();                  if (cmdDataStr != "")                  {                      Connection.WriteToLog = WriteToLog;                      if (cmd.CmdNum == 1)                      {                          // извлечение получателя и текста сообщения из данных команды                          // для основного КП: <группа' контакт или телефон>;<текст сообщения>                           // для остальных КП: <текст сообщения>                           string recipient;                          string msgText;                            if (primary)                          {                              int scPos = cmdDataStr.IndexOf(';');                              recipient = scPos >= 0 ? cmdDataStr.Substring(0' scPos).Trim() : "";                              msgText = scPos >= 0 ? cmdDataStr.Substring(scPos + 1) : cmdDataStr;                          }                          else                          {                              recipient = CallNum.Trim();                              msgText = cmdDataStr;                          }                            if (recipient == "" || msgText == "")                          {                              WriteToLog(Localization.UseRussian ?                                  "Получатель или текст сообщения отсутствует" :                                  "Recipient or message text is missing");                          }                          else                          {                              // формирование списка телефонных номеров для отправки сообщений                              List<string> phoneNumbers = GetPhoneNumbers(recipient);                                // отправка сообщений                              if (phoneNumbers.Count > 0)                                  lastCommSucc = SendMessages(msgText' phoneNumbers);                              else                                  WriteToLog(string.Format(Localization.UseRussian ?                                      "\"{0}\" не содержит телефонных номеров" :                                      "\"{0}\" does not contain phone numbers"' recipient));                          }                      }                      else                      {                          // произвольная AT-команда                          Connection.WriteLine(cmdDataStr);                          Connection.ReadLines(ReqParams.Timeout' OkErrStopCond' out lastCommSucc);                          Thread.Sleep(ReqParams.Delay);                      }                  }                  else                  {                      WriteToLog(CommPhrases.NoCmdData);                  }              }              else              {                  WriteToLog(CommPhrases.IllegalCommand);              }
