Implementation smell,Namespace,Class,File,Method,Description
Long Method,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The method has 107 lines of code.
Long Method,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The method has 116 lines of code.
Long Method,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The method has 108 lines of code.
Long Method,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,The method has 123 lines of code.
Long Method,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The method has 127 lines of code.
Long Method,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The method has 142 lines of code.
Long Method,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The method has 225 lines of code.
Long Method,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The method has 111 lines of code.
Long Method,Scada.UI,Translator,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\Translator.cs,TranslateWinControls,The method has 115 lines of code.
Complex Method,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,Cyclomatic complexity of the method is 10
Complex Method,Scada.Data.Models,Command,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Models\Command.cs,GetCmdDescr,Cyclomatic complexity of the method is 8
Complex Method,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,Cyclomatic complexity of the method is 14
Complex Method,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,Cyclomatic complexity of the method is 14
Complex Method,Scada.Data.Configuration,ConfDAO,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Configuration\ConfDAO.cs,GetInCnlProps,Cyclomatic complexity of the method is 9
Complex Method,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,ReloadItems,Cyclomatic complexity of the method is 9
Complex Method,Scada.UI,Translator,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\Translator.cs,TranslateWinControls,Cyclomatic complexity of the method is 13
Long Parameter List,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,HexToBytes,The method has 5 parameters. Parameters: s' strIndex' buf' bufIndex' byteCount
Long Parameter List,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,AppendParamElem,The method has 5 parameters. Parameters: parentXmlElem' paramName' value' descrRu' descrEn
Long Parameter List,Scada.Client,ViewCache,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ViewCache.cs,LoadView,The method has 5 parameters. Parameters: viewType' viewID' viewAge' view' newViewAge
Long Parameter List,Scada.Client,DataFormatter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\DataFormatter.cs,FormatCnlVal,The method has 5 parameters. Parameters: val' stat' cnlProps' text' textWithUnit
Long Parameter List,Scada.Client,DataFormatter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\DataFormatter.cs,FormatCnlVal,The method has 9 parameters. Parameters: val' stat' cnlProps' decSep' grSep' text' textWithUnit' textIsNumber' throwOnError
Long Parameter List,Scada.Client,CommSettings,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\CommSettings.cs,CommSettings,The method has 5 parameters. Parameters: serverHost' serverPort' serverUser' serverPwd' serverTimeout
Long Parameter List,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The method has 6 parameters. Parameters: userID' ctrlCnl' cmdVal' cmdData' kpNum' result
Long Parameter List,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,ConvertStr,The method has 6 parameters. Parameters: s' maxLen' maxDataSize' buffer' index' encoding
Long Parameter List,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The method has 7 parameters. Parameters: exeDir' frmAbout' pictureBox' lblLink' imgLoaded' linkUrl' errMsg
Complex Conditional,Scada.Client,DataFormatter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\DataFormatter.cs,GetCnlValColor,The conditional expression  "cnlProps.ShowNumber ||                          cnlProps.UnitArr == null || cnlProps.UnitArr.Length != 2 ||                          stat == BaseValues.CnlStatuses.Undefined ||                          stat == BaseValues.CnlStatuses.FormulaError ||                          stat == BaseValues.CnlStatuses.Unreliable"  is complex.
Complex Conditional,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The conditional expression  "parts.Length >= 4 && int.TryParse(parts[0]' out x) && int.TryParse(parts[1]' out y) &&                                      int.TryParse(parts[2]' out w) && int.TryParse(parts[3]' out h)"  is complex.
Complex Conditional,Scada.UI,TreeViewUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\TreeViewUtils.cs,MoveUpSelectedNode,The conditional expression  "parentNode != null && prevParentNode != null &&                               parentNode.Tag is ITreeNode && prevParentNode.Tag is ITreeNode &&                              parentNode.Tag.GetType() == prevParentNode.Tag.GetType()"  is complex.
Complex Conditional,Scada.UI,TreeViewUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\TreeViewUtils.cs,MoveDownSelectedNode,The conditional expression  "parentNode != null && nextParentNode != null &&                              parentNode.Tag is ITreeNode && nextParentNode.Tag is ITreeNode &&                              parentNode.Tag.GetType() == nextParentNode.Tag.GetType()"  is complex.
Empty Catch Block,Scada,FileListener,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\FileListener.cs,DeleteFile,The method has an empty catch block.
Empty Catch Block,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The method has an empty catch block.
Empty Catch Block,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ClearNetStream,The method has an empty catch block.
Empty Catch Block,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,RestoreReceiveTimeout,The method has an empty catch block.
Empty Catch Block,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,The method has an empty catch block.
Empty Catch Block,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The method has an empty catch block.
Empty Catch Block,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The method has an empty catch block.
Magic Number,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,EncodeAscii,The following statement contains a magic number: byte[] buf = new byte[8];
Magic Number,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,EncodeAscii,The following statement contains a magic number: int len = Math.Min(8' s.Length);
Magic Number,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,EncodeUnicode,The following statement contains a magic number: byte[] buf = new byte[8];
Magic Number,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,EncodeUnicode,The following statement contains a magic number: int len = Math.Min(4' s.Length);
Magic Number,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,HexToBytes,The following statement contains a magic number: while (strIndex < strLen && convBytes < byteCount)              {                  try                  {                      buf[bufIndex] = byte.Parse(s.Substring(strIndex' 2)' NumberStyles.AllowHexSpecifier);                      bufIndex++;                      convBytes++;                      strIndex += 2;                  }                  catch (FormatException)                  {                      return false;                  }              }
Magic Number,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,HexToBytes,The following statement contains a magic number: while (strIndex < strLen && convBytes < byteCount)              {                  try                  {                      buf[bufIndex] = byte.Parse(s.Substring(strIndex' 2)' NumberStyles.AllowHexSpecifier);                      bufIndex++;                      convBytes++;                      strIndex += 2;                  }                  catch (FormatException)                  {                      return false;                  }              }
Magic Number,Scada,ScadaUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\ScadaUtils.cs,HexToBytes,The following statement contains a magic number: int bufLen = strLen / 2;
Magic Number,Scada.Client,DataFormatter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\DataFormatter.cs,GetCnlValColor,The following statement contains a magic number: try              {                  if (cnlProps == null)                  {                      return DefColor;                  }                  else                  {                      if (cnlProps.ShowNumber ||                          cnlProps.UnitArr == null || cnlProps.UnitArr.Length != 2 ||                          stat == BaseValues.CnlStatuses.Undefined ||                          stat == BaseValues.CnlStatuses.FormulaError ||                          stat == BaseValues.CnlStatuses.Unreliable)                      {                          return cnlStatProps == null || string.IsNullOrEmpty(cnlStatProps.Color) ?                               DefColor : cnlStatProps.Color;                      }                      else                      {                          return val > 0 ? OnColor : OffColor;                      }                  }              }              catch (Exception ex)              {                  string cnlNumStr = cnlProps == null ? cnlProps.CnlNum.ToString() : "?";                  throw new ScadaException(string.Format(Localization.UseRussian ?                      "Ошибка при получении цвета значения входного канала {0}" :                      "Error getting color of input channel {0}"' cnlNumStr)' ex);              }
Magic Number,Scada.Client,CommSettings,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\CommSettings.cs,SetToDefault,The following statement contains a magic number: ServerPort = 10000;
Magic Number,Scada.Client,CommSettings,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\CommSettings.cs,SetToDefault,The following statement contains a magic number: ServerTimeout = 10000;
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckDataFormat,The following statement contains a magic number: return bufLen >= 3 && buffer[0] + 256 * buffer[1] == bufLen && buffer[2] == cmdNum;
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckDataFormat,The following statement contains a magic number: return bufLen >= 3 && buffer[0] + 256 * buffer[1] == bufLen && buffer[2] == cmdNum;
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckDataFormat,The following statement contains a magic number: return bufLen >= 3 && buffer[0] + 256 * buffer[1] == bufLen && buffer[2] == cmdNum;
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,Connect,The following statement contains a magic number: try              {                  commState = CommStates.Disconnected;                  WriteAction(string.Format(Localization.UseRussian ?                       "Установка соединения со SCADA-Сервером \"{0}\"" :                       "Connect to SCADA-Server \"{0}\""' commSettings.ServerHost)' Log.ActTypes.Action);                    // определение IP-адреса' если он указан в конфигурации программы                  IPAddress ipAddress = null;                  try { ipAddress = IPAddress.Parse(commSettings.ServerHost); }                  catch { }                    // создание' настройка и попытка установки соединения                  tcpClient = new TcpClient();                  tcpClient.NoDelay = true;            // sends data immediately upon calling NetworkStream.Write                  tcpClient.ReceiveBufferSize = 16384; // 16 кБ                  tcpClient.SendBufferSize = 8192;     // 8 кБ' размер по умолчанию                  tcpClient.SendTimeout = TcpSendTimeout;                  tcpClient.ReceiveTimeout = TcpReceiveTimeout;                    if (ipAddress == null)                      tcpClient.Connect(commSettings.ServerHost' commSettings.ServerPort);                  else                      tcpClient.Connect(ipAddress' commSettings.ServerPort);                    netStream = tcpClient.GetStream();                    // получение версии SCADA-Сервера                  byte[] buf = new byte[5];                  int bytesRead = netStream.Read(buf' 0' 5);                    // обработка считанных данных версии                  if (bytesRead == buf.Length && CheckDataFormat(buf' 0x00))                  {                      commState = CommStates.Connected;                      serverVersion = buf[4] + "." + buf[3];                         // запрос правильности имени и пароля пользователя' его роли                      byte userLen = (byte)commSettings.ServerUser.Length;                      byte pwdLen = (byte)commSettings.ServerPwd.Length;                      buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerUser)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      Array.Copy(Encoding.Default.GetBytes(commSettings.ServerPwd)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      bytesRead = netStream.Read(buf' 0' 4);                        // обработка считанных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          int roleID = buf[3];                            if (roleID == BaseValues.Roles.App)                          {                              commState = CommStates.Authorized;                          }                          else if (roleID < BaseValues.Roles.Err)                          {                              errMsg = Localization.UseRussian ?                                   "Недостаточно прав для соединения со SCADA-Сервером" :                                  "Insufficient rights to connect to SCADA-Server";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                          else // roleID == BaseValues.Roles.Err                          {                              errMsg = Localization.UseRussian ?                                   "Неверное имя пользователя или пароль" :                                  "User name or password is incorrect";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }                  else                  {                      errMsg = Localization.UseRussian ?                           "Неверный формат ответа SCADA-Сервера на запрос версии" :                          "Incorrect SCADA-Server response to version request";                      WriteAction(errMsg' Log.ActTypes.Error);                      commState = CommStates.Error;                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при установке соединения со SCADA-Сервером: " :                       "Error connecting to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ClearNetStream,The following statement contains a magic number: try              {                  if (netStream != null && netStream.DataAvailable)                  {                      // считывание оставшихся данных из потока' но не более 100 кБ                      byte[] buf = new byte[1024];                      int n = 0;                      while (netStream.DataAvailable && ++n <= 100)                          try { netStream.Read(buf' 0' 1024); }                          catch { }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при очистке сетевого потока: " :                       "Error clear network stream: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ClearNetStream,The following statement contains a magic number: try              {                  if (netStream != null && netStream.DataAvailable)                  {                      // считывание оставшихся данных из потока' но не более 100 кБ                      byte[] buf = new byte[1024];                      int n = 0;                      while (netStream.DataAvailable && ++n <= 100)                          try { netStream.Read(buf' 0' 1024); }                          catch { }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при очистке сетевого потока: " :                       "Error clear network stream: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ClearNetStream,The following statement contains a magic number: try              {                  if (netStream != null && netStream.DataAvailable)                  {                      // считывание оставшихся данных из потока' но не более 100 кБ                      byte[] buf = new byte[1024];                      int n = 0;                      while (netStream.DataAvailable && ++n <= 100)                          try { netStream.Read(buf' 0' 1024); }                          catch { }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при очистке сетевого потока: " :                       "Error clear network stream: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,RestoreConnection,The following statement contains a magic number: try              {                  bool connectNeeded = false; // требуется повторное соединение                  DateTime now = DateTime.Now;                    if (commState >= CommStates.Authorized)                  {                      if (now - restConnSuccDT > PingSpan)                      {                          // проверка соединения                          try                          {                              WriteAction(Localization.UseRussian ?                                  "Запрос состояния SCADA-Сервера" :                                  "Request SCADA-Server state"' Log.ActTypes.Action);                              commState = CommStates.WaitResponse;                                // запрос состояния SCADA-Сервера (ping)                              byte[] buf = new byte[3];                              buf[0] = 0x03;                              buf[1] = 0x00;                              buf[2] = 0x02;                              netStream.Write(buf' 0' 3);                                // приём результата                              buf = new byte[4];                              netStream.Read(buf' 0' 4);                                // обработка результата                              if (CheckDataFormat(buf' 0x02))                              {                                  commState = buf[3] > 0 ? CommStates.Authorized : CommStates.NotReady;                              }                              else                              {                                  errMsg = Localization.UseRussian ?                                      "Неверный формат ответа SCADA-Сервера на запрос состояния" :                                      "Incorrect SCADA-Server response to state request";                                  WriteAction(errMsg' Log.ActTypes.Error);                                  commState = CommStates.Error;                                  connectNeeded = true;                              }                          }                          catch                          {                              connectNeeded = true;                          }                      }                  }                  else if (now - restConnErrDT > ConnectSpan)                  {                      connectNeeded = true;                  }                    // соединение при необходимости                  if (connectNeeded)                  {                      if (tcpClient != null)                          Disconnect();                        if (Connect())                      {                          restConnSuccDT = now;                          restConnErrDT = DateTime.MinValue;                          return true;                      }                      else                      {                          restConnSuccDT = DateTime.MinValue;                          restConnErrDT = now;                          return false;                      }                  }                  else                  {                      ClearNetStream(); // очистка потока данных TCP-клиента                        if (commState >= CommStates.Authorized)                      {                          restConnSuccDT = now;                          return true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Невозможно соединиться со SCADA-Сервером. Повторите попытку." :                              "Unable to connect to SCADA-Server. Try again.";                          WriteAction(errMsg' Log.ActTypes.Error);                          return false;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при восстановлении соединения со SCADA-Сервером: " :                      "Error restoring connection with SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  commState = CommStates.Error;                  return false;              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,RestoreConnection,The following statement contains a magic number: try              {                  bool connectNeeded = false; // требуется повторное соединение                  DateTime now = DateTime.Now;                    if (commState >= CommStates.Authorized)                  {                      if (now - restConnSuccDT > PingSpan)                      {                          // проверка соединения                          try                          {                              WriteAction(Localization.UseRussian ?                                  "Запрос состояния SCADA-Сервера" :                                  "Request SCADA-Server state"' Log.ActTypes.Action);                              commState = CommStates.WaitResponse;                                // запрос состояния SCADA-Сервера (ping)                              byte[] buf = new byte[3];                              buf[0] = 0x03;                              buf[1] = 0x00;                              buf[2] = 0x02;                              netStream.Write(buf' 0' 3);                                // приём результата                              buf = new byte[4];                              netStream.Read(buf' 0' 4);                                // обработка результата                              if (CheckDataFormat(buf' 0x02))                              {                                  commState = buf[3] > 0 ? CommStates.Authorized : CommStates.NotReady;                              }                              else                              {                                  errMsg = Localization.UseRussian ?                                      "Неверный формат ответа SCADA-Сервера на запрос состояния" :                                      "Incorrect SCADA-Server response to state request";                                  WriteAction(errMsg' Log.ActTypes.Error);                                  commState = CommStates.Error;                                  connectNeeded = true;                              }                          }                          catch                          {                              connectNeeded = true;                          }                      }                  }                  else if (now - restConnErrDT > ConnectSpan)                  {                      connectNeeded = true;                  }                    // соединение при необходимости                  if (connectNeeded)                  {                      if (tcpClient != null)                          Disconnect();                        if (Connect())                      {                          restConnSuccDT = now;                          restConnErrDT = DateTime.MinValue;                          return true;                      }                      else                      {                          restConnSuccDT = DateTime.MinValue;                          restConnErrDT = now;                          return false;                      }                  }                  else                  {                      ClearNetStream(); // очистка потока данных TCP-клиента                        if (commState >= CommStates.Authorized)                      {                          restConnSuccDT = now;                          return true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Невозможно соединиться со SCADA-Сервером. Повторите попытку." :                              "Unable to connect to SCADA-Server. Try again.";                          WriteAction(errMsg' Log.ActTypes.Error);                          return false;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при восстановлении соединения со SCADA-Сервером: " :                      "Error restoring connection with SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  commState = CommStates.Error;                  return false;              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,RestoreConnection,The following statement contains a magic number: try              {                  bool connectNeeded = false; // требуется повторное соединение                  DateTime now = DateTime.Now;                    if (commState >= CommStates.Authorized)                  {                      if (now - restConnSuccDT > PingSpan)                      {                          // проверка соединения                          try                          {                              WriteAction(Localization.UseRussian ?                                  "Запрос состояния SCADA-Сервера" :                                  "Request SCADA-Server state"' Log.ActTypes.Action);                              commState = CommStates.WaitResponse;                                // запрос состояния SCADA-Сервера (ping)                              byte[] buf = new byte[3];                              buf[0] = 0x03;                              buf[1] = 0x00;                              buf[2] = 0x02;                              netStream.Write(buf' 0' 3);                                // приём результата                              buf = new byte[4];                              netStream.Read(buf' 0' 4);                                // обработка результата                              if (CheckDataFormat(buf' 0x02))                              {                                  commState = buf[3] > 0 ? CommStates.Authorized : CommStates.NotReady;                              }                              else                              {                                  errMsg = Localization.UseRussian ?                                      "Неверный формат ответа SCADA-Сервера на запрос состояния" :                                      "Incorrect SCADA-Server response to state request";                                  WriteAction(errMsg' Log.ActTypes.Error);                                  commState = CommStates.Error;                                  connectNeeded = true;                              }                          }                          catch                          {                              connectNeeded = true;                          }                      }                  }                  else if (now - restConnErrDT > ConnectSpan)                  {                      connectNeeded = true;                  }                    // соединение при необходимости                  if (connectNeeded)                  {                      if (tcpClient != null)                          Disconnect();                        if (Connect())                      {                          restConnSuccDT = now;                          restConnErrDT = DateTime.MinValue;                          return true;                      }                      else                      {                          restConnSuccDT = DateTime.MinValue;                          restConnErrDT = now;                          return false;                      }                  }                  else                  {                      ClearNetStream(); // очистка потока данных TCP-клиента                        if (commState >= CommStates.Authorized)                      {                          restConnSuccDT = now;                          return true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Невозможно соединиться со SCADA-Сервером. Повторите попытку." :                              "Unable to connect to SCADA-Server. Try again.";                          WriteAction(errMsg' Log.ActTypes.Error);                          return false;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при восстановлении соединения со SCADA-Сервером: " :                      "Error restoring connection with SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  commState = CommStates.Error;                  return false;              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,RestoreConnection,The following statement contains a magic number: try              {                  bool connectNeeded = false; // требуется повторное соединение                  DateTime now = DateTime.Now;                    if (commState >= CommStates.Authorized)                  {                      if (now - restConnSuccDT > PingSpan)                      {                          // проверка соединения                          try                          {                              WriteAction(Localization.UseRussian ?                                  "Запрос состояния SCADA-Сервера" :                                  "Request SCADA-Server state"' Log.ActTypes.Action);                              commState = CommStates.WaitResponse;                                // запрос состояния SCADA-Сервера (ping)                              byte[] buf = new byte[3];                              buf[0] = 0x03;                              buf[1] = 0x00;                              buf[2] = 0x02;                              netStream.Write(buf' 0' 3);                                // приём результата                              buf = new byte[4];                              netStream.Read(buf' 0' 4);                                // обработка результата                              if (CheckDataFormat(buf' 0x02))                              {                                  commState = buf[3] > 0 ? CommStates.Authorized : CommStates.NotReady;                              }                              else                              {                                  errMsg = Localization.UseRussian ?                                      "Неверный формат ответа SCADA-Сервера на запрос состояния" :                                      "Incorrect SCADA-Server response to state request";                                  WriteAction(errMsg' Log.ActTypes.Error);                                  commState = CommStates.Error;                                  connectNeeded = true;                              }                          }                          catch                          {                              connectNeeded = true;                          }                      }                  }                  else if (now - restConnErrDT > ConnectSpan)                  {                      connectNeeded = true;                  }                    // соединение при необходимости                  if (connectNeeded)                  {                      if (tcpClient != null)                          Disconnect();                        if (Connect())                      {                          restConnSuccDT = now;                          restConnErrDT = DateTime.MinValue;                          return true;                      }                      else                      {                          restConnSuccDT = DateTime.MinValue;                          restConnErrDT = now;                          return false;                      }                  }                  else                  {                      ClearNetStream(); // очистка потока данных TCP-клиента                        if (commState >= CommStates.Authorized)                      {                          restConnSuccDT = now;                          return true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Невозможно соединиться со SCADA-Сервером. Повторите попытку." :                              "Unable to connect to SCADA-Server. Try again.";                          WriteAction(errMsg' Log.ActTypes.Error);                          return false;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при восстановлении соединения со SCADA-Сервером: " :                      "Error restoring connection with SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  commState = CommStates.Error;                  return false;              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,RestoreConnection,The following statement contains a magic number: try              {                  bool connectNeeded = false; // требуется повторное соединение                  DateTime now = DateTime.Now;                    if (commState >= CommStates.Authorized)                  {                      if (now - restConnSuccDT > PingSpan)                      {                          // проверка соединения                          try                          {                              WriteAction(Localization.UseRussian ?                                  "Запрос состояния SCADA-Сервера" :                                  "Request SCADA-Server state"' Log.ActTypes.Action);                              commState = CommStates.WaitResponse;                                // запрос состояния SCADA-Сервера (ping)                              byte[] buf = new byte[3];                              buf[0] = 0x03;                              buf[1] = 0x00;                              buf[2] = 0x02;                              netStream.Write(buf' 0' 3);                                // приём результата                              buf = new byte[4];                              netStream.Read(buf' 0' 4);                                // обработка результата                              if (CheckDataFormat(buf' 0x02))                              {                                  commState = buf[3] > 0 ? CommStates.Authorized : CommStates.NotReady;                              }                              else                              {                                  errMsg = Localization.UseRussian ?                                      "Неверный формат ответа SCADA-Сервера на запрос состояния" :                                      "Incorrect SCADA-Server response to state request";                                  WriteAction(errMsg' Log.ActTypes.Error);                                  commState = CommStates.Error;                                  connectNeeded = true;                              }                          }                          catch                          {                              connectNeeded = true;                          }                      }                  }                  else if (now - restConnErrDT > ConnectSpan)                  {                      connectNeeded = true;                  }                    // соединение при необходимости                  if (connectNeeded)                  {                      if (tcpClient != null)                          Disconnect();                        if (Connect())                      {                          restConnSuccDT = now;                          restConnErrDT = DateTime.MinValue;                          return true;                      }                      else                      {                          restConnSuccDT = DateTime.MinValue;                          restConnErrDT = now;                          return false;                      }                  }                  else                  {                      ClearNetStream(); // очистка потока данных TCP-клиента                        if (commState >= CommStates.Authorized)                      {                          restConnSuccDT = now;                          return true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Невозможно соединиться со SCADA-Сервером. Повторите попытку." :                              "Unable to connect to SCADA-Server. Try again.";                          WriteAction(errMsg' Log.ActTypes.Error);                          return false;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при восстановлении соединения со SCADA-Сервером: " :                      "Error restoring connection with SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  commState = CommStates.Error;                  return false;              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,RestoreConnection,The following statement contains a magic number: try              {                  bool connectNeeded = false; // требуется повторное соединение                  DateTime now = DateTime.Now;                    if (commState >= CommStates.Authorized)                  {                      if (now - restConnSuccDT > PingSpan)                      {                          // проверка соединения                          try                          {                              WriteAction(Localization.UseRussian ?                                  "Запрос состояния SCADA-Сервера" :                                  "Request SCADA-Server state"' Log.ActTypes.Action);                              commState = CommStates.WaitResponse;                                // запрос состояния SCADA-Сервера (ping)                              byte[] buf = new byte[3];                              buf[0] = 0x03;                              buf[1] = 0x00;                              buf[2] = 0x02;                              netStream.Write(buf' 0' 3);                                // приём результата                              buf = new byte[4];                              netStream.Read(buf' 0' 4);                                // обработка результата                              if (CheckDataFormat(buf' 0x02))                              {                                  commState = buf[3] > 0 ? CommStates.Authorized : CommStates.NotReady;                              }                              else                              {                                  errMsg = Localization.UseRussian ?                                      "Неверный формат ответа SCADA-Сервера на запрос состояния" :                                      "Incorrect SCADA-Server response to state request";                                  WriteAction(errMsg' Log.ActTypes.Error);                                  commState = CommStates.Error;                                  connectNeeded = true;                              }                          }                          catch                          {                              connectNeeded = true;                          }                      }                  }                  else if (now - restConnErrDT > ConnectSpan)                  {                      connectNeeded = true;                  }                    // соединение при необходимости                  if (connectNeeded)                  {                      if (tcpClient != null)                          Disconnect();                        if (Connect())                      {                          restConnSuccDT = now;                          restConnErrDT = DateTime.MinValue;                          return true;                      }                      else                      {                          restConnSuccDT = DateTime.MinValue;                          restConnErrDT = now;                          return false;                      }                  }                  else                  {                      ClearNetStream(); // очистка потока данных TCP-клиента                        if (commState >= CommStates.Authorized)                      {                          restConnSuccDT = now;                          return true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Невозможно соединиться со SCADA-Сервером. Повторите попытку." :                              "Unable to connect to SCADA-Server. Try again.";                          WriteAction(errMsg' Log.ActTypes.Error);                          return false;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при восстановлении соединения со SCADA-Сервером: " :                      "Error restoring connection with SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  commState = CommStates.Error;                  return false;              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileToStream,The following statement contains a magic number: try              {  #if DETAILED_LOG                  WriteAction(string.Format(Localization.UseRussian ?                       "Приём файла {0} от SCADA-Сервера" :                       "Receive file {0} from SCADA-Server"' filePath)' Log.ActTypes.Action);  #endif                    commState = CommStates.WaitResponse;                  tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                    const int DataSize = 50 * 1024; // размер запрашиваемых данных 50 КБ                  const byte DataSizeL = DataSize % 256;                  const byte DataSizeH = DataSize / 256;                    byte[] buf = new byte[6 + DataSize]; // буфер отправляемых и получаемых данных                  bool open = true;  // выполняется открытие файла                  bool stop = false; // признак завершения приёма данных                    while (!stop)                  {                      if (open)                      {                          // отправка команды открытия файла и чтения данных                          byte fileNameLen = (byte)fileName.Length;                          int cmdLen = 7 + fileNameLen;                          buf[0] = (byte)(cmdLen % 256);                          buf[1] = (byte)(cmdLen / 256);                          buf[2] = 0x08;                          buf[3] = (byte)dir;                          buf[4] = fileNameLen;                          Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 5' fileNameLen);                          buf[cmdLen - 2] = DataSizeL;                          buf[cmdLen - 1] = DataSizeH;                          netStream.Write(buf' 0' cmdLen);                      }                      else                      {                          // отправка команды чтения данных из файла                          buf[0] = 0x05;                          buf[1] = 0x00;                          buf[2] = 0x0A;                          buf[3] = DataSizeL;                          buf[4] = DataSizeH;                          netStream.Write(buf' 0' 5);                      }                        // приём результата открытия файла и считанных данных                      byte cmdNum = buf[2];                      int headerLen = open ? 6 : 5;                      int bytesRead = netStream.Read(buf' 0' headerLen);                      int dataSizeRead = 0; // размер считанных из файла данных                                            if (bytesRead == headerLen)                      {                          dataSizeRead = buf[headerLen - 2] + 256 * buf[headerLen - 1];                          if (0 < dataSizeRead && dataSizeRead <= DataSize)                              bytesRead += ReadNetStream(buf' headerLen' dataSizeRead);                      }                        if (CheckDataFormat(buf' cmdNum' bytesRead) && bytesRead == dataSizeRead + headerLen)                      {                          if (open)                          {                              open = false;                                if (buf[3] > 0) // файл открыт                              {                                  inStream.Write(buf' 6' dataSizeRead);                                  commState = CommStates.Authorized;                                  stop = dataSizeRead < DataSize;                              }                              else                              {                                  errMsg = string.Format(Localization.UseRussian ?                                       "SCADA-Серверу не удалось открыть файл {0}" :                                       "SCADA-Server unable to open file {0}"' filePath);                                  WriteAction(errMsg' Log.ActTypes.Action);                                  commState = CommStates.NotReady;                                  stop = true;                              }                          }                          else                          {                              inStream.Write(buf' 5' dataSizeRead);                              commState = CommStates.Authorized;                              stop = dataSizeRead < DataSize;                          }                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду открытия или чтения из файла {0}" :                              "Incorrect SCADA-Server response to open file or read from file {0} command "' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                          stop = true;                      }                  }                    // определение результата                  if (commState == CommStates.Authorized)                  {                      if (inStream.Length > 0)                          inStream.Position = 0;                      result = true;                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                       "Ошибка при приёме файла {0} от SCADA-Сервера: " :                      "Error receiving file {0} from SCADA-Server: "' filePath) + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды ТУ SCADA-Серверу" :                          "Send telecommand to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      int cmdLen = double.IsNaN(cmdVal) ? cmdData == null ? 12 : 10 + cmdData.Length : 18;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x06;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[6] = (byte)(ctrlCnl % 256);                      buf[7] = (byte)(ctrlCnl / 256);                        if (!double.IsNaN(cmdVal)) // стандартная команда                      {                          buf[5] = 0x00;                          buf[8] = 0x08;                          buf[9] = 0x00;                          byte[] bytes = BitConverter.GetBytes(cmdVal);                          Array.Copy(bytes' 0' buf' 10' 8);                      }                      else if (cmdData != null) // бинарная команда                      {                          buf[5] = 0x01;                          int cmdDataLen = cmdData.Length;                          buf[8] = (byte)(cmdDataLen % 256);                          buf[9] = (byte)(cmdDataLen / 256);                          Array.Copy(cmdData' 0' buf' 10' cmdDataLen);                      }                      else // опрос КП                      {                          buf[5] = 0x02;                          buf[8] = 0x02;                          buf[9] = 0x00;                          buf[10] = (byte)(kpNum % 256);                          buf[11] = (byte)(kpNum / 256);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x06))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду ТУ" :                              "Incorrect SCADA-Server response to telecommand";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды ТУ SCADA-Серверу: " :                      "Error sending telecommand to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckUser,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос правильности имени и пароля пользователя' его роли                      byte userLen = username == null ? (byte)0 : (byte)username.Length;                      byte pwdLen = password == null ? (byte)0 : (byte)password.Length;                      byte[] buf = new byte[5 + userLen + pwdLen];                        buf[0] = (byte)(buf.Length % 256);                      buf[1] = (byte)(buf.Length / 256);                      buf[2] = 0x01;                      buf[3] = userLen;                      if (userLen > 0)                          Array.Copy(Encoding.Default.GetBytes(username)' 0' buf' 4' userLen);                      buf[4 + userLen] = pwdLen;                      if (pwdLen > 0)                          Array.Copy(Encoding.Default.GetBytes(password)' 0' buf' 5 + userLen' pwdLen);                        netStream.Write(buf' 0' buf.Length);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x01))                      {                          roleID = buf[3];                          result = true;                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос правильности имени и пароля" :                              "Incorrect SCADA-Server response to check user name and password request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при запросе правильности имени и пароля пользователя от SCADA-Сервера: " :                      "Error requesting check user name and password to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveTrend,The following statement contains a magic number: try              {                  try                  {                      if (RestoreConnection())                      {                          WriteAction(string.Format(Localization.UseRussian ?                               "Приём тренда входного канала {0} от SCADA-Сервера. Файл: {1}" :                               "Receive input channel {0} trend from SCADA-Server. File: {1}"'                               trend.CnlNum' tableName)' Log.ActTypes.Action);                            commState = CommStates.WaitResponse;                          tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                            byte tableType;        // тип таблицы: текущая' часовая или минутная                          byte year' month' day; // дата запрашиваемых данных                            if (tableName == SrezAdapter.CurTableName)                          {                              tableType = 0x01;                              year = month = day = 0;                          }                          else                          {                              tableType = tableName.Length > 0 && tableName[0] == 'h' ? (byte)0x02 : (byte)0x03;                              year = (byte)(date.Year % 100);                              month = (byte)date.Month;                              day = (byte)date.Day;                          }                            // отправка запроса тренда входного канала                          byte[] buf = new byte[13];                          buf[0] = 0x0D;                          buf[1] = 0x00;                          buf[2] = 0x0D;                          buf[3] = tableType;                          buf[4] = year;                          buf[5] = month;                          buf[6] = day;                          buf[7] = 0x01;                          buf[8] = 0x00;                          byte[] bytes = BitConverter.GetBytes(trend.CnlNum);                          Array.Copy(bytes' 0' buf' 9' 4);                          netStream.Write(buf' 0' 13);                            // приём данных тренда входного канала                          buf = new byte[7];                          int bytesRead = netStream.Read(buf' 0' 7);                          int pointCnt = 0;                            if (bytesRead == 7)                          {                              pointCnt = buf[5] + buf[6] * 256;                                if (pointCnt > 0)                              {                                  Array.Resize<byte>(ref buf' 7 + pointCnt * 18);                                  bytesRead += ReadNetStream(buf' 7' buf.Length - 7);                              }                          }                            // заполение тренда входного канала из полученных данных                          if (bytesRead == buf.Length && buf[4] == 0x0D)                          {                              for (int i = 0; i < pointCnt; i++)                              {                                  Trend.Point point;                                  int pos = i * 18 + 7;                                  point.DateTime = ScadaUtils.DecodeDateTime(BitConverter.ToDouble(buf' pos));                                  point.Val = BitConverter.ToDouble(buf' pos + 8);                                  point.Stat = BitConverter.ToUInt16(buf' pos + 16);                                    trend.Points.Add(point);                              }                                trend.Sort();                              result = true;                              commState = CommStates.Authorized;                          }                          else                          {                              errMsg = Localization.UseRussian ?                                   "Неверный формат ответа SCADA-Сервера на запрос тренда входного канала" :                                  "Incorrect SCADA-Server response to input channel trend request";                              WriteAction(errMsg' Log.ActTypes.Error);                              commState = CommStates.Error;                          }                      }                  }                  finally                  {                      // очистка тренда' если не удалось получить новые данные                      if (!result)                      {                          trend.Clear();                          trend.TableName = tableName;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при приёме тренда входного канала от SCADA-Сервера: " :                      "Error receiving input channel trend from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveFileAge,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {  #if DETAILED_LOG                      WriteAction(string.Format(Localization.UseRussian ?                           "Приём даты и времени изменения файла {0} от SCADA-Сервера" :                          "Receive date and time of file {0} modification from SCADA-Server"' filePath)'                           Log.ActTypes.Action);  #endif                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка запроса даты и времени изменения файла                      int cmdLen = 6 + fileName.Length;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x0C;                      buf[3] = 0x01;                      buf[4] = (byte)dir;                      buf[5] = (byte)fileName.Length;                      Array.Copy(Encoding.Default.GetBytes(fileName)' 0' buf' 6' fileName.Length);                      netStream.Write(buf' 0' cmdLen);                        // приём даты и времени изменения файла                      buf = new byte[12];                      netStream.Read(buf' 0' 12);                        // обработка даты и времени изменения файла                      if (CheckDataFormat(buf' 0x0C))                      {                          double dt = BitConverter.ToDouble(buf' 4);                          result = dt == 0.0 ? DateTime.MinValue : ScadaUtils.DecodeDateTime(dt);                          commState = CommStates.Authorized;                      }                      else                      {                          errMsg = string.Format(Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на запрос даты и времени изменения файла {0}" :                              "Incorrect SCADA-Server response to file modification date and time request"' filePath);                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = string.Format(Localization.UseRussian ?                          "Ошибка при приёме даты и времени изменения файла {0} от SCADA-Сервера: " :                          "Error receiving date and time of file {0} modification from SCADA-Server: "' filePath) +                           ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,ReceiveCommand,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // запрос команды                      byte[] buf = new byte[3];                      buf[0] = 0x03;                      buf[1] = 0x00;                      buf[2] = 0x07;                      netStream.Write(buf' 0' 3);                        // приём команды                      buf = new byte[5];                      int bytesRead = netStream.Read(buf' 0' 5);                      int cmdDataLen = 0;                        if (bytesRead == 5)                      {                          cmdDataLen = buf[3] + buf[4] * 256;                            if (cmdDataLen > 0)                          {                              Array.Resize<byte>(ref buf' 10 + cmdDataLen);                              bytesRead += netStream.Read(buf' 5' 5 + cmdDataLen);                          }                      }                        // обработка полученных данных                      if (CheckDataFormat(buf' 0x07) && bytesRead == buf.Length)                      {                          if (cmdDataLen > 0)                          {                              byte cmdType = buf[5];                              cmd = new Command(cmdType);                                if (cmdType == 0)                              {                                  cmd.CmdVal = BitConverter.ToDouble(buf' 10);                              }                              else if (cmdType == 1)                              {                                  byte[] cmdData = new byte[cmdDataLen];                                  Array.Copy(buf' 10' cmdData' 0' cmdDataLen);                                  cmd.CmdData = cmdData;                              }                                cmd.KPNum = buf[6] + buf[7] * 256;                              cmd.CmdNum = buf[8] + buf[9] * 256;                                commState = CommStates.Authorized;                              result = true;                          }                          else // команд в очереди нет                          {                              commState = CommStates.Authorized;                          }                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на запрос команды ТУ" :                              "Incorrect SCADA-Server response to telecommand request";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                      "Ошибка при приёме команды ТУ от SCADA-Сервера: " :                      "Error requesting telecommand from SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendSrez,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи текущего среза                      int cnlCnt = curSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 5;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x03;                      buf[3] = (byte)(cnlCnt % 256);                      buf[4] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          byte[] bytes = BitConverter.GetBytes((UInt32)curSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 5' 4);                            SrezTableLight.CnlData data = curSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 9' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x03))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду отправки текущего среза" :                              "Incorrect SCADA-Server response to sending current data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке текущего среза SCADA-Серверу: " :                       "Error sending current data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendArchive,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи архивного среза                      int cnlCnt = arcSrez.CnlNums.Length;                      int cmdLen = cnlCnt * 14 + 13;                        byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x04;                        double arcDT = ScadaUtils.EncodeDateTime(arcSrez.DateTime);                      byte[] bytes = BitConverter.GetBytes(arcDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(cnlCnt % 256);                      buf[12] = (byte)(cnlCnt / 256);                        for (int i = 0; i < cnlCnt; i++)                      {                          bytes = BitConverter.GetBytes((UInt32)arcSrez.CnlNums[i]);                          Array.Copy(bytes' 0' buf' i * 14 + 13' 4);                            SrezTableLight.CnlData data = arcSrez.CnlData[i];                          bytes = BitConverter.GetBytes(data.Val);                          Array.Copy(bytes' 0' buf' i * 14 + 17' 8);                            bytes = BitConverter.GetBytes((UInt16)data.Stat);                          Array.Copy(bytes' 0' buf' i * 14 + 25' 2);                      }                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x04))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки архивного среза" :                              "Incorrect SCADA-Server response to sending archive data command";                          WriteAction(errMsg' Log.ActTypes.Exception);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке архивного среза SCADA-Серверу: " :                       "Error sending archive data to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,SendEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды записи события                      byte descrLen = (byte)aEvent.Descr.Length;                      byte dataLen = (byte)aEvent.Data.Length;                      int cmdLen = 46 + descrLen + dataLen;                      byte[] buf = new byte[cmdLen];                      buf[0] = (byte)(cmdLen % 256);                      buf[1] = (byte)(cmdLen / 256);                      buf[2] = 0x05;                        double evDT = ScadaUtils.EncodeDateTime(aEvent.DateTime);                      byte[] bytes = BitConverter.GetBytes(evDT);                      Array.Copy(bytes' 0' buf' 3' 8);                        buf[11] = (byte)(aEvent.ObjNum % 256);                      buf[12] = (byte)(aEvent.ObjNum / 256);                      buf[13] = (byte)(aEvent.KPNum % 256);                      buf[14] = (byte)(aEvent.KPNum / 256);                      buf[15] = (byte)(aEvent.ParamID % 256);                      buf[16] = (byte)(aEvent.ParamID / 256);                        bytes = BitConverter.GetBytes(aEvent.CnlNum);                      Array.Copy(bytes' 0' buf' 17' 4);                      bytes = BitConverter.GetBytes(aEvent.OldCnlVal);                      Array.Copy(bytes' 0' buf' 21' 8);                      bytes = BitConverter.GetBytes(aEvent.OldCnlStat);                      Array.Copy(bytes' 0' buf' 29' 2);                      bytes = BitConverter.GetBytes(aEvent.NewCnlVal);                      Array.Copy(bytes' 0' buf' 31' 8);                      bytes = BitConverter.GetBytes(aEvent.NewCnlStat);                      Array.Copy(bytes' 0' buf' 39' 2);                        buf[41] = aEvent.Checked ? (byte)0x01 : (byte)0x00;                      buf[42] = (byte)(aEvent.UserID % 256);                      buf[43] = (byte)(aEvent.UserID / 256);                        buf[44] = descrLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Descr)' 0' buf' 45' descrLen);                      buf[45 + descrLen] = dataLen;                      Array.Copy(Encoding.Default.GetBytes(aEvent.Data)' 0' buf' 46 + descrLen' dataLen);                        netStream.Write(buf' 0' cmdLen);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x05))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                              "Неверный формат ответа SCADA-Сервера на команду отправки события" :                              "Incorrect SCADA-Server response to sending event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке события SCADA-Серверу: " :                      "Error sending event to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Client,ServerComm,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Client\ServerComm.cs,CheckEvent,The following statement contains a magic number: try              {                  if (RestoreConnection())                  {                      WriteAction(Localization.UseRussian ?                           "Отправка команды квитирования события SCADA-Серверу" :                          "Send check event command to SCADA-Server"' Log.ActTypes.Action);                        commState = CommStates.WaitResponse;                      tcpClient.ReceiveTimeout = commSettings.ServerTimeout;                        // отправка команды                      byte[] buf = new byte[10];                      buf[0] = 0x0A;                      buf[1] = 0x00;                      buf[2] = 0x0E;                      buf[3] = (byte)(userID % 256);                      buf[4] = (byte)(userID / 256);                      buf[5] = (byte)(date.Year % 100);                      buf[6] = (byte)date.Month;                      buf[7] = (byte)date.Day;                      buf[8] = (byte)(evNum % 256);                      buf[9] = (byte)(evNum / 256);                      netStream.Write(buf' 0' 10);                        // приём результата                      buf = new byte[4];                      int bytesRead = netStream.Read(buf' 0' 4);                        // обработка полученных данных                      if (bytesRead == buf.Length && CheckDataFormat(buf' 0x0E))                      {                          result = buf[3] > 0;                          commState = result ? CommStates.Authorized : CommStates.NotReady;                          complete = true;                      }                      else                      {                          errMsg = Localization.UseRussian ?                               "Неверный формат ответа SCADA-Сервера на команду квитирования события" :                              "Incorrect SCADA-Server response to check event command";                          WriteAction(errMsg' Log.ActTypes.Error);                          commState = CommStates.Error;                      }                  }              }              catch (Exception ex)              {                  errMsg = (Localization.UseRussian ?                       "Ошибка при отправке команды квитирования события SCADA-Серверу: " :                      "Error sending check event command to SCADA-Server: ") + ex.Message;                  WriteAction(errMsg' Log.ActTypes.Exception);                  Disconnect();              }              finally              {                  RestoreReceiveTimeout();                  Monitor.Exit(tcpLock);              }
Magic Number,Scada.Data.Models,Command,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Models\Command.cs,GetCmdDescr,The following statement contains a magic number: const int VisCmdDataLen = 10;
Magic Number,Scada.Data.Models,InCnlProps,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Models\InCnlProps.cs,InCnlProps,The following statement contains a magic number: DecDigits = 3;
Magic Number,Scada.Data.Tables,Adapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\Adapter.cs,ExtractDate,The following statement contains a magic number: try              {                  return DateTime.ParseExact(tableName.Substring(1' 6)' "yyMMdd"' CultureInfo.InvariantCulture);              }              catch              {                  return DateTime.MinValue;              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,BytesToObj,The following statement contains a magic number: switch (dataType)              {                  case DataTypes.Integer:                      return BitConverter.ToInt32(bytes' index);                  case DataTypes.Double:                      return BitConverter.ToDouble(bytes' index);                  case DataTypes.Boolean:                      return bytes[index] > 0;                  case DataTypes.DateTime:                      return ScadaUtils.DecodeDateTime(BitConverter.ToDouble(bytes' index));                  case DataTypes.String:                      int strDataSize = BitConverter.ToUInt16(bytes' index);                      index += 2;                      if (index + strDataSize > bytes.Length)                          strDataSize = bytes.Length - index;                      // для данных в кодировке ASCII метод Encoding.UTF8.GetString() тоже будет корректно работать                      return strDataSize > 0 ? Encoding.UTF8.GetString(bytes' index' strDataSize) : "";                  default:                      return DBNull.Value;              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,ConvertStr,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes((ushort)strDataSize)' 0' buffer' index' 2);
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,ConvertStr,The following statement contains a magic number: if (strData != null)                  Array.Copy(strData' 0' buffer' index + 2' strDataSize);
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,ConvertStr,The following statement contains a magic number: int totalStrDataSize = strDataSize + 2;
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    // считывание заголовка                  byte fieldCnt = reader.ReadByte(); // количество полей                  stream.Seek(2' SeekOrigin.Current);                    if (fieldCnt > 0)                  {                      // считывание определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                        for (int i = 0; i < fieldCnt; i++)                      {                          // загрузка данных определения поля в буфер для увеличения скорости работы                          int readSize = reader.Read(fieldDefBuf' 0' FieldDefSize);                            // заполение определения поля из буфера                          if (readSize == FieldDefSize)                          {                              FieldDef fieldDef = new FieldDef();                              fieldDef.DataType = fieldDefBuf[0];                              fieldDef.DataSize = BitConverter.ToUInt16(fieldDefBuf' 1);                              fieldDef.MaxStrLen = BitConverter.ToUInt16(fieldDefBuf' 3);                              fieldDef.AllowNull = fieldDefBuf[5] > 0;                              fieldDef.Name = (string)BytesToObj(fieldDefBuf' 6' DataTypes.String);                              if (string.IsNullOrEmpty(fieldDef.Name))                                  throw new ScadaException("Field name must not be empty.");                              fieldDefs[i] = fieldDef;                                recSize += fieldDef.DataSize;                              if (fieldDef.AllowNull)                                  recSize++;                          }                      }                        // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          foreach (FieldDef fieldDef in fieldDefs)                          {                              DataColumn column = new DataColumn(fieldDef.Name);                              column.AllowDBNull = fieldDef.AllowNull;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      column.DataType = typeof(int);                                      break;                                  case DataTypes.Double:                                      column.DataType = typeof(double);                                      break;                                  case DataTypes.Boolean:                                      column.DataType = typeof(bool);                                      break;                                  case DataTypes.DateTime:                                      column.DataType = typeof(DateTime);                                      break;                                  default:                                      column.DataType = typeof(string);                                      column.MaxLength = fieldDef.MaxStrLen;                                      break;                              }                                dataTable.Columns.Add(column);                          }                            dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                        // считывание строк                      byte[] rowBuf = new byte[recSize];                      while (stream.Position < stream.Length)                      {                          // загрузка данных строки таблицы в буфер для увеличения скорости работы                          int readSize = reader.Read(rowBuf' 0' recSize);                            // заполение строки таблицы из буфера                          if (readSize == recSize)                          {                              DataRow row = dataTable.NewRow();                              int bufInd = 2;                              foreach (FieldDef fieldDef in fieldDefs)                              {                                  bool isNull = fieldDef.AllowNull ? rowBuf[bufInd++] > 0 : false;                                  int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                                  if (colInd >= 0)                                      row[colInd] = allowNulls && isNull ?                                          DBNull.Value : BytesToObj(rowBuf' bufInd' fieldDef.DataType);                                  bufInd += fieldDef.DataSize;                              }                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    dataTable.EndLoadData();                  dataTable.AcceptChanges();                    if (dataTable.Columns.Count > 0)                      dataTable.DefaultView.Sort = dataTable.Columns[0].ColumnName;              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    // считывание заголовка                  byte fieldCnt = reader.ReadByte(); // количество полей                  stream.Seek(2' SeekOrigin.Current);                    if (fieldCnt > 0)                  {                      // считывание определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                        for (int i = 0; i < fieldCnt; i++)                      {                          // загрузка данных определения поля в буфер для увеличения скорости работы                          int readSize = reader.Read(fieldDefBuf' 0' FieldDefSize);                            // заполение определения поля из буфера                          if (readSize == FieldDefSize)                          {                              FieldDef fieldDef = new FieldDef();                              fieldDef.DataType = fieldDefBuf[0];                              fieldDef.DataSize = BitConverter.ToUInt16(fieldDefBuf' 1);                              fieldDef.MaxStrLen = BitConverter.ToUInt16(fieldDefBuf' 3);                              fieldDef.AllowNull = fieldDefBuf[5] > 0;                              fieldDef.Name = (string)BytesToObj(fieldDefBuf' 6' DataTypes.String);                              if (string.IsNullOrEmpty(fieldDef.Name))                                  throw new ScadaException("Field name must not be empty.");                              fieldDefs[i] = fieldDef;                                recSize += fieldDef.DataSize;                              if (fieldDef.AllowNull)                                  recSize++;                          }                      }                        // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          foreach (FieldDef fieldDef in fieldDefs)                          {                              DataColumn column = new DataColumn(fieldDef.Name);                              column.AllowDBNull = fieldDef.AllowNull;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      column.DataType = typeof(int);                                      break;                                  case DataTypes.Double:                                      column.DataType = typeof(double);                                      break;                                  case DataTypes.Boolean:                                      column.DataType = typeof(bool);                                      break;                                  case DataTypes.DateTime:                                      column.DataType = typeof(DateTime);                                      break;                                  default:                                      column.DataType = typeof(string);                                      column.MaxLength = fieldDef.MaxStrLen;                                      break;                              }                                dataTable.Columns.Add(column);                          }                            dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                        // считывание строк                      byte[] rowBuf = new byte[recSize];                      while (stream.Position < stream.Length)                      {                          // загрузка данных строки таблицы в буфер для увеличения скорости работы                          int readSize = reader.Read(rowBuf' 0' recSize);                            // заполение строки таблицы из буфера                          if (readSize == recSize)                          {                              DataRow row = dataTable.NewRow();                              int bufInd = 2;                              foreach (FieldDef fieldDef in fieldDefs)                              {                                  bool isNull = fieldDef.AllowNull ? rowBuf[bufInd++] > 0 : false;                                  int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                                  if (colInd >= 0)                                      row[colInd] = allowNulls && isNull ?                                          DBNull.Value : BytesToObj(rowBuf' bufInd' fieldDef.DataType);                                  bufInd += fieldDef.DataSize;                              }                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    dataTable.EndLoadData();                  dataTable.AcceptChanges();                    if (dataTable.Columns.Count > 0)                      dataTable.DefaultView.Sort = dataTable.Columns[0].ColumnName;              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    // считывание заголовка                  byte fieldCnt = reader.ReadByte(); // количество полей                  stream.Seek(2' SeekOrigin.Current);                    if (fieldCnt > 0)                  {                      // считывание определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                        for (int i = 0; i < fieldCnt; i++)                      {                          // загрузка данных определения поля в буфер для увеличения скорости работы                          int readSize = reader.Read(fieldDefBuf' 0' FieldDefSize);                            // заполение определения поля из буфера                          if (readSize == FieldDefSize)                          {                              FieldDef fieldDef = new FieldDef();                              fieldDef.DataType = fieldDefBuf[0];                              fieldDef.DataSize = BitConverter.ToUInt16(fieldDefBuf' 1);                              fieldDef.MaxStrLen = BitConverter.ToUInt16(fieldDefBuf' 3);                              fieldDef.AllowNull = fieldDefBuf[5] > 0;                              fieldDef.Name = (string)BytesToObj(fieldDefBuf' 6' DataTypes.String);                              if (string.IsNullOrEmpty(fieldDef.Name))                                  throw new ScadaException("Field name must not be empty.");                              fieldDefs[i] = fieldDef;                                recSize += fieldDef.DataSize;                              if (fieldDef.AllowNull)                                  recSize++;                          }                      }                        // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          foreach (FieldDef fieldDef in fieldDefs)                          {                              DataColumn column = new DataColumn(fieldDef.Name);                              column.AllowDBNull = fieldDef.AllowNull;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      column.DataType = typeof(int);                                      break;                                  case DataTypes.Double:                                      column.DataType = typeof(double);                                      break;                                  case DataTypes.Boolean:                                      column.DataType = typeof(bool);                                      break;                                  case DataTypes.DateTime:                                      column.DataType = typeof(DateTime);                                      break;                                  default:                                      column.DataType = typeof(string);                                      column.MaxLength = fieldDef.MaxStrLen;                                      break;                              }                                dataTable.Columns.Add(column);                          }                            dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                        // считывание строк                      byte[] rowBuf = new byte[recSize];                      while (stream.Position < stream.Length)                      {                          // загрузка данных строки таблицы в буфер для увеличения скорости работы                          int readSize = reader.Read(rowBuf' 0' recSize);                            // заполение строки таблицы из буфера                          if (readSize == recSize)                          {                              DataRow row = dataTable.NewRow();                              int bufInd = 2;                              foreach (FieldDef fieldDef in fieldDefs)                              {                                  bool isNull = fieldDef.AllowNull ? rowBuf[bufInd++] > 0 : false;                                  int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                                  if (colInd >= 0)                                      row[colInd] = allowNulls && isNull ?                                          DBNull.Value : BytesToObj(rowBuf' bufInd' fieldDef.DataType);                                  bufInd += fieldDef.DataSize;                              }                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    dataTable.EndLoadData();                  dataTable.AcceptChanges();                    if (dataTable.Columns.Count > 0)                      dataTable.DefaultView.Sort = dataTable.Columns[0].ColumnName;              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    // считывание заголовка                  byte fieldCnt = reader.ReadByte(); // количество полей                  stream.Seek(2' SeekOrigin.Current);                    if (fieldCnt > 0)                  {                      // считывание определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                        for (int i = 0; i < fieldCnt; i++)                      {                          // загрузка данных определения поля в буфер для увеличения скорости работы                          int readSize = reader.Read(fieldDefBuf' 0' FieldDefSize);                            // заполение определения поля из буфера                          if (readSize == FieldDefSize)                          {                              FieldDef fieldDef = new FieldDef();                              fieldDef.DataType = fieldDefBuf[0];                              fieldDef.DataSize = BitConverter.ToUInt16(fieldDefBuf' 1);                              fieldDef.MaxStrLen = BitConverter.ToUInt16(fieldDefBuf' 3);                              fieldDef.AllowNull = fieldDefBuf[5] > 0;                              fieldDef.Name = (string)BytesToObj(fieldDefBuf' 6' DataTypes.String);                              if (string.IsNullOrEmpty(fieldDef.Name))                                  throw new ScadaException("Field name must not be empty.");                              fieldDefs[i] = fieldDef;                                recSize += fieldDef.DataSize;                              if (fieldDef.AllowNull)                                  recSize++;                          }                      }                        // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          foreach (FieldDef fieldDef in fieldDefs)                          {                              DataColumn column = new DataColumn(fieldDef.Name);                              column.AllowDBNull = fieldDef.AllowNull;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      column.DataType = typeof(int);                                      break;                                  case DataTypes.Double:                                      column.DataType = typeof(double);                                      break;                                  case DataTypes.Boolean:                                      column.DataType = typeof(bool);                                      break;                                  case DataTypes.DateTime:                                      column.DataType = typeof(DateTime);                                      break;                                  default:                                      column.DataType = typeof(string);                                      column.MaxLength = fieldDef.MaxStrLen;                                      break;                              }                                dataTable.Columns.Add(column);                          }                            dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                        // считывание строк                      byte[] rowBuf = new byte[recSize];                      while (stream.Position < stream.Length)                      {                          // загрузка данных строки таблицы в буфер для увеличения скорости работы                          int readSize = reader.Read(rowBuf' 0' recSize);                            // заполение строки таблицы из буфера                          if (readSize == recSize)                          {                              DataRow row = dataTable.NewRow();                              int bufInd = 2;                              foreach (FieldDef fieldDef in fieldDefs)                              {                                  bool isNull = fieldDef.AllowNull ? rowBuf[bufInd++] > 0 : false;                                  int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                                  if (colInd >= 0)                                      row[colInd] = allowNulls && isNull ?                                          DBNull.Value : BytesToObj(rowBuf' bufInd' fieldDef.DataType);                                  bufInd += fieldDef.DataSize;                              }                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    dataTable.EndLoadData();                  dataTable.AcceptChanges();                    if (dataTable.Columns.Count > 0)                      dataTable.DefaultView.Sort = dataTable.Columns[0].ColumnName;              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    // считывание заголовка                  byte fieldCnt = reader.ReadByte(); // количество полей                  stream.Seek(2' SeekOrigin.Current);                    if (fieldCnt > 0)                  {                      // считывание определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                        for (int i = 0; i < fieldCnt; i++)                      {                          // загрузка данных определения поля в буфер для увеличения скорости работы                          int readSize = reader.Read(fieldDefBuf' 0' FieldDefSize);                            // заполение определения поля из буфера                          if (readSize == FieldDefSize)                          {                              FieldDef fieldDef = new FieldDef();                              fieldDef.DataType = fieldDefBuf[0];                              fieldDef.DataSize = BitConverter.ToUInt16(fieldDefBuf' 1);                              fieldDef.MaxStrLen = BitConverter.ToUInt16(fieldDefBuf' 3);                              fieldDef.AllowNull = fieldDefBuf[5] > 0;                              fieldDef.Name = (string)BytesToObj(fieldDefBuf' 6' DataTypes.String);                              if (string.IsNullOrEmpty(fieldDef.Name))                                  throw new ScadaException("Field name must not be empty.");                              fieldDefs[i] = fieldDef;                                recSize += fieldDef.DataSize;                              if (fieldDef.AllowNull)                                  recSize++;                          }                      }                        // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          foreach (FieldDef fieldDef in fieldDefs)                          {                              DataColumn column = new DataColumn(fieldDef.Name);                              column.AllowDBNull = fieldDef.AllowNull;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      column.DataType = typeof(int);                                      break;                                  case DataTypes.Double:                                      column.DataType = typeof(double);                                      break;                                  case DataTypes.Boolean:                                      column.DataType = typeof(bool);                                      break;                                  case DataTypes.DateTime:                                      column.DataType = typeof(DateTime);                                      break;                                  default:                                      column.DataType = typeof(string);                                      column.MaxLength = fieldDef.MaxStrLen;                                      break;                              }                                dataTable.Columns.Add(column);                          }                            dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                        // считывание строк                      byte[] rowBuf = new byte[recSize];                      while (stream.Position < stream.Length)                      {                          // загрузка данных строки таблицы в буфер для увеличения скорости работы                          int readSize = reader.Read(rowBuf' 0' recSize);                            // заполение строки таблицы из буфера                          if (readSize == recSize)                          {                              DataRow row = dataTable.NewRow();                              int bufInd = 2;                              foreach (FieldDef fieldDef in fieldDefs)                              {                                  bool isNull = fieldDef.AllowNull ? rowBuf[bufInd++] > 0 : false;                                  int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                                  if (colInd >= 0)                                      row[colInd] = allowNulls && isNull ?                                          DBNull.Value : BytesToObj(rowBuf' bufInd' fieldDef.DataType);                                  bufInd += fieldDef.DataSize;                              }                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    dataTable.EndLoadData();                  dataTable.AcceptChanges();                    if (dataTable.Columns.Count > 0)                      dataTable.DefaultView.Sort = dataTable.Columns[0].ColumnName;              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Fill,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    // считывание заголовка                  byte fieldCnt = reader.ReadByte(); // количество полей                  stream.Seek(2' SeekOrigin.Current);                    if (fieldCnt > 0)                  {                      // считывание определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                        for (int i = 0; i < fieldCnt; i++)                      {                          // загрузка данных определения поля в буфер для увеличения скорости работы                          int readSize = reader.Read(fieldDefBuf' 0' FieldDefSize);                            // заполение определения поля из буфера                          if (readSize == FieldDefSize)                          {                              FieldDef fieldDef = new FieldDef();                              fieldDef.DataType = fieldDefBuf[0];                              fieldDef.DataSize = BitConverter.ToUInt16(fieldDefBuf' 1);                              fieldDef.MaxStrLen = BitConverter.ToUInt16(fieldDefBuf' 3);                              fieldDef.AllowNull = fieldDefBuf[5] > 0;                              fieldDef.Name = (string)BytesToObj(fieldDefBuf' 6' DataTypes.String);                              if (string.IsNullOrEmpty(fieldDef.Name))                                  throw new ScadaException("Field name must not be empty.");                              fieldDefs[i] = fieldDef;                                recSize += fieldDef.DataSize;                              if (fieldDef.AllowNull)                                  recSize++;                          }                      }                        // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          foreach (FieldDef fieldDef in fieldDefs)                          {                              DataColumn column = new DataColumn(fieldDef.Name);                              column.AllowDBNull = fieldDef.AllowNull;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      column.DataType = typeof(int);                                      break;                                  case DataTypes.Double:                                      column.DataType = typeof(double);                                      break;                                  case DataTypes.Boolean:                                      column.DataType = typeof(bool);                                      break;                                  case DataTypes.DateTime:                                      column.DataType = typeof(DateTime);                                      break;                                  default:                                      column.DataType = typeof(string);                                      column.MaxLength = fieldDef.MaxStrLen;                                      break;                              }                                dataTable.Columns.Add(column);                          }                            dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                        // считывание строк                      byte[] rowBuf = new byte[recSize];                      while (stream.Position < stream.Length)                      {                          // загрузка данных строки таблицы в буфер для увеличения скорости работы                          int readSize = reader.Read(rowBuf' 0' recSize);                            // заполение строки таблицы из буфера                          if (readSize == recSize)                          {                              DataRow row = dataTable.NewRow();                              int bufInd = 2;                              foreach (FieldDef fieldDef in fieldDefs)                              {                                  bool isNull = fieldDef.AllowNull ? rowBuf[bufInd++] > 0 : false;                                  int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                                  if (colInd >= 0)                                      row[colInd] = allowNulls && isNull ?                                          DBNull.Value : BytesToObj(rowBuf' bufInd' fieldDef.DataType);                                  bufInd += fieldDef.DataSize;                              }                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    dataTable.EndLoadData();                  dataTable.AcceptChanges();                    if (dataTable.Columns.Count > 0)                      dataTable.DefaultView.Sort = dataTable.Columns[0].ColumnName;              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,BaseAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\BaseAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite) :                      ioStream;                  writer = new BinaryWriter(stream' Encoding.Default);                    // запись заголовка                  byte fieldCnt = dataTable.Columns.Count > byte.MaxValue ?                       byte.MaxValue : (byte)dataTable.Columns.Count;                  writer.Write(fieldCnt);                  writer.Write((ushort)0); // резерв                    if (fieldCnt > 0)                  {                      // формирование и запись определений полей                      FieldDef[] fieldDefs = new FieldDef[fieldCnt];                      int recSize = 2; // размер строки в файле                      byte[] fieldDefBuf = new byte[FieldDefSize];                      fieldDefBuf[FieldDefSize - 1] = fieldDefBuf[FieldDefSize - 2] = 0; // резерв                        for (int i = 0; i < fieldCnt; i++)                      {                          FieldDef fieldDef = new FieldDef();                          DataColumn col = dataTable.Columns[i];                          Type type = col.DataType;                            if (type == typeof(int))                          {                              fieldDef.DataType = DataTypes.Integer;                              fieldDef.DataSize = sizeof(int);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(double))                          {                              fieldDef.DataType = DataTypes.Double;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(bool))                          {                              fieldDef.DataType = DataTypes.Boolean;                              fieldDef.DataSize = 1;                              fieldDef.MaxStrLen = 0;                          }                          else if (type == typeof(DateTime))                          {                              fieldDef.DataType = DataTypes.DateTime;                              fieldDef.DataSize = sizeof(double);                              fieldDef.MaxStrLen = 0;                          }                          else // String                          {                              fieldDef.DataType = DataTypes.String;                              int maxLen = Math.Min(col.MaxLength' MaxStringLen);                              fieldDef.DataSize = 2 /*запись длины*/ + Encoding.UTF8.GetMaxByteCount(maxLen);                              fieldDef.MaxStrLen = maxLen;                          }                            fieldDef.Name = col.ColumnName;                          fieldDef.AllowNull = col.AllowDBNull;                            recSize += fieldDef.DataSize;                          if (fieldDef.AllowNull)                              recSize++;                          fieldDefs[i] = fieldDef;                            fieldDefBuf[0] = (byte)fieldDef.DataType;                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.DataSize)' 0' fieldDefBuf' 1' 2);                          Array.Copy(BitConverter.GetBytes((ushort)fieldDef.MaxStrLen)' 0' fieldDefBuf' 3' 2);                          fieldDefBuf[5] = fieldDef.AllowNull ? (byte)1 : (byte)0;                          ConvertStr(fieldDef.Name' MaxFieldNameLen' MaxFieldNameDataSize'                               fieldDefBuf' 6' Encoding.ASCII);                            writer.Write(fieldDefBuf);                      }                        // запись строк                      byte[] rowBuf = new byte[recSize];                      rowBuf[0] = rowBuf[1] = 0; // резерв                      foreach (DataRowView rowView in dataTable.DefaultView)                      {                          DataRow row = rowView.Row;                          int bufInd = 2;                            foreach (FieldDef fieldDef in fieldDefs)                          {                              int colInd = dataTable.Columns.IndexOf(fieldDef.Name);                              object val = colInd >= 0 ? row[colInd] : null;                              bool isNull = val == null || val == DBNull.Value;                                if (fieldDef.AllowNull)                                  rowBuf[bufInd++] = isNull ? (byte)1 : (byte)0;                                switch (fieldDef.DataType)                              {                                  case DataTypes.Integer:                                      int intVal = isNull ? 0 : (int)val;                                      Array.Copy(BitConverter.GetBytes(intVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Double:                                      double dblVal = isNull ? 0.0 : (double)val;                                      Array.Copy(BitConverter.GetBytes(dblVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  case DataTypes.Boolean:                                      rowBuf[bufInd] = (byte)(isNull ? 0 : (bool)val ? 1 : 0);                                      break;                                  case DataTypes.DateTime:                                      double dtVal = isNull ? 0.0 : ScadaUtils.EncodeDateTime((DateTime)val);                                      Array.Copy(BitConverter.GetBytes(dtVal)' 0' rowBuf' bufInd' fieldDef.DataSize);                                      break;                                  default:                                      string strVal = isNull ? "" : val.ToString();                                      ConvertStr(strVal' fieldDef.MaxStrLen' fieldDef.DataSize'                                           rowBuf' bufInd' Encoding.UTF8);                                      break;                              }                                bufInd += fieldDef.DataSize;                          }                            writer.Write(rowBuf);                      }                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ScadaUtils.EncodeDateTime(ev.DateTime))' 0' evBuf' 0' 8);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[8] = (byte)(ev.ObjNum % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[8] = (byte)(ev.ObjNum % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[9] = (byte)(ev.ObjNum / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[9] = (byte)(ev.ObjNum / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[10] = (byte)(ev.KPNum % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[10] = (byte)(ev.KPNum % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[11] = (byte)(ev.KPNum / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[11] = (byte)(ev.KPNum / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[12] = (byte)(ev.ParamID % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[12] = (byte)(ev.ParamID % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[13] = (byte)(ev.ParamID / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[13] = (byte)(ev.ParamID / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[14] = (byte)(ev.CnlNum % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[14] = (byte)(ev.CnlNum % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[15] = (byte)(ev.CnlNum / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[15] = (byte)(ev.CnlNum / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ev.OldCnlVal)' 0' evBuf' 16' 8);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ev.OldCnlVal)' 0' evBuf' 16' 8);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[24] = (byte)ev.OldCnlStat;
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ev.NewCnlVal)' 0' evBuf' 25' 8);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(ev.NewCnlVal)' 0' evBuf' 25' 8);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[33] = (byte)ev.NewCnlStat;
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[34] = ev.Checked ? (byte)1 : (byte)0;
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[35] = (byte)(ev.UserID % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[35] = (byte)(ev.UserID % 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[36] = (byte)(ev.UserID / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[36] = (byte)(ev.UserID / 256);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[37] = (byte)descr.Length;
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: Array.Copy(Encoding.Default.GetBytes(descr)' 0' evBuf' 38' descr.Length);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: evBuf[138] = (byte)data.Length;
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CreateEventBuffer,The following statement contains a magic number: Array.Copy(Encoding.Default.GetBytes(data)' 0' evBuf' 139' data.Length);
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (dest is EventTableLight)                      eventTableLight = dest as EventTableLight;                  else if (dest is DataTable)                      dataTable = dest as DataTable;                  else                      throw new ScadaException("Destination object is invalid.");                    // определение даты событий в таблице                  DateTime date = ExtractDate(tableName);                    // подготовка объекта для хранения данных                  if (eventTableLight != null)                  {                      eventTableLight.Clear();                      eventTableLight.TableName = tableName;                  }                  else // dataTable != null                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("Number"' typeof(int));                          dataTable.Columns.Add("DateTime"' typeof(DateTime)).DefaultValue = date;                          dataTable.Columns.Add("ObjNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("KPNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("ParamID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("CnlNum"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("OldCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("OldCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("NewCnlVal"' typeof(double)).DefaultValue = 0.0;                          dataTable.Columns.Add("NewCnlStat"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Checked"' typeof(bool)).DefaultValue = false;                          dataTable.Columns.Add("UserID"' typeof(int)).DefaultValue = 0;                          dataTable.Columns.Add("Descr"' typeof(string));                          dataTable.Columns.Add("Data"' typeof(string));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          DataColumn colDateTime = dataTable.Columns["DateTime"];                          if (colDateTime != null)                              colDateTime.DefaultValue = date;                          dataTable.Rows.Clear();                      }                  }                    // заполнение таблицы из файла                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    Byte[] eventBuf = new byte[EventDataSize]; // буфер данных события                  int evNum = 1; // порядковый номер события                    while (stream.Position < stream.Length)                  {                      int readSize = reader.Read(eventBuf' 0' EventDataSize);                      if (readSize == EventDataSize)                      {                          // создание события на основе считанных данных                          EventTableLight.Event ev = new EventTableLight.Event();                          ev.Number = evNum;                          evNum++;                            double time = BitConverter.ToDouble(eventBuf' 0);                          ev.DateTime = ScadaUtils.CombineDateTime(date' time);                            ev.ObjNum = BitConverter.ToUInt16(eventBuf' 8);                          ev.KPNum = BitConverter.ToUInt16(eventBuf' 10);                          ev.ParamID = BitConverter.ToUInt16(eventBuf' 12);                          ev.CnlNum = BitConverter.ToUInt16(eventBuf' 14);                          ev.OldCnlVal = BitConverter.ToDouble(eventBuf' 16);                          ev.OldCnlStat = eventBuf[24];                          ev.NewCnlVal = BitConverter.ToDouble(eventBuf' 25);                          ev.NewCnlStat = eventBuf[33];                          ev.Checked = eventBuf[34] > 0;                          ev.UserID = BitConverter.ToUInt16(eventBuf' 35);                          ev.Descr = BytesToStr(eventBuf' 37);                          ev.Data = BytesToStr(eventBuf' 138);                            // создание строки заполняемой таблицы                          if (eventTableLight != null)                          {                              eventTableLight.AllEvents.Add(ev); // быстрее' чем eventTableLight.AddEvent(ev)                          }                          else // dataTable != null                          {                              DataRow row = dataTable.NewRow();                              row["Number"] = ev.Number;                              row["DateTime"] = ev.DateTime;                              row["ObjNum"] = ev.ObjNum;                              row["KPNum"] = ev.KPNum;                              row["ParamID"] = ev.ParamID;                              row["CnlNum"] = ev.CnlNum;                              row["OldCnlVal"] = ev.OldCnlVal;                              row["OldCnlStat"] = ev.OldCnlStat;                              row["NewCnlVal"] = ev.NewCnlVal;                              row["NewCnlStat"] = ev.NewCnlStat;                              row["Checked"] = ev.Checked;                              row["UserID"] = ev.UserID;                              row["Descr"] = ev.Descr;                              row["Data"] = ev.Data;                              dataTable.Rows.Add(row);                          }                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (eventTableLight != null)                  {                      eventTableLight.LastFillTime = fillTime;                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "Number";                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CheckEvent,The following statement contains a magic number: try              {                  stream = ioStream == null ?                     new FileStream(fileName' FileMode.Open' FileAccess.Write' FileShare.ReadWrite) :                     ioStream;                  writer = new BinaryWriter(stream);                    stream.Seek(0' SeekOrigin.End);                  long size = stream.Position;                  long offset = (evNum - 1) * EventDataSize + 34;                    if (0 <= offset && offset + 2 < size)                  {                      stream.Seek(offset' SeekOrigin.Begin);                      writer.Write(userID > 0 ? (byte)1 : (byte)0);                      writer.Write((ushort)userID);                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,EventAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\EventAdapter.cs,CheckEvent,The following statement contains a magic number: try              {                  stream = ioStream == null ?                     new FileStream(fileName' FileMode.Open' FileAccess.Write' FileShare.ReadWrite) :                     ioStream;                  writer = new BinaryWriter(stream);                    stream.Seek(0' SeekOrigin.End);                  long size = stream.Position;                  long offset = (evNum - 1) * EventDataSize + 34;                    if (0 <= offset && offset + 2 < size)                  {                      stream.Seek(offset' SeekOrigin.Begin);                      writer.Write(userID > 0 ? (byte)1 : (byte)0);                      writer.Write((ushort)userID);                  }              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,ExtractCnlData,The following statement contains a magic number: cnlStat = buf[bufInd + 8];
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,ExtractCnlData,The following statement contains a magic number: bufInd += 9;
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: byte[] cnlNumsBuf = new byte[cnlNumsLen * 2 + 4];
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: byte[] cnlNumsBuf = new byte[cnlNumsLen * 2 + 4];
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: cnlNumsBuf[0] = (byte)(cnlNumsLen % 256);
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: cnlNumsBuf[1] = (byte)(cnlNumsLen / 256);
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: int bufPos = 2;
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: for (int i = 0; i < cnlNumsLen; i++)              {                  ushort cnlNum = (ushort)srezDescr.CnlNums[i];                  cnlNumsBuf[bufPos++] = (byte)(cnlNum % 256);                  cnlNumsBuf[bufPos++] = (byte)(cnlNum / 256);              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: for (int i = 0; i < cnlNumsLen; i++)              {                  ushort cnlNum = (ushort)srezDescr.CnlNums[i];                  cnlNumsBuf[bufPos++] = (byte)(cnlNum % 256);                  cnlNumsBuf[bufPos++] = (byte)(cnlNum / 256);              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: cnlNumsBuf[bufPos++] = (byte)(srezDescr.CS % 256);
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetSrezDescrBuf,The following statement contains a magic number: cnlNumsBuf[bufPos++] = (byte)(srezDescr.CS / 256);
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetCnlDataBuf,The following statement contains a magic number: byte[] srezDataBuf = new byte[cnlCnt * 9];
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetCnlDataBuf,The following statement contains a magic number: for (int i = 0' k = 0; i < cnlCnt; i++)              {                  SrezTable.CnlData data = cnlData[i];                  BitConverter.GetBytes(data.Val).CopyTo(srezDataBuf' k);                  srezDataBuf[k + 8] = (byte)data.Stat;                  k += 9;              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,GetCnlDataBuf,The following statement contains a magic number: for (int i = 0' k = 0; i < cnlCnt; i++)              {                  SrezTable.CnlData data = cnlData[i];                  BitConverter.GetBytes(data.Val).CopyTo(srezDataBuf' k);                  srezDataBuf[k + 8] = (byte)data.Stat;                  k += 9;              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,FillObj,The following statement contains a magic number: try              {                  if (srezTableLight == null && dataTable == null && trend == null)                      throw new ScadaException("Destination object is invalid.");                    // подготовка объекта для хранения данных                  if (srezTableLight != null)                  {                      srezTableLight.Clear();                      srezTableLight.TableName = tableName;                        if (srezTable != null)                          srezTable.BeginLoadData();                  }                  else if (dataTable != null)                  {                      // формирование структуры таблицы                      dataTable.BeginLoadData();                      dataTable.DefaultView.Sort = "";                        if (dataTable.Columns.Count == 0)                      {                          dataTable.Columns.Add("DateTime"' typeof(DateTime));                          dataTable.Columns.Add("CnlNum"' typeof(int));                          dataTable.Columns.Add("Val"' typeof(double));                          dataTable.Columns.Add("Stat"' typeof(int));                          dataTable.DefaultView.AllowNew = false;                          dataTable.DefaultView.AllowEdit = false;                          dataTable.DefaultView.AllowDelete = false;                      }                      else                      {                          dataTable.Rows.Clear();                      }                  }                  else // trend != null                  {                      trend.Clear();                      trend.TableName = tableName;                  }                    // заполнение объекта данными                  stream = ioStream == null ?                      new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite) :                      ioStream;                  reader = new BinaryReader(stream);                    DateTime date = ExtractDate(tableName); // определение даты срезов                  SrezTable.SrezDescr srezDescr = null;              // описание среза                  int[] cnlNums = null; // ссылка на номера входных каналов из описания среза                  while (stream.Position < stream.Length)                  {                      // считывание списка номеров каналов и КС                      int cnlNumCnt = reader.ReadUInt16();                      if (cnlNumCnt > 0)                      {                          // загрузка номеров каналов в буфер для увеличения скорости работы                          int cnlNumSize = cnlNumCnt * 2;                          byte[] buf = new byte[cnlNumSize];                          int readSize = reader.Read(buf' 0' cnlNumSize);                            // создание описания среза и заполнение номеров каналов из буфера                           // с проверкой их уникальности и упорядоченности                          if (readSize == cnlNumSize)                          {                              int prevCnlNum = -1;                              srezDescr = new SrezTable.SrezDescr(cnlNumCnt);                              cnlNums = srezDescr.CnlNums;                              for (int i = 0; i < cnlNumCnt; i++)                              {                                  int cnlNum = BitConverter.ToUInt16(buf' i * 2);                                  if (prevCnlNum >= cnlNum)                                      throw new ScadaException("Table is incorrect.");                                  cnlNums[i] = prevCnlNum = cnlNum;                              }                              srezDescr.CalcCS();                          }                      }                      else if (srezDescr == null)                      {                          throw new Exception("Table is incorrect.");                      }                        // считывание и проверка КС                      ushort cs = reader.ReadUInt16();                      bool csOk = cnlNumCnt > 0 ? srezDescr.CS == cs : cs == 1;                        // считывание данных среза                      int cnlCnt = cnlNums.Length;   // количество каналов в срезе                      int srezDataSize = cnlCnt * 9; // размер данных среза                      if (csOk)                      {                          long srezPos = stream.Position;                          double time = reader.ReadDouble();                          DateTime srezDT = ScadaUtils.CombineDateTime(date' time);                            // инициализация нового среза                          SrezTableLight.Srez srez;                          if (srezTable != null)                          {                              srez = new SrezTable.Srez(srezDT' srezDescr)                               {                                   State = DataRowState.Unchanged'                                  Position = srezPos                              };                          }                          else if (srezTableLight != null)                          {                              srez = new SrezTableLight.Srez(srezDT' cnlCnt);                              cnlNums.CopyTo(srez.CnlNums' 0);                          }                          else // srezTableLight == null                          {                              srez = null;                          }                            // считывание данных входных каналов                          int bufInd = 0;                          double val;                          byte stat;                          if (trend != null)                          {                              // выбор данных требуемого канала для тренда                              int index = Array.BinarySearch<int>(cnlNums' trend.CnlNum);                              if (index >= 0)                              {                                  stream.Seek(index * 9' SeekOrigin.Current);                                  byte[] buf = new byte[9];                                  int readSize = reader.Read(buf' 0' 9);                                  if (readSize == 9)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                      Trend.Point point = new Trend.Point(srezDT' val' stat);                                      trend.Points.Add(point);                                      stream.Seek(srezDataSize - (index + 1) * 9' SeekOrigin.Current);                                  }                              }                              else                              {                                  stream.Seek(srezDataSize' SeekOrigin.Current);                              }                          }                          else                          {                              // загрузка данных среза в буфер для увеличения скорости работы                              byte[] buf = new byte[srezDataSize];                              int readSize = reader.Read(buf' 0' srezDataSize);                                // заполение таблицы срезов из буфера                              if (srezTableLight != null)                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        srez.CnlNums[i] = cnlNums[i];                                      srez.CnlData[i].Val = val;                                      srez.CnlData[i].Stat = stat;                                        if (bufInd >= readSize)                                          break;                                  }                                    srezTableLight.AddSrez(srez);                                  lastStoredSrez = srez;                              }                              else // dataTable != null                              {                                  for (int i = 0; i < cnlCnt; i++)                                  {                                      ExtractCnlData(buf' ref bufInd' out val' out stat);                                        DataRow row = dataTable.NewRow();                                      row["DateTime"] = srezDT;                                      row["CnlNum"] = cnlNums[i];                                      row["Val"] = val;                                      row["Stat"] = stat;                                      dataTable.Rows.Add(row);                                        if (bufInd >= readSize)                                          break;                                  }                              }                          }                      }                      else                      {                          // пропустить срез' считая его размер так' как при повторяющемся списке номеров каналов                          stream.Seek(srezDataSize + 8' SeekOrigin.Current);                      }                  }              }              catch (EndOfStreamException)              {                  // нормальная ситуация окончания файла              }              catch              {                  fillTime = DateTime.MinValue;                  throw;              }              finally              {                  if (fileMode)                  {                      if (reader != null)                          reader.Close();                      if (stream != null)                          stream.Close();                  }                    if (srezTableLight != null)                  {                      srezTableLight.LastFillTime = fillTime;                      if (srezTable != null)                      {                          srezTable.LastStoredSrez = (SrezTable.Srez)lastStoredSrez;                          srezTable.EndLoadData();                      }                  }                  else if (dataTable != null)                  {                      dataTable.EndLoadData();                      dataTable.AcceptChanges();                      dataTable.DefaultView.Sort = "DateTime' CnlNum";                  }                  else if (trend != null)                  {                      trend.LastFillTime = fillTime;                      trend.Sort();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                     new FileStream(fileName' FileMode.OpenOrCreate' FileAccess.Write' FileShare.ReadWrite) :                     ioStream;                  writer = new BinaryWriter(stream);                    // запись изменённых срезов                  foreach (SrezTable.Srez srez in srezTable.ModifiedSrezList)                  {                      stream.Seek(srez.Position + 8' SeekOrigin.Begin);                      writer.Write(GetCnlDataBuf(srez.CnlData));                  }                    // установка позиции записи добавленных срезов в поток'                   // восстановление таблицы срезов в случае необходимости                  SrezTable.Srez lastSrez = srezTable.LastStoredSrez;                    if (lastSrez == null)                  {                      stream.Seek(0' SeekOrigin.Begin);                  }                  else                  {                      stream.Seek(0' SeekOrigin.End);                      long offset = lastSrez.Position + lastSrez.CnlNums.Length * 9 + 8;                        if (stream.Position < offset)                      {                          byte[] buf = new byte[offset - stream.Position];                          stream.Write(buf' 0' buf.Length);                      }                      else                      {                          stream.Seek(offset' SeekOrigin.Begin);                      }                  }                    // запись добавленных срезов                  SrezTable.SrezDescr prevSrezDescr = lastSrez == null ? null : lastSrez.SrezDescr;                    foreach (SrezTable.Srez srez in srezTable.AddedSrezList)                  {                      // запись номеров каналов среза                      if (srez.SrezDescr.Equals(prevSrezDescr))                          writer.Write(EmptyCnlNumsBuf);                      else                          writer.Write(GetSrezDescrBuf(srez.SrezDescr));                        prevSrezDescr = srez.SrezDescr;                        // запись данных среза                      srez.Position = stream.Position;                      writer.Write(ScadaUtils.EncodeDateTime(srez.DateTime));                      writer.Write(GetCnlDataBuf(srez.CnlData));                      lastSrez = srez;                  }                    // подтверждение успешного сохранения изменений                  srezTable.AcceptChanges();                  srezTable.LastStoredSrez = lastSrez;              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                     new FileStream(fileName' FileMode.OpenOrCreate' FileAccess.Write' FileShare.ReadWrite) :                     ioStream;                  writer = new BinaryWriter(stream);                    // запись изменённых срезов                  foreach (SrezTable.Srez srez in srezTable.ModifiedSrezList)                  {                      stream.Seek(srez.Position + 8' SeekOrigin.Begin);                      writer.Write(GetCnlDataBuf(srez.CnlData));                  }                    // установка позиции записи добавленных срезов в поток'                   // восстановление таблицы срезов в случае необходимости                  SrezTable.Srez lastSrez = srezTable.LastStoredSrez;                    if (lastSrez == null)                  {                      stream.Seek(0' SeekOrigin.Begin);                  }                  else                  {                      stream.Seek(0' SeekOrigin.End);                      long offset = lastSrez.Position + lastSrez.CnlNums.Length * 9 + 8;                        if (stream.Position < offset)                      {                          byte[] buf = new byte[offset - stream.Position];                          stream.Write(buf' 0' buf.Length);                      }                      else                      {                          stream.Seek(offset' SeekOrigin.Begin);                      }                  }                    // запись добавленных срезов                  SrezTable.SrezDescr prevSrezDescr = lastSrez == null ? null : lastSrez.SrezDescr;                    foreach (SrezTable.Srez srez in srezTable.AddedSrezList)                  {                      // запись номеров каналов среза                      if (srez.SrezDescr.Equals(prevSrezDescr))                          writer.Write(EmptyCnlNumsBuf);                      else                          writer.Write(GetSrezDescrBuf(srez.SrezDescr));                        prevSrezDescr = srez.SrezDescr;                        // запись данных среза                      srez.Position = stream.Position;                      writer.Write(ScadaUtils.EncodeDateTime(srez.DateTime));                      writer.Write(GetCnlDataBuf(srez.CnlData));                      lastSrez = srez;                  }                    // подтверждение успешного сохранения изменений                  srezTable.AcceptChanges();                  srezTable.LastStoredSrez = lastSrez;              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.Data.Tables,SrezAdapter,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\Data\Tables\SrezAdapter.cs,Update,The following statement contains a magic number: try              {                  stream = ioStream == null ?                     new FileStream(fileName' FileMode.OpenOrCreate' FileAccess.Write' FileShare.ReadWrite) :                     ioStream;                  writer = new BinaryWriter(stream);                    // запись изменённых срезов                  foreach (SrezTable.Srez srez in srezTable.ModifiedSrezList)                  {                      stream.Seek(srez.Position + 8' SeekOrigin.Begin);                      writer.Write(GetCnlDataBuf(srez.CnlData));                  }                    // установка позиции записи добавленных срезов в поток'                   // восстановление таблицы срезов в случае необходимости                  SrezTable.Srez lastSrez = srezTable.LastStoredSrez;                    if (lastSrez == null)                  {                      stream.Seek(0' SeekOrigin.Begin);                  }                  else                  {                      stream.Seek(0' SeekOrigin.End);                      long offset = lastSrez.Position + lastSrez.CnlNums.Length * 9 + 8;                        if (stream.Position < offset)                      {                          byte[] buf = new byte[offset - stream.Position];                          stream.Write(buf' 0' buf.Length);                      }                      else                      {                          stream.Seek(offset' SeekOrigin.Begin);                      }                  }                    // запись добавленных срезов                  SrezTable.SrezDescr prevSrezDescr = lastSrez == null ? null : lastSrez.SrezDescr;                    foreach (SrezTable.Srez srez in srezTable.AddedSrezList)                  {                      // запись номеров каналов среза                      if (srez.SrezDescr.Equals(prevSrezDescr))                          writer.Write(EmptyCnlNumsBuf);                      else                          writer.Write(GetSrezDescrBuf(srez.SrezDescr));                        prevSrezDescr = srez.SrezDescr;                        // запись данных среза                      srez.Position = stream.Position;                      writer.Write(ScadaUtils.EncodeDateTime(srez.DateTime));                      writer.Write(GetCnlDataBuf(srez.CnlData));                      lastSrez = srez;                  }                    // подтверждение успешного сохранения изменений                  srezTable.AcceptChanges();                  srezTable.LastStoredSrez = lastSrez;              }              finally              {                  if (fileMode)                  {                      if (writer != null)                          writer.Close();                      if (stream != null)                          stream.Close();                  }              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,ReloadItems,The following statement contains a magic number: try              {                  if (File.Exists(fileName))                  {                      DateTime newFileAge = ScadaUtils.GetLastWriteTime(fileName);                        if (fileAge != newFileAge)                      {                          // загрузка строк из файла                          List<string> stringList = LoadStrings(fileName' fullLoad);                          int newLineCnt = stringList.Count;                            // проверка для исключения отображения данных' считыванных в момент записи файла                          if (newLineCnt > 0 || (DateTime.Now - newFileAge).TotalMilliseconds > 50)                          {                              fileAge = newFileAge;                                // вывод данных в список                              int oldLineCnt = listBox.Items.Count;                              int selectedIndex = listBox.SelectedIndex;                              int topIndex = listBox.TopIndex;                                listBox.BeginUpdate();                                for (int i = 0; i < newLineCnt; i++)                              {                                  if (i < oldLineCnt)                                      listBox.Items[i] = stringList[i];                                  else                                      listBox.Items.Add(stringList[i]);                              }                                for (int i = newLineCnt; i < oldLineCnt; i++)                                  listBox.Items.RemoveAt(newLineCnt);                                // установка позиции прокрутки списка                              if (listBox.SelectionMode == SelectionMode.One && newLineCnt > 0)                              {                                  if (selectedIndex < 0 && !fullLoad)                                      listBox.SelectedIndex = newLineCnt - 1; // прокрутка в конец списка                                  else                                      listBox.TopIndex = topIndex;                              }                                listBox.EndUpdate();                          }                      }                  }                  else                  {                      if (listBox.Items.Count == 1)                      {                          listBox.Items[0] = CommonPhrases.NoData;                      }                      else                      {                          listBox.Items.Clear();                          listBox.Items.Add(CommonPhrases.NoData);                      }                      fileAge = DateTime.MinValue;                  }              }              catch (Exception ex)              {                  if (listBox.Items.Count == 2)                  {                      listBox.Items[0] = CommonPhrases.ErrorWithColon;                      listBox.Items[1] = ex.Message;                  }                  else                  {                      listBox.Items.Clear();                      listBox.Items.Add(CommonPhrases.ErrorWithColon);                      listBox.Items.Add(ex.Message);                  }                  fileAge = DateTime.MinValue;              }              finally              {                  Monitor.Exit(listBox);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,ReloadItems,The following statement contains a magic number: try              {                  if (File.Exists(fileName))                  {                      DateTime newFileAge = ScadaUtils.GetLastWriteTime(fileName);                        if (fileAge != newFileAge)                      {                          // загрузка строк из файла                          List<string> stringList = LoadStrings(fileName' fullLoad);                          int newLineCnt = stringList.Count;                            // проверка для исключения отображения данных' считыванных в момент записи файла                          if (newLineCnt > 0 || (DateTime.Now - newFileAge).TotalMilliseconds > 50)                          {                              fileAge = newFileAge;                                // вывод данных в список                              int oldLineCnt = listBox.Items.Count;                              int selectedIndex = listBox.SelectedIndex;                              int topIndex = listBox.TopIndex;                                listBox.BeginUpdate();                                for (int i = 0; i < newLineCnt; i++)                              {                                  if (i < oldLineCnt)                                      listBox.Items[i] = stringList[i];                                  else                                      listBox.Items.Add(stringList[i]);                              }                                for (int i = newLineCnt; i < oldLineCnt; i++)                                  listBox.Items.RemoveAt(newLineCnt);                                // установка позиции прокрутки списка                              if (listBox.SelectionMode == SelectionMode.One && newLineCnt > 0)                              {                                  if (selectedIndex < 0 && !fullLoad)                                      listBox.SelectedIndex = newLineCnt - 1; // прокрутка в конец списка                                  else                                      listBox.TopIndex = topIndex;                              }                                listBox.EndUpdate();                          }                      }                  }                  else                  {                      if (listBox.Items.Count == 1)                      {                          listBox.Items[0] = CommonPhrases.NoData;                      }                      else                      {                          listBox.Items.Clear();                          listBox.Items.Add(CommonPhrases.NoData);                      }                      fileAge = DateTime.MinValue;                  }              }              catch (Exception ex)              {                  if (listBox.Items.Count == 2)                  {                      listBox.Items[0] = CommonPhrases.ErrorWithColon;                      listBox.Items[1] = ex.Message;                  }                  else                  {                      listBox.Items.Clear();                      listBox.Items.Add(CommonPhrases.ErrorWithColon);                      listBox.Items.Add(ex.Message);                  }                  fileAge = DateTime.MinValue;              }              finally              {                  Monitor.Exit(listBox);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: try              {                  string imgFileName = exeDir + "About.jpg";                  if (File.Exists(imgFileName))                  {                      System.Drawing.Image image = System.Drawing.Image.FromFile(imgFileName);                      pictureBox.Image = image;                      imgLoaded = true;                        // проверка' корректировка и установка размеров формы и изображения                      int width;                      if (image.Width < 100)                           width = 100;                      else if (image.Width > 800)                           width = 800;                      else                           width = image.Width;                        int height;                      if (image.Height < 100)                           height = 100;                      else if (image.Height > 600)                           height = 600;                      else                           height = image.Height;                        frmAbout.Width = pictureBox.Width = width;                      frmAbout.Height = pictureBox.Height = height;                  }              }              catch (OutOfMemoryException)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' CommonPhrases.IncorrectFileFormat);              }              catch (Exception ex)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' ex.Message);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: try              {                  string imgFileName = exeDir + "About.jpg";                  if (File.Exists(imgFileName))                  {                      System.Drawing.Image image = System.Drawing.Image.FromFile(imgFileName);                      pictureBox.Image = image;                      imgLoaded = true;                        // проверка' корректировка и установка размеров формы и изображения                      int width;                      if (image.Width < 100)                           width = 100;                      else if (image.Width > 800)                           width = 800;                      else                           width = image.Width;                        int height;                      if (image.Height < 100)                           height = 100;                      else if (image.Height > 600)                           height = 600;                      else                           height = image.Height;                        frmAbout.Width = pictureBox.Width = width;                      frmAbout.Height = pictureBox.Height = height;                  }              }              catch (OutOfMemoryException)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' CommonPhrases.IncorrectFileFormat);              }              catch (Exception ex)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' ex.Message);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: try              {                  string imgFileName = exeDir + "About.jpg";                  if (File.Exists(imgFileName))                  {                      System.Drawing.Image image = System.Drawing.Image.FromFile(imgFileName);                      pictureBox.Image = image;                      imgLoaded = true;                        // проверка' корректировка и установка размеров формы и изображения                      int width;                      if (image.Width < 100)                           width = 100;                      else if (image.Width > 800)                           width = 800;                      else                           width = image.Width;                        int height;                      if (image.Height < 100)                           height = 100;                      else if (image.Height > 600)                           height = 600;                      else                           height = image.Height;                        frmAbout.Width = pictureBox.Width = width;                      frmAbout.Height = pictureBox.Height = height;                  }              }              catch (OutOfMemoryException)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' CommonPhrases.IncorrectFileFormat);              }              catch (Exception ex)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' ex.Message);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: try              {                  string imgFileName = exeDir + "About.jpg";                  if (File.Exists(imgFileName))                  {                      System.Drawing.Image image = System.Drawing.Image.FromFile(imgFileName);                      pictureBox.Image = image;                      imgLoaded = true;                        // проверка' корректировка и установка размеров формы и изображения                      int width;                      if (image.Width < 100)                           width = 100;                      else if (image.Width > 800)                           width = 800;                      else                           width = image.Width;                        int height;                      if (image.Height < 100)                           height = 100;                      else if (image.Height > 600)                           height = 600;                      else                           height = image.Height;                        frmAbout.Width = pictureBox.Width = width;                      frmAbout.Height = pictureBox.Height = height;                  }              }              catch (OutOfMemoryException)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' CommonPhrases.IncorrectFileFormat);              }              catch (Exception ex)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' ex.Message);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: try              {                  string imgFileName = exeDir + "About.jpg";                  if (File.Exists(imgFileName))                  {                      System.Drawing.Image image = System.Drawing.Image.FromFile(imgFileName);                      pictureBox.Image = image;                      imgLoaded = true;                        // проверка' корректировка и установка размеров формы и изображения                      int width;                      if (image.Width < 100)                           width = 100;                      else if (image.Width > 800)                           width = 800;                      else                           width = image.Width;                        int height;                      if (image.Height < 100)                           height = 100;                      else if (image.Height > 600)                           height = 600;                      else                           height = image.Height;                        frmAbout.Width = pictureBox.Width = width;                      frmAbout.Height = pictureBox.Height = height;                  }              }              catch (OutOfMemoryException)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' CommonPhrases.IncorrectFileFormat);              }              catch (Exception ex)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' ex.Message);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: try              {                  string imgFileName = exeDir + "About.jpg";                  if (File.Exists(imgFileName))                  {                      System.Drawing.Image image = System.Drawing.Image.FromFile(imgFileName);                      pictureBox.Image = image;                      imgLoaded = true;                        // проверка' корректировка и установка размеров формы и изображения                      int width;                      if (image.Width < 100)                           width = 100;                      else if (image.Width > 800)                           width = 800;                      else                           width = image.Width;                        int height;                      if (image.Height < 100)                           height = 100;                      else if (image.Height > 600)                           height = 600;                      else                           height = image.Height;                        frmAbout.Width = pictureBox.Width = width;                      frmAbout.Height = pictureBox.Height = height;                  }              }              catch (OutOfMemoryException)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' CommonPhrases.IncorrectFileFormat);              }              catch (Exception ex)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' ex.Message);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: try              {                  string imgFileName = exeDir + "About.jpg";                  if (File.Exists(imgFileName))                  {                      System.Drawing.Image image = System.Drawing.Image.FromFile(imgFileName);                      pictureBox.Image = image;                      imgLoaded = true;                        // проверка' корректировка и установка размеров формы и изображения                      int width;                      if (image.Width < 100)                           width = 100;                      else if (image.Width > 800)                           width = 800;                      else                           width = image.Width;                        int height;                      if (image.Height < 100)                           height = 100;                      else if (image.Height > 600)                           height = 600;                      else                           height = image.Height;                        frmAbout.Width = pictureBox.Width = width;                      frmAbout.Height = pictureBox.Height = height;                  }              }              catch (OutOfMemoryException)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' CommonPhrases.IncorrectFileFormat);              }              catch (Exception ex)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' ex.Message);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: try              {                  string imgFileName = exeDir + "About.jpg";                  if (File.Exists(imgFileName))                  {                      System.Drawing.Image image = System.Drawing.Image.FromFile(imgFileName);                      pictureBox.Image = image;                      imgLoaded = true;                        // проверка' корректировка и установка размеров формы и изображения                      int width;                      if (image.Width < 100)                           width = 100;                      else if (image.Width > 800)                           width = 800;                      else                           width = image.Width;                        int height;                      if (image.Height < 100)                           height = 100;                      else if (image.Height > 600)                           height = 600;                      else                           height = image.Height;                        frmAbout.Width = pictureBox.Width = width;                      frmAbout.Height = pictureBox.Height = height;                  }              }              catch (OutOfMemoryException)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' CommonPhrases.IncorrectFileFormat);              }              catch (Exception ex)              {                  errMsg = string.Format(CommonPhrases.LoadImageError' ex.Message);              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: if (errMsg == "")              {                  // загрузка гиперссылки из файла' если он существует                  StreamReader reader = null;                  try                  {                      string linkFileName = exeDir + "About.txt";                      if (File.Exists(linkFileName))                      {                          reader = new StreamReader(linkFileName' Encoding.Default);                          linkUrl = reader.ReadLine();                            if (string.IsNullOrEmpty(linkUrl))                          {                              lblLink.Visible = false;                          }                          else                          {                              linkUrl = linkUrl.Trim();                              string pos = reader.ReadLine();                                if (!string.IsNullOrEmpty(pos))                              {                                  string[] parts = pos.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                                  int x' y' w' h;                                    if (parts.Length >= 4 && int.TryParse(parts[0]' out x) && int.TryParse(parts[1]' out y) &&                                      int.TryParse(parts[2]' out w) && int.TryParse(parts[3]' out h))                                  {                                      // проверка положения и размеров                                      if (x < 0)                                           x = 0;                                      else if (x >= frmAbout.Width)                                           x = frmAbout.Width - 1;                                      if (y < 0)                                           y = 0;                                      else if (y >= frmAbout.Height)                                           y = frmAbout.Height - 1;                                        if (x + w >= frmAbout.Width)                                           w = frmAbout.Width - x;                                      if (w <= 0)                                           w = 1;                                      if (y + h >= frmAbout.Height)                                           h = frmAbout.Height - y;                                      if (h <= 0)                                           h = 1;                                        lblLink.Left = x;                                      lblLink.Top = y;                                      lblLink.Width = w;                                      lblLink.Height = h;                                      lblLink.Visible = true;                                  }                              }                          }                      }                  }                  catch (Exception ex)                  {                      linkUrl = "";                      lblLink.Visible = false;                      errMsg = string.Format(CommonPhrases.LoadHyperlinkError' ex.Message);                  }                  finally                  {                      if (reader != null)                          reader.Close();                  }              }              else              {                  lblLink.Visible = false;              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: if (errMsg == "")              {                  // загрузка гиперссылки из файла' если он существует                  StreamReader reader = null;                  try                  {                      string linkFileName = exeDir + "About.txt";                      if (File.Exists(linkFileName))                      {                          reader = new StreamReader(linkFileName' Encoding.Default);                          linkUrl = reader.ReadLine();                            if (string.IsNullOrEmpty(linkUrl))                          {                              lblLink.Visible = false;                          }                          else                          {                              linkUrl = linkUrl.Trim();                              string pos = reader.ReadLine();                                if (!string.IsNullOrEmpty(pos))                              {                                  string[] parts = pos.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                                  int x' y' w' h;                                    if (parts.Length >= 4 && int.TryParse(parts[0]' out x) && int.TryParse(parts[1]' out y) &&                                      int.TryParse(parts[2]' out w) && int.TryParse(parts[3]' out h))                                  {                                      // проверка положения и размеров                                      if (x < 0)                                           x = 0;                                      else if (x >= frmAbout.Width)                                           x = frmAbout.Width - 1;                                      if (y < 0)                                           y = 0;                                      else if (y >= frmAbout.Height)                                           y = frmAbout.Height - 1;                                        if (x + w >= frmAbout.Width)                                           w = frmAbout.Width - x;                                      if (w <= 0)                                           w = 1;                                      if (y + h >= frmAbout.Height)                                           h = frmAbout.Height - y;                                      if (h <= 0)                                           h = 1;                                        lblLink.Left = x;                                      lblLink.Top = y;                                      lblLink.Width = w;                                      lblLink.Height = h;                                      lblLink.Visible = true;                                  }                              }                          }                      }                  }                  catch (Exception ex)                  {                      linkUrl = "";                      lblLink.Visible = false;                      errMsg = string.Format(CommonPhrases.LoadHyperlinkError' ex.Message);                  }                  finally                  {                      if (reader != null)                          reader.Close();                  }              }              else              {                  lblLink.Visible = false;              }
Magic Number,Scada.UI,ScadaUiUtils,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\ScadaUiUtils.cs,LoadAboutForm,The following statement contains a magic number: if (errMsg == "")              {                  // загрузка гиперссылки из файла' если он существует                  StreamReader reader = null;                  try                  {                      string linkFileName = exeDir + "About.txt";                      if (File.Exists(linkFileName))                      {                          reader = new StreamReader(linkFileName' Encoding.Default);                          linkUrl = reader.ReadLine();                            if (string.IsNullOrEmpty(linkUrl))                          {                              lblLink.Visible = false;                          }                          else                          {                              linkUrl = linkUrl.Trim();                              string pos = reader.ReadLine();                                if (!string.IsNullOrEmpty(pos))                              {                                  string[] parts = pos.Split(new char[] { ' ' }' StringSplitOptions.RemoveEmptyEntries);                                  int x' y' w' h;                                    if (parts.Length >= 4 && int.TryParse(parts[0]' out x) && int.TryParse(parts[1]' out y) &&                                      int.TryParse(parts[2]' out w) && int.TryParse(parts[3]' out h))                                  {                                      // проверка положения и размеров                                      if (x < 0)                                           x = 0;                                      else if (x >= frmAbout.Width)                                           x = frmAbout.Width - 1;                                      if (y < 0)                                           y = 0;                                      else if (y >= frmAbout.Height)                                           y = frmAbout.Height - 1;                                        if (x + w >= frmAbout.Width)                                           w = frmAbout.Width - x;                                      if (w <= 0)                                           w = 1;                                      if (y + h >= frmAbout.Height)                                           h = frmAbout.Height - y;                                      if (h <= 0)                                           h = 1;                                        lblLink.Left = x;                                      lblLink.Top = y;                                      lblLink.Width = w;                                      lblLink.Height = h;                                      lblLink.Visible = true;                                  }                              }                          }                      }                  }                  catch (Exception ex)                  {                      linkUrl = "";                      lblLink.Visible = false;                      errMsg = string.Format(CommonPhrases.LoadHyperlinkError' ex.Message);                  }                  finally                  {                      if (reader != null)                          reader.Close();                  }              }              else              {                  lblLink.Visible = false;              }
Magic Number,Scada.UI,Translator,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\Translator.cs,GetControlInfoDict,The following statement contains a magic number: foreach (string phraseKey in dict.Phrases.Keys)              {                  string phraseVal = dict.Phrases[phraseKey];                  int dotPos = phraseKey.IndexOf('.');                    if (dotPos < 0)                  {                      // если точки в ключе фразы нет' то присваивается свойство текст                      if (controlInfoDict.ContainsKey(phraseKey))                          controlInfoDict[phraseKey].Text = phraseVal;                      else                          controlInfoDict[phraseKey] = new ControlInfo() { Text = phraseVal };                  }                  else if (0 < dotPos && dotPos < phraseKey.Length - 1)                  {                      // если точка в середине ключа фразы' то слева от точки - имя элемента' справа - свойство                      string ctrlName = phraseKey.Substring(0' dotPos);                      string ctrlProp = phraseKey.Substring(dotPos + 1);                      bool propAssigned = true;                        ControlInfo controlInfo;                      if (!controlInfoDict.TryGetValue(ctrlName' out controlInfo))                          controlInfo = new ControlInfo();                        if (ctrlProp == "Text")                      {                          controlInfo.Text = phraseVal;                      }                      else if (ctrlProp == "ToolTip")                      {                          controlInfo.ToolTip = phraseVal;                      }                      else if (ctrlProp.StartsWith("Items["))                      {                          int pos = ctrlProp.IndexOf(']');                          int ind;                          if (pos >= 0 && int.TryParse(ctrlProp.Substring(6' pos - 6)' out ind))                              controlInfo.SetItem(ind' phraseVal);                      }                      else if (ctrlProp != "")                      {                          controlInfo.SetProp(ctrlProp' phraseVal);                      }                      else                      {                          propAssigned = false;                      }                        if (propAssigned)                          controlInfoDict[ctrlName] = controlInfo;                  }              }
Magic Number,Scada.UI,Translator,C:\repos\RapidScada_SCADA\ScadaData\ScadaData\UI\Translator.cs,GetControlInfoDict,The following statement contains a magic number: foreach (string phraseKey in dict.Phrases.Keys)              {                  string phraseVal = dict.Phrases[phraseKey];                  int dotPos = phraseKey.IndexOf('.');                    if (dotPos < 0)                  {                      // если точки в ключе фразы нет' то присваивается свойство текст                      if (controlInfoDict.ContainsKey(phraseKey))                          controlInfoDict[phraseKey].Text = phraseVal;                      else                          controlInfoDict[phraseKey] = new ControlInfo() { Text = phraseVal };                  }                  else if (0 < dotPos && dotPos < phraseKey.Length - 1)                  {                      // если точка в середине ключа фразы' то слева от точки - имя элемента' справа - свойство                      string ctrlName = phraseKey.Substring(0' dotPos);                      string ctrlProp = phraseKey.Substring(dotPos + 1);                      bool propAssigned = true;                        ControlInfo controlInfo;                      if (!controlInfoDict.TryGetValue(ctrlName' out controlInfo))                          controlInfo = new ControlInfo();                        if (ctrlProp == "Text")                      {                          controlInfo.Text = phraseVal;                      }                      else if (ctrlProp == "ToolTip")                      {                          controlInfo.ToolTip = phraseVal;                      }                      else if (ctrlProp.StartsWith("Items["))                      {                          int pos = ctrlProp.IndexOf(']');                          int ind;                          if (pos >= 0 && int.TryParse(ctrlProp.Substring(6' pos - 6)' out ind))                              controlInfo.SetItem(ind' phraseVal);                      }                      else if (ctrlProp != "")                      {                          controlInfo.SetProp(ctrlProp' phraseVal);                      }                      else                      {                          propAssigned = false;                      }                        if (propAssigned)                          controlInfoDict[ctrlName] = controlInfo;                  }              }
