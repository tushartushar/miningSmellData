Implementation smell,Namespace,Class,File,Method,Description
Long Method,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The method has 135 lines of code.
Long Method,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,Execute,The method has 137 lines of code.
Complex Method,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,AppendActiveKP,Cyclomatic complexity of the method is 9
Complex Method,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,WorkCycle,Cyclomatic complexity of the method is 9
Complex Method,Scada.Comm.Svc,Manager,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\Manager.cs,StopThreads,Cyclomatic complexity of the method is 8
Long Parameter List,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,InteractKP,The method has 5 parameters. Parameters: kpLogic' sessionNeeded' sendAllData' commCnt' terminateCycle
Long Parameter List,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,CreateKPLogic,The method has 5 parameters. Parameters: kpNum' dllName' appDirs' kpTypes' appLog
Long Parameter List,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,Create,The method has 6 parameters. Parameters: commLineSett' commonParams' appDirs' passCmd' kpTypes' appLog
Complex Conditional,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,ReceiveFromFile,The conditional expression  "(cmdType == "startline" || cmdType == "stopline" || cmdType == "restartline") &&                                  cmdParams.TryGetValue("linenum"' out lineNumStr) &&                                  int.TryParse(lineNumStr' out lineNum)"  is complex.
Empty Catch Block,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,Execute,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,WriteInfo,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,WriteKPInfo,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,InteractKP,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,ProcCommands,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,Manager,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\Manager.cs,WriteInfo,The method has an empty catch block.
Empty Catch Block,Scada.Comm.Svc,Manager,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\Manager.cs,StartService,The method has an empty catch block.
Magic Number,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The following statement contains a magic number: try              {                  // считывание команды из файла                  string target = "";                  DateTime dateTime = DateTime.MinValue;                  int lifeTime = 0;                  bool endFound = false;                    fileStream = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  streamReader = new StreamReader(fileStream' Encoding.Default);                    while (!streamReader.EndOfStream)                  {                      string line = streamReader.ReadLine().Trim();                      string lineL = line.ToLowerInvariant();                        if (cmdParams == null)                      {                          if (lineL == "[command]")                              cmdParams = new Dictionary<string' string>();                      }                      else                      {                          if (lineL.StartsWith("target="))                          {                              target = lineL.Remove(0' 7);                          }                          else if (lineL.StartsWith("datetime="))                          {                              dateTime = DateTime.Parse(lineL.Remove(0' 9)' DateTimeFormatInfo.InvariantInfo);                          }                          else if (lineL.StartsWith("lifetime="))                          {                              lifeTime = int.Parse(lineL.Remove(0' 9));                          }                          else if (lineL.StartsWith("cmdtype="))                          {                              cmdType = line.Remove(0' 8);                              int cmdTypeID = BaseValues.CmdTypes.ParseCmdTypeCode(cmdType);                              if (cmdTypeID >= 0)                                  cmd = new Command(cmdTypeID);                          }                          else if (lineL.StartsWith("end="))                          {                              endFound = true;                          }                          else                          {                              int ind = lineL.IndexOf("=");                              if (ind >= 0)                                  cmdParams[lineL.Substring(0' ind)] = lineL.Substring(ind + 1);                                if (cmd != null)                              {                                  if (lineL.StartsWith("kpnum="))                                  {                                      cmd.KPNum = int.Parse(lineL.Remove(0' 6));                                  }                                  else if (lineL.StartsWith("cmdnum="))                                  {                                      if (cmd.CmdTypeID != BaseValues.CmdTypes.Request)                                          cmd.CmdNum = int.Parse(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmdval="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Standard)                                          cmd.CmdVal = ScadaUtils.ParseDouble(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmddata="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary)                                      {                                          byte[] cmdData;                                          if (ScadaUtils.HexToBytes(lineL.Remove(0' 8)' out cmdData))                                              cmd.CmdData = cmdData;                                      }                                  }                              }                          }                      }                  }                    if (cmdParams != null && target == "scadacommsvc" && endFound)                  {                      // проверка актуальности команды                      DateTime nowDT = DateTime.Now;                      if (nowDT.AddSeconds(-lifeTime) <= dateTime && dateTime <= nowDT.AddSeconds(lifeTime))                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена команда из файла: " :                              "The command is received from file: ") + GetCmdShortDescr(cmd));                          result = true;                      }                      else                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена неактуальная команда из файла: " :                              "The outdated command is received from file: ") + GetCmdShortDescr(cmd));                      }                        cmdType = cmdType.ToLowerInvariant();                  }              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteException(ex' Localization.UseRussian ?                      "Ошибка при приёме команды из файла {0}" :                      "Error receiving command from file {0}"' Path.GetFileName(fileName));              }              finally              {                  if (streamReader != null)                      streamReader.Close();                  if (fileStream != null)                      fileStream.Close();              }
Magic Number,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The following statement contains a magic number: try              {                  // считывание команды из файла                  string target = "";                  DateTime dateTime = DateTime.MinValue;                  int lifeTime = 0;                  bool endFound = false;                    fileStream = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  streamReader = new StreamReader(fileStream' Encoding.Default);                    while (!streamReader.EndOfStream)                  {                      string line = streamReader.ReadLine().Trim();                      string lineL = line.ToLowerInvariant();                        if (cmdParams == null)                      {                          if (lineL == "[command]")                              cmdParams = new Dictionary<string' string>();                      }                      else                      {                          if (lineL.StartsWith("target="))                          {                              target = lineL.Remove(0' 7);                          }                          else if (lineL.StartsWith("datetime="))                          {                              dateTime = DateTime.Parse(lineL.Remove(0' 9)' DateTimeFormatInfo.InvariantInfo);                          }                          else if (lineL.StartsWith("lifetime="))                          {                              lifeTime = int.Parse(lineL.Remove(0' 9));                          }                          else if (lineL.StartsWith("cmdtype="))                          {                              cmdType = line.Remove(0' 8);                              int cmdTypeID = BaseValues.CmdTypes.ParseCmdTypeCode(cmdType);                              if (cmdTypeID >= 0)                                  cmd = new Command(cmdTypeID);                          }                          else if (lineL.StartsWith("end="))                          {                              endFound = true;                          }                          else                          {                              int ind = lineL.IndexOf("=");                              if (ind >= 0)                                  cmdParams[lineL.Substring(0' ind)] = lineL.Substring(ind + 1);                                if (cmd != null)                              {                                  if (lineL.StartsWith("kpnum="))                                  {                                      cmd.KPNum = int.Parse(lineL.Remove(0' 6));                                  }                                  else if (lineL.StartsWith("cmdnum="))                                  {                                      if (cmd.CmdTypeID != BaseValues.CmdTypes.Request)                                          cmd.CmdNum = int.Parse(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmdval="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Standard)                                          cmd.CmdVal = ScadaUtils.ParseDouble(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmddata="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary)                                      {                                          byte[] cmdData;                                          if (ScadaUtils.HexToBytes(lineL.Remove(0' 8)' out cmdData))                                              cmd.CmdData = cmdData;                                      }                                  }                              }                          }                      }                  }                    if (cmdParams != null && target == "scadacommsvc" && endFound)                  {                      // проверка актуальности команды                      DateTime nowDT = DateTime.Now;                      if (nowDT.AddSeconds(-lifeTime) <= dateTime && dateTime <= nowDT.AddSeconds(lifeTime))                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена команда из файла: " :                              "The command is received from file: ") + GetCmdShortDescr(cmd));                          result = true;                      }                      else                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена неактуальная команда из файла: " :                              "The outdated command is received from file: ") + GetCmdShortDescr(cmd));                      }                        cmdType = cmdType.ToLowerInvariant();                  }              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteException(ex' Localization.UseRussian ?                      "Ошибка при приёме команды из файла {0}" :                      "Error receiving command from file {0}"' Path.GetFileName(fileName));              }              finally              {                  if (streamReader != null)                      streamReader.Close();                  if (fileStream != null)                      fileStream.Close();              }
Magic Number,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The following statement contains a magic number: try              {                  // считывание команды из файла                  string target = "";                  DateTime dateTime = DateTime.MinValue;                  int lifeTime = 0;                  bool endFound = false;                    fileStream = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  streamReader = new StreamReader(fileStream' Encoding.Default);                    while (!streamReader.EndOfStream)                  {                      string line = streamReader.ReadLine().Trim();                      string lineL = line.ToLowerInvariant();                        if (cmdParams == null)                      {                          if (lineL == "[command]")                              cmdParams = new Dictionary<string' string>();                      }                      else                      {                          if (lineL.StartsWith("target="))                          {                              target = lineL.Remove(0' 7);                          }                          else if (lineL.StartsWith("datetime="))                          {                              dateTime = DateTime.Parse(lineL.Remove(0' 9)' DateTimeFormatInfo.InvariantInfo);                          }                          else if (lineL.StartsWith("lifetime="))                          {                              lifeTime = int.Parse(lineL.Remove(0' 9));                          }                          else if (lineL.StartsWith("cmdtype="))                          {                              cmdType = line.Remove(0' 8);                              int cmdTypeID = BaseValues.CmdTypes.ParseCmdTypeCode(cmdType);                              if (cmdTypeID >= 0)                                  cmd = new Command(cmdTypeID);                          }                          else if (lineL.StartsWith("end="))                          {                              endFound = true;                          }                          else                          {                              int ind = lineL.IndexOf("=");                              if (ind >= 0)                                  cmdParams[lineL.Substring(0' ind)] = lineL.Substring(ind + 1);                                if (cmd != null)                              {                                  if (lineL.StartsWith("kpnum="))                                  {                                      cmd.KPNum = int.Parse(lineL.Remove(0' 6));                                  }                                  else if (lineL.StartsWith("cmdnum="))                                  {                                      if (cmd.CmdTypeID != BaseValues.CmdTypes.Request)                                          cmd.CmdNum = int.Parse(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmdval="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Standard)                                          cmd.CmdVal = ScadaUtils.ParseDouble(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmddata="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary)                                      {                                          byte[] cmdData;                                          if (ScadaUtils.HexToBytes(lineL.Remove(0' 8)' out cmdData))                                              cmd.CmdData = cmdData;                                      }                                  }                              }                          }                      }                  }                    if (cmdParams != null && target == "scadacommsvc" && endFound)                  {                      // проверка актуальности команды                      DateTime nowDT = DateTime.Now;                      if (nowDT.AddSeconds(-lifeTime) <= dateTime && dateTime <= nowDT.AddSeconds(lifeTime))                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена команда из файла: " :                              "The command is received from file: ") + GetCmdShortDescr(cmd));                          result = true;                      }                      else                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена неактуальная команда из файла: " :                              "The outdated command is received from file: ") + GetCmdShortDescr(cmd));                      }                        cmdType = cmdType.ToLowerInvariant();                  }              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteException(ex' Localization.UseRussian ?                      "Ошибка при приёме команды из файла {0}" :                      "Error receiving command from file {0}"' Path.GetFileName(fileName));              }              finally              {                  if (streamReader != null)                      streamReader.Close();                  if (fileStream != null)                      fileStream.Close();              }
Magic Number,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The following statement contains a magic number: try              {                  // считывание команды из файла                  string target = "";                  DateTime dateTime = DateTime.MinValue;                  int lifeTime = 0;                  bool endFound = false;                    fileStream = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  streamReader = new StreamReader(fileStream' Encoding.Default);                    while (!streamReader.EndOfStream)                  {                      string line = streamReader.ReadLine().Trim();                      string lineL = line.ToLowerInvariant();                        if (cmdParams == null)                      {                          if (lineL == "[command]")                              cmdParams = new Dictionary<string' string>();                      }                      else                      {                          if (lineL.StartsWith("target="))                          {                              target = lineL.Remove(0' 7);                          }                          else if (lineL.StartsWith("datetime="))                          {                              dateTime = DateTime.Parse(lineL.Remove(0' 9)' DateTimeFormatInfo.InvariantInfo);                          }                          else if (lineL.StartsWith("lifetime="))                          {                              lifeTime = int.Parse(lineL.Remove(0' 9));                          }                          else if (lineL.StartsWith("cmdtype="))                          {                              cmdType = line.Remove(0' 8);                              int cmdTypeID = BaseValues.CmdTypes.ParseCmdTypeCode(cmdType);                              if (cmdTypeID >= 0)                                  cmd = new Command(cmdTypeID);                          }                          else if (lineL.StartsWith("end="))                          {                              endFound = true;                          }                          else                          {                              int ind = lineL.IndexOf("=");                              if (ind >= 0)                                  cmdParams[lineL.Substring(0' ind)] = lineL.Substring(ind + 1);                                if (cmd != null)                              {                                  if (lineL.StartsWith("kpnum="))                                  {                                      cmd.KPNum = int.Parse(lineL.Remove(0' 6));                                  }                                  else if (lineL.StartsWith("cmdnum="))                                  {                                      if (cmd.CmdTypeID != BaseValues.CmdTypes.Request)                                          cmd.CmdNum = int.Parse(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmdval="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Standard)                                          cmd.CmdVal = ScadaUtils.ParseDouble(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmddata="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary)                                      {                                          byte[] cmdData;                                          if (ScadaUtils.HexToBytes(lineL.Remove(0' 8)' out cmdData))                                              cmd.CmdData = cmdData;                                      }                                  }                              }                          }                      }                  }                    if (cmdParams != null && target == "scadacommsvc" && endFound)                  {                      // проверка актуальности команды                      DateTime nowDT = DateTime.Now;                      if (nowDT.AddSeconds(-lifeTime) <= dateTime && dateTime <= nowDT.AddSeconds(lifeTime))                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена команда из файла: " :                              "The command is received from file: ") + GetCmdShortDescr(cmd));                          result = true;                      }                      else                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена неактуальная команда из файла: " :                              "The outdated command is received from file: ") + GetCmdShortDescr(cmd));                      }                        cmdType = cmdType.ToLowerInvariant();                  }              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteException(ex' Localization.UseRussian ?                      "Ошибка при приёме команды из файла {0}" :                      "Error receiving command from file {0}"' Path.GetFileName(fileName));              }              finally              {                  if (streamReader != null)                      streamReader.Close();                  if (fileStream != null)                      fileStream.Close();              }
Magic Number,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The following statement contains a magic number: try              {                  // считывание команды из файла                  string target = "";                  DateTime dateTime = DateTime.MinValue;                  int lifeTime = 0;                  bool endFound = false;                    fileStream = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  streamReader = new StreamReader(fileStream' Encoding.Default);                    while (!streamReader.EndOfStream)                  {                      string line = streamReader.ReadLine().Trim();                      string lineL = line.ToLowerInvariant();                        if (cmdParams == null)                      {                          if (lineL == "[command]")                              cmdParams = new Dictionary<string' string>();                      }                      else                      {                          if (lineL.StartsWith("target="))                          {                              target = lineL.Remove(0' 7);                          }                          else if (lineL.StartsWith("datetime="))                          {                              dateTime = DateTime.Parse(lineL.Remove(0' 9)' DateTimeFormatInfo.InvariantInfo);                          }                          else if (lineL.StartsWith("lifetime="))                          {                              lifeTime = int.Parse(lineL.Remove(0' 9));                          }                          else if (lineL.StartsWith("cmdtype="))                          {                              cmdType = line.Remove(0' 8);                              int cmdTypeID = BaseValues.CmdTypes.ParseCmdTypeCode(cmdType);                              if (cmdTypeID >= 0)                                  cmd = new Command(cmdTypeID);                          }                          else if (lineL.StartsWith("end="))                          {                              endFound = true;                          }                          else                          {                              int ind = lineL.IndexOf("=");                              if (ind >= 0)                                  cmdParams[lineL.Substring(0' ind)] = lineL.Substring(ind + 1);                                if (cmd != null)                              {                                  if (lineL.StartsWith("kpnum="))                                  {                                      cmd.KPNum = int.Parse(lineL.Remove(0' 6));                                  }                                  else if (lineL.StartsWith("cmdnum="))                                  {                                      if (cmd.CmdTypeID != BaseValues.CmdTypes.Request)                                          cmd.CmdNum = int.Parse(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmdval="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Standard)                                          cmd.CmdVal = ScadaUtils.ParseDouble(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmddata="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary)                                      {                                          byte[] cmdData;                                          if (ScadaUtils.HexToBytes(lineL.Remove(0' 8)' out cmdData))                                              cmd.CmdData = cmdData;                                      }                                  }                              }                          }                      }                  }                    if (cmdParams != null && target == "scadacommsvc" && endFound)                  {                      // проверка актуальности команды                      DateTime nowDT = DateTime.Now;                      if (nowDT.AddSeconds(-lifeTime) <= dateTime && dateTime <= nowDT.AddSeconds(lifeTime))                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена команда из файла: " :                              "The command is received from file: ") + GetCmdShortDescr(cmd));                          result = true;                      }                      else                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена неактуальная команда из файла: " :                              "The outdated command is received from file: ") + GetCmdShortDescr(cmd));                      }                        cmdType = cmdType.ToLowerInvariant();                  }              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteException(ex' Localization.UseRussian ?                      "Ошибка при приёме команды из файла {0}" :                      "Error receiving command from file {0}"' Path.GetFileName(fileName));              }              finally              {                  if (streamReader != null)                      streamReader.Close();                  if (fileStream != null)                      fileStream.Close();              }
Magic Number,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The following statement contains a magic number: try              {                  // считывание команды из файла                  string target = "";                  DateTime dateTime = DateTime.MinValue;                  int lifeTime = 0;                  bool endFound = false;                    fileStream = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  streamReader = new StreamReader(fileStream' Encoding.Default);                    while (!streamReader.EndOfStream)                  {                      string line = streamReader.ReadLine().Trim();                      string lineL = line.ToLowerInvariant();                        if (cmdParams == null)                      {                          if (lineL == "[command]")                              cmdParams = new Dictionary<string' string>();                      }                      else                      {                          if (lineL.StartsWith("target="))                          {                              target = lineL.Remove(0' 7);                          }                          else if (lineL.StartsWith("datetime="))                          {                              dateTime = DateTime.Parse(lineL.Remove(0' 9)' DateTimeFormatInfo.InvariantInfo);                          }                          else if (lineL.StartsWith("lifetime="))                          {                              lifeTime = int.Parse(lineL.Remove(0' 9));                          }                          else if (lineL.StartsWith("cmdtype="))                          {                              cmdType = line.Remove(0' 8);                              int cmdTypeID = BaseValues.CmdTypes.ParseCmdTypeCode(cmdType);                              if (cmdTypeID >= 0)                                  cmd = new Command(cmdTypeID);                          }                          else if (lineL.StartsWith("end="))                          {                              endFound = true;                          }                          else                          {                              int ind = lineL.IndexOf("=");                              if (ind >= 0)                                  cmdParams[lineL.Substring(0' ind)] = lineL.Substring(ind + 1);                                if (cmd != null)                              {                                  if (lineL.StartsWith("kpnum="))                                  {                                      cmd.KPNum = int.Parse(lineL.Remove(0' 6));                                  }                                  else if (lineL.StartsWith("cmdnum="))                                  {                                      if (cmd.CmdTypeID != BaseValues.CmdTypes.Request)                                          cmd.CmdNum = int.Parse(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmdval="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Standard)                                          cmd.CmdVal = ScadaUtils.ParseDouble(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmddata="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary)                                      {                                          byte[] cmdData;                                          if (ScadaUtils.HexToBytes(lineL.Remove(0' 8)' out cmdData))                                              cmd.CmdData = cmdData;                                      }                                  }                              }                          }                      }                  }                    if (cmdParams != null && target == "scadacommsvc" && endFound)                  {                      // проверка актуальности команды                      DateTime nowDT = DateTime.Now;                      if (nowDT.AddSeconds(-lifeTime) <= dateTime && dateTime <= nowDT.AddSeconds(lifeTime))                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена команда из файла: " :                              "The command is received from file: ") + GetCmdShortDescr(cmd));                          result = true;                      }                      else                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена неактуальная команда из файла: " :                              "The outdated command is received from file: ") + GetCmdShortDescr(cmd));                      }                        cmdType = cmdType.ToLowerInvariant();                  }              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteException(ex' Localization.UseRussian ?                      "Ошибка при приёме команды из файла {0}" :                      "Error receiving command from file {0}"' Path.GetFileName(fileName));              }              finally              {                  if (streamReader != null)                      streamReader.Close();                  if (fileStream != null)                      fileStream.Close();              }
Magic Number,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The following statement contains a magic number: try              {                  // считывание команды из файла                  string target = "";                  DateTime dateTime = DateTime.MinValue;                  int lifeTime = 0;                  bool endFound = false;                    fileStream = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  streamReader = new StreamReader(fileStream' Encoding.Default);                    while (!streamReader.EndOfStream)                  {                      string line = streamReader.ReadLine().Trim();                      string lineL = line.ToLowerInvariant();                        if (cmdParams == null)                      {                          if (lineL == "[command]")                              cmdParams = new Dictionary<string' string>();                      }                      else                      {                          if (lineL.StartsWith("target="))                          {                              target = lineL.Remove(0' 7);                          }                          else if (lineL.StartsWith("datetime="))                          {                              dateTime = DateTime.Parse(lineL.Remove(0' 9)' DateTimeFormatInfo.InvariantInfo);                          }                          else if (lineL.StartsWith("lifetime="))                          {                              lifeTime = int.Parse(lineL.Remove(0' 9));                          }                          else if (lineL.StartsWith("cmdtype="))                          {                              cmdType = line.Remove(0' 8);                              int cmdTypeID = BaseValues.CmdTypes.ParseCmdTypeCode(cmdType);                              if (cmdTypeID >= 0)                                  cmd = new Command(cmdTypeID);                          }                          else if (lineL.StartsWith("end="))                          {                              endFound = true;                          }                          else                          {                              int ind = lineL.IndexOf("=");                              if (ind >= 0)                                  cmdParams[lineL.Substring(0' ind)] = lineL.Substring(ind + 1);                                if (cmd != null)                              {                                  if (lineL.StartsWith("kpnum="))                                  {                                      cmd.KPNum = int.Parse(lineL.Remove(0' 6));                                  }                                  else if (lineL.StartsWith("cmdnum="))                                  {                                      if (cmd.CmdTypeID != BaseValues.CmdTypes.Request)                                          cmd.CmdNum = int.Parse(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmdval="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Standard)                                          cmd.CmdVal = ScadaUtils.ParseDouble(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmddata="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary)                                      {                                          byte[] cmdData;                                          if (ScadaUtils.HexToBytes(lineL.Remove(0' 8)' out cmdData))                                              cmd.CmdData = cmdData;                                      }                                  }                              }                          }                      }                  }                    if (cmdParams != null && target == "scadacommsvc" && endFound)                  {                      // проверка актуальности команды                      DateTime nowDT = DateTime.Now;                      if (nowDT.AddSeconds(-lifeTime) <= dateTime && dateTime <= nowDT.AddSeconds(lifeTime))                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена команда из файла: " :                              "The command is received from file: ") + GetCmdShortDescr(cmd));                          result = true;                      }                      else                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена неактуальная команда из файла: " :                              "The outdated command is received from file: ") + GetCmdShortDescr(cmd));                      }                        cmdType = cmdType.ToLowerInvariant();                  }              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteException(ex' Localization.UseRussian ?                      "Ошибка при приёме команды из файла {0}" :                      "Error receiving command from file {0}"' Path.GetFileName(fileName));              }              finally              {                  if (streamReader != null)                      streamReader.Close();                  if (fileStream != null)                      fileStream.Close();              }
Magic Number,Scada.Comm.Svc,CommandReader,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommandReader.cs,LoadCmdFromFile,The following statement contains a magic number: try              {                  // считывание команды из файла                  string target = "";                  DateTime dateTime = DateTime.MinValue;                  int lifeTime = 0;                  bool endFound = false;                    fileStream = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);                  streamReader = new StreamReader(fileStream' Encoding.Default);                    while (!streamReader.EndOfStream)                  {                      string line = streamReader.ReadLine().Trim();                      string lineL = line.ToLowerInvariant();                        if (cmdParams == null)                      {                          if (lineL == "[command]")                              cmdParams = new Dictionary<string' string>();                      }                      else                      {                          if (lineL.StartsWith("target="))                          {                              target = lineL.Remove(0' 7);                          }                          else if (lineL.StartsWith("datetime="))                          {                              dateTime = DateTime.Parse(lineL.Remove(0' 9)' DateTimeFormatInfo.InvariantInfo);                          }                          else if (lineL.StartsWith("lifetime="))                          {                              lifeTime = int.Parse(lineL.Remove(0' 9));                          }                          else if (lineL.StartsWith("cmdtype="))                          {                              cmdType = line.Remove(0' 8);                              int cmdTypeID = BaseValues.CmdTypes.ParseCmdTypeCode(cmdType);                              if (cmdTypeID >= 0)                                  cmd = new Command(cmdTypeID);                          }                          else if (lineL.StartsWith("end="))                          {                              endFound = true;                          }                          else                          {                              int ind = lineL.IndexOf("=");                              if (ind >= 0)                                  cmdParams[lineL.Substring(0' ind)] = lineL.Substring(ind + 1);                                if (cmd != null)                              {                                  if (lineL.StartsWith("kpnum="))                                  {                                      cmd.KPNum = int.Parse(lineL.Remove(0' 6));                                  }                                  else if (lineL.StartsWith("cmdnum="))                                  {                                      if (cmd.CmdTypeID != BaseValues.CmdTypes.Request)                                          cmd.CmdNum = int.Parse(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmdval="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Standard)                                          cmd.CmdVal = ScadaUtils.ParseDouble(lineL.Remove(0' 7));                                  }                                  else if (lineL.StartsWith("cmddata="))                                  {                                      if (cmd.CmdTypeID == BaseValues.CmdTypes.Binary)                                      {                                          byte[] cmdData;                                          if (ScadaUtils.HexToBytes(lineL.Remove(0' 8)' out cmdData))                                              cmd.CmdData = cmdData;                                      }                                  }                              }                          }                      }                  }                    if (cmdParams != null && target == "scadacommsvc" && endFound)                  {                      // проверка актуальности команды                      DateTime nowDT = DateTime.Now;                      if (nowDT.AddSeconds(-lifeTime) <= dateTime && dateTime <= nowDT.AddSeconds(lifeTime))                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена команда из файла: " :                              "The command is received from file: ") + GetCmdShortDescr(cmd));                          result = true;                      }                      else                      {                          log.WriteAction((Localization.UseRussian ?                              "Получена неактуальная команда из файла: " :                              "The outdated command is received from file: ") + GetCmdShortDescr(cmd));                      }                        cmdType = cmdType.ToLowerInvariant();                  }              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteException(ex' Localization.UseRussian ?                      "Ошибка при приёме команды из файла {0}" :                      "Error receiving command from file {0}"' Path.GetFileName(fileName));              }              finally              {                  if (streamReader != null)                      streamReader.Close();                  if (fileStream != null)                      fileStream.Close();              }
Magic Number,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,AppendActiveKP,The following statement contains a magic number: if (kpCaptions == null)              {                  if (kpCnt > 0)                  {                      // вычисление максимальной длины обозначения КП                      int maxKPCapLen = 0;                      int ordLen = kpCnt.ToString().Length;                      foreach (KPLogic kpLogic in KPList)                      {                          int kpCapLen = ordLen + 2 + kpLogic.Caption.Length;                          if (maxKPCapLen < kpCapLen)                              maxKPCapLen = kpCapLen;                      }                        // формирование обозначений активных КП                      kpCaptions = new string[kpCnt];                      for (int i = 0; i < kpCnt; i++)                      {                          string s = (i + 1).ToString().PadLeft(ordLen) + ". " + KPList[i].Caption;                          kpCaptions[i] = s.PadRight(maxKPCapLen) + " : ";                      }                  }                  else                  {                      kpCaptions = new string[0];                  }              }
Magic Number,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,WriteKPInfo,The following statement contains a magic number: try              {                  // определение имени файла                  string kpInfoFileName;                  int kpNum = kpLogic.Number;                  if (kpNum < 10)                       kpInfoFileName = "kp00" + kpNum + ".txt";                  else if (kpNum < 100)                       kpInfoFileName = "kp0" + kpNum + ".txt";                  else                       kpInfoFileName = "kp" + kpNum + ".txt";                    // запись информации                  using (StreamWriter writer = new StreamWriter(appDirs.LogDir + kpInfoFileName' false' Encoding.UTF8))                      writer.Write(kpLogic.GetInfo());              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteAction((Localization.UseRussian ?                      "Ошибка при записи в файл информации о работе КП: " :                      "Error writing device information to the file: ") + ex.Message);              }
Magic Number,Scada.Comm.Svc,CommLine,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\CommLine.cs,WriteKPInfo,The following statement contains a magic number: try              {                  // определение имени файла                  string kpInfoFileName;                  int kpNum = kpLogic.Number;                  if (kpNum < 10)                       kpInfoFileName = "kp00" + kpNum + ".txt";                  else if (kpNum < 100)                       kpInfoFileName = "kp0" + kpNum + ".txt";                  else                       kpInfoFileName = "kp" + kpNum + ".txt";                    // запись информации                  using (StreamWriter writer = new StreamWriter(appDirs.LogDir + kpInfoFileName' false' Encoding.UTF8))                      writer.Write(kpLogic.GetInfo());              }              catch (ThreadAbortException)              {              }              catch (Exception ex)              {                  log.WriteAction((Localization.UseRussian ?                      "Ошибка при записи в файл информации о работе КП: " :                      "Error writing device information to the file: ") + ex.Message);              }
Magic Number,Scada.Comm.Svc,Manager,C:\repos\RapidScada_SCADA\ScadaComm\ScadaCommSvc\Manager.cs,InitLineCaptions,The following statement contains a magic number: maxCapLen += ordLen + 2 /*точка и пробел*/;
