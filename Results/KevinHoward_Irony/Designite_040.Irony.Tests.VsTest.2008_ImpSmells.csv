Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The length of the statement  "      Assert.IsTrue((DateTime)_token.Value == new DateTime(2009' 11' 15)' "Failed to parse quoted date - result value does not match."); " is 130.
Long Statement,Irony.Tests,FreeTextLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\FreeTextLiteralTests.cs,TestFreeTextLiteral,The length of the statement  "      Assert.AreEqual(term' _token.Terminal' "Failed to scan a free text ending at EOF - invalid Terminal in the returned token."); " is 125.
Long Statement,Irony.Tests,IdentifierTerminalTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\IdentifierTerminalTests.cs,TestIdentifierCaseRestrictions,The length of the statement  "      Assert.IsTrue(_token != null && _token.ValueString == "bCd"' "Failed to scan identifier bCd with FirstLower restriction."); " is 123.
Long Statement,Irony.Tests,IdentifierTerminalTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\IdentifierTerminalTests.cs,TestIdentifierCaseRestrictions,The length of the statement  "      Assert.IsTrue(_token != null && _token.ValueString == "CdE"' "Failed to scan identifier CdE with FirstUpper restriction."); " is 123.
Long Statement,Irony.Tests,IdentifierTerminalTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\IdentifierTerminalTests.cs,TestIdentifierCaseRestrictions,The length of the statement  "      Assert.IsTrue(_token != null && _token.ValueString == "def"' "Failed to scan identifier def with AllLower restriction."); " is 121.
Long Statement,Irony.Tests,IdentifierTerminalTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\IdentifierTerminalTests.cs,TestIdentifierCaseRestrictions,The length of the statement  "      Assert.IsTrue(_token != null && _token.ValueString == "EFG"' "Failed to scan identifier EFG with AllUpper restriction."); " is 121.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestSignedMatchesNegativeCorrectly,The length of the statement  "      Assert.AreEqual(-500' _token.Value' "Negative number was parsed incorrectly; expected: {0}' scanned: {1}"' "-500"' _token.Value); " is 129.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The length of the statement  "      //When going through quick parse path (for one-digit numbers)' the NumberScanInfo record is not created and hence is absent in Attributes " is 137.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The length of the statement  "      Assert.IsTrue(_token.Details == null' "Quick parse test failed: ScanDetails object is found in token - quick parse path should not produce this object."); " is 154.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The length of the statement  "      //When going through quick parse path (for one-digit numbers)' the NumberScanInfo record is not created and hence is absent in Attributes " is 137.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The length of the statement  "      Assert.IsTrue(_token.Details == null' "Quick parse test failed: ScanDetails object is found in token - quick parse path should not produce this object."); " is 154.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The length of the statement  "      string sbig = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"; //100 digits " is 130.
Long Statement,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The length of the statement  "      Assert.IsTrue(_token.Details == null' "Quick parse test failed: ScanDetails object is found in token - quick parse path should produce this object."); " is 150.
Long Statement,Irony.Tests,StringLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\StringLiteralTests.cs,TestPythonString,The length of the statement  "      Assert.IsTrue((string)_token.Value == "abcd\nefg"' "Failed to process line break in triple-quote string. (Double quotes)"); " is 123.
Long Statement,Irony.Tests,StringLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\StringLiteralTests.cs,TestPythonString,The length of the statement  "      Assert.IsTrue((string)_token.Value == @"00\a\b\t\n\v\f\r00"' "Failed to process string with disabled escapes. (Double quotes)"); " is 128.
Long Statement,Irony.Tests,StringLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\StringLiteralTests.cs,TestCSharpString,The length of the statement  "      Assert.IsTrue((string)_token.Value == @"abcd\" + '"' + "efg" ' @"Failed to process '\\\ + double-quote' inside the string."); " is 125.
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: term = new FixedLengthLiteral("fixedLengthInteger"' 2' TypeCode.Int32);
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 12' "Failed to parse fixed-length integer - result value does not match.");
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: term = new FixedLengthLiteral("fixedLengthString"' 2' TypeCode.String);
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 12' "Failed to parse CSV integer - result value does not match.");
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((DateTime)_token.Value == new DateTime(2009' 11' 15)' "Failed to parse quoted date - result value does not match.");
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((DateTime)_token.Value == new DateTime(2009' 11' 15)' "Failed to parse quoted date - result value does not match.");
Magic Number,Irony.Tests,DataLiteralsTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\DataLiteralsTests.cs,TestDataLiterals,The following statement contains a magic number: Assert.IsTrue((DateTime)_token.Value == new DateTime(2009' 11' 15)' "Failed to parse quoted date - result value does not match.");
Magic Number,Irony.Tests,RegExLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\RegExLiteralTests.cs,TestRegExLiteral,The following statement contains a magic number: Assert.AreEqual(match.Index' 2' "Failed to match a regular expression");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,GeneralTest,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,GeneralTest,The following statement contains a magic number: Assert.IsTrue(Math.Abs(Convert.ToDouble(_token.Value) - 123.4) < 0.000001' "Failed to read float value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,GeneralTest,The following statement contains a magic number: Assert.IsTrue(Math.Abs(Convert.ToDouble(_token.Value) - 123.4) < 0.000001' "Failed to read float value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestSignedMatchesNegativeCorrectly,The following statement contains a magic number: Assert.AreEqual(-500' _token.Value' "Negative number was parsed incorrectly; expected: {0}' scanned: {1}"' "-500"' _token.Value);
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: double eps = 0.0001;
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue((UInt32)_token.Value == 123' "Failed to read uint value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue((long)_token.Value == 123' "Failed to read long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue((ulong)_token.Value == 123' "Failed to read ulong value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value #1");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 1234e-1) < eps' "Failed to read double value #2");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value  #3");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value  #4");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((Single)_token.Value - 123.4) < eps' "Failed to read float(single) value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((decimal)_token.Value - 123.4m) < Convert.ToDecimal(eps)' "Failed to read decimal value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestCSharpNumber,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 123' "Failed to read int value with trailing dot");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: double eps = 0.0001;
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((Int16)_token.Value == 123' "Failed to read short value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((Int32)_token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((Int32)_token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((long)_token.Value == 123' "Failed to read long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((Int64)_token.Value == 123' "Failed to read long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((UInt16)_token.Value == 123' "Failed to read ushort value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((UInt32)_token.Value == 123' "Failed to read uint value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((ulong)_token.Value == 123' "Failed to read ulong value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 10' "Failed to read octal int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue((long)_token.Value == 10' "Failed to read octal long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value #1");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 1234e-1) < eps' "Failed to read double value #2");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value  #3");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value  #4");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value #5");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value #6");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((Single)_token.Value - 123.4) < eps' "Failed to read float(single) value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((Single)_token.Value - 123.4) < eps' "Failed to read float(single) value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((decimal)_token.Value - 123.4m) < Convert.ToDecimal(eps)' "Failed to read decimal value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestVBNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((decimal)_token.Value - 123.4m) < Convert.ToDecimal(eps)' "Failed to read decimal value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: double eps = 0.0001;
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 123' "Failed to read int value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: Assert.IsTrue((long)_token.Value == 123' "Failed to read long value");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value #1");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 1234e-1) < eps' "Failed to read double value #2");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value  #3");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value  #4");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 0.1234) < eps' "Failed to read double value with leading dot");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestPythonNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.0) < eps' "Failed to read double value with trailing dot");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestSchemeNumber,The following statement contains a magic number: double eps = 0.0001;
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestSchemeNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value #1");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestSchemeNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 1234e-1) < eps' "Failed to read single value #2");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestSchemeNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((Single)_token.Value - 1234e-1) < eps' "Failed to read single value #3");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestSchemeNumber,The following statement contains a magic number: Assert.IsTrue(Math.Abs((double)_token.Value - 123.4) < eps' "Failed to read double value  #4");
Magic Number,Irony.Tests,NumberLiteralTests,D:\research\architectureSmells\repos\KevinHoward_Irony\Irony.Tests\NumberLiteralTests.cs,TestNumberWithUnderscore,The following statement contains a magic number: Assert.IsTrue((int)_token.Value == 1234567' "Failed to read int value with underscores.");
