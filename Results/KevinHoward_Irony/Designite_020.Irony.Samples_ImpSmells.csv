Implementation smell,Namespace,Class,File,Method,Description
Long Method,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The method has 633 lines of code.
Long Method,Irony.Samples,GWBasicGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The method has 167 lines of code.
Long Method,Irony.Samples.Scheme,SchemeGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Scheme\SchemeGrammar.cs,SchemeGrammar,The method has 164 lines of code.
Long Method,Irony.Samples.SQL,SqlGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The method has 208 lines of code.
Complex Method,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,OnResolvingConflict,Cyclomatic complexity of the method is 8
Complex Method,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,HtmlEncode,Cyclomatic complexity of the method is 17
Complex Method,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiToken,Cyclomatic complexity of the method is 25
Complex Method,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,Cyclomatic complexity of the method is 23
Complex Method,Irony.Samples.FullTextSearch,SearchGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,ConvertQuery,Cyclomatic complexity of the method is 32
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter primary_no_array_creation_expression is 36.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter anonymous_object_creation_expression is 36.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter generic_dimension_specifier_opt is 31.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter anonymous_function_signature_opt is 32.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter anonymous_function_parameter_decl is 33.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter anonymous_function_parameter_list_opt is 37.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter anonymous_function_parameter_modifier_opt is 41.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter type_parameter_constraints_clause is 33.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter type_parameter_constraints_clauses_opt is 38.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter conversion_operator_declaration is 31.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter interface_property_declaration is 30.
Long Identifier,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The length of the parameter attribute_target_specifier_opt is 30.
Long Statement,Irony.Samples,WikiCreoleGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiCreoleGrammar.cs,PreprocessTokens,The length of the statement  "		var paraBreak = termName.StartsWith ("h") || termName.StartsWith ("bl") || termName.StartsWith ("nl") || termName.StartsWith ("table"); " is 135.
Long Statement,Irony.Samples.MiniPython,MiniPythonGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\MiniPython\MiniPython.cs,CreateTokenFilters,The length of the statement  "	var outlineFilter = new CodeOutlineFilter (language.GrammarData' OutlineOptions.ProduceIndents | OutlineOptions.CheckBraces' ToTerm (@"\")); " is 140.
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (2' "&&");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (3' "|");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (4' "^");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (5' "&");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (6' "=="' "!=");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (7' "<"' ">"' "<="' ">="' "is"' "as");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (8' "<<"' ">>");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (9' "+"' "-");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (10' "*"' "/"' "%");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (11' ".");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (-3' "="' "+="' "-="' "*="' "/="' "%="' "&="' "|="' "^="' "<<="' ">>=");  
Magic Number,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,CSharpGrammar,The following statement contains a magic number: RegisterOperators (-2' "?");  
Magic Number,Irony.Samples,GWBasicGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators (60' "^");  
Magic Number,Irony.Samples,GWBasicGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators (50' "*"' "/");  
Magic Number,Irony.Samples,GWBasicGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators (40' "+"' "-");  
Magic Number,Irony.Samples,GWBasicGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators (30' "="' "<="' ">="' "<"' ">"' "<>");  
Magic Number,Irony.Samples,GWBasicGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\GWBasic\GwBasicGrammar.cs,GWBasicGrammar,The following statement contains a magic number: RegisterOperators (20' "and"' "or");  
Magic Number,Irony.Samples,GWBasicGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\GWBasic\GwBasicGrammar.cs,identifier_ValidateToken,The following statement contains a magic number: if (e.Context.CurrentToken.ValueString.Length > 4)  	e.Context.CurrentToken = e.Context.Source.CreateErrorToken ("Identifier cannot be longer than 4 characters");  
Magic Number,Irony.Samples,ExpressionEvaluatorGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\ExpressionEvaluator\ExpressionEvaluatorGrammar.cs,ExpressionEvaluatorGrammar,The following statement contains a magic number: RegisterOperators (2' "*"' "/");  
Magic Number,Irony.Samples,ExpressionEvaluatorGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\ExpressionEvaluator\ExpressionEvaluatorGrammar.cs,ExpressionEvaluatorGrammar,The following statement contains a magic number: RegisterOperators (4' Associativity.Right' "**");  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,HtmlEncode,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	switch (text [i]) {  	case '<':  		sb.Append ("&lt;");  		break;  	case '>':  		sb.Append ("&gt;");  		break;  	case '"':  		sb.Append ("&quot;");  		break;  	case '&':  		sb.Append ("&amp;");  		break;  	default:  		if (text [i] > 159) {  			// decimal numeric entity  			sb.Append ("&#");  			sb.Append (((int)text [i]).ToString ());  			sb.Append (";");  		} else  			sb.Append (text [i]);  		break;  	}  }  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,HtmlEncode,The following statement contains a magic number: switch (text [i]) {  case '<':  	sb.Append ("&lt;");  	break;  case '>':  	sb.Append ("&gt;");  	break;  case '"':  	sb.Append ("&quot;");  	break;  case '&':  	sb.Append ("&amp;");  	break;  default:  	if (text [i] > 159) {  		// decimal numeric entity  		sb.Append ("&#");  		sb.Append (((int)text [i]).ToString ());  		sb.Append (";");  	} else  		sb.Append (text [i]);  	break;  }  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,HtmlEncode,The following statement contains a magic number: if (text [i] > 159) {  	// decimal numeric entity  	sb.Append ("&#");  	sb.Append (((int)text [i]).ToString ());  	sb.Append (";");  } else  	sb.Append (text [i]);  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,Convert,The following statement contains a magic number: _output = new StringBuilder (8192);  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch (term.BlockType) {  case WikiBlockType.EscapedText:  case WikiBlockType.CodeBlock:  	_output.Append (term.OpenHtmlTag);  	_output.Append (HtmlEncode (token.ValueString));  	_output.AppendLine (term.CloseHtmlTag);  	break;  case WikiBlockType.Anchor:  	_output.Append ("<a name=\"" + token.ValueString + "\"/>");  	break;  case WikiBlockType.LinkToAnchor:  	_output.Append ("<a href=\"#" + token.ValueString + "\">" + HtmlEncode (token.ValueString) + "</a>");  	break;  case WikiBlockType.Url:  case WikiBlockType.FileLink:  	template = "<a href=\"{0}\">{1}</a>";  	segments = token.ValueString.Split ('|');  	if (segments.Length > 1)  		_output.Append (string.Format (template' segments [1]' segments [0]));  	else  		_output.Append (string.Format (template' segments [0]' segments [0]));  	break;  case WikiBlockType.Image:  	segments = token.ValueString.Split ('|');  	switch (segments.Length) {  	case 1:  		template = "<img src=\"{0}\"/>";  		_output.Append (string.Format (template' segments [0]));  		break;  	case 2:  		template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";  		_output.Append (string.Format (template' segments [0]' segments [1]));  		break;  	case 3:  		template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";  		_output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  		break;  	}  	//switch segments.Length  	break;  }  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch (term.BlockType) {  case WikiBlockType.EscapedText:  case WikiBlockType.CodeBlock:  	_output.Append (term.OpenHtmlTag);  	_output.Append (HtmlEncode (token.ValueString));  	_output.AppendLine (term.CloseHtmlTag);  	break;  case WikiBlockType.Anchor:  	_output.Append ("<a name=\"" + token.ValueString + "\"/>");  	break;  case WikiBlockType.LinkToAnchor:  	_output.Append ("<a href=\"#" + token.ValueString + "\">" + HtmlEncode (token.ValueString) + "</a>");  	break;  case WikiBlockType.Url:  case WikiBlockType.FileLink:  	template = "<a href=\"{0}\">{1}</a>";  	segments = token.ValueString.Split ('|');  	if (segments.Length > 1)  		_output.Append (string.Format (template' segments [1]' segments [0]));  	else  		_output.Append (string.Format (template' segments [0]' segments [0]));  	break;  case WikiBlockType.Image:  	segments = token.ValueString.Split ('|');  	switch (segments.Length) {  	case 1:  		template = "<img src=\"{0}\"/>";  		_output.Append (string.Format (template' segments [0]));  		break;  	case 2:  		template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";  		_output.Append (string.Format (template' segments [0]' segments [1]));  		break;  	case 3:  		template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";  		_output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  		break;  	}  	//switch segments.Length  	break;  }  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch (term.BlockType) {  case WikiBlockType.EscapedText:  case WikiBlockType.CodeBlock:  	_output.Append (term.OpenHtmlTag);  	_output.Append (HtmlEncode (token.ValueString));  	_output.AppendLine (term.CloseHtmlTag);  	break;  case WikiBlockType.Anchor:  	_output.Append ("<a name=\"" + token.ValueString + "\"/>");  	break;  case WikiBlockType.LinkToAnchor:  	_output.Append ("<a href=\"#" + token.ValueString + "\">" + HtmlEncode (token.ValueString) + "</a>");  	break;  case WikiBlockType.Url:  case WikiBlockType.FileLink:  	template = "<a href=\"{0}\">{1}</a>";  	segments = token.ValueString.Split ('|');  	if (segments.Length > 1)  		_output.Append (string.Format (template' segments [1]' segments [0]));  	else  		_output.Append (string.Format (template' segments [0]' segments [0]));  	break;  case WikiBlockType.Image:  	segments = token.ValueString.Split ('|');  	switch (segments.Length) {  	case 1:  		template = "<img src=\"{0}\"/>";  		_output.Append (string.Format (template' segments [0]));  		break;  	case 2:  		template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";  		_output.Append (string.Format (template' segments [0]' segments [1]));  		break;  	case 3:  		template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";  		_output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  		break;  	}  	//switch segments.Length  	break;  }  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch (segments.Length) {  case 1:  	template = "<img src=\"{0}\"/>";  	_output.Append (string.Format (template' segments [0]));  	break;  case 2:  	template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";  	_output.Append (string.Format (template' segments [0]' segments [1]));  	break;  case 3:  	template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";  	_output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  	break;  }  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch (segments.Length) {  case 1:  	template = "<img src=\"{0}\"/>";  	_output.Append (string.Format (template' segments [0]));  	break;  case 2:  	template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";  	_output.Append (string.Format (template' segments [0]' segments [1]));  	break;  case 3:  	template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";  	_output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  	break;  }  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: switch (segments.Length) {  case 1:  	template = "<img src=\"{0}\"/>";  	_output.Append (string.Format (template' segments [0]));  	break;  case 2:  	template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";  	_output.Append (string.Format (template' segments [0]' segments [1]));  	break;  case 3:  	template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";  	_output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  	break;  }  
Magic Number,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following statement contains a magic number: _output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,SearchGrammar,The following statement contains a magic number: RegisterOperators (10' "or"' "|");  
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,SearchGrammar,The following statement contains a magic number: RegisterOperators (20' "and"' "&"' "-");  
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,SearchGrammar,The following statement contains a magic number: RegisterOperators (20' ImpliedAnd);  
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,ConvertQuery,The following statement contains a magic number: switch (node.Term.Name) {  case "BinaryExpression":  	string opSym = string.Empty;  	string op = node.ChildNodes [1].FindTokenAndGetText ().ToLower ();  	string sqlOp = "";  	switch (op) {  	case "":  	case "&":  	case "and":  		sqlOp = " AND ";  		type = TermType.Inflectional;  		break;  	case "-":  		sqlOp = " AND NOT ";  		break;  	case "|":  	case "or":  		sqlOp = " OR ";  		break;  	}  	//switch  	result = "(" + ConvertQuery (node.ChildNodes [0]' type) + sqlOp + ConvertQuery (node.ChildNodes [2]' type) + ")";  	break;  case "PrimaryExpression":  	result = "(" + ConvertQuery (node.ChildNodes [0]' type) + ")";  	break;  case "ProximityList":  	string[] tmp = new string[node.ChildNodes.Count];  	type = TermType.Exact;  	for (int i = 0; i < node.ChildNodes.Count; i++) {  		tmp [i] = ConvertQuery (node.ChildNodes [i]' type);  	}  	result = "(" + string.Join (" NEAR "' tmp) + ")";  	type = TermType.Inflectional;  	break;  case "Phrase":  	result = '"' + node.Token.ValueString + '"';  	break;  case "ThesaurusExpression":  	result = " FORMSOF (THESAURUS' " + node.ChildNodes [1].Token.ValueString + ") ";  	break;  case "ExactExpression":  	result = " \"" + node.ChildNodes [1].Token.ValueString + "\" ";  	break;  case "Term":  	switch (type) {  	case TermType.Inflectional:  		result = node.Token.ValueString;  		if (result.EndsWith ("*"))  			result = "\"" + result + "\"";  		else  			result = " FORMSOF (INFLECTIONAL' " + result + ") ";  		break;  	case TermType.Exact:  		result = node.Token.ValueString;  		break;  	}  	break;  // This should never happen' even if input string is garbage  default:  	throw new ApplicationException ("Converter failed: unexpected term: " + node.Term.Name + ". Please investigate.");  }  
Magic Number,Irony.Samples.FullTextSearch,SearchGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,ConvertQuery,The following statement contains a magic number: result = "(" + ConvertQuery (node.ChildNodes [0]' type) + sqlOp + ConvertQuery (node.ChildNodes [2]' type) + ")";  
Magic Number,Irony.Samples.MiniPython,MiniPythonGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\MiniPython\MiniPython.cs,MiniPythonGrammar,The following statement contains a magic number: RegisterOperators (2' "*"' "/");  
Magic Number,Irony.Samples.MiniPython,MiniPythonGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\MiniPython\MiniPython.cs,MiniPythonGrammar,The following statement contains a magic number: RegisterOperators (3' Associativity.Right' "**");  
Magic Number,Irony.Samples.SQL,SqlGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators (10' "*"' "/"' "%");  
Magic Number,Irony.Samples.SQL,SqlGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators (9' "+"' "-");  
Magic Number,Irony.Samples.SQL,SqlGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators (8' "="' ">"' "<"' ">="' "<="' "<>"' "!="' "!<"' "!>");  
Magic Number,Irony.Samples.SQL,SqlGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators (7' "^"' "&"' "|");  
Magic Number,Irony.Samples.SQL,SqlGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators (6' "NOT");  
Magic Number,Irony.Samples.SQL,SqlGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators (5' "AND");  
Magic Number,Irony.Samples.SQL,SqlGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\SQL\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators (4' "OR"' "LIKE"' "IN");  
Missing Default,Irony.Samples.CSharp,CSharpGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\CSharp\CSharpGrammar.cs,OnResolvingConflict,The following switch statement is missing a default case: switch (args.Context.CurrentParserInput.Term.Name) {  case "<":  	args.Scanner.BeginPreview ();  	int ltCount = 0;  	string previewSym;  	while (true) {  		//Find first token ahead (using preview mode) that is either end of generic parameter (">") or something else  		Token preview;  		do {  			preview = args.Scanner.GetToken ();  		} while (_skipTokensInPreview.Contains (preview.Terminal) && preview.Terminal != base.Eof);  		//See what did we find  		previewSym = preview.Terminal.Name;  		if (previewSym == "<")  			ltCount++;  		else if (previewSym == ">" && ltCount > 0) {  			ltCount--;  			continue;  		} else  			break;  	}  	//if we see ">"' then it is type argument' not operator  	if (previewSym == ">")  		args.Result = ParserActionType.Shift;  	else  		args.Result = ParserActionType.Reduce;  	args.Scanner.EndPreview (true);  	//keep previewed tokens; important to keep ">>" matched to two ">" symbols' not one combined symbol (see method below)  	return;  }  
Missing Default,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiToken,The following switch statement is missing a default case: switch (wikiTerm.TermType) {  case WikiTermType.Element:  	_output.Append (wikiTerm.OpenHtmlTag);  	_output.Append (wikiTerm.CloseHtmlTag);  	break;  case WikiTermType.Format:  	ProcessFormatTag (token);  	break;  case WikiTermType.Heading:  case WikiTermType.List:  	_output.Append (wikiTerm.OpenHtmlTag);  	_currentHeader = wikiTerm;  	break;  case WikiTermType.Block:  	ProcessWikiBlockTag (token);  	break;  case WikiTermType.Text:  	_output.Append (HtmlEncode (token.ValueString));  	break;  case WikiTermType.Table:  	if (_insideCell)  		_output.Append (_lastTableTag.CloseHtmlTag);  	//write out </td> or </th>  	//We do not write opening tag immediately: we need to know if it is the last table tag on the line.  	// if yes' we don't write it at all; _lastTableTag will be cleared when we start new line  	_lastTableTag = wikiTerm as WikiTagTerminal;  	_insideCell = false;  	break;  }  
Missing Default,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following switch statement is missing a default case: switch (term.BlockType) {  case WikiBlockType.EscapedText:  case WikiBlockType.CodeBlock:  	_output.Append (term.OpenHtmlTag);  	_output.Append (HtmlEncode (token.ValueString));  	_output.AppendLine (term.CloseHtmlTag);  	break;  case WikiBlockType.Anchor:  	_output.Append ("<a name=\"" + token.ValueString + "\"/>");  	break;  case WikiBlockType.LinkToAnchor:  	_output.Append ("<a href=\"#" + token.ValueString + "\">" + HtmlEncode (token.ValueString) + "</a>");  	break;  case WikiBlockType.Url:  case WikiBlockType.FileLink:  	template = "<a href=\"{0}\">{1}</a>";  	segments = token.ValueString.Split ('|');  	if (segments.Length > 1)  		_output.Append (string.Format (template' segments [1]' segments [0]));  	else  		_output.Append (string.Format (template' segments [0]' segments [0]));  	break;  case WikiBlockType.Image:  	segments = token.ValueString.Split ('|');  	switch (segments.Length) {  	case 1:  		template = "<img src=\"{0}\"/>";  		_output.Append (string.Format (template' segments [0]));  		break;  	case 2:  		template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";  		_output.Append (string.Format (template' segments [0]' segments [1]));  		break;  	case 3:  		template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";  		_output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  		break;  	}  	//switch segments.Length  	break;  }  
Missing Default,Irony.Samples,WikiHtmlConverter,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\Wiki\WikiHtmlConverter.cs,ProcessWikiBlockTag,The following switch statement is missing a default case: switch (segments.Length) {  case 1:  	template = "<img src=\"{0}\"/>";  	_output.Append (string.Format (template' segments [0]));  	break;  case 2:  	template = "<img src=\"{1}\" alt=\"{0}\" title=\"{0}\" />";  	_output.Append (string.Format (template' segments [0]' segments [1]));  	break;  case 3:  	template = "<a href=\"{2}\"><img src=\"{1}\" alt=\"{0}\" title=\"{0}\" /></a>";  	_output.Append (string.Format (template' segments [0]' segments [1]' segments [2]));  	break;  }  
Missing Default,Irony.Samples.FullTextSearch,SearchGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,ConvertQuery,The following switch statement is missing a default case: switch (op) {  case "":  case "&":  case "and":  	sqlOp = " AND ";  	type = TermType.Inflectional;  	break;  case "-":  	sqlOp = " AND NOT ";  	break;  case "|":  case "or":  	sqlOp = " OR ";  	break;  }  
Missing Default,Irony.Samples.FullTextSearch,SearchGrammar,F:\newReposMay17\KevinHoward_Irony\Irony.Samples\FullTextSearchQueryConverter\SearchGrammar.cs,ConvertQuery,The following switch statement is missing a default case: switch (type) {  case TermType.Inflectional:  	result = node.Token.ValueString;  	if (result.EndsWith ("*"))  		result = "\"" + result + "\"";  	else  		result = " FORMSOF (INFLECTIONAL' " + result + ") ";  	break;  case TermType.Exact:  	result = node.Token.ValueString;  	break;  }  
