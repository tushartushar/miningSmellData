Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The length of the statement  "			var useShadowCopying = !(string.Equals (setting' "off"' StringComparison.OrdinalIgnoreCase) || string.Equals (setting' "false"' StringComparison.OrdinalIgnoreCase)); " is 165.
Long Statement,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The length of the statement  "			runner = runnerDomain.CreateInstanceFromAndUnwrap (Assembly.GetExecutingAssembly ().Location' typeof(AppRunner).FullName) as AppRunner; " is 135.
Long Statement,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,CreateNewDomain,The length of the statement  "	return AppDomain.CreateDomain ("CC.Net"' null' AppDomain.CurrentDomain.BaseDirectory' AppDomain.CurrentDomain.RelativeSearchPath' useShadowCopying); " is 148.
Empty Catch Block,ThoughtWorks.CruiseControl.Console,AppRunner,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\AppRunner.cs,Stop,The method has an empty catch block.
Empty Catch Block,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The method has an empty catch block.
Magic Number,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The following statement contains a magic number: using (FileSystemWatcher watcher = new FileSystemWatcher (AppDomain.CurrentDomain.BaseDirectory' "*.dll")) {  	AppRunner runner = null;  	// Start monitoring file changes  	watcher.Changed += delegate (object sender' FileSystemEventArgs e) {  		if (!restart) {  			lock (lockObject) {  				try {  					runner.Stop ("One or more DLLs have changed");  				} catch (RemotingException) {  					// Sometimes this exception occurs - the lock statement should catch it' but...  				}  			}  		}  		restart = true;  		restartTime = DateTime.Now.AddSeconds (10);  	};  	watcher.NotifyFilter = NotifyFilters.CreationTime | NotifyFilters.LastWrite | NotifyFilters.Size;  	watcher.EnableRaisingEvents = true;  	// Begin the main application loop  	while (restart) {  		restart = false;  		// Load the domain and start the runner  		// Allow the user to turn shadow-copying off  		var setting = ConfigurationManager.AppSettings ["ShadowCopy"] ?? string.Empty;  		var useShadowCopying = !(string.Equals (setting' "off"' StringComparison.OrdinalIgnoreCase) || string.Equals (setting' "false"' StringComparison.OrdinalIgnoreCase));  		AppDomain runnerDomain;  		try {  			runnerDomain = CreateNewDomain (useShadowCopying);  		} catch (FileLoadException) {  			// Unable to use shadow-copying (no user profile?)' therefore turn off shadow-copying  			useShadowCopying = false;  			runnerDomain = CreateNewDomain (useShadowCopying);  		}  		runner = runnerDomain.CreateInstanceFromAndUnwrap (Assembly.GetExecutingAssembly ().Location' typeof(AppRunner).FullName) as AppRunner;  		result = runner.Run (args' useShadowCopying);  		AppDomain.Unload (runnerDomain);  		// Allow any change events to finish (i.e. if multiple files are copied)  		while (DateTime.Now < restartTime) {  			Thread.Sleep (500);  		}  	}  }  
Magic Number,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The following statement contains a magic number: using (FileSystemWatcher watcher = new FileSystemWatcher (AppDomain.CurrentDomain.BaseDirectory' "*.dll")) {  	AppRunner runner = null;  	// Start monitoring file changes  	watcher.Changed += delegate (object sender' FileSystemEventArgs e) {  		if (!restart) {  			lock (lockObject) {  				try {  					runner.Stop ("One or more DLLs have changed");  				} catch (RemotingException) {  					// Sometimes this exception occurs - the lock statement should catch it' but...  				}  			}  		}  		restart = true;  		restartTime = DateTime.Now.AddSeconds (10);  	};  	watcher.NotifyFilter = NotifyFilters.CreationTime | NotifyFilters.LastWrite | NotifyFilters.Size;  	watcher.EnableRaisingEvents = true;  	// Begin the main application loop  	while (restart) {  		restart = false;  		// Load the domain and start the runner  		// Allow the user to turn shadow-copying off  		var setting = ConfigurationManager.AppSettings ["ShadowCopy"] ?? string.Empty;  		var useShadowCopying = !(string.Equals (setting' "off"' StringComparison.OrdinalIgnoreCase) || string.Equals (setting' "false"' StringComparison.OrdinalIgnoreCase));  		AppDomain runnerDomain;  		try {  			runnerDomain = CreateNewDomain (useShadowCopying);  		} catch (FileLoadException) {  			// Unable to use shadow-copying (no user profile?)' therefore turn off shadow-copying  			useShadowCopying = false;  			runnerDomain = CreateNewDomain (useShadowCopying);  		}  		runner = runnerDomain.CreateInstanceFromAndUnwrap (Assembly.GetExecutingAssembly ().Location' typeof(AppRunner).FullName) as AppRunner;  		result = runner.Run (args' useShadowCopying);  		AppDomain.Unload (runnerDomain);  		// Allow any change events to finish (i.e. if multiple files are copied)  		while (DateTime.Now < restartTime) {  			Thread.Sleep (500);  		}  	}  }  
Magic Number,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The following statement contains a magic number: watcher.Changed += delegate (object sender' FileSystemEventArgs e) {  	if (!restart) {  		lock (lockObject) {  			try {  				runner.Stop ("One or more DLLs have changed");  			} catch (RemotingException) {  				// Sometimes this exception occurs - the lock statement should catch it' but...  			}  		}  	}  	restart = true;  	restartTime = DateTime.Now.AddSeconds (10);  };  
Magic Number,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The following statement contains a magic number: restartTime = DateTime.Now.AddSeconds (10);  
Magic Number,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The following statement contains a magic number: while (restart) {  	restart = false;  	// Load the domain and start the runner  	// Allow the user to turn shadow-copying off  	var setting = ConfigurationManager.AppSettings ["ShadowCopy"] ?? string.Empty;  	var useShadowCopying = !(string.Equals (setting' "off"' StringComparison.OrdinalIgnoreCase) || string.Equals (setting' "false"' StringComparison.OrdinalIgnoreCase));  	AppDomain runnerDomain;  	try {  		runnerDomain = CreateNewDomain (useShadowCopying);  	} catch (FileLoadException) {  		// Unable to use shadow-copying (no user profile?)' therefore turn off shadow-copying  		useShadowCopying = false;  		runnerDomain = CreateNewDomain (useShadowCopying);  	}  	runner = runnerDomain.CreateInstanceFromAndUnwrap (Assembly.GetExecutingAssembly ().Location' typeof(AppRunner).FullName) as AppRunner;  	result = runner.Run (args' useShadowCopying);  	AppDomain.Unload (runnerDomain);  	// Allow any change events to finish (i.e. if multiple files are copied)  	while (DateTime.Now < restartTime) {  		Thread.Sleep (500);  	}  }  
Magic Number,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The following statement contains a magic number: while (DateTime.Now < restartTime) {  	Thread.Sleep (500);  }  
Magic Number,ThoughtWorks.CruiseControl.Console,ConsoleMain,F:\newReposMay17\ccnet_CruiseControl.NET\project\console\ConsoleMain.cs,Main,The following statement contains a magic number: Thread.Sleep (500);  
