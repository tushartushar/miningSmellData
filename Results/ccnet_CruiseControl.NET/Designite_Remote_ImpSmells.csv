Implementation smell,Namespace,Class,File,Method,Description
Long Method,ThoughtWorks.CruiseControl.Remote.Monitor,Server,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\Server.cs,OnWatcherUpdate,The method has 108 lines of code.
Complex Method,ThoughtWorks.CruiseControl.Remote,CruiseServerSnapshot,C:\repos\ccnet_CruiseControl.NET\project\Remote\CruiseServerSnapshot.cs,IsQueueSetSnapshotChanged,Cyclomatic complexity of the method is 11
Complex Method,ThoughtWorks.CruiseControl.Remote.Monitor,Project,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\Project.cs,Update,Cyclomatic complexity of the method is 17
Complex Method,ThoughtWorks.CruiseControl.Remote.Monitor,Server,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\Server.cs,OnWatcherUpdate,Cyclomatic complexity of the method is 18
Complex Method,ThoughtWorks.CruiseControl.Remote.Mono,Option,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,ThoughtWorks.CruiseControl.Remote,ProjectStatus,C:\repos\ccnet_CruiseControl.NET\project\Remote\ProjectStatus.cs,ProjectStatus,The method has 14 parameters. Parameters: name' category' activity' buildStatus' status' webURL' lastBuildDate' lastBuildLabel' lastSuccessfulBuildLabel' nextBuildTime' buildStage' queue' queuePriority' parameters
Long Parameter List,ThoughtWorks.CruiseControl.Remote,ProjectStatus,C:\repos\ccnet_CruiseControl.NET\project\Remote\ProjectStatus.cs,ProjectStatus,The method has 14 parameters. Parameters: name' category' activity' buildStatus' status' webURL' lastBuildDate' lastBuildLabel' lastSuccessfulBuildLabel' nextBuildTime' buildStage' queue' queuePriority' parameters
Long Parameter List,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,ThoughtWorks.CruiseControl.Remote,EncryptingConnection,C:\repos\ccnet_CruiseControl.NET\project\Remote\EncryptingConnection.cs,InitialisePassword,The length of the statement  "                    throw new CommunicationsException("Server did not allow the connection to be secured: " + loginResponse.ConcatenateErrors()); " is 125.
Long Statement,ThoughtWorks.CruiseControl.Remote,NameValuePairSerialiser,C:\repos\ccnet_CruiseControl.NET\project\Remote\NameValuePairSerialiser.cs,ReadList,The length of the statement  "                    throw new NetReflectorException(string.Concat("A name/value pair list cannot directly contain attributes."' Environment.NewLine' "XML: "' node.OuterXml)); " is 154.
Long Statement,ThoughtWorks.CruiseControl.Remote,NameValuePairSerialiser,C:\repos\ccnet_CruiseControl.NET\project\Remote\NameValuePairSerialiser.cs,ReadValue,The length of the statement  "                throw new NetReflectorException(string.Concat("value elements cannot contain any sub-items."' Environment.NewLine' "XML: "' valueElement.OuterXml)); " is 148.
Long Statement,ThoughtWorks.CruiseControl.Remote,CruiseServerSnapshot,C:\repos\ccnet_CruiseControl.NET\project\Remote\CruiseServerSnapshot.cs,Equals,The length of the statement  "			return object.Equals(this.projectStatuses' other.projectStatuses) && object.Equals(this.queueSetSnapshot' other.queueSetSnapshot); " is 130.
Long Statement,ThoughtWorks.CruiseControl.Remote,IntegrationRequest,C:\repos\ccnet_CruiseControl.NET\project\Remote\IntegrationRequest.cs,ToString,The length of the statement  "                return string.Format(System.Globalization.CultureInfo.CurrentCulture'"{0} triggered a build ({1}) from {2}"' UserName' BuildCondition' Source); " is 143.
Long Statement,ThoughtWorks.CruiseControl.Remote,IntegrationRequest,C:\repos\ccnet_CruiseControl.NET\project\Remote\IntegrationRequest.cs,ToString,The length of the statement  "                return string.Format(System.Globalization.CultureInfo.CurrentCulture'"Build ({1}) triggered from {0}"' Source' BuildCondition); " is 127.
Long Statement,ThoughtWorks.CruiseControl.Remote,NoSuchProjectException,C:\repos\ccnet_CruiseControl.NET\project\Remote\NoSuchProjectException.cs,ExceptionMessage,The length of the statement  "			return string.Format(System.Globalization.CultureInfo.CurrentCulture'"The project '{0}' does not exist on the CCNet server."' project); " is 135.
Long Statement,ThoughtWorks.CruiseControl.Remote,XmlConversionUtil,C:\repos\ccnet_CruiseControl.NET\project\Remote\XmlConversionUtil.cs,FindMessageType,The length of the statement  "                                string.Format(System.Globalization.CultureInfo.CurrentCulture'"Duplicate message type found: '{0}'.\r\nFirst type: {1}\r\nSecond type: {2}"' " is 140.
Long Statement,ThoughtWorks.CruiseControl.Remote.Mono,Option,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,Parse,The length of the statement  "							CultureInfo.CurrentCulture' c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' " is 122.
Long Statement,ThoughtWorks.CruiseControl.Remote.Mono,Option,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,ParsePrototype,The length of the statement  "						string.Format (CultureInfo.CurrentCulture' "Cannot provide key/value separators for Options taking {0} value(s)."' count)' " is 122.
Long Statement,ThoughtWorks.CruiseControl.Remote.Parameters,DateParameter,C:\repos\ccnet_CruiseControl.NET\project\Remote\Parameters\DateParameter.cs,CalculateDate,The length of the statement  "                date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' System.Convert.ToInt32(day.Value' CultureInfo.CurrentCulture)); " is 122.
Complex Conditional,ThoughtWorks.CruiseControl.Remote.Mono,Option,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Complex Conditional,ThoughtWorks.CruiseControl.Remote.Parameters,SelectParameter,C:\repos\ccnet_CruiseControl.NET\project\Remote\Parameters\SelectParameter.cs,Validate,The conditional expression  "(string.IsNullOrEmpty(allowedValue.Name) && (allowedValue.Value == value)) ||                          (!string.IsNullOrEmpty(allowedValue.Name) && (allowedValue.Name == value))"  is complex.
Empty Catch Block,ThoughtWorks.CruiseControl.Remote.Monitor,Project,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\Project.cs,LoadBuilds,The method has an empty catch block.
Empty Catch Block,ThoughtWorks.CruiseControl.Remote.Monitor,Project,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\Project.cs,LoadBuilds,The method has an empty catch block.
Empty Catch Block,ThoughtWorks.CruiseControl.Remote.Monitor,Server,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\Server.cs,InitialiseServer,The method has an empty catch block.
Magic Number,ThoughtWorks.CruiseControl.Remote,EncryptingConnection,C:\repos\ccnet_CruiseControl.NET\project\Remote\EncryptingConnection.cs,InitialisePassword,The following statement contains a magic number: try              {                  // Request the public key                  var publicKeyRequest = new ServerRequest();                  var publicKeyResponse = innerConnection.SendMessage("RetrievePublicKey"' publicKeyRequest);                  if (publicKeyResponse.Result == ResponseResult.Failure)                  {                      throw new CommunicationsException("Server does not export a public key: " + publicKeyResponse.ConcatenateErrors());                  }                    // Generate a password                   var crypto = new RijndaelManaged();                  crypto.KeySize = 128;                  crypto.GenerateKey();                  crypto.GenerateIV();                  cryptoKey = crypto.Key;                  cryptoIv = crypto.IV;                                    // Encrypt the password                  var passwordKey = Convert.ToBase64String(cryptoKey);                  var passwordIv = Convert.ToBase64String(cryptoIv);                  var provider = new RSACryptoServiceProvider();                  provider.FromXmlString((publicKeyResponse as DataResponse).Data);                  var encryptedPasswordKey = Convert.ToBase64String(                      provider.Encrypt(                          UTF8Encoding.UTF8.GetBytes(passwordKey)' false));                  var encryptedPasswordIv = Convert.ToBase64String(                      provider.Encrypt(                          UTF8Encoding.UTF8.GetBytes(passwordIv)' false));                    // Send the password to the server                  var loginRequest = new LoginRequest(encryptedPasswordKey);                  loginRequest.AddCredential(LoginRequest.PasswordCredential' encryptedPasswordIv);                  var loginResponse = innerConnection.SendMessage("InitialiseSecureConnection"' loginRequest);                  if (loginResponse.Result == ResponseResult.Failure)                  {                      throw new CommunicationsException("Server did not allow the connection to be secured: " + loginResponse.ConcatenateErrors());                  }              }              catch              {                  // Reset the password on any exception                  cryptoIv = new byte[0];                  cryptoKey = new byte[0];                  throw;              }
Magic Number,ThoughtWorks.CruiseControl.Remote,CruiseServerRemotingClient,C:\repos\ccnet_CruiseControl.NET\project\Remote\CruiseServerRemotingClient.cs,CruiseServerRemotingClient,The following statement contains a magic number: if (builder.Port == -1) builder.Port = 21234;
Magic Number,ThoughtWorks.CruiseControl.Remote,RemotingConnection,C:\repos\ccnet_CruiseControl.NET\project\Remote\RemotingConnection.cs,RemotingConnection,The following statement contains a magic number: if (builder.Port == -1) builder.Port = 21234;
Magic Number,ThoughtWorks.CruiseControl.Remote,CruiseServerSnapshot,C:\repos\ccnet_CruiseControl.NET\project\Remote\CruiseServerSnapshot.cs,GetHashCode,The following statement contains a magic number: unchecked {  				if (projectStatuses != null) hashCode += 1000000007 * projectStatuses.GetHashCode();   				if (queueSetSnapshot != null) hashCode += 1000000009 * queueSetSnapshot.GetHashCode();   			}
Magic Number,ThoughtWorks.CruiseControl.Remote,CruiseServerSnapshot,C:\repos\ccnet_CruiseControl.NET\project\Remote\CruiseServerSnapshot.cs,GetHashCode,The following statement contains a magic number: unchecked {  				if (projectStatuses != null) hashCode += 1000000007 * projectStatuses.GetHashCode();   				if (queueSetSnapshot != null) hashCode += 1000000009 * queueSetSnapshot.GetHashCode();   			}
Magic Number,ThoughtWorks.CruiseControl.Remote.Monitor,PollingServerWatcher,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\PollingServerWatcher.cs,Poll,The following statement contains a magic number: while (!disposing)              {                  Thread.Sleep(500);                  if (!disposing && (DateTime.Now > nextRefresh))                  {                      RetrieveSnapshot();                      nextRefresh = DateTime.Now.AddSeconds(interval);                  }              }
Magic Number,ThoughtWorks.CruiseControl.Remote.Monitor,Project,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\Project.cs,LoadBuilds,The following statement contains a magic number: lock (lockObject)              {                  buildsLoaded = true;                  if (builds.Count == 0)                  {                      // This is the first load - so load all of the builds                      string[] buildNames = { };                      try                      {                          client.ProcessSingleAction(p =>                          {                              buildNames = client.GetBuildNames(p.Name);                          }' InnerProject);                      }                      catch                      {                           // Ignore any errors - just means that no builds will be loaded                      }                      foreach (var buildName in buildNames ?? new string[0])                      {                          builds.Add(buildName' new ProjectBuild(buildName' this' client));                      }                  }                  else                  {                      if (project.LastBuildDate != value.LastBuildDate)                      {                          // Last build date has changed' therefore there will be one or more builds to load                          string[] buildNames = { };                          try                          {                              client.ProcessSingleAction(p =>                              {                                  // Cannot pass in a date' only a number' so guessing there will be no more then                                   // 10 builds since the last build                                  buildNames = client.GetMostRecentBuildNames(p.Name' 10);                              }' InnerProject);                          }                          catch                          {                              // Ignore any errors - just means that no builds will be loaded                          }                          foreach (var buildName in buildNames)                          {                              if (!builds.ContainsKey(buildName))                              {                                  builds.Add(buildName' new ProjectBuild(buildName' this' client));                              }                          }                      }                  }              }
Magic Number,ThoughtWorks.CruiseControl.Remote.Monitor,ProjectBuild,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\ProjectBuild.cs,ProjectBuild,The following statement contains a magic number: BuildDate = DateTime.ParseExact(name.Substring(3' 14)' "yyyyMMddHHmmss"' CultureInfo.InvariantCulture);
Magic Number,ThoughtWorks.CruiseControl.Remote.Monitor,ProjectBuild,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\ProjectBuild.cs,ProjectBuild,The following statement contains a magic number: BuildDate = DateTime.ParseExact(name.Substring(3' 14)' "yyyyMMddHHmmss"' CultureInfo.InvariantCulture);
Magic Number,ThoughtWorks.CruiseControl.Remote.Monitor,ProjectBuild,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\ProjectBuild.cs,ProjectBuild,The following statement contains a magic number: IsSuccessful = (name.Substring(17' 1) == "L");
Magic Number,ThoughtWorks.CruiseControl.Remote.Monitor,ProjectBuild,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\ProjectBuild.cs,ProjectBuild,The following statement contains a magic number: if (IsSuccessful)              {                  var startPos = name.IndexOf("build."' StringComparison.OrdinalIgnoreCase) + 6;                  var endPos = name.LastIndexOf('.');                  Label = name.Substring(startPos' endPos - startPos);              }
Magic Number,ThoughtWorks.CruiseControl.Remote.Monitor,Server,C:\repos\ccnet_CruiseControl.NET\project\Remote\Monitor\Server.cs,OnWatcherUpdate,The following statement contains a magic number: syncLock.AcquireWriterLock(10000);
Magic Number,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;  				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				bool indent = false;  				string prefix = new string (' '' OptionWidth+2);  				foreach (string line in GetLines (localizer (GetDescription (p.Description)))) {  					if (indent)   						o.Write (prefix);  					o.WriteLine (line);  					indent = true;  				}  			}
Magic Number,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 1;
Magic Number,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,GetLines,The following statement contains a magic number: do {  				end = GetLineEnd (start' length' description);  				char c = description [end-1];  				if (char.IsWhiteSpace (c))  					--end;  				bool writeContinuation = end != description.Length && !IsEolChar (c);  				string line = description.Substring (start' end - start) +  						(writeContinuation ? "-" : "");  				yield return line;  				start = end;  				if (char.IsWhiteSpace (c))  					++start;  				length = 80 - OptionWidth - 2 - 1;  			} while (end < description.Length);
Magic Number,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,GetLines,The following statement contains a magic number: do {  				end = GetLineEnd (start' length' description);  				char c = description [end-1];  				if (char.IsWhiteSpace (c))  					--end;  				bool writeContinuation = end != description.Length && !IsEolChar (c);  				string line = description.Substring (start' end - start) +  						(writeContinuation ? "-" : "");  				yield return line;  				start = end;  				if (char.IsWhiteSpace (c))  					++start;  				length = 80 - OptionWidth - 2 - 1;  			} while (end < description.Length);
Magic Number,ThoughtWorks.CruiseControl.Remote.Parameters,DateParameter,C:\repos\ccnet_CruiseControl.NET\project\Remote\Parameters\DateParameter.cs,CalculateDate,The following statement contains a magic number: if (value.StartsWith("today"' StringComparison.CurrentCultureIgnoreCase))              {                  date = CalculateOperation(value.Substring(5)' DateTime.Today);              }              else if (dayOfWeekRegex.IsMatch(value))              {                  var day = dayOfWeekRegex.Match(value).Value;                  var diff = (int)DateTime.Today.DayOfWeek;                  date = DateTime.Today.AddDays(System.Convert.ToInt32(day' CultureInfo.CurrentCulture) - diff);                  date = CalculateOperation(value.Substring(12)' date);              }              else if (dayOfMonthRegex.IsMatch(value))              {                  var day = dayOfMonthRegex.Match(value);                  date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' System.Convert.ToInt32(day.Value' CultureInfo.CurrentCulture));                  date = CalculateOperation(value.Substring(day.Value.Length + 12)' date);              }              else              {                  date = DateTime.Parse(value' CultureInfo.CurrentCulture);              }
Magic Number,ThoughtWorks.CruiseControl.Remote.Parameters,DateParameter,C:\repos\ccnet_CruiseControl.NET\project\Remote\Parameters\DateParameter.cs,CalculateDate,The following statement contains a magic number: if (value.StartsWith("today"' StringComparison.CurrentCultureIgnoreCase))              {                  date = CalculateOperation(value.Substring(5)' DateTime.Today);              }              else if (dayOfWeekRegex.IsMatch(value))              {                  var day = dayOfWeekRegex.Match(value).Value;                  var diff = (int)DateTime.Today.DayOfWeek;                  date = DateTime.Today.AddDays(System.Convert.ToInt32(day' CultureInfo.CurrentCulture) - diff);                  date = CalculateOperation(value.Substring(12)' date);              }              else if (dayOfMonthRegex.IsMatch(value))              {                  var day = dayOfMonthRegex.Match(value);                  date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' System.Convert.ToInt32(day.Value' CultureInfo.CurrentCulture));                  date = CalculateOperation(value.Substring(day.Value.Length + 12)' date);              }              else              {                  date = DateTime.Parse(value' CultureInfo.CurrentCulture);              }
Magic Number,ThoughtWorks.CruiseControl.Remote.Parameters,DateParameter,C:\repos\ccnet_CruiseControl.NET\project\Remote\Parameters\DateParameter.cs,CalculateDate,The following statement contains a magic number: if (value.StartsWith("today"' StringComparison.CurrentCultureIgnoreCase))              {                  date = CalculateOperation(value.Substring(5)' DateTime.Today);              }              else if (dayOfWeekRegex.IsMatch(value))              {                  var day = dayOfWeekRegex.Match(value).Value;                  var diff = (int)DateTime.Today.DayOfWeek;                  date = DateTime.Today.AddDays(System.Convert.ToInt32(day' CultureInfo.CurrentCulture) - diff);                  date = CalculateOperation(value.Substring(12)' date);              }              else if (dayOfMonthRegex.IsMatch(value))              {                  var day = dayOfMonthRegex.Match(value);                  date = new DateTime(DateTime.Now.Year' DateTime.Now.Month' System.Convert.ToInt32(day.Value' CultureInfo.CurrentCulture));                  date = CalculateOperation(value.Substring(day.Value.Length + 12)' date);              }              else              {                  date = DateTime.Parse(value' CultureInfo.CurrentCulture);              }
Missing Default,ThoughtWorks.CruiseControl.Remote.Mono,OptionSet,C:\repos\ccnet_CruiseControl.NET\project\Remote\Mono\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
