Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,CruiseControl.Core.Utilities,ProcessInfo,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessInfo.cs,ProcessInfo,The method has 5 parameters. Parameters: filename' arguments' workingDirectory' priority' successExitCodes
Long Parameter List,CruiseControl.Core.Utilities,ProcessResult,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessResult.cs,ProcessResult,The method has 5 parameters. Parameters: fileSystem' outputPath' exitCode' timedOut' failed
Long Statement,CruiseControl.Core.Utilities,RunnableProcess,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,Kill,The length of the statement  "                            string.Format(CultureInfo.CurrentCulture' @"The killed process {0} did not terminate within the allotted timeout period {1}.  The process or one of its child processes may not have died.  This may create problems when trying to re-execute the process.  It may be necessary to reboot the server to recover."' " is 307.
Long Statement,CruiseControl.Core.Tasks,ForceBuild,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Tasks\ForceBuild.cs,SendRemoteRequest,The length of the statement  "                var message = "Force build failed for '" + ProjectName + "' at '" + this.ServerAddress + "' - result code " + error.ResultCode; " is 127.
Empty Catch Block,CruiseControl.Core.Utilities,ProcessExecutor,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,PopulateKillProcess,The method has an empty catch block.
Magic Number,CruiseControl.Core,Project,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Integrate,The following statement contains a magic number: logger.Debug("Total duration for integration for '{0}' was {1:#'##0.000}s"'                  this.Name'                  (double)stopwatch.ElapsedMilliseconds / 1000);
Magic Number,CruiseControl.Core,Project,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Main,The following statement contains a magic number: try              {                  try                  {                      while (this.State == ProjectState.Running)                      {                          // Sleep a while so we don't overwork the server - assuming our minimum accuracy                          // is one second hence firing at 2Hz                          Thread.Sleep(500);                          CheckForIntegration();                      }                  }                  catch (Exception error)                  {                      logger.ErrorException("An error has occurred in project '" + this.Name + "'"' error);                      this.MainThreadException = error;                  }                    // Clean up                  foreach (var trigger in this.Triggers)                  {                      trigger.CleanUp();                  }                    this.OnStopped();              }              finally              {                  // Make sure this project is marked as stopped no matter how it is stopped                  this.State = ProjectState.Stopped;                  logger.Debug("Project '{0}' has stopped"' this.Name);              }
Magic Number,CruiseControl.Core,Project,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,CheckForIntegration,The following statement contains a magic number: if (request != null)              {                  logger.Info(                      "Received integration request from '{0}' for '{1}'"'                      request.SourceTrigger'                      this.Name);                    // Check if we can integrate                  var context = new IntegrationContext(this);                  this.AskToIntegrate(context);                  // TODO: make the time out configurable                  if (context.Wait(TimeSpan.FromDays(7)))                  {                      // Make sure there is always a state object                      if (this.PersistedState == null)                      {                          this.PersistedState = new PersistedProjectState();                      }                        // Perform the actual integration                      logger.Info("Starting integration for '{0}'"' this.Name);                      var startTime = this.Clock.Now;                      var status = IntegrationStatus.Unknown;                      try                      {                          status = this.Integrate(request);                      }                      catch (Exception error)                      {                          logger.ErrorException("An unexpected error crashed the integration"' error);                          status = IntegrationStatus.Error;                      }                      finally                      {                          this.PersistedState.LastIntegration = new IntegrationSummary                                                                    {                                                                        StartTime = startTime'                                                                        FinishTime = this.Clock.Now'                                                                        Status = status                                                                    };                          this.SavePersistedState();                      }                      logger.Info("Completed integration for '{0}'"' this.Name);                  }                  else                  {                      logger.Info("Cancelling integration for '{0}'"' this.Name);                  }              }
Magic Number,CruiseControl.Core,Task,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Task.cs,Run,The following statement contains a magic number: logger.Debug("Task '{0}' has completed in {1:#'##0.000}s"'                  this.NameOrType'                  (double)stopwatch.ElapsedMilliseconds / 1000);
Magic Number,CruiseControl.Core,TaskExecutionContext,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\TaskExecutionContext.cs,AddModifications,The following statement contains a magic number: try              {                  lockAcquired = this.modificationsLock.TryEnterWriteLock(TimeSpan.FromMinutes(2));                  if (lockAcquired)                  {                      logger.Debug("Adding modification set to context");                      this.modificationsSets.Add(modifications);                  }                  else                  {                      logger.Error("Unable to acquire lock for adding modifications");                      throw new Exception("Unable to acquire lock for adding modifications");                  }              }              finally              {                  if (lockAcquired)                  {                      this.modificationsLock.ExitWriteLock();                  }              }
Magic Number,CruiseControl.Core.Utilities,ProcessExecutor,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,PopulateKillProcess,The following statement contains a magic number: switch (operatingSystem.Platform)              {                  case PlatformID.Win32NT:                      platform = "Windows";                      if ((operatingSystem.Version.Major == 5) && (operatingSystem.Version.Minor == 0))                      {                          logger.Debug("KillByPId(): detected platform is Windows 2000");                          // Windows 2000 doesn't have taskkill.exe' so use kill.exe from the                           // "Windows 2000 Service Pack 4 Support Tools" package from Microsoft's download center                          // (http://www.microsoft.com/Downloads/details.aspx?FamilyID=f08d28f3-b835-4847-b810-bb6539362473&displaylang=en)                          // instead.  It may not exist' but if it doesn't' at least if can be obtained.                          process.StartInfo.FileName = Path.Combine(Win2KSupportToolsDir' "kill.exe");                          process.StartInfo.Arguments = string.Format(CultureInfo.CurrentCulture' "-f {0}"' pid);                          break;                      }                        logger.Debug("KillByPId(): detected platform is Windows (non-2000)");                      process.StartInfo.FileName = Path.Combine(                          Environment.GetFolderPath(Environment.SpecialFolder.System)'                          "taskkill.exe");                      process.StartInfo.Arguments = string.Format(CultureInfo.CurrentCulture' "/pid {0} /t /f"' pid);                      break;                    case PlatformID.Unix:                      // need to execute uname -s to find out if it is a MAC or not                      process.StartInfo.FileName = "uname";                      process.StartInfo.Arguments = "-s";                      process.StartInfo.CreateNoWindow = true;                      process.StartInfo.RedirectStandardOutput = true;                      process.StartInfo.UseShellExecute = false;                      var output = string.Empty;                      var exitCode = -1;                      try                      {                          process.Start();                          process.WaitForExit();                          var standardOutput = process.StandardOutput;                          output = standardOutput.ReadToEnd();                          exitCode = process.ExitCode;                      }                      catch                      {                          // This will always fail on windows                      }                        process.Close();                      if ((exitCode == 0) && (output.Contains("Darwin")))                      {                          logger.Debug("KillByPId(): detected platform is Mac");                          process.StartInfo.FileName = "/bin/kill";                          process.StartInfo.Arguments = string.Format(                              CultureInfo.CurrentCulture'                              "-9 {0}"'                              pid);                          platform = "Mac";                      }                      else                      {                          logger.Debug("KillByPId(): detected platform is *nix");                          process.StartInfo.FileName = "/usr/bin/pkill";                          process.StartInfo.Arguments = string.Format(                              CultureInfo.CurrentCulture' "-9 -g {0}"'                              pid);                          platform = "Unix";                      }                        break;                    default:                      throw new CruiseControlException("Unknown Operating System.");              }
Magic Number,CruiseControl.Core.Utilities,RunnableProcess,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,Kill,The following statement contains a magic number: const int waitForKilledProcessTimeout = 10000;
Magic Number,CruiseControl.Core.Utilities,RunnableProcess,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,Kill,The following statement contains a magic number: logger.Debug(                      "Sending kill to process {0} and waiting {1} seconds for it to exit."'                      process.Id'                      waitForKilledProcessTimeout / 1000);
Magic Number,CruiseControl.Core.Utilities,RunnableProcess,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,CancelEventsAndWait,The following statement contains a magic number: WaitHandle.WaitAll(new WaitHandle[]                                                 {                                                     errorStreamClosed'                                                      outputStreamClosed                                                 }' 1000' true);
Magic Number,CruiseControl.Core.Utilities,UrnHelpers,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\UrnHelpers.cs,ExtractServerUrn,The following statement contains a magic number: if (!IsCCNetUrn(server) || (server.Length == 10))              {                  throw new ArgumentException("Not a valid CC.Net URN");              }
Magic Number,CruiseControl.Core.Utilities,UrnHelpers,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\UrnHelpers.cs,ExtractServerUrn,The following statement contains a magic number: var nextColon = server.IndexOf(':'' 11);
Missing Default,CruiseControl.Core,Task,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Task.cs,CleanUp,The following switch statement is missing a default case: switch (this.State)              {                  case TaskState.Pending:                      this.State = TaskState.Skipped;                      break;                    case TaskState.CheckingConditions:                  case TaskState.Executing:                      this.State = TaskState.Terminated;                      break;              }
Missing Default,CruiseControl.Core.Utilities,ActionInvoker,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,GenerateDefinition,The following switch statement is missing a default case: switch (arguments.DataToInclude)              {                  case DataDefinitions.InputOnly:                      definition.InputData = GenerateMessageFormat(                          messageFormats'                          namespaces'                          method.GetParameters()[0].ParameterType);                      break;                    case DataDefinitions.OutputOnly:                      definition.OutputData = GenerateMessageFormat(                          messageFormats'                          namespaces'                          method.ReturnType);                      break;                    case DataDefinitions.Both:                      definition.InputData = GenerateMessageFormat(                          messageFormats'                          namespaces'                          method.GetParameters()[0].ParameterType);                      definition.OutputData = GenerateMessageFormat(                          messageFormats'                          namespaces'                          method.ReturnType);                      break;              }
Missing Default,CruiseControl.Core.Utilities,ProcessResult,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessResult.cs,ProcessResult,The following switch statement is missing a default case: switch (line[0])                          {                              case 'E':                                  this.standardErrorCount++;                                  break;                                case 'O':                                  this.standardOutputCount++;                                  break;                          }
Missing Default,CruiseControl.Core.Triggers,Multiple,C:\repos\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Triggers\Multiple.cs,OnCheck,The following switch statement is missing a default case: switch (this.Condition)              {                  case CombinationOperator.Or:                      isTripped = this.Triggers.Any(t => t.Check() != null);                      break;                    case CombinationOperator.And:                      isTripped = this.Triggers.All(t => t.Check() != null);                      break;              }
