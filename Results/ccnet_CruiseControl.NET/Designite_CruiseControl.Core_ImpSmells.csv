Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CruiseControl.Core.Utilities,ActionInvoker,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,GenerateDefinition,Cyclomatic complexity of the method is 10
Complex Method,CruiseControl.Core.Utilities,ProcessExecutor,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,PopulateKillProcess,Cyclomatic complexity of the method is 24
Complex Method,CruiseControl.Core.Utilities,ProcessResult,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessResult.cs,ProcessResult,Cyclomatic complexity of the method is 11
Long Parameter List,CruiseControl.Core.Utilities,ProcessInfo,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessInfo.cs,ProcessInfo,The method has 5 parameters.
Long Parameter List,CruiseControl.Core.Utilities,ProcessResult,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessResult.cs,ProcessResult,The method has 5 parameters.
Long Statement,CruiseControl.Core.Channels,WcfChannel,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Channels\WcfChannel.cs,Invoke,The length of the statement  "	logger.Debug ("Invoking '{2}' on '{0}' - {1}"' urn' logId' (arguments == null ? string.Empty : arguments.Action ?? string.Empty)); " is 130.
Long Statement,CruiseControl.Core,Application,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Application.cs,ValidateConfiguration,The length of the statement  "		logger.Fatal ("{0} error(s) were found in the configuration' unable to start server"' this.ValidationLog.NumberOfErrors); " is 121.
Long Statement,CruiseControl.Core,Application,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Application.cs,ValidateConfiguration,The length of the statement  "		logger.Warn ("{0} warnings were found in the configuration' the server may not perform as expected"' this.ValidationLog.NumberOfWarnings); " is 138.
Long Statement,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Locate,The length of the statement  "	if (!name.StartsWith (thisName' StringComparison.CurrentCultureIgnoreCase) && !name.StartsWith (fullName' StringComparison.CurrentCultureIgnoreCase)) { " is 151.
Long Statement,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Integrate,The length of the statement  "	logger.Debug ("Total duration for integration for '{0}' was {1:#'##0.000}s"' this.Name' (double)stopwatch.ElapsedMilliseconds / 1000); " is 134.
Long Statement,CruiseControl.Core,Server,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Server.cs,Locate,The length of the statement  "	var item = LocateInChildren (name' this.Children.SelectMany (c => c.ListProjects ())) ?? LocateInChildren (name' this.Children); " is 128.
Long Statement,CruiseControl.Core,Task,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Task.cs,Run,The length of the statement  "	logger.Debug ("Task '{0}' has completed in {1:#'##0.000}s"' this.NameOrType' (double)stopwatch.ElapsedMilliseconds / 1000); " is 123.
Long Statement,CruiseControl.Core.Utilities,ActionInvoker,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,GenerateMessageFormat,The length of the statement  "		var attribute = messageType.Assembly.GetCustomAttributes (typeof(XmlnsDefinitionAttribute)' false).FirstOrDefault (xda => (xda as XmlnsDefinitionAttribute).ClrNamespace == typeNamespace); " is 187.
Long Statement,CruiseControl.Core.Utilities,ActionInvoker,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,GenerateMessageFormat,The length of the statement  "	foreach (var property in messageType.GetProperties (BindingFlags.Public | BindingFlags.Instance).Where (p => p.CanWrite)) { " is 123.
Long Statement,CruiseControl.Core.Utilities,ActionInvoker,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,GenerateMessageFormat,The length of the statement  "		var propertyXml = new XElement ("value"' new XAttribute ("name"' property.Name)' new XAttribute ("type"' property.PropertyType.Name.ToLowerInvariant ())); " is 154.
Long Statement,CruiseControl.Core.Utilities,ActionInvoker,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,Query,The length of the statement  "	var filterRegex = (arguments == null) || string.IsNullOrEmpty (arguments.FilterPattern) ? null : new Regex (arguments.FilterPattern); " is 133.
Long Statement,CruiseControl.Core.Utilities,ActionInvoker,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,ExtractDescription,The length of the statement  "	var attribute = method.GetCustomAttributes (typeof(DescriptionAttribute)' false).FirstOrDefault () as DescriptionAttribute; " is 123.
Long Statement,CruiseControl.Core.Utilities,ActionInvoker,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,FindAction,The length of the statement  "	var methods = itemType.GetMethods (BindingFlags.Public | BindingFlags.Instance).Where (m => m.Name.Equals (actionName' StringComparison.InvariantCultureIgnoreCase)); " is 165.
Long Statement,CruiseControl.Core.Utilities,ProcessExecutor,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,KillByPId,The length of the statement  "		var message = string.Format (CultureInfo.CurrentCulture' "Kill command {0} not found on {1} OS. PID:{2}"' process.StartInfo.FileName' platform' pid); " is 149.
Long Statement,CruiseControl.Core.Utilities,ProcessExecutor,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,PopulateKillProcess,The length of the statement  "		process.StartInfo.FileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.System)' "taskkill.exe"); " is 121.
Long Statement,CruiseControl.Core.Utilities,ProcessExecutor,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,KillProcessesForProject,The length of the statement  "		logger.Debug ("Request to abort process currently running for project {0}' but no process is currently running."' name); " is 120.
Long Statement,CruiseControl.Core.Structure,Queue,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Structure\Queue.cs,GetPriority,The length of the statement  "	return AttachablePropertyServices.TryGetProperty (item' new AttachableMemberIdentifier (typeof(Queue)' "Priority")' out priority) ? priority : null; " is 148.
Long Statement,CruiseControl.Core.Tasks,ForceBuild,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Tasks\ForceBuild.cs,SendRemoteRequest,The length of the statement  "		var message = "Force build failed for '" + ProjectName + "' at '" + this.ServerAddress + "' - result code " + error.ResultCode; " is 127.
Empty Catch Block,CruiseControl.Core.Utilities,ProcessExecutor,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,PopulateKillProcess,The method has an empty catch block.
Magic Number,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Integrate,The following statement contains a magic number: logger.Debug ("Total duration for integration for '{0}' was {1:#'##0.000}s"' this.Name' (double)stopwatch.ElapsedMilliseconds / 1000);  
Magic Number,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Main,The following statement contains a magic number: try {  	try {  		while (this.State == ProjectState.Running) {  			// Sleep a while so we don't overwork the server - assuming our minimum accuracy  			// is one second hence firing at 2Hz  			Thread.Sleep (500);  			CheckForIntegration ();  		}  	} catch (Exception error) {  		logger.ErrorException ("An error has occurred in project '" + this.Name + "'"' error);  		this.MainThreadException = error;  	}  	// Clean up  	foreach (var trigger in this.Triggers) {  		trigger.CleanUp ();  	}  	this.OnStopped ();  } finally {  	// Make sure this project is marked as stopped no matter how it is stopped  	this.State = ProjectState.Stopped;  	logger.Debug ("Project '{0}' has stopped"' this.Name);  }  
Magic Number,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Main,The following statement contains a magic number: try {  	while (this.State == ProjectState.Running) {  		// Sleep a while so we don't overwork the server - assuming our minimum accuracy  		// is one second hence firing at 2Hz  		Thread.Sleep (500);  		CheckForIntegration ();  	}  } catch (Exception error) {  	logger.ErrorException ("An error has occurred in project '" + this.Name + "'"' error);  	this.MainThreadException = error;  }  
Magic Number,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Main,The following statement contains a magic number: while (this.State == ProjectState.Running) {  	// Sleep a while so we don't overwork the server - assuming our minimum accuracy  	// is one second hence firing at 2Hz  	Thread.Sleep (500);  	CheckForIntegration ();  }  
Magic Number,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,Main,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,CheckForIntegration,The following statement contains a magic number: if (request != null) {  	logger.Info ("Received integration request from '{0}' for '{1}'"' request.SourceTrigger' this.Name);  	// Check if we can integrate  	var context = new IntegrationContext (this);  	this.AskToIntegrate (context);  	// TODO: make the time out configurable  	if (context.Wait (TimeSpan.FromDays (7))) {  		// Make sure there is always a state object  		if (this.PersistedState == null) {  			this.PersistedState = new PersistedProjectState ();  		}  		// Perform the actual integration  		logger.Info ("Starting integration for '{0}'"' this.Name);  		var startTime = this.Clock.Now;  		var status = IntegrationStatus.Unknown;  		try {  			status = this.Integrate (request);  		} catch (Exception error) {  			logger.ErrorException ("An unexpected error crashed the integration"' error);  			status = IntegrationStatus.Error;  		} finally {  			this.PersistedState.LastIntegration = new IntegrationSummary {  				StartTime = startTime'  				FinishTime = this.Clock.Now'  				Status = status  			};  			this.SavePersistedState ();  		}  		logger.Info ("Completed integration for '{0}'"' this.Name);  	} else {  		logger.Info ("Cancelling integration for '{0}'"' this.Name);  	}  }  
Magic Number,CruiseControl.Core,Project,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Project.cs,CheckForIntegration,The following statement contains a magic number: if (context.Wait (TimeSpan.FromDays (7))) {  	// Make sure there is always a state object  	if (this.PersistedState == null) {  		this.PersistedState = new PersistedProjectState ();  	}  	// Perform the actual integration  	logger.Info ("Starting integration for '{0}'"' this.Name);  	var startTime = this.Clock.Now;  	var status = IntegrationStatus.Unknown;  	try {  		status = this.Integrate (request);  	} catch (Exception error) {  		logger.ErrorException ("An unexpected error crashed the integration"' error);  		status = IntegrationStatus.Error;  	} finally {  		this.PersistedState.LastIntegration = new IntegrationSummary {  			StartTime = startTime'  			FinishTime = this.Clock.Now'  			Status = status  		};  		this.SavePersistedState ();  	}  	logger.Info ("Completed integration for '{0}'"' this.Name);  } else {  	logger.Info ("Cancelling integration for '{0}'"' this.Name);  }  
Magic Number,CruiseControl.Core,Task,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Task.cs,Run,The following statement contains a magic number: logger.Debug ("Task '{0}' has completed in {1:#'##0.000}s"' this.NameOrType' (double)stopwatch.ElapsedMilliseconds / 1000);  
Magic Number,CruiseControl.Core,TaskExecutionContext,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\TaskExecutionContext.cs,AddModifications,The following statement contains a magic number: try {  	lockAcquired = this.modificationsLock.TryEnterWriteLock (TimeSpan.FromMinutes (2));  	if (lockAcquired) {  		logger.Debug ("Adding modification set to context");  		this.modificationsSets.Add (modifications);  	} else {  		logger.Error ("Unable to acquire lock for adding modifications");  		throw new Exception ("Unable to acquire lock for adding modifications");  	}  } finally {  	if (lockAcquired) {  		this.modificationsLock.ExitWriteLock ();  	}  }  
Magic Number,CruiseControl.Core,TaskExecutionContext,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\TaskExecutionContext.cs,AddModifications,The following statement contains a magic number: lockAcquired = this.modificationsLock.TryEnterWriteLock (TimeSpan.FromMinutes (2));  
Magic Number,CruiseControl.Core.Utilities,ProcessExecutor,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,PopulateKillProcess,The following statement contains a magic number: switch (operatingSystem.Platform) {  case PlatformID.Win32NT:  	platform = "Windows";  	if ((operatingSystem.Version.Major == 5) && (operatingSystem.Version.Minor == 0)) {  		logger.Debug ("KillByPId(): detected platform is Windows 2000");  		// Windows 2000 doesn't have taskkill.exe' so use kill.exe from the   		// "Windows 2000 Service Pack 4 Support Tools" package from Microsoft's download center  		// (http://www.microsoft.com/Downloads/details.aspx?FamilyID=f08d28f3-b835-4847-b810-bb6539362473&displaylang=en)  		// instead.  It may not exist' but if it doesn't' at least if can be obtained.  		process.StartInfo.FileName = Path.Combine (Win2KSupportToolsDir' "kill.exe");  		process.StartInfo.Arguments = string.Format (CultureInfo.CurrentCulture' "-f {0}"' pid);  		break;  	}  	logger.Debug ("KillByPId(): detected platform is Windows (non-2000)");  	process.StartInfo.FileName = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.System)' "taskkill.exe");  	process.StartInfo.Arguments = string.Format (CultureInfo.CurrentCulture' "/pid {0} /t /f"' pid);  	break;  case PlatformID.Unix:  	// need to execute uname -s to find out if it is a MAC or not  	process.StartInfo.FileName = "uname";  	process.StartInfo.Arguments = "-s";  	process.StartInfo.CreateNoWindow = true;  	process.StartInfo.RedirectStandardOutput = true;  	process.StartInfo.UseShellExecute = false;  	var output = string.Empty;  	var exitCode = -1;  	try {  		process.Start ();  		process.WaitForExit ();  		var standardOutput = process.StandardOutput;  		output = standardOutput.ReadToEnd ();  		exitCode = process.ExitCode;  	} catch {  		// This will always fail on windows  	}  	process.Close ();  	if ((exitCode == 0) && (output.Contains ("Darwin"))) {  		logger.Debug ("KillByPId(): detected platform is Mac");  		process.StartInfo.FileName = "/bin/kill";  		process.StartInfo.Arguments = string.Format (CultureInfo.CurrentCulture' "-9 {0}"' pid);  		platform = "Mac";  	} else {  		logger.Debug ("KillByPId(): detected platform is *nix");  		process.StartInfo.FileName = "/usr/bin/pkill";  		process.StartInfo.Arguments = string.Format (CultureInfo.CurrentCulture' "-9 -g {0}"' pid);  		platform = "Unix";  	}  	break;  default:  	throw new CruiseControlException ("Unknown Operating System.");  }  
Magic Number,CruiseControl.Core.Utilities,ProcessExecutor,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessExecutor.cs,PopulateKillProcess,The following statement contains a magic number: if ((operatingSystem.Version.Major == 5) && (operatingSystem.Version.Minor == 0)) {  	logger.Debug ("KillByPId(): detected platform is Windows 2000");  	// Windows 2000 doesn't have taskkill.exe' so use kill.exe from the   	// "Windows 2000 Service Pack 4 Support Tools" package from Microsoft's download center  	// (http://www.microsoft.com/Downloads/details.aspx?FamilyID=f08d28f3-b835-4847-b810-bb6539362473&displaylang=en)  	// instead.  It may not exist' but if it doesn't' at least if can be obtained.  	process.StartInfo.FileName = Path.Combine (Win2KSupportToolsDir' "kill.exe");  	process.StartInfo.Arguments = string.Format (CultureInfo.CurrentCulture' "-f {0}"' pid);  	break;  }  
Magic Number,CruiseControl.Core.Utilities,UrnHelpers,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\UrnHelpers.cs,ExtractServerUrn,The following statement contains a magic number: if (!IsCCNetUrn (server) || (server.Length == 10)) {  	throw new ArgumentException ("Not a valid CC.Net URN");  }  
Missing Default,CruiseControl.Core,Task,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Task.cs,CleanUp,The following switch statement is missing a default case: switch (this.State) {  case TaskState.Pending:  	this.State = TaskState.Skipped;  	break;  case TaskState.CheckingConditions:  case TaskState.Executing:  	this.State = TaskState.Terminated;  	break;  }  
Missing Default,CruiseControl.Core.Utilities,ActionInvoker,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ActionInvoker.cs,GenerateDefinition,The following switch statement is missing a default case: switch (arguments.DataToInclude) {  case DataDefinitions.InputOnly:  	definition.InputData = GenerateMessageFormat (messageFormats' namespaces' method.GetParameters () [0].ParameterType);  	break;  case DataDefinitions.OutputOnly:  	definition.OutputData = GenerateMessageFormat (messageFormats' namespaces' method.ReturnType);  	break;  case DataDefinitions.Both:  	definition.InputData = GenerateMessageFormat (messageFormats' namespaces' method.GetParameters () [0].ParameterType);  	definition.OutputData = GenerateMessageFormat (messageFormats' namespaces' method.ReturnType);  	break;  }  
Missing Default,CruiseControl.Core.Utilities,ProcessResult,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Utilities\ProcessResult.cs,ProcessResult,The following switch statement is missing a default case: switch (line [0]) {  case 'E':  	this.standardErrorCount++;  	break;  case 'O':  	this.standardOutputCount++;  	break;  }  
Missing Default,CruiseControl.Core.Triggers,Multiple,F:\newReposMay17\ccnet_CruiseControl.NET\Playground\CruiseControl.Core\Triggers\Multiple.cs,OnCheck,The following switch statement is missing a default case: switch (this.Condition) {  case CombinationOperator.Or:  	isTripped = this.Triggers.Any (t => t.Check () != null);  	break;  case CombinationOperator.And:  	isTripped = this.Triggers.All (t => t.Check () != null);  	break;  }  
