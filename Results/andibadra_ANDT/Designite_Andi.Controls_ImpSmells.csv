Implementation smell,Namespace,Class,File,Method,Description
Long Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The method has 160 lines of code.
Complex Method,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,Cyclomatic complexity of the method is 8
Complex Method,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,QuotedSplit,Cyclomatic complexity of the method is 8
Complex Method,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,OnPaint,Cyclomatic complexity of the method is 18
Complex Method,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CreateGridTileImage,Cyclomatic complexity of the method is 12
Complex Method,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawImageBorder,Cyclomatic complexity of the method is 9
Complex Method,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawLabel,Cyclomatic complexity of the method is 27
Complex Method,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageBorderOffset,Cyclomatic complexity of the method is 9
Complex Method,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ProcessImageShortcuts,Cyclomatic complexity of the method is 15
Complex Method,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ProcessScrollingShortcuts,Cyclomatic complexity of the method is 12
Complex Method,Andi.Controls.ImageBox,ScrollControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\ScrollControl.cs,GetEventType,Cyclomatic complexity of the method is 11
Complex Method,Andi.Controls.ImageBox,ScrollControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\ScrollControl.cs,WmScroll,Cyclomatic complexity of the method is 28
Complex Method,Andi.Controls.ImageBox,VirtualScrollableControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\VirtualScrollableControl.cs,AdjustScrollbars,Cyclomatic complexity of the method is 9
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,Dispose,Cyclomatic complexity of the method is 8
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,ShowTab,Cyclomatic complexity of the method is 9
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,OnResize,Cyclomatic complexity of the method is 8
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,Cyclomatic complexity of the method is 15
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,DrawTabText,Cyclomatic complexity of the method is 9
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetStringFormat,Cyclomatic complexity of the method is 10
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,ResetDoubleBuffering,Cyclomatic complexity of the method is 8
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,Cyclomatic complexity of the method is 44
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,Cyclomatic complexity of the method is 12
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabPosition,Cyclomatic complexity of the method is 8
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,AddPageBorder,Cyclomatic complexity of the method is 28
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,Cyclomatic complexity of the method is 27
Complex Method,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,Cyclomatic complexity of the method is 25
Complex Method,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,CreateProvider,Cyclomatic complexity of the method is 27
Complex Method,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,Cyclomatic complexity of the method is 18
Complex Method,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,EnsureFirstTabIsInView,Cyclomatic complexity of the method is 13
Complex Method,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,Cyclomatic complexity of the method is 17
Complex Method,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabCloser,Cyclomatic complexity of the method is 9
Complex Method,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,Cyclomatic complexity of the method is 17
Complex Method,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,GetCurrentThemeIndex,Cyclomatic complexity of the method is 13
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,Cyclomatic complexity of the method is 20
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,Cyclomatic complexity of the method is 21
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,Cyclomatic complexity of the method is 15
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,AddTabBorder,Cyclomatic complexity of the method is 20
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,Cyclomatic complexity of the method is 39
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,Cyclomatic complexity of the method is 37
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,Cyclomatic complexity of the method is 15
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,Cyclomatic complexity of the method is 15
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,Cyclomatic complexity of the method is 28
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,Cyclomatic complexity of the method is 24
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,Cyclomatic complexity of the method is 15
Complex Method,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,Cyclomatic complexity of the method is 21
Complex Method,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,Cyclomatic complexity of the method is 8
Complex Method,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,Cyclomatic complexity of the method is 20
Complex Method,Andi.Controls.TabList.Design,TabListDesigner,C:\repos\andibadra_ANDT\Andi.Controls\TabList\Design\TabListDesigner.cs,WndProc,Cyclomatic complexity of the method is 8
Long Parameter List,Andi.Controls,EnumExtensions,C:\repos\andibadra_ANDT\Andi.Controls\EnumExtensions.cs,HasFlag,The method has 20 parameters.
Long Parameter List,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,ReplaceEx,The method has 5 parameters.
Long Parameter List,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawLabel,The method has 5 parameters.
Long Parameter List,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawLabel,The method has 6 parameters.
Long Parameter List,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawLabel,The method has 7 parameters.
Long Parameter List,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawLabel,The method has 8 parameters.
Long Parameter List,Andi.Controls.TabList.Design,TabListDesigner,C:\repos\andibadra_ANDT\Andi.Controls\TabList\Design\TabListDesigner.cs,CreateToolCore,The method has 7 parameters.
Long Statement,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The length of the statement  "		e.Graphics.DrawImage (image_0' Padding.Left + size_0.Width' Padding.Top + (int)sizeF.Height + size_0.Height' image_0.Width' image_0.Height); " is 140.
Long Statement,Andi.Controls,AndiImageComboBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiImageComboBox.cs,OnDrawItem,The length of the statement  "	ImageComboItem imageComboItem = e.Index >= 0 ? (Items [e.Index] is ImageComboItem ? (ImageComboItem)Items [e.Index] : new ImageComboItem (Items [e.Index].ToString ())) : new ImageComboItem (Text); " is 196.
Long Statement,Andi.Controls,AndiListBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiListBox.cs,OnMeasureItem,The length of the statement  "			e.ItemHeight = ImageList == null ? (int)sizeF.Height + Padding.Vertical : (int)Math.Max (sizeF.Height' ImageList.ImageSize.Height) + Padding.Vertical; " is 150.
Long Statement,Andi.Controls,AndiListBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiListBox.cs,OnMouseMove,The length of the statement  "		if (index == Items.Count - 1 && DrawMode == DrawMode.OwnerDrawVariable && !GetItemRectangle (index).Contains (e.Location)) " is 122.
Long Statement,Andi.Controls,AndiListBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiListBox.cs,GetItem,The length of the statement  "	return index < 0 || index > Items.Count - 1 ? new ImageComboItem (Text) : (Items [index] is ImageComboItem ? (ImageComboItem)Items [index] : new ImageComboItem (Items [index].ToString ())); " is 189.
Long Statement,Andi.Controls,EnumExtensions,C:\repos\andibadra_ANDT\Andi.Controls\EnumExtensions.cs,GetDescription,The length of the statement  "		DescriptionAttribute descriptionAttribute = field != null ? Attribute.GetCustomAttribute (field' typeof(DescriptionAttribute)) as DescriptionAttribute : null; " is 158.
Long Statement,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The length of the statement  "				Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2)); " is 147.
Long Statement,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The length of the statement  "					e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor); " is 131.
Long Statement,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The length of the statement  "					g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1); " is 123.
Long Statement,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The length of the statement  "				bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1); " is 145.
Long Statement,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,DrawUnselected,The length of the statement  "	g.DrawString (m_listbox.Items [m_lastIndex].ToString ()' m_listbox.Font' new SolidBrush (m_unselectedForeColor)' new Point (m_lastBounds.X + (m_lastBounds.Width / 2) + 1' m_lastBounds.Y + (m_lastBounds.Height / 2) + 1)' sf); " is 224.
Long Statement,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,DrawHovered,The length of the statement  "	g.DrawString (m_listbox.Items [index].ToString ()' m_listbox.Font' new SolidBrush (m_hoverForeColor)' new Point (bounds.X + (bounds.Width / 2) + 1' bounds.Y + (bounds.Height / 2) + 1)' sf); " is 189.
Long Statement,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,DrawItemBackground,The length of the statement  "	using (Brush brush = new SolidBrush (!EnumExtensions.HasFlag (e.State' DrawItemState.HotLight) || EnumExtensions.HasFlag (e.State' DrawItemState.Selected) || !AllowHotTrack ? (!parent.Enabled || EnumExtensions.HasFlag (e.State' DrawItemState.Selected) ? (!parent.Enabled || !parent.IsDroppedDown && parent.HideSelection && (!EnumExtensions.HasFlag (e.State' DrawItemState.Focus) && parent.FullRowSelect) ? SystemColors.Control : parent.HighlightBackColor) : parent.BackColor) : parent.HotTrackColor)) " is 500.
Long Statement,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,DrawItemImage,The length of the statement  "	e.Graphics.DrawImage (e.Image' e.Bounds.Left + e.Offset' e.Bounds.Top + (e.Bounds.Height - size.Height) / 2' size.Width' size.Height); " is 134.
Long Statement,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,DrawItemText,The length of the statement  "	var rectangle = new Rectangle (e.Bounds.X + e.Offset' e.Bounds.Y' TextRenderer.MeasureText (e.Graphics' e.Item.Text' e.Font' new Size (width' e.Bounds.Height)).Width + num' e.Bounds.Height); " is 190.
Long Statement,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,DrawItemText,The length of the statement  "	if (!EnumExtensions.HasFlag (e.State' DrawItemState.Focus) || EnumExtensions.HasFlag (e.State' DrawItemState.NoFocusRect)) " is 122.
Long Statement,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,MeasureItem,The length of the statement  "	return new SizeF (Math.Max (sizeF1.Width' sizeF2.Width)' Math.Max (Math.Max (sizeF1.Height' sizeF2.Height)' parent.DefaultItemHeight)); " is 135.
Long Statement,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,GetFlags,The length of the statement  "	TextFormatFlags textFormatFlags1 = TextFormatFlags.NoPrefix | TextFormatFlags.VerticalCenter | TextFormatFlags.WordEllipsis; " is 124.
Long Statement,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,TruncateByWidth,The length of the statement  "	return obj0.TruncateByWidth (obj1' obj2' TextFormatFlags.ModifyString | TextFormatFlags.NoPrefix | TextFormatFlags.PathEllipsis); " is 129.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,IsInputKey,The length of the statement  "	if ((keyData & Keys.Right) == Keys.Right | (keyData & Keys.Left) == Keys.Left | (keyData & Keys.Up) == Keys.Up | (keyData & Keys.Down) == Keys.Down) { " is 150.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,OnMouseUp,The length of the statement  "	if (!doNotProcessClick && this.AllowZoom && this.AllowClickZoom && !this.IsPanning && this.SizeMode == ImageBoxSizeMode.Normal) { " is 129.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CenterToImage,The length of the statement  "	this.AutoScrollPosition = new Point ((this.AutoScrollMinSize.Width - this.ClientSize.Width) / 2' (this.AutoScrollMinSize.Height - this.ClientSize.Height) / 2); " is 159.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The length of the statement  "		if (!this.HScroll && !this.VScroll)// if no scrolling is present' tinker the view port so that the image and any applicable borders all fit inside " is 146.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetScaledRectangle,The length of the statement  "	return new Rectangle ((int)(source.Left * this.ZoomFactor)' (int)(source.Top * this.ZoomFactor)' (int)(source.Width * this.ZoomFactor)' (int)(source.Height * this.ZoomFactor)); " is 176.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetScaledRectangle,The length of the statement  "	return new RectangleF ((float)(source.Left * this.ZoomFactor)' (float)(source.Top * this.ZoomFactor)' (float)(source.Width * this.ZoomFactor)' (float)(source.Height * this.ZoomFactor)); " is 185.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetSelectedImage,The length of the statement  "		rect = this.FitRectangle (new Rectangle ((int)this.SelectionRegion.X' (int)this.SelectionRegion.Y' (int)this.SelectionRegion.Width' (int)this.SelectionRegion.Height)); " is 167.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,AdjustViewPort,The length of the statement  "		this.AutoScrollMinSize = new Size (this.ScaledImageWidth + this.Padding.Horizontal' this.ScaledImageHeight + this.Padding.Vertical); " is 132.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawDropShadow,The length of the statement  "	rightEdge = new Rectangle (viewPort.Right + 1' viewPort.Top + this.DropShadowSize' this.DropShadowSize' viewPort.Height); " is 121.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawDropShadow,The length of the statement  "	bottomEdge = new Rectangle (viewPort.Left + this.DropShadowSize' viewPort.Bottom + 1' viewPort.Width + 1' this.DropShadowSize); " is 127.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawLabel,The length of the statement  "	flags = TextFormatFlags.NoPrefix | TextFormatFlags.WordEllipsis | TextFormatFlags.WordBreak | TextFormatFlags.NoPadding; " is 120.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawText,The length of the statement  "	this.DrawLabel (e.Graphics' this.Text' this.Font' this.ForeColor' this.TextBackColor' this.TextAlign' bounds' this.ScaleText); " is 126.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ProcessMouseZoom,The length of the statement  "	this.SetZoom (isZoomIn ? this.ZoomLevels.NextZoom (this.Zoom) : this.ZoomLevels.PreviousZoom (this.Zoom)' isZoomIn ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut' ImageBoxActionSources.User); " is 203.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ProcessScrollingShortcuts,The length of the statement  "		this.AdjustScroll (-(e.Modifiers == Keys.None ? this.HorizontalScroll.SmallChange : this.HorizontalScroll.LargeChange)' 0); " is 123.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ProcessScrollingShortcuts,The length of the statement  "		this.AdjustScroll (e.Modifiers == Keys.None ? this.HorizontalScroll.SmallChange : this.HorizontalScroll.LargeChange' 0); " is 120.
Long Statement,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,PerformActualSize,The length of the statement  "	this.SetZoom (100' ImageBoxZoomActions.ActualSize | (this.Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source); " is 138.
Long Statement,Andi.Controls.ImageBox,ImageBoxDesigner,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\ImageBoxDesigner.cs,SetDock,The length of the statement  "		using (DesignerTransaction transaction = host.CreateTransaction (string.Format ("Add TabListPage to '{0}'"' control.Name))) { " is 125.
Long Statement,Andi.Controls.ImageBox,ScrollControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\ScrollControl.cs,WmScroll,The length of the statement  "	scrollbar = msg.Msg == NativeMethods.WM_HSCROLL ? ScrollOrientation.HorizontalScroll : ScrollOrientation.VerticalScroll; " is 120.
Long Statement,Andi.Controls.ImageBox,VirtualScrollableControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\VirtualScrollableControl.cs,ScrollControlIntoView,The length of the statement  "		position = this.AdjustPositionToSize (new Point (this.AutoScrollPosition.X + activeControl.Left' this.AutoScrollPosition.Y + activeControl.Top)); " is 145.
Long Statement,Andi.Controls.ImageBox,VirtualScrollableControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\VirtualScrollableControl.cs,AdjustScrollbars,The length of the statement  "	if (this.AutoScroll && (this.AutoScrollMinSize.Height > clientRectangle.Height || this.AutoScrollMinSize.Width > clientRectangle.Width)) { " is 138.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,WndProc,The length of the statement  "		this.OnHScroll (new ScrollEventArgs (((ScrollEventType)NativeMethods.LoWord (m.WParam))' _oldValue' NativeMethods.HiWord (m.WParam)' ScrollOrientation.HorizontalScroll)); " is 170.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,OnMouseClick,The length of the statement  "	if (index > -1 && this.TabImageClick != null && (this.TabPages [index].ImageIndex > -1 || !string.IsNullOrEmpty (this.TabPages [index].ImageKey)) && this.GetTabImageRect (index).Contains (this.MousePosition)) { " is 210.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,OnMouseClick,The length of the statement  "	else if (!this.DesignMode && index > -1 && this._StyleProvider.ShowTabCloser && this.GetTabCloserRect (index).Contains (this.MousePosition)) { " is 142.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The length of the statement  "				this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height)); " is 173.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The length of the statement  "			this._BackBufferGraphics.DrawImage (this._TabBuffer' new Rectangle (0' 0' this._TabBuffer.Width' this._TabBuffer.Height)' 0' 0' this._TabBuffer.Width' this._TabBuffer.Height' GraphicsUnit.Pixel' alphaAttributes); " is 212.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,DrawTabImage,The length of the statement  "	if (this.TabPages [index].ImageIndex > -1 && this.ImageList != null && this.ImageList.Images.Count > this.TabPages [index].ImageIndex) { " is 136.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,DrawTabImage,The length of the statement  "	else if ((!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)) && this.ImageList != null && this.ImageList.Images.ContainsKey (this.TabPages [index].ImageKey)) { " is 253.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The length of the statement  "		if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) { " is 221.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The length of the statement  "			imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16); " is 206.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The length of the statement  "			imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16); " is 121.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The length of the statement  "			imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16); " is 205.
Long Statement,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The length of the statement  "			imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16); " is 121.
Long Statement,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The length of the statement  "			focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical); " is 123.
Long Statement,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The length of the statement  "			focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal); " is 125.
Long Statement,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The length of the statement  "			focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal); " is 125.
Long Statement,Andi.Controls.TabControl,NativeMethods,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\NativeMethods.cs,SendMessage,The length of the statement  "	MethodInfo wproc = control.GetType ().GetMethod ("WndProc"' BindingFlags.NonPublic | BindingFlags.InvokeMethod | BindingFlags.FlattenHierarchy | BindingFlags.IgnoreCase | BindingFlags.Instance); " is 194.
Long Statement,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,GetCurrentThemeIndex,The length of the statement  "	if (VisualStyleInformation.IsSupportedByOS && VisualStyleInformation.IsEnabledByUser && Application.RenderWithVisualStyles) { " is 125.
Long Statement,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The length of the statement  "	closerPath.AddEllipse (new Rectangle (closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4)); " is 120.
Long Statement,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The length of the statement  "		path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90); " is 129.
Long Statement,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The length of the statement  "		path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90); " is 129.
Long Statement,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The length of the statement  "	flags = TextFormatFlags.VerticalCenter | TextFormatFlags.Left | TextFormatFlags.NoPrefix | TextFormatFlags.SingleLine | TextFormatFlags.WordEllipsis; " is 149.
Long Statement,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The length of the statement  "		ControlPaint.DrawFocusRectangle (g' new Rectangle (textRectangle.X' textRectangle.Y' (int)textSize.Width + offset' (int)textSize.Height + offset)' textColor' fillColor); " is 169.
Long Statement,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,SetStyles,The length of the statement  "	this.SetStyle (ControlStyles.AllPaintingInWmPaint | ControlStyles.ResizeRedraw | ControlStyles.OptimizedDoubleBuffer | ControlStyles.UserMouse' true); " is 150.
Long Statement,Andi.Controls.TabList.Design,TabListDesigner,C:\repos\andibadra_ANDT\Andi.Controls\TabList\Design\TabListDesigner.cs,AddTabListPage,The length of the statement  "		using (DesignerTransaction transaction = host.CreateTransaction (string.Format ("Add TabListPage to '{0}'"' control.Name))) { " is 125.
Long Statement,Andi.Controls.TabList.Design,TabListDesigner,C:\repos\andibadra_ANDT\Andi.Controls\TabList\Design\TabListDesigner.cs,RemoveSelectedTabListPage,The length of the statement  "			using (DesignerTransaction transaction = host.CreateTransaction (string.Format ("Remove TabListPage from '{0}'"' control.Name))) { " is 130.
Complex Conditional,Andi.Controls,AndiImageComboBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiImageComboBox.cs,OnMeasureItem,The conditional expression  "ImageList != null && e.Index >= 0 && (e.Index < Items.Count && Items [e.Index] is ImageComboItem)"  is complex.
Complex Conditional,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,OnMouseUp,The conditional expression  "!doNotProcessClick && this.AllowZoom && this.AllowClickZoom && !this.IsPanning && this.SizeMode == ImageBoxSizeMode.Normal"  is complex.
Complex Conditional,Andi.Controls.ImageBox,VirtualScrollableControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\VirtualScrollableControl.cs,ScrollControlIntoView,The conditional expression  "activeControl.Visible && AutoScroll && (HorizontalScroll.Visible || VerticalScroll.Visible)"  is complex.
Complex Conditional,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,OnMouseClick,The conditional expression  "index > -1 && this.TabImageClick != null && (this.TabPages [index].ImageIndex > -1 || !string.IsNullOrEmpty (this.TabPages [index].ImageKey)) && this.GetTabImageRect (index).Contains (this.MousePosition)"  is complex.
Complex Conditional,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,OnMouseClick,The conditional expression  "!this.DesignMode && index > -1 && this._StyleProvider.ShowTabCloser && this.GetTabCloserRect (index).Contains (this.MousePosition)"  is complex.
Complex Conditional,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,DrawTabImage,The conditional expression  "(!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)) && this.ImageList != null && this.ImageList.Images.ContainsKey (this.TabPages [index].ImageKey)"  is complex.
Complex Conditional,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The conditional expression  "this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))"  is complex.
Complex Conditional,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,CycleSelectedTab,The conditional expression  "index < 0 && increment == -1 || index >= this.TabListPageCount && increment != 1"  is complex.
Complex Conditional,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,CycleSelectedTab,The conditional expression  "index < 0 && increment != -1 || index >= this.TabListPageCount && increment == 1"  is complex.
Empty Catch Block,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawImage,The method has an empty catch block.
Empty Catch Block,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawImage,The method has an empty catch block.
Empty Catch Block,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,OnImageChanged,The method has an empty catch block.
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,AndiGroupBox,The following statement contains a magic number: size_0 = new Size (0' 6);  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if (ShowBorders) {  	if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  		e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  		e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  	}  	else {  		if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  			e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  			e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  		}  		if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  			e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  			e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  			e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  			e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  		}  		if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  			e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  			e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  		}  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.All) == Border3DSide.All) {  	e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  	e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  }  else {  	if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  		e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  		e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  	}  	if ((border3DSide_0 & Border3DSide.Left) == Border3DSide.Left) {  		e.Graphics.DrawLine (pen_1' 0' num' 0' Height - 1);  		e.Graphics.DrawLine (pen_0' 1' num' 1' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  		e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  		e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  	}  	if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  		e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  		e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  	}  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (pen_0' 1' num + 1' Width - 2' Height - (num + 2));  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawRectangle (pen_1' 0' num' Width - 2' Height - (num + 2));  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  	e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  	e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.Top) == Border3DSide.Top) {  	e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  	e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen_1' sizeF.Width + 3f' num' Width - 5' num);  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen_0' sizeF.Width + 3f' num + 1' Width - 5' num + 1);  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  	e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  	e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.Right) == Border3DSide.Right) {  	e.Graphics.DrawLine (pen_0' Width - 1' num' Width - 1' Height - 1);  	e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen_1' Width - 2' num' Width - 2' Height - 1);  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  	e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  	e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: if ((border3DSide_0 & Border3DSide.Bottom) == Border3DSide.Bottom) {  	e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  	e.Graphics.DrawLine (pen_0' 0' Height - 1' Width' Height - 1);  }  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  
Magic Number,Andi.Controls,AndiGroupBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiGroupBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen_1' 0' Height - 2' Width' Height - 2);  
Magic Number,Andi.Controls,AndiImageComboBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiImageComboBox.cs,AndiImageComboBox,The following statement contains a magic number: Padding = new Padding (2);  
Magic Number,Andi.Controls,AndiListBox,C:\repos\andibadra_ANDT\Andi.Controls\AndiListBox.cs,AndiListBox,The following statement contains a magic number: Padding = new Padding (2);  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: if (m_listbox.Items.Count > 0) {  	using (Graphics g = e.Graphics) {  		using (StringFormat sf = new StringFormat ()) {  			Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  			sf.Alignment = StringAlignment.Center;  			sf.LineAlignment = StringAlignment.Center;  			// if the item is selected' redefine e and draw a box around it  			if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  				bounds.Width = e.Bounds.Width - (m_offset * 2);  				bounds.Height = e.Bounds.Height - (m_offset * 2);  				e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  				g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  			}  			e.DrawBackground ();  			// redraw the item name  			g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  		}  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: if (m_listbox.Items.Count > 0) {  	using (Graphics g = e.Graphics) {  		using (StringFormat sf = new StringFormat ()) {  			Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  			sf.Alignment = StringAlignment.Center;  			sf.LineAlignment = StringAlignment.Center;  			// if the item is selected' redefine e and draw a box around it  			if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  				bounds.Width = e.Bounds.Width - (m_offset * 2);  				bounds.Height = e.Bounds.Height - (m_offset * 2);  				e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  				g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  			}  			e.DrawBackground ();  			// redraw the item name  			g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  		}  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: if (m_listbox.Items.Count > 0) {  	using (Graphics g = e.Graphics) {  		using (StringFormat sf = new StringFormat ()) {  			Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  			sf.Alignment = StringAlignment.Center;  			sf.LineAlignment = StringAlignment.Center;  			// if the item is selected' redefine e and draw a box around it  			if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  				bounds.Width = e.Bounds.Width - (m_offset * 2);  				bounds.Height = e.Bounds.Height - (m_offset * 2);  				e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  				g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  			}  			e.DrawBackground ();  			// redraw the item name  			g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  		}  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: if (m_listbox.Items.Count > 0) {  	using (Graphics g = e.Graphics) {  		using (StringFormat sf = new StringFormat ()) {  			Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  			sf.Alignment = StringAlignment.Center;  			sf.LineAlignment = StringAlignment.Center;  			// if the item is selected' redefine e and draw a box around it  			if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  				bounds.Width = e.Bounds.Width - (m_offset * 2);  				bounds.Height = e.Bounds.Height - (m_offset * 2);  				e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  				g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  			}  			e.DrawBackground ();  			// redraw the item name  			g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  		}  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: using (Graphics g = e.Graphics) {  	using (StringFormat sf = new StringFormat ()) {  		Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  		sf.Alignment = StringAlignment.Center;  		sf.LineAlignment = StringAlignment.Center;  		// if the item is selected' redefine e and draw a box around it  		if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  			bounds.Width = e.Bounds.Width - (m_offset * 2);  			bounds.Height = e.Bounds.Height - (m_offset * 2);  			e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  			g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  		}  		e.DrawBackground ();  		// redraw the item name  		g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: using (Graphics g = e.Graphics) {  	using (StringFormat sf = new StringFormat ()) {  		Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  		sf.Alignment = StringAlignment.Center;  		sf.LineAlignment = StringAlignment.Center;  		// if the item is selected' redefine e and draw a box around it  		if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  			bounds.Width = e.Bounds.Width - (m_offset * 2);  			bounds.Height = e.Bounds.Height - (m_offset * 2);  			e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  			g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  		}  		e.DrawBackground ();  		// redraw the item name  		g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: using (Graphics g = e.Graphics) {  	using (StringFormat sf = new StringFormat ()) {  		Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  		sf.Alignment = StringAlignment.Center;  		sf.LineAlignment = StringAlignment.Center;  		// if the item is selected' redefine e and draw a box around it  		if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  			bounds.Width = e.Bounds.Width - (m_offset * 2);  			bounds.Height = e.Bounds.Height - (m_offset * 2);  			e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  			g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  		}  		e.DrawBackground ();  		// redraw the item name  		g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: using (Graphics g = e.Graphics) {  	using (StringFormat sf = new StringFormat ()) {  		Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  		sf.Alignment = StringAlignment.Center;  		sf.LineAlignment = StringAlignment.Center;  		// if the item is selected' redefine e and draw a box around it  		if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  			bounds.Width = e.Bounds.Width - (m_offset * 2);  			bounds.Height = e.Bounds.Height - (m_offset * 2);  			e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  			g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  		}  		e.DrawBackground ();  		// redraw the item name  		g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: using (StringFormat sf = new StringFormat ()) {  	Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  	sf.Alignment = StringAlignment.Center;  	sf.LineAlignment = StringAlignment.Center;  	// if the item is selected' redefine e and draw a box around it  	if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  		bounds.Width = e.Bounds.Width - (m_offset * 2);  		bounds.Height = e.Bounds.Height - (m_offset * 2);  		e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  		g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  	}  	e.DrawBackground ();  	// redraw the item name  	g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: using (StringFormat sf = new StringFormat ()) {  	Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  	sf.Alignment = StringAlignment.Center;  	sf.LineAlignment = StringAlignment.Center;  	// if the item is selected' redefine e and draw a box around it  	if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  		bounds.Width = e.Bounds.Width - (m_offset * 2);  		bounds.Height = e.Bounds.Height - (m_offset * 2);  		e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  		g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  	}  	e.DrawBackground ();  	// redraw the item name  	g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: using (StringFormat sf = new StringFormat ()) {  	Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  	sf.Alignment = StringAlignment.Center;  	sf.LineAlignment = StringAlignment.Center;  	// if the item is selected' redefine e and draw a box around it  	if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  		bounds.Width = e.Bounds.Width - (m_offset * 2);  		bounds.Height = e.Bounds.Height - (m_offset * 2);  		e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  		g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  	}  	e.DrawBackground ();  	// redraw the item name  	g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: using (StringFormat sf = new StringFormat ()) {  	Rectangle bounds = new Rectangle (e.Bounds.X + m_offset' e.Bounds.Y + m_offset' e.Bounds.Width - (m_offset * 2)' e.Bounds.Height - (m_offset * 2));  	sf.Alignment = StringAlignment.Center;  	sf.LineAlignment = StringAlignment.Center;  	// if the item is selected' redefine e and draw a box around it  	if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  		bounds.Width = e.Bounds.Width - (m_offset * 2);  		bounds.Height = e.Bounds.Height - (m_offset * 2);  		e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  		g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  	}  	e.DrawBackground ();  	// redraw the item name  	g.DrawString (m_listbox.Items [e.Index].ToString ()' e.Font' new SolidBrush (e.ForeColor)' e.Bounds' sf);  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  	bounds.Width = e.Bounds.Width - (m_offset * 2);  	bounds.Height = e.Bounds.Height - (m_offset * 2);  	e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  	g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: if ((e.State & DrawItemState.Selected) == DrawItemState.Selected) {  	bounds.Width = e.Bounds.Width - (m_offset * 2);  	bounds.Height = e.Bounds.Height - (m_offset * 2);  	e = new DrawItemEventArgs (g' e.Font' bounds' e.Index' e.State ^ DrawItemState.Selected' m_selectedForeColor' m_selectedBackColor);  	g.DrawRectangle (new Pen (m_selectedBorderColor)' e.Bounds.X - 1' e.Bounds.Y - 1' e.Bounds.Width + 1' e.Bounds.Height + 1);  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: bounds.Width = e.Bounds.Width - (m_offset * 2);  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_DrawItem,The following statement contains a magic number: bounds.Height = e.Bounds.Height - (m_offset * 2);  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The following statement contains a magic number: if (m_listbox.Items.Count > 0) {  	// get the index of the hovered item  	Point point = m_listbox.PointToClient (Cursor.Position);  	int index = m_listbox.IndexFromPoint (point);  	// if it's the same as the last item or no item' exit  	if (m_lastIndex == index || index < 0)  		return;  	using (Graphics g = m_listbox.CreateGraphics ()) {  		using (StringFormat sf = new StringFormat ()) {  			sf.Alignment = StringAlignment.Center;  			sf.LineAlignment = StringAlignment.Center;  			Rectangle bounds = m_listbox.GetItemRectangle (index);  			bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1);  			// If the item is unselected and not being hovered over' reset its colors  			if (m_lastBounds != bounds && m_lastBounds.Width != 0 && m_listbox.SelectedIndex != m_lastIndex) {  				DrawUnselected (g' sf);  			}  			// Color the hovered item  			if (m_listbox.SelectedIndex != index) {  				DrawHovered (g' bounds' sf' index);  			}  			// set these to the new item  			m_lastIndex = index;  			m_lastBounds = bounds;  		}  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The following statement contains a magic number: if (m_listbox.Items.Count > 0) {  	// get the index of the hovered item  	Point point = m_listbox.PointToClient (Cursor.Position);  	int index = m_listbox.IndexFromPoint (point);  	// if it's the same as the last item or no item' exit  	if (m_lastIndex == index || index < 0)  		return;  	using (Graphics g = m_listbox.CreateGraphics ()) {  		using (StringFormat sf = new StringFormat ()) {  			sf.Alignment = StringAlignment.Center;  			sf.LineAlignment = StringAlignment.Center;  			Rectangle bounds = m_listbox.GetItemRectangle (index);  			bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1);  			// If the item is unselected and not being hovered over' reset its colors  			if (m_lastBounds != bounds && m_lastBounds.Width != 0 && m_listbox.SelectedIndex != m_lastIndex) {  				DrawUnselected (g' sf);  			}  			// Color the hovered item  			if (m_listbox.SelectedIndex != index) {  				DrawHovered (g' bounds' sf' index);  			}  			// set these to the new item  			m_lastIndex = index;  			m_lastBounds = bounds;  		}  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The following statement contains a magic number: using (Graphics g = m_listbox.CreateGraphics ()) {  	using (StringFormat sf = new StringFormat ()) {  		sf.Alignment = StringAlignment.Center;  		sf.LineAlignment = StringAlignment.Center;  		Rectangle bounds = m_listbox.GetItemRectangle (index);  		bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1);  		// If the item is unselected and not being hovered over' reset its colors  		if (m_lastBounds != bounds && m_lastBounds.Width != 0 && m_listbox.SelectedIndex != m_lastIndex) {  			DrawUnselected (g' sf);  		}  		// Color the hovered item  		if (m_listbox.SelectedIndex != index) {  			DrawHovered (g' bounds' sf' index);  		}  		// set these to the new item  		m_lastIndex = index;  		m_lastBounds = bounds;  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The following statement contains a magic number: using (Graphics g = m_listbox.CreateGraphics ()) {  	using (StringFormat sf = new StringFormat ()) {  		sf.Alignment = StringAlignment.Center;  		sf.LineAlignment = StringAlignment.Center;  		Rectangle bounds = m_listbox.GetItemRectangle (index);  		bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1);  		// If the item is unselected and not being hovered over' reset its colors  		if (m_lastBounds != bounds && m_lastBounds.Width != 0 && m_listbox.SelectedIndex != m_lastIndex) {  			DrawUnselected (g' sf);  		}  		// Color the hovered item  		if (m_listbox.SelectedIndex != index) {  			DrawHovered (g' bounds' sf' index);  		}  		// set these to the new item  		m_lastIndex = index;  		m_lastBounds = bounds;  	}  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The following statement contains a magic number: using (StringFormat sf = new StringFormat ()) {  	sf.Alignment = StringAlignment.Center;  	sf.LineAlignment = StringAlignment.Center;  	Rectangle bounds = m_listbox.GetItemRectangle (index);  	bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1);  	// If the item is unselected and not being hovered over' reset its colors  	if (m_lastBounds != bounds && m_lastBounds.Width != 0 && m_listbox.SelectedIndex != m_lastIndex) {  		DrawUnselected (g' sf);  	}  	// Color the hovered item  	if (m_listbox.SelectedIndex != index) {  		DrawHovered (g' bounds' sf' index);  	}  	// set these to the new item  	m_lastIndex = index;  	m_lastBounds = bounds;  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The following statement contains a magic number: using (StringFormat sf = new StringFormat ()) {  	sf.Alignment = StringAlignment.Center;  	sf.LineAlignment = StringAlignment.Center;  	Rectangle bounds = m_listbox.GetItemRectangle (index);  	bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1);  	// If the item is unselected and not being hovered over' reset its colors  	if (m_lastBounds != bounds && m_lastBounds.Width != 0 && m_listbox.SelectedIndex != m_lastIndex) {  		DrawUnselected (g' sf);  	}  	// Color the hovered item  	if (m_listbox.SelectedIndex != index) {  		DrawHovered (g' bounds' sf' index);  	}  	// set these to the new item  	m_lastIndex = index;  	m_lastBounds = bounds;  }  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The following statement contains a magic number: bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1);  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,m_listbox_MouseMove,The following statement contains a magic number: bounds = new Rectangle (bounds.X + m_offset - 1' bounds.Y + m_offset - 1' bounds.Width - (m_offset * 2) + 1' bounds.Height - (m_offset * 2) + 1);  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,DrawUnselected,The following statement contains a magic number: g.DrawString (m_listbox.Items [m_lastIndex].ToString ()' m_listbox.Font' new SolidBrush (m_unselectedForeColor)' new Point (m_lastBounds.X + (m_lastBounds.Width / 2) + 1' m_lastBounds.Y + (m_lastBounds.Height / 2) + 1)' sf);  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,DrawUnselected,The following statement contains a magic number: g.DrawString (m_listbox.Items [m_lastIndex].ToString ()' m_listbox.Font' new SolidBrush (m_unselectedForeColor)' new Point (m_lastBounds.X + (m_lastBounds.Width / 2) + 1' m_lastBounds.Y + (m_lastBounds.Height / 2) + 1)' sf);  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,DrawHovered,The following statement contains a magic number: g.DrawString (m_listbox.Items [index].ToString ()' m_listbox.Font' new SolidBrush (m_hoverForeColor)' new Point (bounds.X + (bounds.Width / 2) + 1' bounds.Y + (bounds.Height / 2) + 1)' sf);  
Magic Number,Andi.Controls,ListBoxTabs,C:\repos\andibadra_ANDT\Andi.Controls\ListBoxTabs.cs,DrawHovered,The following statement contains a magic number: g.DrawString (m_listbox.Items [index].ToString ()' m_listbox.Font' new SolidBrush (m_hoverForeColor)' new Point (bounds.X + (bounds.Width / 2) + 1' bounds.Y + (bounds.Height / 2) + 1)' sf);  
Magic Number,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,DrawItemImage,The following statement contains a magic number: e.Graphics.DrawImage (e.Image' e.Bounds.Left + e.Offset' e.Bounds.Top + (e.Bounds.Height - size.Height) / 2' size.Width' size.Height);  
Magic Number,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,GetFlags,The following statement contains a magic number: if (!parent.WordWrap) {  	if (text.IndexOfAny (new char[2] {  		'\n''  		'\r'  	}) == -1) {  		textFormatFlags2 = textFormatFlags1 | TextFormatFlags.SingleLine;  		goto label_4;  	}  }  
Magic Number,Andi.Controls,ListControlRenderer,C:\repos\andibadra_ANDT\Andi.Controls\ListControlRenderer.cs,GetFlags,The following statement contains a magic number: if (text.IndexOfAny (new char[2] {  	'\n''  	'\r'  }) == -1) {  	textFormatFlags2 = textFormatFlags1 | TextFormatFlags.SingleLine;  	goto label_4;  }  
Magic Number,Andi.Controls,StringBuilderExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringBuilderExtensions.cs,Clear,The following statement contains a magic number: obj0.Capacity = 16;  
Magic Number,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,QuotedSplit,The following statement contains a magic number: foreach (char ch1 in obj0) {  	if (ch1 == 34)  		flag1 = !flag1;  	bool flag2 = false;  	foreach (char ch2 in obj1) {  		if (ch1 == ch2) {  			flag2 = true;  			break;  		}  	}  	if (!flag1 && flag2) {  		list.Add (stringBuilder.ToString ());  		StringBuilderExtensions.Clear (stringBuilder);  	}  	else if (ch1 != 34 || obj2)  		stringBuilder.Append (ch1);  }  
Magic Number,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,QuotedSplit,The following statement contains a magic number: foreach (char ch1 in obj0) {  	if (ch1 == 34)  		flag1 = !flag1;  	bool flag2 = false;  	foreach (char ch2 in obj1) {  		if (ch1 == ch2) {  			flag2 = true;  			break;  		}  	}  	if (!flag1 && flag2) {  		list.Add (stringBuilder.ToString ());  		StringBuilderExtensions.Clear (stringBuilder);  	}  	else if (ch1 != 34 || obj2)  		stringBuilder.Append (ch1);  }  
Magic Number,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,QuotedSplit,The following statement contains a magic number: if (ch1 == 34)  	flag1 = !flag1;  
Magic Number,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,QuotedSplit,The following statement contains a magic number: if (!flag1 && flag2) {  	list.Add (stringBuilder.ToString ());  	StringBuilderExtensions.Clear (stringBuilder);  }  else if (ch1 != 34 || obj2)  	stringBuilder.Append (ch1);  
Magic Number,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,QuotedSplit,The following statement contains a magic number: if (ch1 != 34 || obj2)  	stringBuilder.Append (ch1);  
Magic Number,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,ReplaceEx,The following statement contains a magic number: if (!string.IsNullOrEmpty (obj0) && !string.IsNullOrEmpty (obj1) && obj0.IndexOf (obj1' obj3) != -1) {  	var stringBuilder = new StringBuilder (obj4 < 0 ? Math.Min (4096' obj0.Length) : obj4);  	int startIndex = 0;  	int length = obj1.Length;  	for (int index = obj0.IndexOf (obj1' obj3); index >= 0; index = obj0.IndexOf (obj1' startIndex' obj3)) {  		stringBuilder.Append (obj0' startIndex' index - startIndex);  		stringBuilder.Append (obj2);  		startIndex = index + length;  	}  	stringBuilder.Append (obj0' startIndex' obj0.Length - startIndex);  	obj0 = stringBuilder.ToString ();  }  
Magic Number,Andi.Controls,StringExtensions,C:\repos\andibadra_ANDT\Andi.Controls\StringExtensions.cs,TruncateByWidth,The following statement contains a magic number: return obj0.TruncateByWidth (400' obj1);  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,AndiImageBox,The following statement contains a magic number: this.DropShadowSize = 3;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,AndiImageBox,The following statement contains a magic number: this.GridCellSize = 8;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,AndiImageBox,The following statement contains a magic number: this.PixelGridThreshold = 5;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: width = cellSize * 2;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: height = cellSize * 2;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CreateCheckerBoxTile,The following statement contains a magic number: return CreateCheckerBoxTile (8' Color.Gainsboro' Color.WhiteSmoke);  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CenterAt,The following statement contains a magic number: this.ScrollTo (imageLocation' new Point (this.ClientSize.Width / 2' this.ClientSize.Height / 2));  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CenterAt,The following statement contains a magic number: this.ScrollTo (imageLocation' new Point (this.ClientSize.Width / 2' this.ClientSize.Height / 2));  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CenterToImage,The following statement contains a magic number: this.AutoScrollPosition = new Point ((this.AutoScrollMinSize.Width - this.ClientSize.Width) / 2' (this.AutoScrollMinSize.Height - this.ClientSize.Height) / 2);  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CenterToImage,The following statement contains a magic number: this.AutoScrollPosition = new Point ((this.AutoScrollMinSize.Width - this.ClientSize.Width) / 2' (this.AutoScrollMinSize.Height - this.ClientSize.Height) / 2);  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (!this.ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	Point offset;  	int width;  	int height;  	innerRectangle = this.GetInsideViewPort (true);  	if (!this.HScroll && !this.VScroll)// if no scrolling is present' tinker the view port so that the image and any applicable borders all fit inside  	 {  		innerRectangle.Inflate (-this.GetImageBorderOffset ()' -this.GetImageBorderOffset ());  	}  	if (this.SizeMode != ImageBoxSizeMode.Stretch) {  		if (this.AutoCenter) {  			int x;  			int y;  			x = !this.HScroll ? (innerRectangle.Width - (this.ScaledImageWidth + this.Padding.Horizontal)) / 2 : 0;  			y = !this.VScroll ? (innerRectangle.Height - (this.ScaledImageHeight + this.Padding.Vertical)) / 2 : 0;  			offset = new Point (x' y);  		}  		else {  			offset = Point.Empty;  		}  		width = Math.Min (this.ScaledImageWidth - Math.Abs (this.AutoScrollPosition.X)' innerRectangle.Width);  		height = Math.Min (this.ScaledImageHeight - Math.Abs (this.AutoScrollPosition.Y)' innerRectangle.Height);  	}  	else {  		offset = Point.Empty;  		width = innerRectangle.Width;  		height = innerRectangle.Height;  	}  	viewPort = new Rectangle (offset.X + innerRectangle.Left' offset.Y + innerRectangle.Top' width' height);  }  else {  	viewPort = Rectangle.Empty;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (!this.ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	Point offset;  	int width;  	int height;  	innerRectangle = this.GetInsideViewPort (true);  	if (!this.HScroll && !this.VScroll)// if no scrolling is present' tinker the view port so that the image and any applicable borders all fit inside  	 {  		innerRectangle.Inflate (-this.GetImageBorderOffset ()' -this.GetImageBorderOffset ());  	}  	if (this.SizeMode != ImageBoxSizeMode.Stretch) {  		if (this.AutoCenter) {  			int x;  			int y;  			x = !this.HScroll ? (innerRectangle.Width - (this.ScaledImageWidth + this.Padding.Horizontal)) / 2 : 0;  			y = !this.VScroll ? (innerRectangle.Height - (this.ScaledImageHeight + this.Padding.Vertical)) / 2 : 0;  			offset = new Point (x' y);  		}  		else {  			offset = Point.Empty;  		}  		width = Math.Min (this.ScaledImageWidth - Math.Abs (this.AutoScrollPosition.X)' innerRectangle.Width);  		height = Math.Min (this.ScaledImageHeight - Math.Abs (this.AutoScrollPosition.Y)' innerRectangle.Height);  	}  	else {  		offset = Point.Empty;  		width = innerRectangle.Width;  		height = innerRectangle.Height;  	}  	viewPort = new Rectangle (offset.X + innerRectangle.Left' offset.Y + innerRectangle.Top' width' height);  }  else {  	viewPort = Rectangle.Empty;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (this.SizeMode != ImageBoxSizeMode.Stretch) {  	if (this.AutoCenter) {  		int x;  		int y;  		x = !this.HScroll ? (innerRectangle.Width - (this.ScaledImageWidth + this.Padding.Horizontal)) / 2 : 0;  		y = !this.VScroll ? (innerRectangle.Height - (this.ScaledImageHeight + this.Padding.Vertical)) / 2 : 0;  		offset = new Point (x' y);  	}  	else {  		offset = Point.Empty;  	}  	width = Math.Min (this.ScaledImageWidth - Math.Abs (this.AutoScrollPosition.X)' innerRectangle.Width);  	height = Math.Min (this.ScaledImageHeight - Math.Abs (this.AutoScrollPosition.Y)' innerRectangle.Height);  }  else {  	offset = Point.Empty;  	width = innerRectangle.Width;  	height = innerRectangle.Height;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (this.SizeMode != ImageBoxSizeMode.Stretch) {  	if (this.AutoCenter) {  		int x;  		int y;  		x = !this.HScroll ? (innerRectangle.Width - (this.ScaledImageWidth + this.Padding.Horizontal)) / 2 : 0;  		y = !this.VScroll ? (innerRectangle.Height - (this.ScaledImageHeight + this.Padding.Vertical)) / 2 : 0;  		offset = new Point (x' y);  	}  	else {  		offset = Point.Empty;  	}  	width = Math.Min (this.ScaledImageWidth - Math.Abs (this.AutoScrollPosition.X)' innerRectangle.Width);  	height = Math.Min (this.ScaledImageHeight - Math.Abs (this.AutoScrollPosition.Y)' innerRectangle.Height);  }  else {  	offset = Point.Empty;  	width = innerRectangle.Width;  	height = innerRectangle.Height;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (this.AutoCenter) {  	int x;  	int y;  	x = !this.HScroll ? (innerRectangle.Width - (this.ScaledImageWidth + this.Padding.Horizontal)) / 2 : 0;  	y = !this.VScroll ? (innerRectangle.Height - (this.ScaledImageHeight + this.Padding.Vertical)) / 2 : 0;  	offset = new Point (x' y);  }  else {  	offset = Point.Empty;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The following statement contains a magic number: if (this.AutoCenter) {  	int x;  	int y;  	x = !this.HScroll ? (innerRectangle.Width - (this.ScaledImageWidth + this.Padding.Horizontal)) / 2 : 0;  	y = !this.VScroll ? (innerRectangle.Height - (this.ScaledImageHeight + this.Padding.Vertical)) / 2 : 0;  	offset = new Point (x' y);  }  else {  	offset = Point.Empty;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The following statement contains a magic number: x = !this.HScroll ? (innerRectangle.Width - (this.ScaledImageWidth + this.Padding.Horizontal)) / 2 : 0;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,GetImageViewPort,The following statement contains a magic number: y = !this.VScroll ? (innerRectangle.Height - (this.ScaledImageHeight + this.Padding.Vertical)) / 2 : 0;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!this.ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	this.AutoScrollMinSize = Size.Empty;  	innerRectangle = this.GetInsideViewPort (true);  	if (this.ViewSize.Width > this.ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	}  	else {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	this.Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!this.ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	this.AutoScrollMinSize = Size.Empty;  	innerRectangle = this.GetInsideViewPort (true);  	if (this.ViewSize.Width > this.ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	}  	else {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	this.Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!this.ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	this.AutoScrollMinSize = Size.Empty;  	innerRectangle = this.GetInsideViewPort (true);  	if (this.ViewSize.Width > this.ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	}  	else {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	this.Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!this.ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	this.AutoScrollMinSize = Size.Empty;  	innerRectangle = this.GetInsideViewPort (true);  	if (this.ViewSize.Width > this.ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	}  	else {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	this.Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!this.ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	this.AutoScrollMinSize = Size.Empty;  	innerRectangle = this.GetInsideViewPort (true);  	if (this.ViewSize.Width > this.ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	}  	else {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	this.Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (!this.ViewSize.IsEmpty) {  	Rectangle innerRectangle;  	double zoom;  	double aspectRatio;  	this.AutoScrollMinSize = Size.Empty;  	innerRectangle = this.GetInsideViewPort (true);  	if (this.ViewSize.Width > this.ViewSize.Height) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  			zoom = aspectRatio * 100.0;  		}  	}  	else {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  		if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  			aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  			zoom = aspectRatio * 100.0;  		}  	}  	this.Zoom = (int)Math.Round (Math.Floor (zoom));  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (this.ViewSize.Width > this.ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  }  else {  	aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (this.ViewSize.Width > this.ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  }  else {  	aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (this.ViewSize.Width > this.ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  }  else {  	aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (this.ViewSize.Width > this.ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  }  else {  	aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (this.ViewSize.Width > this.ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  }  else {  	aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (this.ViewSize.Width > this.ViewSize.Height) {  	aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  		zoom = aspectRatio * 100.0;  	}  }  else {  	aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  	zoom = aspectRatio * 100.0;  	if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  		aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  		zoom = aspectRatio * 100.0;  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  	zoom = aspectRatio * 100.0;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (innerRectangle.Height < ((this.ViewSize.Height * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Height / this.ViewSize.Height;  	zoom = aspectRatio * 100.0;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  	zoom = aspectRatio * 100.0;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: if (innerRectangle.Width < ((this.ViewSize.Width * zoom) / 100.0)) {  	aspectRatio = (double)innerRectangle.Width / this.ViewSize.Width;  	zoom = aspectRatio * 100.0;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToFit,The following statement contains a magic number: zoom = aspectRatio * 100.0;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToRegion,The following statement contains a magic number: cx = (int)(rectangle.X + (rectangle.Width / 2));  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToRegion,The following statement contains a magic number: cy = (int)(rectangle.Y + (rectangle.Height / 2));  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ZoomToRegion,The following statement contains a magic number: this.Zoom = (int)(zoomFactor * 100);  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CreateGridTileImage,The following statement contains a magic number: switch (this.GridScale) {  case ImageBoxGridScale.Medium:  	scale = 1.5F;  	break;  case ImageBoxGridScale.Large:  	scale = 2;  	break;  case ImageBoxGridScale.Tiny:  	scale = 0.5F;  	break;  default:  	scale = 1;  	break;  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,CreateGridTileImage,The following statement contains a magic number: scale = 2;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawGlowShadow,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	int glowSize;  	int feather;  	path.AddRectangle (viewPort);  	glowSize = this.DropShadowSize * 3;  	feather = 50;  	for (int i = 1; i <= glowSize; i += 2) {  		int alpha;  		alpha = feather - ((feather / glowSize) * i);  		using (Pen pen = new Pen (Color.FromArgb (alpha' this.ImageBorderColor)' i) {  			LineJoin = LineJoin.Round  		}) {  			g.DrawPath (pen' path);  		}  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawGlowShadow,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	int glowSize;  	int feather;  	path.AddRectangle (viewPort);  	glowSize = this.DropShadowSize * 3;  	feather = 50;  	for (int i = 1; i <= glowSize; i += 2) {  		int alpha;  		alpha = feather - ((feather / glowSize) * i);  		using (Pen pen = new Pen (Color.FromArgb (alpha' this.ImageBorderColor)' i) {  			LineJoin = LineJoin.Round  		}) {  			g.DrawPath (pen' path);  		}  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawGlowShadow,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath ()) {  	int glowSize;  	int feather;  	path.AddRectangle (viewPort);  	glowSize = this.DropShadowSize * 3;  	feather = 50;  	for (int i = 1; i <= glowSize; i += 2) {  		int alpha;  		alpha = feather - ((feather / glowSize) * i);  		using (Pen pen = new Pen (Color.FromArgb (alpha' this.ImageBorderColor)' i) {  			LineJoin = LineJoin.Round  		}) {  			g.DrawPath (pen' path);  		}  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawGlowShadow,The following statement contains a magic number: glowSize = this.DropShadowSize * 3;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawGlowShadow,The following statement contains a magic number: feather = 50;  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawGlowShadow,The following statement contains a magic number: for (int i = 1; i <= glowSize; i += 2) {  	int alpha;  	alpha = feather - ((feather / glowSize) * i);  	using (Pen pen = new Pen (Color.FromArgb (alpha' this.ImageBorderColor)' i) {  		LineJoin = LineJoin.Round  	}) {  		g.DrawPath (pen' path);  	}  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawGlowShadow,The following statement contains a magic number: i += 2
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawSelection,The following statement contains a magic number: using (Brush brush = new SolidBrush (Color.FromArgb (128' this.SelectionColor))) {  	e.Graphics.FillRectangle (brush' rect);  }  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,PerformActualSize,The following statement contains a magic number: this.SetZoom (100' ImageBoxZoomActions.ActualSize | (this.Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source);  
Magic Number,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,PerformActualSize,The following statement contains a magic number: this.SetZoom (100' ImageBoxZoomActions.ActualSize | (this.Zoom < 100 ? ImageBoxZoomActions.ZoomIn : ImageBoxZoomActions.ZoomOut)' source);  
Magic Number,Andi.Controls.ImageBox,ScrollControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\ScrollControl.cs,ScrollControl,The following statement contains a magic number: this.StepSize = new Size (10' 10);  
Magic Number,Andi.Controls.ImageBox,ScrollControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\ScrollControl.cs,ScrollControl,The following statement contains a magic number: this.StepSize = new Size (10' 10);  
Magic Number,Andi.Controls.ImageBox,VirtualScrollableControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\VirtualScrollableControl.cs,AdjustScrollbars,The following statement contains a magic number: if (this.AutoScroll && (this.AutoScrollMinSize.Height > clientRectangle.Height || this.AutoScrollMinSize.Width > clientRectangle.Width)) {  	int i;  	for (i = 0; i < 2; i++) {  		if (this.AutoScrollMinSize.Width > (clientRectangle.Width - vertAddition)) {  			horizontalScrollVisible = true;  			horzAddition = SystemInformation.VerticalScrollBarWidth;  		}  		if (this.AutoScrollMinSize.Height > (clientRectangle.Height - horzAddition)) {  			verticalScrollVisible = true;  			vertAddition = SystemInformation.HorizontalScrollBarHeight;  		}  	}  }  
Magic Number,Andi.Controls.ImageBox,VirtualScrollableControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\VirtualScrollableControl.cs,AdjustScrollbars,The following statement contains a magic number: for (i = 0; i < 2; i++) {  	if (this.AutoScrollMinSize.Width > (clientRectangle.Width - vertAddition)) {  		horizontalScrollVisible = true;  		horzAddition = SystemInformation.VerticalScrollBarWidth;  	}  	if (this.AutoScrollMinSize.Height > (clientRectangle.Height - horzAddition)) {  		verticalScrollVisible = true;  		vertAddition = SystemInformation.HorizontalScrollBarHeight;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The following statement contains a magic number: if (this.Width > 0 && this.Height > 0) {  	if (this._BackImage == null) {  		//	Cached Background Image  		this._BackImage = new Bitmap (this.Width' this.Height);  		Graphics backGraphics = Graphics.FromImage (this._BackImage);  		backGraphics.Clear (Color.Transparent);  		this.PaintTransparentBackground (backGraphics' this.ClientRectangle);  	}  	this._BackBufferGraphics.Clear (Color.Transparent);  	this._BackBufferGraphics.DrawImageUnscaled (this._BackImage' 0' 0);  	this._TabBufferGraphics.Clear (Color.Transparent);  	if (this.TabCount > 0) {  		//	When top or bottom and scrollable we need to clip the sides from painting the tabs.  		//	Left and right are always multiline.  		if (this.Alignment <= TabAlignment.Bottom && !this.Multiline) {  			this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  		}  		//	Draw each tabpage from right to left.  We do it this way to handle  		//	the overlap correctly.  		if (this.Multiline) {  			for (int row = 0; row < this.RowCount; row++) {  				for (int index = this.TabCount - 1; index >= 0; index--) {  					if (index != this.SelectedIndex && (this.RowCount == 1 || this.GetTabRow (index) == row)) {  						this.DrawTabPage (index' this._TabBufferGraphics);  					}  				}  			}  		}  		else {  			for (int index = this.TabCount - 1; index >= 0; index--) {  				if (index != this.SelectedIndex) {  					this.DrawTabPage (index' this._TabBufferGraphics);  				}  			}  		}  		//	The selected tab must be drawn last so it appears on top.  		if (this.SelectedIndex > -1) {  			this.DrawTabPage (this.SelectedIndex' this._TabBufferGraphics);  		}  	}  	this._TabBufferGraphics.Flush ();  	//	Paint the tabs on top of the background  	// Create a new color matrix and set the alpha value to 0.5  	ColorMatrix alphaMatrix = new ColorMatrix ();  	alphaMatrix.Matrix00 = alphaMatrix.Matrix11 = alphaMatrix.Matrix22 = alphaMatrix.Matrix44 = 1;  	alphaMatrix.Matrix33 = this._StyleProvider.Opacity;  	// Create a new image attribute object and set the color matrix to  	// the one just created  	using (ImageAttributes alphaAttributes = new ImageAttributes ()) {  		alphaAttributes.SetColorMatrix (alphaMatrix);  		// Draw the original image with the image attributes specified  		this._BackBufferGraphics.DrawImage (this._TabBuffer' new Rectangle (0' 0' this._TabBuffer.Width' this._TabBuffer.Height)' 0' 0' this._TabBuffer.Width' this._TabBuffer.Height' GraphicsUnit.Pixel' alphaAttributes);  	}  	this._BackBufferGraphics.Flush ();  	//	Now paint this to the screen  	//	We want to paint the whole tabstrip and border every time  	//	so that the hot areas update correctly' along with any overlaps  	//	paint the tabs etc.  	if (this.RightToLeftLayout) {  		screenGraphics.DrawImageUnscaled (this._BackBuffer' -1' 0);  	}  	else {  		screenGraphics.DrawImageUnscaled (this._BackBuffer' 0' 0);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The following statement contains a magic number: if (this.Width > 0 && this.Height > 0) {  	if (this._BackImage == null) {  		//	Cached Background Image  		this._BackImage = new Bitmap (this.Width' this.Height);  		Graphics backGraphics = Graphics.FromImage (this._BackImage);  		backGraphics.Clear (Color.Transparent);  		this.PaintTransparentBackground (backGraphics' this.ClientRectangle);  	}  	this._BackBufferGraphics.Clear (Color.Transparent);  	this._BackBufferGraphics.DrawImageUnscaled (this._BackImage' 0' 0);  	this._TabBufferGraphics.Clear (Color.Transparent);  	if (this.TabCount > 0) {  		//	When top or bottom and scrollable we need to clip the sides from painting the tabs.  		//	Left and right are always multiline.  		if (this.Alignment <= TabAlignment.Bottom && !this.Multiline) {  			this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  		}  		//	Draw each tabpage from right to left.  We do it this way to handle  		//	the overlap correctly.  		if (this.Multiline) {  			for (int row = 0; row < this.RowCount; row++) {  				for (int index = this.TabCount - 1; index >= 0; index--) {  					if (index != this.SelectedIndex && (this.RowCount == 1 || this.GetTabRow (index) == row)) {  						this.DrawTabPage (index' this._TabBufferGraphics);  					}  				}  			}  		}  		else {  			for (int index = this.TabCount - 1; index >= 0; index--) {  				if (index != this.SelectedIndex) {  					this.DrawTabPage (index' this._TabBufferGraphics);  				}  			}  		}  		//	The selected tab must be drawn last so it appears on top.  		if (this.SelectedIndex > -1) {  			this.DrawTabPage (this.SelectedIndex' this._TabBufferGraphics);  		}  	}  	this._TabBufferGraphics.Flush ();  	//	Paint the tabs on top of the background  	// Create a new color matrix and set the alpha value to 0.5  	ColorMatrix alphaMatrix = new ColorMatrix ();  	alphaMatrix.Matrix00 = alphaMatrix.Matrix11 = alphaMatrix.Matrix22 = alphaMatrix.Matrix44 = 1;  	alphaMatrix.Matrix33 = this._StyleProvider.Opacity;  	// Create a new image attribute object and set the color matrix to  	// the one just created  	using (ImageAttributes alphaAttributes = new ImageAttributes ()) {  		alphaAttributes.SetColorMatrix (alphaMatrix);  		// Draw the original image with the image attributes specified  		this._BackBufferGraphics.DrawImage (this._TabBuffer' new Rectangle (0' 0' this._TabBuffer.Width' this._TabBuffer.Height)' 0' 0' this._TabBuffer.Width' this._TabBuffer.Height' GraphicsUnit.Pixel' alphaAttributes);  	}  	this._BackBufferGraphics.Flush ();  	//	Now paint this to the screen  	//	We want to paint the whole tabstrip and border every time  	//	so that the hot areas update correctly' along with any overlaps  	//	paint the tabs etc.  	if (this.RightToLeftLayout) {  		screenGraphics.DrawImageUnscaled (this._BackBuffer' -1' 0);  	}  	else {  		screenGraphics.DrawImageUnscaled (this._BackBuffer' 0' 0);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The following statement contains a magic number: if (this.TabCount > 0) {  	//	When top or bottom and scrollable we need to clip the sides from painting the tabs.  	//	Left and right are always multiline.  	if (this.Alignment <= TabAlignment.Bottom && !this.Multiline) {  		this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  	}  	//	Draw each tabpage from right to left.  We do it this way to handle  	//	the overlap correctly.  	if (this.Multiline) {  		for (int row = 0; row < this.RowCount; row++) {  			for (int index = this.TabCount - 1; index >= 0; index--) {  				if (index != this.SelectedIndex && (this.RowCount == 1 || this.GetTabRow (index) == row)) {  					this.DrawTabPage (index' this._TabBufferGraphics);  				}  			}  		}  	}  	else {  		for (int index = this.TabCount - 1; index >= 0; index--) {  			if (index != this.SelectedIndex) {  				this.DrawTabPage (index' this._TabBufferGraphics);  			}  		}  	}  	//	The selected tab must be drawn last so it appears on top.  	if (this.SelectedIndex > -1) {  		this.DrawTabPage (this.SelectedIndex' this._TabBufferGraphics);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The following statement contains a magic number: if (this.TabCount > 0) {  	//	When top or bottom and scrollable we need to clip the sides from painting the tabs.  	//	Left and right are always multiline.  	if (this.Alignment <= TabAlignment.Bottom && !this.Multiline) {  		this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  	}  	//	Draw each tabpage from right to left.  We do it this way to handle  	//	the overlap correctly.  	if (this.Multiline) {  		for (int row = 0; row < this.RowCount; row++) {  			for (int index = this.TabCount - 1; index >= 0; index--) {  				if (index != this.SelectedIndex && (this.RowCount == 1 || this.GetTabRow (index) == row)) {  					this.DrawTabPage (index' this._TabBufferGraphics);  				}  			}  		}  	}  	else {  		for (int index = this.TabCount - 1; index >= 0; index--) {  			if (index != this.SelectedIndex) {  				this.DrawTabPage (index' this._TabBufferGraphics);  			}  		}  	}  	//	The selected tab must be drawn last so it appears on top.  	if (this.SelectedIndex > -1) {  		this.DrawTabPage (this.SelectedIndex' this._TabBufferGraphics);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom && !this.Multiline) {  	this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom && !this.Multiline) {  	this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The following statement contains a magic number: this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,CustomPaint,The following statement contains a magic number: this._TabBufferGraphics.Clip = new Region (new RectangleF (this.ClientRectangle.X + 3' this.ClientRectangle.Y' this.ClientRectangle.Width - 6' this.ClientRectangle.Height));  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetPageBounds,The following statement contains a magic number: if (pageBounds.Bottom > this.Height - 4) {  	pageBounds.Height -= (pageBounds.Bottom - this.Height + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetPageBounds,The following statement contains a magic number: if (pageBounds.Bottom > this.Height - 4) {  	pageBounds.Height -= (pageBounds.Bottom - this.Height + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetPageBounds,The following statement contains a magic number: pageBounds.Height -= (pageBounds.Bottom - this.Height + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF tabBounds = path.GetBounds ();  	textRect = new Rectangle ((int)tabBounds.X' (int)tabBounds.Y' (int)tabBounds.Width' (int)tabBounds.Height);  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		textRect.Y += 4;  		textRect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		textRect.Y += 2;  		textRect.Height -= 6;  		break;  	case TabAlignment.Left:  		textRect.X += 4;  		textRect.Width -= 6;  		break;  	case TabAlignment.Right:  		textRect.X += 2;  		textRect.Width -= 6;  		break;  	}  	//	If there is an image allow for it  	if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  		Rectangle imageRect = this.GetTabImageRect (index);  		if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.X = imageRect.Right + 4;  				textRect.Width -= (textRect.Right - (int)tabBounds.Right);  			}  			else {  				textRect.Y = imageRect.Y + 4;  				textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  		else {  			if (this.Alignment <= TabAlignment.Bottom) {  				textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  			}  			//	If there is a closer allow for it  			if (this._StyleProvider.ShowTabCloser) {  				Rectangle closerRect = this.GetTabCloserRect (index);  				if (this.Alignment <= TabAlignment.Bottom) {  					if (this.RightToLeftLayout) {  						textRect.Width -= (closerRect.Right + 4 - textRect.X);  						textRect.X = closerRect.Right + 4;  					}  					else {  						textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  					}  				}  				else {  					if (this.RightToLeftLayout) {  						textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  						textRect.Y = closerRect.Bottom + 4;  					}  					else {  						textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  					}  				}  			}  		}  	}  	else {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	//	Ensure it fits inside the path at the centre line  	if (this.Alignment <= TabAlignment.Bottom) {  		while (!path.IsVisible (textRect.Right' textRect.Y) && textRect.Width > 0) {  			textRect.Width -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Width > 0) {  			textRect.X += 1;  			textRect.Width -= 1;  		}  	}  	else {  		while (!path.IsVisible (textRect.X' textRect.Bottom) && textRect.Height > 0) {  			textRect.Height -= 1;  		}  		while (!path.IsVisible (textRect.X' textRect.Y) && textRect.Height > 0) {  			textRect.Y += 1;  			textRect.Height -= 1;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Y += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Y += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.X += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.X += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.ImageList != null && (this.TabPages [index].ImageIndex > -1 || (!string.IsNullOrEmpty (this.TabPages [index].ImageKey) && !this.TabPages [index].ImageKey.Equals ("(none)"' StringComparison.OrdinalIgnoreCase)))) {  	Rectangle imageRect = this.GetTabImageRect (index);  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.X = imageRect.Right + 4;  			textRect.Width -= (textRect.Right - (int)tabBounds.Right);  		}  		else {  			textRect.Y = imageRect.Y + 4;  			textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  	else {  		if (this.Alignment <= TabAlignment.Bottom) {  			textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  		}  		//	If there is a closer allow for it  		if (this._StyleProvider.ShowTabCloser) {  			Rectangle closerRect = this.GetTabCloserRect (index);  			if (this.Alignment <= TabAlignment.Bottom) {  				if (this.RightToLeftLayout) {  					textRect.Width -= (closerRect.Right + 4 - textRect.X);  					textRect.X = closerRect.Right + 4;  				}  				else {  					textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  				}  			}  			else {  				if (this.RightToLeftLayout) {  					textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  					textRect.Y = closerRect.Bottom + 4;  				}  				else {  					textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  				}  			}  		}  	}  }  else {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.X = imageRect.Right + 4;  		textRect.Width -= (textRect.Right - (int)tabBounds.Right);  	}  	else {  		textRect.Y = imageRect.Y + 4;  		textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	textRect.X = imageRect.Right + 4;  	textRect.Width -= (textRect.Right - (int)tabBounds.Right);  }  else {  	textRect.Y = imageRect.Y + 4;  	textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	textRect.X = imageRect.Right + 4;  	textRect.Width -= (textRect.Right - (int)tabBounds.Right);  }  else {  	textRect.Y = imageRect.Y + 4;  	textRect.Height -= (textRect.Bottom - (int)tabBounds.Bottom);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.X = imageRect.Right + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Y = imageRect.Y + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= (closerRect.Right + 4 - textRect.X);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.X = closerRect.Right + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Y = closerRect.Bottom + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  else {  	if (this.Alignment <= TabAlignment.Bottom) {  		textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  	}  	//	If there is a closer allow for it  	if (this._StyleProvider.ShowTabCloser) {  		Rectangle closerRect = this.GetTabCloserRect (index);  		if (this.Alignment <= TabAlignment.Bottom) {  			if (this.RightToLeftLayout) {  				textRect.Width -= (closerRect.Right + 4 - textRect.X);  				textRect.X = closerRect.Right + 4;  			}  			else {  				textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  			}  		}  		else {  			if (this.RightToLeftLayout) {  				textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  				textRect.Y = closerRect.Bottom + 4;  			}  			else {  				textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= (closerRect.Right + 4 - textRect.X);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.X = closerRect.Right + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Y = closerRect.Bottom + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= ((int)tabBounds.Right - imageRect.X + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= ((int)tabBounds.Bottom - imageRect.Y + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= (closerRect.Right + 4 - textRect.X);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.X = closerRect.Right + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Y = closerRect.Bottom + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser) {  	Rectangle closerRect = this.GetTabCloserRect (index);  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			textRect.Width -= (closerRect.Right + 4 - textRect.X);  			textRect.X = closerRect.Right + 4;  		}  		else {  			textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  		}  	}  	else {  		if (this.RightToLeftLayout) {  			textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  			textRect.Y = closerRect.Bottom + 4;  		}  		else {  			textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		textRect.Width -= (closerRect.Right + 4 - textRect.X);  		textRect.X = closerRect.Right + 4;  	}  	else {  		textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  	}  }  else {  	if (this.RightToLeftLayout) {  		textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  		textRect.Y = closerRect.Bottom + 4;  	}  	else {  		textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Width -= (closerRect.Right + 4 - textRect.X);  	textRect.X = closerRect.Right + 4;  }  else {  	textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= (closerRect.Right + 4 - textRect.X);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.X = closerRect.Right + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Width -= ((int)tabBounds.Right - closerRect.X + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  	textRect.Y = closerRect.Bottom + 4;  }  else {  	textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= (closerRect.Bottom + 4 - textRect.Y);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Y = closerRect.Bottom + 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following statement contains a magic number: textRect.Height -= ((int)tabBounds.Bottom - closerRect.Y + 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	row = (rect.Y - 2) / rect.Height;  	break;  case TabAlignment.Bottom:  	row = ((this.Height - rect.Y - 2) / rect.Height) - 1;  	break;  case TabAlignment.Left:  	row = (rect.X - 2) / rect.Width;  	break;  case TabAlignment.Right:  	row = ((this.Width - rect.X - 2) / rect.Width) - 1;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	row = (rect.Y - 2) / rect.Height;  	break;  case TabAlignment.Bottom:  	row = ((this.Height - rect.Y - 2) / rect.Height) - 1;  	break;  case TabAlignment.Left:  	row = (rect.X - 2) / rect.Width;  	break;  case TabAlignment.Right:  	row = ((this.Width - rect.X - 2) / rect.Width) - 1;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	row = (rect.Y - 2) / rect.Height;  	break;  case TabAlignment.Bottom:  	row = ((this.Height - rect.Y - 2) / rect.Height) - 1;  	break;  case TabAlignment.Left:  	row = (rect.X - 2) / rect.Width;  	break;  case TabAlignment.Right:  	row = ((this.Width - rect.X - 2) / rect.Width) - 1;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	row = (rect.Y - 2) / rect.Height;  	break;  case TabAlignment.Bottom:  	row = ((this.Height - rect.Y - 2) / rect.Height) - 1;  	break;  case TabAlignment.Left:  	row = (rect.X - 2) / rect.Width;  	break;  case TabAlignment.Right:  	row = ((this.Width - rect.X - 2) / rect.Width) - 1;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following statement contains a magic number: row = (rect.Y - 2) / rect.Height;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following statement contains a magic number: row = ((this.Height - rect.Y - 2) / rect.Height) - 1;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following statement contains a magic number: row = (rect.X - 2) / rect.Width;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following statement contains a magic number: row = ((this.Width - rect.X - 2) / rect.Width) - 1;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,IsFirstTabInRow,The following statement contains a magic number: if (!firstTabinRow) {  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.GetTabRect (index).X == 2) {  			firstTabinRow = true;  		}  	}  	else {  		if (this.GetTabRect (index).Y == 2) {  			firstTabinRow = true;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,IsFirstTabInRow,The following statement contains a magic number: if (!firstTabinRow) {  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.GetTabRect (index).X == 2) {  			firstTabinRow = true;  		}  	}  	else {  		if (this.GetTabRect (index).Y == 2) {  			firstTabinRow = true;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,IsFirstTabInRow,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.GetTabRect (index).X == 2) {  		firstTabinRow = true;  	}  }  else {  	if (this.GetTabRect (index).Y == 2) {  		firstTabinRow = true;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,IsFirstTabInRow,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.GetTabRect (index).X == 2) {  		firstTabinRow = true;  	}  }  else {  	if (this.GetTabRect (index).Y == 2) {  		firstTabinRow = true;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,IsFirstTabInRow,The following statement contains a magic number: if (this.GetTabRect (index).X == 2) {  	firstTabinRow = true;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,IsFirstTabInRow,The following statement contains a magic number: if (this.GetTabRect (index).Y == 2) {  	firstTabinRow = true;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: rect.Y += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: rect.Height -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: rect.Y += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: rect.Height -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: rect.X += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: rect.Width -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: rect.X += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: rect.Width -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.X += 1;  		}  		imageRect.X += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  			imageRect.X -= 1;  		}  		imageRect.X -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.X -= 10;  		}  	}  }  else {  	if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  			imageRect.Y += 1;  		}  		imageRect.Y += 4;  	}  	else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  	}  	else {  		imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  		while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  			imageRect.Y -= 1;  		}  		imageRect.Y -= 4;  		//	Move it in further to allow for the tab closer  		if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  			imageRect.Y -= 10;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.X += 1;  	}  	imageRect.X += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect.X += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.Right' imageRect.Y)) {  		imageRect.X -= 1;  	}  	imageRect.X -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.X -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)(((int)rect.Right - (int)rect.X - (int)rect.Height + 2) / 2))' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 16) / 2)' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect.X -= 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  	imageRect.X -= 10;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect.X -= 10;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyLeftAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Y)) {  		imageRect.Y += 1;  	}  	imageRect.Y += 4;  }  else if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect.Y += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if ((this._StyleProvider.ImageAlign & NativeMethods.AnyCenterAlign) != ((ContentAlignment)0)) {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  }  else {  	imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  	while (!tabBorderPath.IsVisible (imageRect.X' imageRect.Bottom)) {  		imageRect.Y -= 1;  	}  	imageRect.Y -= 4;  	//	Move it in further to allow for the tab closer  	if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  		imageRect.Y -= 10;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Y + (int)Math.Floor ((double)(((int)rect.Bottom - (int)rect.Y - (int)rect.Width + 2) / 2))' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 16) / 2)' (int)rect.Bottom' 16' 16);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect.Y -= 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: if (this._StyleProvider.ShowTabCloser && !this.RightToLeftLayout) {  	imageRect.Y -= 10;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following statement contains a magic number: imageRect.Y -= 10;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: using (GraphicsPath path = this._StyleProvider.GetTabBorder (index)) {  	RectangleF rect = path.GetBounds ();  	//	Make it shorter or thinner to fit the height or width because of the padding added to the tab for painting  	switch (this.Alignment) {  	case TabAlignment.Top:  		rect.Y += 4;  		rect.Height -= 6;  		break;  	case TabAlignment.Bottom:  		rect.Y += 2;  		rect.Height -= 6;  		break;  	case TabAlignment.Left:  		rect.X += 4;  		rect.Width -= 6;  		break;  	case TabAlignment.Right:  		rect.X += 2;  		rect.Width -= 6;  		break;  	}  	if (this.Alignment <= TabAlignment.Bottom) {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  				closerRect.X += 1;  			}  			closerRect.X += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  			while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  				closerRect.X -= 1;  			}  			closerRect.X -= 4;  		}  	}  	else {  		if (this.RightToLeftLayout) {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  				closerRect.Y += 1;  			}  			closerRect.Y += 4;  		}  		else {  			closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  			while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  				closerRect.Y -= 1;  			}  			closerRect.Y -= 4;  		}  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: rect.Y += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: rect.Height -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: rect.Y += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: rect.Height -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: rect.X += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: rect.Width -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: rect.X += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: rect.Width -= 6;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.Alignment <= TabAlignment.Bottom) {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  			closerRect.X += 1;  		}  		closerRect.X += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  		while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  			closerRect.X -= 1;  		}  		closerRect.X -= 4;  	}  }  else {  	if (this.RightToLeftLayout) {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  			closerRect.Y += 1;  		}  		closerRect.Y += 4;  	}  	else {  		closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  		while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  			closerRect.Y -= 1;  		}  		closerRect.Y -= 4;  	}  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Left' closerRect.Y) && closerRect.Right < this.Width) {  		closerRect.X += 1;  	}  	closerRect.X += 4;  }  else {  	closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  	while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  		closerRect.X -= 1;  	}  	closerRect.X -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.Left' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect.X += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.Right' (int)rect.Y + (int)Math.Floor ((double)((int)rect.Height - 6) / 2)' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: while (!path.IsVisible (closerRect.Right' closerRect.Y) && closerRect.Right > -6) {  	closerRect.X -= 1;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect.X -= 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: if (this.RightToLeftLayout) {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Top) && closerRect.Bottom < this.Height) {  		closerRect.Y += 1;  	}  	closerRect.Y += 4;  }  else {  	closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  	while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  		closerRect.Y -= 1;  	}  	closerRect.Y -= 4;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Top' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect.Y += 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect = new Rectangle ((int)rect.X + (int)Math.Floor ((double)((int)rect.Width - 6) / 2)' (int)rect.Bottom' 6' 6);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: while (!path.IsVisible (closerRect.X' closerRect.Bottom) && closerRect.Top > -6) {  	closerRect.Y -= 1;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following statement contains a magic number: closerRect.Y -= 4;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,AndiCustomTabStyleProvider,The following statement contains a magic number: this.Padding = new Point (6' 3);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,AndiCustomTabStyleProvider,The following statement contains a magic number: this.Padding = new Point (6' 3);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Height += 2;  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 2;  	tabBounds.Y -= 2;  	break;  case TabAlignment.Left:  	tabBounds.Width += 2;  	break;  case TabAlignment.Right:  	tabBounds.X -= 2;  	tabBounds.Width += 2;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Height += 2;  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 2;  	tabBounds.Y -= 2;  	break;  case TabAlignment.Left:  	tabBounds.Width += 2;  	break;  case TabAlignment.Right:  	tabBounds.X -= 2;  	tabBounds.Width += 2;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Height += 2;  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 2;  	tabBounds.Y -= 2;  	break;  case TabAlignment.Left:  	tabBounds.Width += 2;  	break;  case TabAlignment.Right:  	tabBounds.X -= 2;  	tabBounds.Width += 2;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Height += 2;  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 2;  	tabBounds.Y -= 2;  	break;  case TabAlignment.Left:  	tabBounds.Width += 2;  	break;  case TabAlignment.Right:  	tabBounds.X -= 2;  	tabBounds.Width += 2;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Height += 2;  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 2;  	tabBounds.Y -= 2;  	break;  case TabAlignment.Left:  	tabBounds.Width += 2;  	break;  case TabAlignment.Right:  	tabBounds.X -= 2;  	tabBounds.Width += 2;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Height += 2;  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 2;  	tabBounds.Y -= 2;  	break;  case TabAlignment.Left:  	tabBounds.Width += 2;  	break;  case TabAlignment.Right:  	tabBounds.X -= 2;  	tabBounds.Width += 2;  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Height += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Height += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Y -= 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Width += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.X -= 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Width += 2;  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = SystemColors.ControlLight;  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = SystemColors.ControlLight;  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = SystemColors.ControlLight;  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = SystemColors.ControlLight;  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = SystemColors.ControlLight;  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = SystemColors.ControlLight;  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  	dark = Color.FromArgb (167' 217' 245);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (167' 217' 245);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (167' 217' 245);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (167' 217' 245);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate (3' 3);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate (3' 3);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  	Brush focusBrush = null;  	RectangleF pathRect = tabpath.GetBounds ();  	Rectangle focusRect = Rectangle.Empty;  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Bottom:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Left:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  		break;  	case TabAlignment.Right:  		focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  		break;  	}  	//	Ensure the focus stip does not go outside the tab  	Region focusRegion = new Region (focusRect);  	focusRegion.Intersect (tabpath);  	graphics.FillRegion (focusBrush' focusRegion);  	focusRegion.Dispose ();  	focusBrush.Dispose ();  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  	Brush focusBrush = null;  	RectangleF pathRect = tabpath.GetBounds ();  	Rectangle focusRect = Rectangle.Empty;  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Bottom:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Left:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  		break;  	case TabAlignment.Right:  		focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  		break;  	}  	//	Ensure the focus stip does not go outside the tab  	Region focusRegion = new Region (focusRect);  	focusRegion.Intersect (tabpath);  	graphics.FillRegion (focusBrush' focusRegion);  	focusRegion.Dispose ();  	focusBrush.Dispose ();  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  	Brush focusBrush = null;  	RectangleF pathRect = tabpath.GetBounds ();  	Rectangle focusRect = Rectangle.Empty;  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Bottom:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Left:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  		break;  	case TabAlignment.Right:  		focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  		break;  	}  	//	Ensure the focus stip does not go outside the tab  	Region focusRegion = new Region (focusRect);  	focusRegion.Intersect (tabpath);  	graphics.FillRegion (focusBrush' focusRegion);  	focusRegion.Dispose ();  	focusBrush.Dispose ();  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  	Brush focusBrush = null;  	RectangleF pathRect = tabpath.GetBounds ();  	Rectangle focusRect = Rectangle.Empty;  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Bottom:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Left:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  		break;  	case TabAlignment.Right:  		focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  		break;  	}  	//	Ensure the focus stip does not go outside the tab  	Region focusRegion = new Region (focusRect);  	focusRegion.Intersect (tabpath);  	graphics.FillRegion (focusBrush' focusRegion);  	focusRegion.Dispose ();  	focusBrush.Dispose ();  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  	Brush focusBrush = null;  	RectangleF pathRect = tabpath.GetBounds ();  	Rectangle focusRect = Rectangle.Empty;  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Bottom:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Left:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  		break;  	case TabAlignment.Right:  		focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  		break;  	}  	//	Ensure the focus stip does not go outside the tab  	Region focusRegion = new Region (focusRect);  	focusRegion.Intersect (tabpath);  	graphics.FillRegion (focusBrush' focusRegion);  	focusRegion.Dispose ();  	focusBrush.Dispose ();  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: if (this._FocusTrack && this._TabControl.Focused && index == this._TabControl.SelectedIndex) {  	Brush focusBrush = null;  	RectangleF pathRect = tabpath.GetBounds ();  	Rectangle focusRect = Rectangle.Empty;  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Bottom:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  		break;  	case TabAlignment.Left:  		focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  		break;  	case TabAlignment.Right:  		focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  		focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  		break;  	}  	//	Ensure the focus stip does not go outside the tab  	Region focusRegion = new Region (focusRect);  	focusRegion.Intersect (tabpath);  	graphics.FillRegion (focusBrush' focusRegion);  	focusRegion.Dispose ();  	focusBrush.Dispose ();  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  	break;  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following statement contains a magic number: focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.Alignment == TabAlignment.Top) {  	light = Color.FromArgb (207' 207' 207);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.Alignment == TabAlignment.Top) {  	light = Color.FromArgb (207' 207' 207);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.Alignment == TabAlignment.Top) {  	light = Color.FromArgb (207' 207' 207);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl,NativeMethods,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\NativeMethods.cs,HiWord,The following statement contains a magic number: if ((dWord.ToInt32 () & 0x80000000) == 0x80000000)  	return (dWord.ToInt32 () >> 16);  else  	return (dWord.ToInt32 () >> 16) & 0xffff;  
Magic Number,Andi.Controls.TabControl,NativeMethods,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\NativeMethods.cs,HiWord,The following statement contains a magic number: if ((dWord.ToInt32 () & 0x80000000) == 0x80000000)  	return (dWord.ToInt32 () >> 16);  else  	return (dWord.ToInt32 () >> 16) & 0xffff;  
Magic Number,Andi.Controls.TabControl,NativeMethods,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\NativeMethods.cs,HiWord,The following statement contains a magic number: return (dWord.ToInt32 () >> 16);  
Magic Number,Andi.Controls.TabControl,NativeMethods,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\NativeMethods.cs,HiWord,The following statement contains a magic number: return (dWord.ToInt32 () >> 16) & 0xffff;  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl,ThemedColors,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\ThemedColors.cs,ThemedColors,The following statement contains a magic number: ThemedColors._toolBorder = new Color[] {  	Color.FromArgb (127' 157' 185)'  	Color.FromArgb (164' 185' 127)'  	Color.FromArgb (165' 172' 178)'  	Color.FromArgb (132' 130' 132)  };  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,TabStyleAngledProvider,The following statement contains a magic number: this._Overlap = 7;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,TabStyleAngledProvider,The following statement contains a magic number: this._Radius = 10;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,TabStyleAngledProvider,The following statement contains a magic number: this.Padding = new Point (10' 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,TabStyleAngledProvider,The following statement contains a magic number: this.Padding = new Point (10' 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,TabStyleChromeProvider,The following statement contains a magic number: this._Overlap = 16;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,TabStyleChromeProvider,The following statement contains a magic number: this._Radius = 16;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,TabStyleChromeProvider,The following statement contains a magic number: this.Padding = new Point (7' 5);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,TabStyleChromeProvider,The following statement contains a magic number: this.Padding = new Point (7' 5);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: if (this._TabControl.Alignment <= TabAlignment.Bottom) {  	spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  }  else {  	spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  	eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  	sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  	quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: spread = (int)Math.Floor ((decimal)tabBounds.Height * 2 / 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: eigth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 8);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: sixth = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 6);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: quarter = (int)Math.Floor ((decimal)tabBounds.Height * 1 / 4);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: spread = (int)Math.Floor ((decimal)tabBounds.Width * 2 / 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: eigth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 8);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: sixth = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 6);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following statement contains a magic number: quarter = (int)Math.Floor ((decimal)tabBounds.Width * 1 / 4);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  				graphics.FillPath (closerBrush' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  				graphics.FillPath (closerBrush' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  				graphics.FillPath (closerBrush' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  			graphics.FillPath (closerBrush' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  			graphics.FillPath (closerBrush' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  			graphics.FillPath (closerBrush' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  	using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  		graphics.FillPath (closerBrush' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  	using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  		graphics.FillPath (closerBrush' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  	using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  		graphics.FillPath (closerBrush' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  	graphics.FillPath (closerBrush' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  	graphics.FillPath (closerBrush' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,DrawTabCloser,The following statement contains a magic number: using (SolidBrush closerBrush = new SolidBrush (Color.FromArgb (193' 53' 53))) {  	graphics.FillPath (closerBrush' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddEllipse (new Rectangle (closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4));  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddEllipse (new Rectangle (closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4));  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddEllipse (new Rectangle (closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4));  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddEllipse (new Rectangle (closerRect.X - 2' closerRect.Y - 2' closerRect.Width + 4' closerRect.Height + 4));  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,TabStyleDefaultProvider,The following statement contains a magic number: this._Radius = 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y += 1;  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Bottom:  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Left:  		tabBounds.X += 1;  		tabBounds.Width -= 1;  		break;  	case TabAlignment.Right:  		tabBounds.Width -= 1;  		break;  	}  }  else {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		if (tabBounds.Y > 0) {  			tabBounds.Y -= 1;  			tabBounds.Height += 1;  		}  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Bottom:  		if (tabBounds.Bottom < this._TabControl.Bottom) {  			tabBounds.Height += 1;  		}  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Left:  		if (tabBounds.X > 0) {  			tabBounds.X -= 1;  			tabBounds.Width += 1;  		}  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	case TabAlignment.Right:  		if (tabBounds.Right < this._TabControl.Right) {  			tabBounds.Width += 1;  		}  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y += 1;  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Bottom:  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Left:  		tabBounds.X += 1;  		tabBounds.Width -= 1;  		break;  	case TabAlignment.Right:  		tabBounds.Width -= 1;  		break;  	}  }  else {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		if (tabBounds.Y > 0) {  			tabBounds.Y -= 1;  			tabBounds.Height += 1;  		}  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Bottom:  		if (tabBounds.Bottom < this._TabControl.Bottom) {  			tabBounds.Height += 1;  		}  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Left:  		if (tabBounds.X > 0) {  			tabBounds.X -= 1;  			tabBounds.Width += 1;  		}  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	case TabAlignment.Right:  		if (tabBounds.Right < this._TabControl.Right) {  			tabBounds.Width += 1;  		}  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y += 1;  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Bottom:  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Left:  		tabBounds.X += 1;  		tabBounds.Width -= 1;  		break;  	case TabAlignment.Right:  		tabBounds.Width -= 1;  		break;  	}  }  else {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		if (tabBounds.Y > 0) {  			tabBounds.Y -= 1;  			tabBounds.Height += 1;  		}  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Bottom:  		if (tabBounds.Bottom < this._TabControl.Bottom) {  			tabBounds.Height += 1;  		}  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Left:  		if (tabBounds.X > 0) {  			tabBounds.X -= 1;  			tabBounds.Width += 1;  		}  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	case TabAlignment.Right:  		if (tabBounds.Right < this._TabControl.Right) {  			tabBounds.Width += 1;  		}  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y += 1;  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Bottom:  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Left:  		tabBounds.X += 1;  		tabBounds.Width -= 1;  		break;  	case TabAlignment.Right:  		tabBounds.Width -= 1;  		break;  	}  }  else {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		if (tabBounds.Y > 0) {  			tabBounds.Y -= 1;  			tabBounds.Height += 1;  		}  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Bottom:  		if (tabBounds.Bottom < this._TabControl.Bottom) {  			tabBounds.Height += 1;  		}  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Left:  		if (tabBounds.X > 0) {  			tabBounds.X -= 1;  			tabBounds.Width += 1;  		}  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	case TabAlignment.Right:  		if (tabBounds.Right < this._TabControl.Right) {  			tabBounds.Width += 1;  		}  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	if (tabBounds.Y > 0) {  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	if (tabBounds.Bottom < this._TabControl.Bottom) {  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	if (tabBounds.X > 0) {  		tabBounds.X -= 1;  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	if (tabBounds.Right < this._TabControl.Right) {  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	if (tabBounds.Y > 0) {  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	if (tabBounds.Bottom < this._TabControl.Bottom) {  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	if (tabBounds.X > 0) {  		tabBounds.X -= 1;  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	if (tabBounds.Right < this._TabControl.Right) {  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	if (tabBounds.Y > 0) {  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	if (tabBounds.Bottom < this._TabControl.Bottom) {  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	if (tabBounds.X > 0) {  		tabBounds.X -= 1;  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	if (tabBounds.Right < this._TabControl.Right) {  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	if (tabBounds.Y > 0) {  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	if (tabBounds.Bottom < this._TabControl.Bottom) {  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	if (tabBounds.X > 0) {  		tabBounds.X -= 1;  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	if (tabBounds.Right < this._TabControl.Right) {  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (firstTabinRow) {  	tabBounds.Width += 1;  }  else {  	tabBounds.X -= 1;  	tabBounds.Width += 2;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Width += 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (firstTabinRow) {  	tabBounds.Width += 1;  }  else {  	tabBounds.X -= 1;  	tabBounds.Width += 2;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Width += 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (firstTabinRow) {  	tabBounds.Height += 1;  }  else {  	tabBounds.Y -= 1;  	tabBounds.Height += 2;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Height += 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: if (firstTabinRow) {  	tabBounds.Height += 1;  }  else {  	tabBounds.Y -= 1;  	tabBounds.Height += 2;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Height += 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,TabStyleIE8Provider,The following statement contains a magic number: this._Radius = 3;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,TabStyleIE8Provider,The following statement contains a magic number: this.Padding = new Point (6' 5);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,TabStyleIE8Provider,The following statement contains a magic number: this.Padding = new Point (6' 5);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y += 1;  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Bottom:  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Left:  		tabBounds.X += 1;  		tabBounds.Width -= 1;  		break;  	case TabAlignment.Right:  		tabBounds.Width -= 1;  		break;  	}  }  else {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Bottom:  		tabBounds.Height += 1;  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Left:  		tabBounds.X -= 1;  		tabBounds.Width += 1;  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	case TabAlignment.Right:  		tabBounds.Width += 1;  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y += 1;  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Bottom:  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Left:  		tabBounds.X += 1;  		tabBounds.Width -= 1;  		break;  	case TabAlignment.Right:  		tabBounds.Width -= 1;  		break;  	}  }  else {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Bottom:  		tabBounds.Height += 1;  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Left:  		tabBounds.X -= 1;  		tabBounds.Width += 1;  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	case TabAlignment.Right:  		tabBounds.Width += 1;  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y += 1;  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Bottom:  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Left:  		tabBounds.X += 1;  		tabBounds.Width -= 1;  		break;  	case TabAlignment.Right:  		tabBounds.Width -= 1;  		break;  	}  }  else {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Bottom:  		tabBounds.Height += 1;  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Left:  		tabBounds.X -= 1;  		tabBounds.Width += 1;  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	case TabAlignment.Right:  		tabBounds.Width += 1;  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (index != this._TabControl.SelectedIndex) {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y += 1;  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Bottom:  		tabBounds.Height -= 1;  		break;  	case TabAlignment.Left:  		tabBounds.X += 1;  		tabBounds.Width -= 1;  		break;  	case TabAlignment.Right:  		tabBounds.Width -= 1;  		break;  	}  }  else {  	switch (this._TabControl.Alignment) {  	case TabAlignment.Top:  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Bottom:  		tabBounds.Height += 1;  		if (firstTabinRow) {  			tabBounds.Width += 1;  		}  		else {  			tabBounds.X -= 1;  			tabBounds.Width += 2;  		}  		break;  	case TabAlignment.Left:  		tabBounds.X -= 1;  		tabBounds.Width += 1;  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	case TabAlignment.Right:  		tabBounds.Width += 1;  		if (firstTabinRow) {  			tabBounds.Height += 1;  		}  		else {  			tabBounds.Y -= 1;  			tabBounds.Height += 2;  		}  		break;  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Y -= 1;  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	tabBounds.X -= 1;  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Y -= 1;  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	tabBounds.X -= 1;  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Y -= 1;  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	tabBounds.X -= 1;  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Y -= 1;  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	tabBounds.X -= 1;  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (firstTabinRow) {  	tabBounds.Width += 1;  }  else {  	tabBounds.X -= 1;  	tabBounds.Width += 2;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Width += 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (firstTabinRow) {  	tabBounds.Width += 1;  }  else {  	tabBounds.X -= 1;  	tabBounds.Width += 2;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Width += 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (firstTabinRow) {  	tabBounds.Height += 1;  }  else {  	tabBounds.Y -= 1;  	tabBounds.Height += 2;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Height += 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: if (firstTabinRow) {  	tabBounds.Height += 1;  }  else {  	tabBounds.Y -= 1;  	tabBounds.Height += 2;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following statement contains a magic number: tabBounds.Height += 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (196' 222' 251);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (196' 222' 251);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (196' 222' 251);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (196' 222' 251);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (196' 222' 251);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (196' 222' 251);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (196' 222' 251);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (196' 222' 251);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (196' 222' 251);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = SystemColors.Window;  	dark = Color.FromArgb (166' 203' 248);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (166' 203' 248);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (166' 203' 248);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (166' 203' 248);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate (3' 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate (3' 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (this.BorderColor)) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (this.BorderColor)) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (this.BorderColor)) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (this.BorderColor)) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  	using (Pen closerPen = new Pen (this._CloserColorActive)) {  		closerPen.Width = 2;  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (this._CloserColorActive)) {  	closerPen.Width = 2;  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: closerPen.Width = 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  	using (Pen closerPen = new Pen (this._CloserColor)) {  		closerPen.Width = 2;  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (this._CloserColor)) {  	closerPen.Width = 2;  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,DrawTabCloser,The following statement contains a magic number: closerPen.Width = 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.X - 1' closerRect.Y - 2' closerRect.Right + 1' closerRect.Y - 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.X - 1' closerRect.Y - 2' closerRect.Right + 1' closerRect.Y - 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.Right + 2' closerRect.Y - 1' closerRect.Right + 2' closerRect.Bottom + 1);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.Right + 2' closerRect.Y - 1' closerRect.Right + 2' closerRect.Bottom + 1);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.Right + 1' closerRect.Bottom + 2' closerRect.X - 1' closerRect.Bottom + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.Right + 1' closerRect.Bottom + 2' closerRect.X - 1' closerRect.Bottom + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.X - 2' closerRect.Bottom + 1' closerRect.X - 2' closerRect.Y - 1);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.X - 2' closerRect.Bottom + 1' closerRect.X - 2' closerRect.Y - 1);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.FromArgb (207' 207' 207);  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (207' 207' 207);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.FromArgb (234' 246' 253);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (234' 246' 253);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,TabStyleRoundedProvider,The following statement contains a magic number: this._Radius = 10;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,TabStyleRoundedProvider,The following statement contains a magic number: this.Padding = new Point (6' 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,TabStyleRoundedProvider,The following statement contains a magic number: this.Padding = new Point (6' 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,TabStyleVisualStudioProvider,The following statement contains a magic number: this._Overlap = 7;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,TabStyleVisualStudioProvider,The following statement contains a magic number: this.Padding = new Point (14' 1);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following statement contains a magic number: path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._Radius = 3;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._CloserColor = Color.FromArgb (117' 99' 61);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._CloserColor = Color.FromArgb (117' 99' 61);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._CloserColor = Color.FromArgb (117' 99' 61);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._BorderColorHot = Color.FromArgb (155' 167' 183);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._BorderColorHot = Color.FromArgb (155' 167' 183);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this._BorderColorHot = Color.FromArgb (155' 167' 183);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this.Padding = new Point (6' 5);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,TabStyleVS2010Provider,The following statement contains a magic number: this.Padding = new Point (6' 5);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (229' 195' 101);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (229' 195' 101);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (229' 195' 101);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (229' 195' 101);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (229' 195' 101);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	dark = Color.FromArgb (229' 195' 101);  	light = SystemColors.Window;  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (229' 195' 101);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (229' 195' 101);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (229' 195' 101);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (!this._TabControl.TabPages [index].Enabled) {  	light = dark;  }  else if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: if (this.HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	dark = Color.FromArgb (108' 116' 118);  	light = dark;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (108' 116' 118);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (108' 116' 118);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: dark = Color.FromArgb (108' 116' 118);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate (3' 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following statement contains a magic number: tabBounds.Inflate (3' 3);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = Color.FromArgb (229' 195' 101);  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.Transparent;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.Transparent;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = Color.FromArgb (229' 195' 101);  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.Transparent;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.Transparent;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: if (this._TabControl.SelectedIndex == index) {  	light = Color.FromArgb (229' 195' 101);  }  else if (!this._TabControl.TabPages [index].Enabled) {  	light = Color.Transparent;  }  else if (this._HotTrack && index == this._TabControl.ActiveIndex) {  	//	Enable hot tracking  	light = Color.Transparent;  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (229' 195' 101);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (229' 195' 101);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetPageBackgroundBrush,The following statement contains a magic number: light = Color.FromArgb (229' 195' 101);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (this._ShowTabCloser) {  	Rectangle closerRect = this._TabControl.GetTabCloserRect (index);  	graphics.SmoothingMode = SmoothingMode.AntiAlias;  	if (closerRect.Contains (this._TabControl.MousePosition)) {  		using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  			graphics.FillPath (Brushes.White' closerPath);  			using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  				graphics.DrawPath (closerPen' closerPath);  			}  		}  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColorActive)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else {  		if (index == this._TabControl.SelectedIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (this._CloserColor)) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  		else if (index == this._TabControl.ActiveIndex) {  			using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  				using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  					closerPen.Width = 2;  					graphics.DrawPath (closerPen' closerPath);  				}  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (closerRect.Contains (this._TabControl.MousePosition)) {  	using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  		graphics.FillPath (Brushes.White' closerPath);  		using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  			graphics.DrawPath (closerPen' closerPath);  		}  	}  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColorActive)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else {  	if (index == this._TabControl.SelectedIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (this._CloserColor)) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  	else if (index == this._TabControl.ActiveIndex) {  		using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  			using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  				closerPen.Width = 2;  				graphics.DrawPath (closerPen' closerPath);  			}  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  	graphics.FillPath (Brushes.White' closerPath);  	using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  	graphics.FillPath (Brushes.White' closerPath);  	using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserButtonPath (closerRect)) {  	graphics.FillPath (Brushes.White' closerPath);  	using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (Color.FromArgb (229' 195' 101))) {  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  	using (Pen closerPen = new Pen (this._CloserColorActive)) {  		closerPen.Width = 2;  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (this._CloserColorActive)) {  	closerPen.Width = 2;  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: closerPen.Width = 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.SelectedIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.SelectedIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.SelectedIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.SelectedIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.SelectedIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (this._CloserColor)) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  else if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  	using (Pen closerPen = new Pen (this._CloserColor)) {  		closerPen.Width = 2;  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (this._CloserColor)) {  	closerPen.Width = 2;  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: closerPen.Width = 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: if (index == this._TabControl.ActiveIndex) {  	using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  		using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  			closerPen.Width = 2;  			graphics.DrawPath (closerPen' closerPath);  		}  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  	using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  		closerPen.Width = 2;  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  	using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  		closerPen.Width = 2;  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  	using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  		closerPen.Width = 2;  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (GraphicsPath closerPath = GetCloserPath (closerRect)) {  	using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  		closerPen.Width = 2;  		graphics.DrawPath (closerPen' closerPath);  	}  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  	closerPen.Width = 2;  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  	closerPen.Width = 2;  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  	closerPen.Width = 2;  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: using (Pen closerPen = new Pen (Color.FromArgb (155' 167' 183))) {  	closerPen.Width = 2;  	graphics.DrawPath (closerPen' closerPath);  }  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,DrawTabCloser,The following statement contains a magic number: closerPen.Width = 2;  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.X - 1' closerRect.Y - 2' closerRect.Right + 1' closerRect.Y - 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.X - 1' closerRect.Y - 2' closerRect.Right + 1' closerRect.Y - 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.Right + 2' closerRect.Y - 1' closerRect.Right + 2' closerRect.Bottom + 1);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.Right + 2' closerRect.Y - 1' closerRect.Right + 2' closerRect.Bottom + 1);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.Right + 1' closerRect.Bottom + 2' closerRect.X - 1' closerRect.Bottom + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.Right + 1' closerRect.Bottom + 2' closerRect.X - 1' closerRect.Bottom + 2);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.X - 2' closerRect.Bottom + 1' closerRect.X - 2' closerRect.Y - 1);  
Magic Number,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetCloserButtonPath,The following statement contains a magic number: closerPath.AddLine (closerRect.X - 2' closerRect.Bottom + 1' closerRect.X - 2' closerRect.Y - 1);  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: arrowSize = 6;  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: textRectangle = Rectangle.Inflate (fillBounds' -4' -4);  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: textRectangle = Rectangle.Inflate (fillBounds' -4' -4);  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: if ((state & TabListPageState.Selected) == TabListPageState.Selected) {  	int y;  	int x;  	Point point1;  	Point point2;  	Point point3;  	y = fillBounds.Top + ((fillBounds.Height - (arrowSize * 2)) / 2);  	x = fillBounds.Right;  	point1 = new Point (x' y);  	point2 = new Point (x + arrowSize' y + arrowSize);  	point3 = new Point (x' y + (arrowSize * 2));  	using (Brush brush = new SolidBrush (fillColor)) {  		g.FillPolygon (brush' new[] {  			point1'  			point2'  			point3  		});  	}  }  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: if ((state & TabListPageState.Selected) == TabListPageState.Selected) {  	int y;  	int x;  	Point point1;  	Point point2;  	Point point3;  	y = fillBounds.Top + ((fillBounds.Height - (arrowSize * 2)) / 2);  	x = fillBounds.Right;  	point1 = new Point (x' y);  	point2 = new Point (x + arrowSize' y + arrowSize);  	point3 = new Point (x' y + (arrowSize * 2));  	using (Brush brush = new SolidBrush (fillColor)) {  		g.FillPolygon (brush' new[] {  			point1'  			point2'  			point3  		});  	}  }  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: if ((state & TabListPageState.Selected) == TabListPageState.Selected) {  	int y;  	int x;  	Point point1;  	Point point2;  	Point point3;  	y = fillBounds.Top + ((fillBounds.Height - (arrowSize * 2)) / 2);  	x = fillBounds.Right;  	point1 = new Point (x' y);  	point2 = new Point (x + arrowSize' y + arrowSize);  	point3 = new Point (x' y + (arrowSize * 2));  	using (Brush brush = new SolidBrush (fillColor)) {  		g.FillPolygon (brush' new[] {  			point1'  			point2'  			point3  		});  	}  }  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: y = fillBounds.Top + ((fillBounds.Height - (arrowSize * 2)) / 2);  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: y = fillBounds.Top + ((fillBounds.Height - (arrowSize * 2)) / 2);  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: point3 = new Point (x' y + (arrowSize * 2));  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: if ((state & TabListPageState.Focused) == TabListPageState.Focused) {  	SizeF textSize;  	int offset;  	textSize = TextRenderer.MeasureText (g' page.Text' page.Font' textRectangle.Size' flags);  	offset = 2;  	ControlPaint.DrawFocusRectangle (g' new Rectangle (textRectangle.X' textRectangle.Y' (int)textSize.Width + offset' (int)textSize.Height + offset)' textColor' fillColor);  }  
Magic Number,Andi.Controls.TabList,DefaultTabListPageRenderer,C:\repos\andibadra_ANDT\Andi.Controls\TabList\DefaultTabListPageRenderer.cs,RenderHeader,The following statement contains a magic number: offset = 2;  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,TabList,The following statement contains a magic number: this.HeaderSize = new Size (150' 25);  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,TabList,The following statement contains a magic number: this.HeaderSize = new Size (150' 25);  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,TabList,The following statement contains a magic number: this.Size = new Size (200' 200);  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,TabList,The following statement contains a magic number: this.Size = new Size (200' 200);  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,TabList,The following statement contains a magic number: this.Padding = new Padding (3);  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following statement contains a magic number: if (this.ShowTabList) {  	// allow keyboard navigation' if any tabs are present  	if (this.TabListPageCount != 0) {  		switch (e.KeyCode) {  		case Keys.Down:  			this.CycleSelectedTab (1);  			break;  		case Keys.Up:  			this.CycleSelectedTab (-1);  			break;  		case Keys.PageDown:  			this.CycleSelectedTab (3);  			break;  		case Keys.PageUp:  			this.CycleSelectedTab (-3);  			break;  		case Keys.Home:  			this.SelectedIndex = 0;  			break;  		case Keys.End:  			this.SelectedIndex = this.TabListPageCount - 1;  			break;  		}  	}  }  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following statement contains a magic number: if (this.ShowTabList) {  	// allow keyboard navigation' if any tabs are present  	if (this.TabListPageCount != 0) {  		switch (e.KeyCode) {  		case Keys.Down:  			this.CycleSelectedTab (1);  			break;  		case Keys.Up:  			this.CycleSelectedTab (-1);  			break;  		case Keys.PageDown:  			this.CycleSelectedTab (3);  			break;  		case Keys.PageUp:  			this.CycleSelectedTab (-3);  			break;  		case Keys.Home:  			this.SelectedIndex = 0;  			break;  		case Keys.End:  			this.SelectedIndex = this.TabListPageCount - 1;  			break;  		}  	}  }  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following statement contains a magic number: if (this.TabListPageCount != 0) {  	switch (e.KeyCode) {  	case Keys.Down:  		this.CycleSelectedTab (1);  		break;  	case Keys.Up:  		this.CycleSelectedTab (-1);  		break;  	case Keys.PageDown:  		this.CycleSelectedTab (3);  		break;  	case Keys.PageUp:  		this.CycleSelectedTab (-3);  		break;  	case Keys.Home:  		this.SelectedIndex = 0;  		break;  	case Keys.End:  		this.SelectedIndex = this.TabListPageCount - 1;  		break;  	}  }  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following statement contains a magic number: if (this.TabListPageCount != 0) {  	switch (e.KeyCode) {  	case Keys.Down:  		this.CycleSelectedTab (1);  		break;  	case Keys.Up:  		this.CycleSelectedTab (-1);  		break;  	case Keys.PageDown:  		this.CycleSelectedTab (3);  		break;  	case Keys.PageUp:  		this.CycleSelectedTab (-3);  		break;  	case Keys.Home:  		this.SelectedIndex = 0;  		break;  	case Keys.End:  		this.SelectedIndex = this.TabListPageCount - 1;  		break;  	}  }  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following statement contains a magic number: switch (e.KeyCode) {  case Keys.Down:  	this.CycleSelectedTab (1);  	break;  case Keys.Up:  	this.CycleSelectedTab (-1);  	break;  case Keys.PageDown:  	this.CycleSelectedTab (3);  	break;  case Keys.PageUp:  	this.CycleSelectedTab (-3);  	break;  case Keys.Home:  	this.SelectedIndex = 0;  	break;  case Keys.End:  	this.SelectedIndex = this.TabListPageCount - 1;  	break;  }  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following statement contains a magic number: switch (e.KeyCode) {  case Keys.Down:  	this.CycleSelectedTab (1);  	break;  case Keys.Up:  	this.CycleSelectedTab (-1);  	break;  case Keys.PageDown:  	this.CycleSelectedTab (3);  	break;  case Keys.PageUp:  	this.CycleSelectedTab (-3);  	break;  case Keys.Home:  	this.SelectedIndex = 0;  	break;  case Keys.End:  	this.SelectedIndex = this.TabListPageCount - 1;  	break;  }  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following statement contains a magic number: this.CycleSelectedTab (3);  
Magic Number,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following statement contains a magic number: this.CycleSelectedTab (-3);  
Duplicate Code,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The method contains a code clone-set at the following line numbers (starting from the method definition): ((36' 59)' (90' 113))
Duplicate Code,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The method contains a code clone-set at the following line numbers (starting from the method definition): ((37' 59)' (61' 83))
Duplicate Code,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The method contains a code clone-set at the following line numbers (starting from the method definition): ((37' 56)' (61' 80)' (91' 110)' (116' 135))
Duplicate Code,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The method contains a code clone-set at the following line numbers (starting from the method definition): ((37' 59)' (116' 138)' (61' 83)' (91' 113))
Missing Default,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,OnPaint,The following switch statement is missing a default case: switch (this.GridDisplayMode) {  case ImageBoxGridDisplayMode.Image:  	Rectangle fillRectangle;  	fillRectangle = this.GetImageViewPort ();  	e.Graphics.FillRectangle (_texture' fillRectangle);  	break;  case ImageBoxGridDisplayMode.Client:  	e.Graphics.FillRectangle (_texture' innerRectangle);  	break;  }  
Missing Default,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,DrawImageBorder,The following switch statement is missing a default case: switch (this.ImageBorderStyle) {  case ImageBoxBorderStyle.FixedSingleDropShadow:  	this.DrawDropShadow (graphics' viewPort);  	break;  case ImageBoxBorderStyle.FixedSingleGlowShadow:  	this.DrawGlowShadow (graphics' viewPort);  	break;  }  
Missing Default,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,OnSelected,The following switch statement is missing a default case: switch (this.SelectionMode) {  case ImageBoxSelectionMode.Zoom:  	if (this.SelectionRegion.Width > SelectionDeadZone && this.SelectionRegion.Height > SelectionDeadZone) {  		this.ZoomToRegion (this.SelectionRegion);  		this.SelectNone ();  	}  	break;  }  
Missing Default,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ProcessImageShortcuts,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Home:  	if (this.AllowZoom) {  		this.PerformActualSize (ImageBoxActionSources.User);  	}  	break;  case Keys.PageDown:  case Keys.Oemplus:  	if (this.AllowZoom) {  		this.PerformZoomIn (ImageBoxActionSources.User);  	}  	break;  case Keys.PageUp:  case Keys.OemMinus:  	if (this.AllowZoom) {  		this.PerformZoomOut (ImageBoxActionSources.User);  	}  	break;  }  
Missing Default,Andi.Controls.ImageBox,AndiImageBox,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\AndiImageBox.cs,ProcessScrollingShortcuts,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Left:  	this.AdjustScroll (-(e.Modifiers == Keys.None ? this.HorizontalScroll.SmallChange : this.HorizontalScroll.LargeChange)' 0);  	break;  case Keys.Right:  	this.AdjustScroll (e.Modifiers == Keys.None ? this.HorizontalScroll.SmallChange : this.HorizontalScroll.LargeChange' 0);  	break;  case Keys.Up:  	this.AdjustScroll (0' -(e.Modifiers == Keys.None ? this.VerticalScroll.SmallChange : this.VerticalScroll.LargeChange));  	break;  case Keys.Down:  	this.AdjustScroll (0' e.Modifiers == Keys.None ? this.VerticalScroll.SmallChange : this.VerticalScroll.LargeChange);  	break;  }  
Missing Default,Andi.Controls.ImageBox,VirtualScrollableControl,C:\repos\andibadra_ANDT\Andi.Controls\ImageBox\VirtualScrollableControl.cs,OnScroll,The following switch statement is missing a default case: switch (e.ScrollOrientation) {  case ScrollOrientation.HorizontalScroll:  	this.ScrollByOffset (new Size (e.NewValue + this.AutoScrollPosition.X' 0));  	break;  case ScrollOrientation.VerticalScroll:  	this.ScrollByOffset (new Size (0' e.NewValue + this.AutoScrollPosition.Y));  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetStringFormat,The following switch statement is missing a default case: switch (this.Alignment) {  case TabAlignment.Top:  case TabAlignment.Bottom:  	format = new StringFormat ();  	break;  case TabAlignment.Left:  case TabAlignment.Right:  	format = new StringFormat (StringFormatFlags.DirectionVertical);  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabTextRect,The following switch statement is missing a default case: switch (this.Alignment) {  case TabAlignment.Top:  	textRect.Y += 4;  	textRect.Height -= 6;  	break;  case TabAlignment.Bottom:  	textRect.Y += 2;  	textRect.Height -= 6;  	break;  case TabAlignment.Left:  	textRect.X += 4;  	textRect.Width -= 6;  	break;  case TabAlignment.Right:  	textRect.X += 2;  	textRect.Width -= 6;  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabRow,The following switch statement is missing a default case: switch (this.Alignment) {  case TabAlignment.Top:  	row = (rect.Y - 2) / rect.Height;  	break;  case TabAlignment.Bottom:  	row = ((this.Height - rect.Y - 2) / rect.Height) - 1;  	break;  case TabAlignment.Left:  	row = (rect.X - 2) / rect.Width;  	break;  case TabAlignment.Right:  	row = ((this.Width - rect.X - 2) / rect.Width) - 1;  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,AddPageBorder,The following switch statement is missing a default case: switch (this.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.Right' pageBounds.Y' pageBounds.Right' pageBounds.Y);  	path.AddLine (pageBounds.Right' pageBounds.Y' pageBounds.Right' pageBounds.Bottom);  	path.AddLine (pageBounds.Right' pageBounds.Bottom' pageBounds.X' pageBounds.Bottom);  	path.AddLine (pageBounds.X' pageBounds.Bottom' pageBounds.X' pageBounds.Y);  	path.AddLine (pageBounds.X' pageBounds.Y' tabBounds.X' pageBounds.Y);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.X' pageBounds.Bottom' pageBounds.X' pageBounds.Bottom);  	path.AddLine (pageBounds.X' pageBounds.Bottom' pageBounds.X' pageBounds.Y);  	path.AddLine (pageBounds.X' pageBounds.Y' pageBounds.Right' pageBounds.Y);  	path.AddLine (pageBounds.Right' pageBounds.Y' pageBounds.Right' pageBounds.Bottom);  	path.AddLine (pageBounds.Right' pageBounds.Bottom' tabBounds.Right' pageBounds.Bottom);  	break;  case TabAlignment.Left:  	path.AddLine (pageBounds.X' tabBounds.Y' pageBounds.X' pageBounds.Y);  	path.AddLine (pageBounds.X' pageBounds.Y' pageBounds.Right' pageBounds.Y);  	path.AddLine (pageBounds.Right' pageBounds.Y' pageBounds.Right' pageBounds.Bottom);  	path.AddLine (pageBounds.Right' pageBounds.Bottom' pageBounds.X' pageBounds.Bottom);  	path.AddLine (pageBounds.X' pageBounds.Bottom' pageBounds.X' tabBounds.Bottom);  	break;  case TabAlignment.Right:  	path.AddLine (pageBounds.Right' tabBounds.Bottom' pageBounds.Right' pageBounds.Bottom);  	path.AddLine (pageBounds.Right' pageBounds.Bottom' pageBounds.X' pageBounds.Bottom);  	path.AddLine (pageBounds.X' pageBounds.Bottom' pageBounds.X' pageBounds.Y);  	path.AddLine (pageBounds.X' pageBounds.Y' pageBounds.Right' pageBounds.Y);  	path.AddLine (pageBounds.Right' pageBounds.Y' pageBounds.Right' tabBounds.Y);  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabImageRect,The following switch statement is missing a default case: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabControl,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabControl.cs,GetTabCloserRect,The following switch statement is missing a default case: switch (this.Alignment) {  case TabAlignment.Top:  	rect.Y += 4;  	rect.Height -= 6;  	break;  case TabAlignment.Bottom:  	rect.Y += 2;  	rect.Height -= 6;  	break;  case TabAlignment.Left:  	rect.X += 4;  	rect.Width -= 6;  	break;  case TabAlignment.Right:  	rect.X += 2;  	rect.Width -= 6;  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Height += 2;  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 2;  	tabBounds.Y -= 2;  	break;  case TabAlignment.Left:  	tabBounds.Width += 2;  	break;  case TabAlignment.Right:  	tabBounds.X -= 2;  	tabBounds.Width += 2;  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,GetTabBackgroundBrush,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	if (this._TabControl.SelectedIndex == index) {  		dark = light;  	}  	fillBrush = new LinearGradientBrush (tabBounds' light' dark' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	fillBrush = new LinearGradientBrush (tabBounds' light' dark' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	fillBrush = new LinearGradientBrush (tabBounds' dark' light' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	fillBrush = new LinearGradientBrush (tabBounds' light' dark' LinearGradientMode.Horizontal);  	break;  }  
Missing Default,Andi.Controls.TabControl,AndiCustomTabStyleProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\AndiCustomTabStyleProvider.cs,DrawTabFocusIndicator,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.Window' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Bottom - 4' (int)pathRect.Width' 4);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	focusRect = new Rectangle ((int)pathRect.X' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' this._FocusColor' SystemColors.ControlLight' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	focusRect = new Rectangle ((int)pathRect.Right - 4' (int)pathRect.Y' 4' (int)pathRect.Height);  	focusBrush = new LinearGradientBrush (focusRect' SystemColors.ControlLight' this._FocusColor' LinearGradientMode.Horizontal);  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleAngledProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleAngledProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + this._Radius - 2' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddLine (tabBounds.Right - this._Radius + 2' tabBounds.Y + 2' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right - this._Radius + 2' tabBounds.Bottom - 2);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddLine (tabBounds.X + this._Radius - 2' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 2' tabBounds.Bottom - this._Radius + 2);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + this._Radius - 2' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + this._Radius - 2);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddLine (tabBounds.Right - 2' tabBounds.Bottom - this._Radius + 2' tabBounds.X' tabBounds.Bottom);  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleChromeProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleChromeProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddCurve (new Point[] {  		new Point (tabBounds.X' tabBounds.Bottom)'  		new Point (tabBounds.X + sixth' tabBounds.Bottom - eigth)'  		new Point (tabBounds.X + spread - quarter' tabBounds.Y + eigth)'  		new Point (tabBounds.X + spread' tabBounds.Y)  	});  	path.AddLine (tabBounds.X + spread' tabBounds.Y' tabBounds.Right - spread' tabBounds.Y);  	path.AddCurve (new Point[] {  		new Point (tabBounds.Right - spread' tabBounds.Y)'  		new Point (tabBounds.Right - spread + quarter' tabBounds.Y + eigth)'  		new Point (tabBounds.Right - sixth' tabBounds.Bottom - eigth)'  		new Point (tabBounds.Right' tabBounds.Bottom)  	});  	break;  case TabAlignment.Bottom:  	path.AddCurve (new Point[] {  		new Point (tabBounds.Right' tabBounds.Y)'  		new Point (tabBounds.Right - sixth' tabBounds.Y + eigth)'  		new Point (tabBounds.Right - spread + quarter' tabBounds.Bottom - eigth)'  		new Point (tabBounds.Right - spread' tabBounds.Bottom)  	});  	path.AddLine (tabBounds.Right - spread' tabBounds.Bottom' tabBounds.X + spread' tabBounds.Bottom);  	path.AddCurve (new Point[] {  		new Point (tabBounds.X + spread' tabBounds.Bottom)'  		new Point (tabBounds.X + spread - quarter' tabBounds.Bottom - eigth)'  		new Point (tabBounds.X + sixth' tabBounds.Y + eigth)'  		new Point (tabBounds.X' tabBounds.Y)  	});  	break;  case TabAlignment.Left:  	path.AddCurve (new Point[] {  		new Point (tabBounds.Right' tabBounds.Bottom)'  		new Point (tabBounds.Right - eigth' tabBounds.Bottom - sixth)'  		new Point (tabBounds.X + eigth' tabBounds.Bottom - spread + quarter)'  		new Point (tabBounds.X' tabBounds.Bottom - spread)  	});  	path.AddLine (tabBounds.X' tabBounds.Bottom - spread' tabBounds.X' tabBounds.Y + spread);  	path.AddCurve (new Point[] {  		new Point (tabBounds.X' tabBounds.Y + spread)'  		new Point (tabBounds.X + eigth' tabBounds.Y + spread - quarter)'  		new Point (tabBounds.Right - eigth' tabBounds.Y + sixth)'  		new Point (tabBounds.Right' tabBounds.Y)  	});  	break;  case TabAlignment.Right:  	path.AddCurve (new Point[] {  		new Point (tabBounds.X' tabBounds.Y)'  		new Point (tabBounds.X + eigth' tabBounds.Y + sixth)'  		new Point (tabBounds.Right - eigth' tabBounds.Y + spread - quarter)'  		new Point (tabBounds.Right' tabBounds.Y + spread)  	});  	path.AddLine (tabBounds.Right' tabBounds.Y + spread' tabBounds.Right' tabBounds.Bottom - spread);  	path.AddCurve (new Point[] {  		new Point (tabBounds.Right' tabBounds.Bottom - spread)'  		new Point (tabBounds.Right - eigth' tabBounds.Bottom - spread + quarter)'  		new Point (tabBounds.X + eigth' tabBounds.Bottom - sixth)'  		new Point (tabBounds.X' tabBounds.Bottom)  	});  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y);  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom);  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y);  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom);  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Y += 1;  	tabBounds.Height -= 1;  	break;  case TabAlignment.Bottom:  	tabBounds.Height -= 1;  	break;  case TabAlignment.Left:  	tabBounds.X += 1;  	tabBounds.Width -= 1;  	break;  case TabAlignment.Right:  	tabBounds.Width -= 1;  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleDefaultProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleDefaultProvider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	if (tabBounds.Y > 0) {  		tabBounds.Y -= 1;  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	if (tabBounds.Bottom < this._TabControl.Bottom) {  		tabBounds.Height += 1;  	}  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	if (tabBounds.X > 0) {  		tabBounds.X -= 1;  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	if (tabBounds.Right < this._TabControl.Right) {  		tabBounds.Width += 1;  	}  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Y += 1;  	tabBounds.Height -= 1;  	break;  case TabAlignment.Bottom:  	tabBounds.Height -= 1;  	break;  case TabAlignment.Left:  	tabBounds.X += 1;  	tabBounds.Width -= 1;  	break;  case TabAlignment.Right:  	tabBounds.Width -= 1;  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabRect,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	tabBounds.Y -= 1;  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Bottom:  	tabBounds.Height += 1;  	if (firstTabinRow) {  		tabBounds.Width += 1;  	}  	else {  		tabBounds.X -= 1;  		tabBounds.Width += 2;  	}  	break;  case TabAlignment.Left:  	tabBounds.X -= 1;  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  case TabAlignment.Right:  	tabBounds.Width += 1;  	if (firstTabinRow) {  		tabBounds.Height += 1;  	}  	else {  		tabBounds.Y -= 1;  		tabBounds.Height += 2;  	}  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleIE8Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleIE8Provider.cs,GetTabBackgroundBrush,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	fillBrush = new LinearGradientBrush (tabBounds' dark' light' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	fillBrush = new LinearGradientBrush (tabBounds' light' dark' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	fillBrush = new LinearGradientBrush (tabBounds' dark' light' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	fillBrush = new LinearGradientBrush (tabBounds' light' dark' LinearGradientMode.Horizontal);  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleRoundedProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleRoundedProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + this._Radius' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - this._Radius' tabBounds.X' tabBounds.Y + this._Radius);  	path.AddArc (tabBounds.X' tabBounds.Y' this._Radius * 2' this._Radius * 2' 180' 90);  	path.AddLine (tabBounds.X + this._Radius' tabBounds.Y' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - this._Radius' tabBounds.Y);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Y' this._Radius * 2' this._Radius * 2' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + this._Radius' tabBounds.Right' tabBounds.Bottom - this._Radius);  	path.AddArc (tabBounds.Right - this._Radius * 2' tabBounds.Bottom - this._Radius * 2' this._Radius * 2' this._Radius * 2' 0' 90);  	path.AddLine (tabBounds.Right - this._Radius' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleVisualStudioProvider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVisualStudioProvider.cs,AddTabBorder,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	path.AddLine (tabBounds.X' tabBounds.Bottom' tabBounds.X + tabBounds.Height - 4' tabBounds.Y + 2);  	path.AddLine (tabBounds.X + tabBounds.Height' tabBounds.Y' tabBounds.Right - 3' tabBounds.Y);  	path.AddArc (tabBounds.Right - 6' tabBounds.Y' 6' 6' 270' 90);  	path.AddLine (tabBounds.Right' tabBounds.Y + 3' tabBounds.Right' tabBounds.Bottom);  	break;  case TabAlignment.Bottom:  	path.AddLine (tabBounds.Right' tabBounds.Y' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X + tabBounds.Height' tabBounds.Bottom);  	path.AddLine (tabBounds.X + tabBounds.Height - 4' tabBounds.Bottom - 2' tabBounds.X' tabBounds.Y);  	break;  case TabAlignment.Left:  	path.AddLine (tabBounds.Right' tabBounds.Bottom' tabBounds.X + 3' tabBounds.Bottom);  	path.AddArc (tabBounds.X' tabBounds.Bottom - 6' 6' 6' 90' 90);  	path.AddLine (tabBounds.X' tabBounds.Bottom - 3' tabBounds.X' tabBounds.Y + tabBounds.Width);  	path.AddLine (tabBounds.X + 2' tabBounds.Y + tabBounds.Width - 4' tabBounds.Right' tabBounds.Y);  	break;  case TabAlignment.Right:  	path.AddLine (tabBounds.X' tabBounds.Y' tabBounds.Right - 2' tabBounds.Y + tabBounds.Width - 4);  	path.AddLine (tabBounds.Right' tabBounds.Y + tabBounds.Width' tabBounds.Right' tabBounds.Bottom - 3);  	path.AddArc (tabBounds.Right - 6' tabBounds.Bottom - 6' 6' 6' 0' 90);  	path.AddLine (tabBounds.Right - 3' tabBounds.Bottom' tabBounds.X' tabBounds.Bottom);  	break;  }  
Missing Default,Andi.Controls.TabControl.TabStyleProviders,TabStyleVS2010Provider,C:\repos\andibadra_ANDT\Andi.Controls\TabControl\TabStyleProviders\TabStyleVS2010Provider.cs,GetTabBackgroundBrush,The following switch statement is missing a default case: switch (this._TabControl.Alignment) {  case TabAlignment.Top:  	fillBrush = new LinearGradientBrush (tabBounds' light' dark' LinearGradientMode.Vertical);  	break;  case TabAlignment.Bottom:  	fillBrush = new LinearGradientBrush (tabBounds' dark' light' LinearGradientMode.Vertical);  	break;  case TabAlignment.Left:  	fillBrush = new LinearGradientBrush (tabBounds' light' dark' LinearGradientMode.Horizontal);  	break;  case TabAlignment.Right:  	fillBrush = new LinearGradientBrush (tabBounds' dark' light' LinearGradientMode.Horizontal);  	break;  }  
Missing Default,Andi.Controls.TabList,TabList,C:\repos\andibadra_ANDT\Andi.Controls\TabList\TabList.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Down:  	this.CycleSelectedTab (1);  	break;  case Keys.Up:  	this.CycleSelectedTab (-1);  	break;  case Keys.PageDown:  	this.CycleSelectedTab (3);  	break;  case Keys.PageUp:  	this.CycleSelectedTab (-3);  	break;  case Keys.Home:  	this.SelectedIndex = 0;  	break;  case Keys.End:  	this.SelectedIndex = this.TabListPageCount - 1;  	break;  }  
